TITLE: Setting up Wagmi Provider in React
DESCRIPTION: Example of wrapping a React application with WagmiProvider and configuring TanStack Query integration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/getting-started.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { WagmiProvider } from 'wagmi'
import { config } from './config'

function App() {
  return (
    <WagmiProvider config={config}>
      {/** ... */}
    </WagmiProvider>
  )
}

LANGUAGE: tsx
CODE:
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiProvider } from 'wagmi'
import { config } from './config'

const queryClient = new QueryClient()

function App() {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        {/** ... */}
      </QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Basic Contract Read Operation using useReadContract
DESCRIPTION: Shows how to read token balance from a smart contract using the useReadContract hook with a basic configuration and display.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
import { useReadContract } from 'wagmi'
import { wagmiContractConfig } from './contracts'

function ReadContract() {
  const { data: balance } = useReadContract({
    ...wagmiContractConfig,
    functionName: 'balanceOf',
    args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],
  })

  return (
    <div>Balance: {balance?.toString()}</div>
  )
}

----------------------------------------

TITLE: Setting Up Wagmi Configuration for Ethereum Connectivity
DESCRIPTION: Configures Wagmi with blockchain networks (mainnet and base) and connectors (injected, walletConnect, metaMask, safe). Establishes HTTP transports for each chain and requires a WalletConnect project ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import { http, createConfig } from 'wagmi'
import { base, mainnet, optimism } from 'wagmi/chains'
import { injected, metaMask, safe, walletConnect } from 'wagmi/connectors'

const projectId = '<WALLETCONNECT_PROJECT_ID>'

export const config = createConfig({
  chains: [mainnet, base],
  connectors: [
    injected(),
    walletConnect({ projectId }),
    metaMask(),
    safe(),
  ],
  transports: {
    [mainnet.id]: http(),
    [base.id]: http(),
  },
})

----------------------------------------

TITLE: Creating NFT Minting Component with wagmi Hooks
DESCRIPTION: This component handles NFT minting by using wagmi's useWriteContract and useWaitForTransactionReceipt hooks. It manages form submission, transaction initialization, and displays status updates to the user.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { 
  type BaseError, 
  useWaitForTransactionReceipt, 
  useWriteContract 
} from 'wagmi'
import { abi } from './abi'
 
export function MintNFT() {
  const { 
    data: hash,
    error,   
    isPending, 
    writeContract 
  } = useWriteContract() 

  async function submit(e: React.FormEvent<HTMLFormElement>) { 
    e.preventDefault() 
    const formData = new FormData(e.target as HTMLFormElement) 
    const tokenId = formData.get('tokenId') as string 
    writeContract({
      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'mint',
      args: [BigInt(tokenId)],
    })
  } 

  const { isLoading: isConfirming, isSuccess: isConfirmed } = 
    useWaitForTransactionReceipt({ 
      hash, 
    }) 

  return (
    <form onSubmit={submit}>
      <input name="tokenId" placeholder="69420" required />
      <button 
        disabled={isPending} 
        type="submit"
      >
        {isPending ? 'Confirming...' : 'Mint'} 
      </button>
      {hash && <div>Transaction Hash: {hash}</div>}
      {isConfirming && <div>Waiting for confirmation...</div>} 
      {isConfirmed && <div>Transaction confirmed.</div>} 
      {error && ( 
        <div>Error: {(error as BaseError).shortMessage || error.message}</div> 
      )} 
    </form>
  )
}

----------------------------------------

TITLE: Displaying Wallet Connection Options with Wagmi in React
DESCRIPTION: Creates a component that renders a list of available wallet connectors using the useConnect hook from Wagmi. It allows users to select and connect their preferred wallet.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { Connector, useConnect } from 'wagmi'

export function WalletOptions() {
  const { connectors, connect } = useConnect()

  return connectors.map((connector) => (
    <button key={connector.uid} onClick={() => connect({ connector })}>
      {connector.name}
    </button>
  ))
}

----------------------------------------

TITLE: Migrating from usePrepareContractWrite to useSimulateContract with useWriteContract in React
DESCRIPTION: This snippet demonstrates how to replace the deprecated usePrepareContractWrite hook with useSimulateContract, which works with useWriteContract to enable smart contract writing functionality in Wagmi v2.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_8

LANGUAGE: tsx
CODE:
import { usePrepareContractWrite, useWriteContract } from 'wagmi' // [!code --]
import { useSimulateContract, useWriteContract } from 'wagmi' // [!code ++]

const { config } = usePrepareContractWrite({ // [!code --]
const { data } = useSimulateContract({ // [!code ++]
  address: '0x',
  abi: [{
    type: 'function',
    name: 'transferFrom',
    stateMutability: 'nonpayable',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    outputs: [{ type: 'bool' }],
  }],
  functionName: 'transferFrom',
  args: ['0x', '0x', 123n],
})
const { write } = useWriteContract(config) // [!code --]
const { writeContract } = useWriteContract() // [!code ++]

<button
  disabled={!Boolean(write)} // [!code --]
  onClick={() => write()} // [!code --]
  disabled={!Boolean(data?.request)} // [!code ++]
  onClick={() => writeContract(data!.request)} // [!code ++]
>
  Write contract
</button>

----------------------------------------

TITLE: Using Client Actions with Wagmi and Viem
DESCRIPTION: Shows how to implement Viem client actions using Wagmi's public and wallet clients. This approach uses method-based calls instead of tree-shakable imports.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/viem.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
// 1. Import modules. 
import { http, createConfig, getPublicClient, getWalletClient } from '@wagmi/core' 
import { base, mainnet, optimism, zora } from '@wagmi/core/chains' 

// 2. Set up a Wagmi Config 
export const config = createConfig({ 
  chains: [base, mainnet, optimism, zora], 
  transports: { 
    [base.id]: http(), 
    [mainnet.id]: http(), 
    [optimism.id]: http(), 
    [zora.id]: http(), 
  }, 
}) 

// 3. Extract a Viem Public Client for the current active chain.
const publicClient = getPublicClient(config)
const logs = await publicClient.getLogs(publicClient, /* ... */)

// 4. Extract a Viem Wallet Client for the current active chain & account.
const walletClient = getWalletClient(config)
const success = await walletClient.watchAsset(walletClient, /* ... */)

----------------------------------------

TITLE: Creating Wagmi Project with Template Option
DESCRIPTION: Commands to create a new Wagmi project with a specific template using different package managers. Example shows creating a Next.js template project.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/create-wagmi.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
pnpm create wagmi --template next

LANGUAGE: bash
CODE:
npm create wagmi@latest --template next

LANGUAGE: bash
CODE:
yarn create wagmi --template next

LANGUAGE: bash
CODE:
bun create wagmi --template next

----------------------------------------

TITLE: Converting Viem Client to Ethers v6 Provider
DESCRIPTION: Reference implementation for converting a Viem client to an Ethers.js v6 provider. Handles both single and multiple provider scenarios using JsonRpcProvider and FallbackProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { type Config, getClient } from '@wagmi/core'
import { FallbackProvider, JsonRpcProvider } from 'ethers'
import type { Client, Chain, Transport } from 'viem'

export function clientToProvider(client: Client<Transport, Chain>) {
  const { chain, transport } = client
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  }
  if (transport.type === 'fallback') {
    const providers = (transport.transports as ReturnType<Transport>[]).map(
      ({ value }) => new JsonRpcProvider(value?.url, network),
    )
    if (providers.length === 1) return providers[0]
    return new FallbackProvider(providers)
  }
  return new JsonRpcProvider(transport.url, network)
}

----------------------------------------

TITLE: Implementing useSendTransaction Hook in SendTransaction Component
DESCRIPTION: Integrates the useSendTransaction hook from Wagmi to handle transaction sending. Displays transaction hash upon successful submission.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { useSendTransaction } from 'wagmi'
import { parseEther } from 'viem'

export function SendTransaction() {
  const { data: hash, sendTransaction } = useSendTransaction()

  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
    sendTransaction({ to, value: parseEther(value) })
  }

  return (
    <form onSubmit={submit}>
      <input name="address" placeholder="0xA0Cf…251e" required />
      <input name="value" placeholder="0.05" required />
      <button type="submit">Send</button>
      {hash && <div>Transaction Hash: {hash}</div>}
    </form>
  )
}

----------------------------------------

TITLE: Migrating from useBalance with Token Parameter to useReadContracts
DESCRIPTION: The token parameter in useBalance is no longer supported. For ERC20 token balances, use useReadContracts to directly call balanceOf, decimals, and symbol functions on the token contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_21

LANGUAGE: typescript
CODE:
import { useBalance } from 'wagmi' // [!code --]
import { useReadContracts } from 'wagmi' // [!code ++]
import { erc20Abi } from 'viem' // [!code ++]

const result = useBalance({ // [!code --]
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48', // [!code --]
  token: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code --]
}) // [!code --]
const result = useReadContracts({ // [!code ++]
  allowFailure: false, // [!code ++]
  contracts: [ // [!code ++]
    { // [!code ++]
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]
      abi: erc20Abi, // [!code ++]
      functionName: 'balanceOf', // [!code ++]
      args: ['0x4557B18E779944BFE9d78A672452331C186a9f48'], // [!code ++]
    }, // [!code ++]
    { // [!code ++]
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]
      abi: erc20Abi, // [!code ++]
      functionName: 'decimals', // [!code ++]
    }, // [!code ++]
    { // [!code ++]
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]
      abi: erc20Abi, // [!code ++]
      functionName: 'symbol', // [!code ++]
    }, // [!code ++]
  ] // [!code ++]
}) // [!code ++]

----------------------------------------

TITLE: Installing Wagmi via Package Managers
DESCRIPTION: Commands for installing Wagmi and its dependencies using different package managers (pnpm, npm, yarn, bun).
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/getting-started.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm create wagmi

LANGUAGE: bash
CODE:
npm create wagmi@latest

LANGUAGE: bash
CODE:
yarn create wagmi

LANGUAGE: bash
CODE:
bun create wagmi

----------------------------------------

TITLE: Creating Custom Hooks with Tree-shakable Viem Actions in Wagmi
DESCRIPTION: This example demonstrates how to create custom React Query hooks using Viem's tree-shakable actions with Wagmi's useClient and useConnectorClient hooks. This approach is recommended for better bundle size optimization.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/viem.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
// 1. Import modules. 
import { useMutation, useQuery } from '@tanstack/react-query'
import { http, createConfig, useClient, useConnectorClient } from 'wagmi' 
import { base, mainnet, optimism, zora } from 'wagmi/chains' 
import { getLogs, watchAsset } from 'viem/actions'

// 2. Set up a Wagmi Config 
export const config = createConfig({ 
  chains: [base, mainnet, optimism, zora], 
  transports: { 
    [base.id]: http(), 
    [mainnet.id]: http(), 
    [optimism.id]: http(), 
    [zora.id]: http(), 
  }, 
}) 

function Example() {
  // 3. Extract a Viem Client for the current active chain. 
  const publicClient = useClient({ config }) 

  // 4. Create a "custom" Query Hook that utilizes the Client. 
  const { data: logs } = useQuery({ 
    queryKey: ['logs', publicClient.uid], 
    queryFn: () => getLogs(publicClient, /* ... */) 
  }) 
  
  // 5. Extract a Viem Client for the current active chain & account. 
  const { data: walletClient } = useConnectorClient({ config }) 

  // 6. Create a "custom" Mutation Hook that utilizes the Client. 
  const { mutate } = useMutation({ 
    mutationFn: (asset) => watchAsset(walletClient, asset) 
  }) 

  return (
    <div>
      {/* ... */}
    </div>
  )
}

----------------------------------------

TITLE: Contract Configuration Setup
DESCRIPTION: Defines the contract configuration including address and ABI for the Wagmi Example token contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiContractConfig = {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: [
    {
      type: 'function',
      name: 'balanceOf',
      stateMutability: 'view',
      inputs: [{ name: 'account', type: 'address' }],
      outputs: [{ type: 'uint256' }],
    },
    {
      type: 'function',
      name: 'totalSupply',
      stateMutability: 'view',
      inputs: [],
      outputs: [{ name: 'supply', type: 'uint256' }],
    },
  ],
} as const

----------------------------------------

TITLE: Updating Contract Watching Logic
DESCRIPTION: Example showing how to replace watchReadContract with watchBlockNumber and readContract combination.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { watchBlockNumber, readContract } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlockNumber(config, {
  onBlockNumber() {
    const balanceOf = readContract(config, {
      address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
      abi: parseAbi(['function balanceOf(address) view returns (uint256)']),
      functionName: 'balanceOf',
      args: ['0xd2135CfB216b74109775236E36d4b433F1DF507B'],
    })
    console.log('Changed!', balanceOf)
  },
})

----------------------------------------

TITLE: Integrating useWriteContract Hook for NFT Minting
DESCRIPTION: This snippet integrates the useWriteContract hook from Wagmi to handle the NFT minting transaction. It includes the contract address, ABI, function name, and arguments for the mint function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { useWriteContract } from 'wagmi'
import { abi } from './abi'

export function MintNFT() {
  const { data: hash, writeContract } = useWriteContract()

  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const tokenId = formData.get('tokenId') as string
    writeContract({
      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'mint',
      args: [BigInt(tokenId)],
    })
  }

  return (
    <form onSubmit={submit}>
      <input name="tokenId" placeholder="69420" required />
      <button type="submit">Mint</button>
      {hash && <div>Transaction Hash: {hash}</div>}
    </form>
  )
}

LANGUAGE: ts
CODE:
export const abi = [
  {
    name: 'mint',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],
    outputs: [],
  },
] as const

----------------------------------------

TITLE: Updating config creation without configureChains
DESCRIPTION: This code block demonstrates how to update the creation of a Wagmi config in v2 without using configureChains. It shows the new way to specify chains and transports.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
import { configureChains, createConfig } from '@wagmi/core' // [!code --]
import { http, createConfig } from '@wagmi/core' // [!code ++]
import { mainnet, sepolia } from '@wagmi/core/chains'

const { chains, publicClient } = configureChains( // [!code --]
  [mainnet, sepolia], // [!code --]
  [publicProvider(), publicProvider()], // [!code --]
) // [!code --]

export const config = createConfig({
  publicClient, // [!code --]
  chains: [mainnet, sepolia], // [!code ++]
  transports: { // [!code ++]
    [mainnet.id]: http(), // [!code ++]
    [sepolia.id]: http(), // [!code ++]
  }, // [!code ++]
})

----------------------------------------

TITLE: Converting Viem Client to Ethers.js Provider (Ethers v6)
DESCRIPTION: Implementation of functions to convert a Viem client to an Ethers.js v6 provider. Handles both regular and fallback transports, and includes a React hook for easy integration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { FallbackProvider, JsonRpcProvider } from 'ethers'
import { useMemo } from 'react'
import type { Chain, Client, Transport } from 'viem'
import { type Config, useClient } from 'wagmi'

export function clientToProvider(client: Client<Transport, Chain>) {
  const { chain, transport } = client
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  }
  if (transport.type === 'fallback') {
    const providers = (transport.transports as ReturnType<Transport>[]).map(
      ({ value }) => new JsonRpcProvider(value?.url, network),
    )
    if (providers.length === 1) return providers[0]
    return new FallbackProvider(providers)
  }
  return new JsonRpcProvider(transport.url, network)
}

/** Action to convert a viem Client to an ethers.js Provider. */
export function useEthersProvider({ chainId }: { chainId?: number } = {}) {
  const client = useClient<Config>({ chainId })
  return useMemo(() => (client ? clientToProvider(client) : undefined), [client])
}

----------------------------------------

TITLE: Auto-Refetching Contract Data on Block Updates
DESCRIPTION: Shows how to automatically refetch contract data when new blocks are mined using useBlockNumber hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useEffect } from 'react'
import { useBlockNumber, useReadContract } from 'wagmi'

function ReadContract() {
  const { data: balance, refetch } = useReadContract({
    ...wagmiContractConfig,
    functionName: 'balanceOf',
    args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],
  })
  const { data: blockNumber } = useBlockNumber({ watch: true })

  useEffect(() => {
    refetch()
  }, [blockNumber])

  return (
    <div>Balance: {balance?.toString()}</div>
  )
}

----------------------------------------

TITLE: Implementing Tree-shakable Viem Actions with Wagmi
DESCRIPTION: Demonstrates the recommended approach for using Viem actions with Wagmi using tree-shakable imports. Shows how to set up configuration and use both public and wallet clients.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/viem.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
// 1. Import modules. 
import { http, createConfig, getClient, getConnectorClient } from '@wagmi/core' 
import { base, mainnet, optimism, zora } from '@wagmi/core/chains' 
import { getLogs, watchAsset } from 'viem/actions'

// 2. Set up a Wagmi Config 
export const config = createConfig({ 
  chains: [base, mainnet, optimism, zora], 
  transports: { 
    [base.id]: http(), 
    [mainnet.id]: http(), 
    [optimism.id]: http(), 
    [zora.id]: http(), 
  }, 
}) 

// 3. Extract a Viem Client for the current active chain.
const publicClient = getClient(config)
const logs = await getLogs(publicClient, /* ... */)

// 4. Extract a Viem Client for the current active chain & account.
const walletClient = getConnectorClient(config)
const success = await watchAsset(walletClient, /* ... */)

----------------------------------------

TITLE: Basic Usage of useWriteContract Hook with React
DESCRIPTION: Demonstrates how to implement the useWriteContract hook in a React component to execute a transferFrom function on an ERC-20 token contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContract.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useWriteContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const { writeContract } = useWriteContract()

  return (
    <button 
      onClick={() => 
        writeContract({ 
          abi,
          address: '0x6b175474e89094c44da98b954eedeac495271d0f',
          functionName: 'transferFrom',
          args: [
            '0xd2135CfB216b74109775236E36d4b433F1DF507B',
            '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
            123n,
          ],
       })
      }
    >
      Transfer
    </button>
  )
}

----------------------------------------

TITLE: Creating Wagmi Configuration with Multiple Chains
DESCRIPTION: Sets up a wagmi configuration with multiple chains (mainnet and sepolia) and their corresponding HTTP transport endpoints. This is a common setup pattern for multi-chain applications.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_17

LANGUAGE: typescript
CODE:
import { createConfig, http } from '{{packageName}}'
import { mainnet, sepolia } from '{{packageName}}/chains'

export const config = createConfig({
  chains: [mainnet, sepolia],
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Adding Error Handling to NFT Minting Component
DESCRIPTION: This snippet adds error handling to the Mint NFT component. It displays an error message if the transaction is rejected or the contract reverts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { 
  type BaseError,
  useWaitForTransactionReceipt, 
  useWriteContract 
} from 'wagmi'
import { abi } from './abi'

export function MintNFT() {
  const { 
    data: hash,
    error,  
    isPending, 
    writeContract 
  } = useWriteContract()

  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const tokenId = formData.get('tokenId') as string
    writeContract({
      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'mint',
      args: [BigInt(tokenId)],
    })
  }

  const { isLoading: isConfirming, isSuccess: isConfirmed } =
    useWaitForTransactionReceipt({
      hash,
    })

  return (
    <form onSubmit={submit}>
      <input name="tokenId" placeholder="69420" required />
      <button 
        disabled={isPending} 
        type="submit"
      >
        {isPending ? 'Confirming...' : 'Mint'} 
      </button>
      {hash && <div>Transaction Hash: {hash}</div>}
      {isConfirming && <div>Waiting for confirmation...</div>}
      {isConfirmed && <div>Transaction confirmed.</div>}
      {error && (
        <div>Error: {(error as BaseError).shortMessage || error.message}</div>
      )}
    </form>
  )
}

LANGUAGE: ts
CODE:
export const abi = [
  {
    name: 'mint',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],
    outputs: [],
  },
] as const

----------------------------------------

TITLE: Creating Basic SendTransaction Component in React with Wagmi
DESCRIPTION: Initializes a basic React component with a form for sending transactions. Includes input fields for recipient address and transaction value.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
import * as React from 'react'

export function SendTransaction() {
  return (
    <form>
      <input name="address" placeholder="0xA0Cf…251e" required />
      <input name="value" placeholder="0.05" required />
      <button type="submit">Send</button>
    </form>
  )
}

----------------------------------------

TITLE: Implementing SendTransaction Component with Wagmi Hooks
DESCRIPTION: A React component that implements a transaction form using wagmi hooks. It handles form submission, transaction sending, and transaction status monitoring using useSendTransaction and useWaitForTransactionReceipt hooks. The component also displays transaction status and errors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { 
  type BaseError, 
  useSendTransaction, 
  useWaitForTransactionReceipt 
} from 'wagmi' 
import { parseEther } from 'viem' 
 
export function SendTransaction() {
  const { 
    data: hash,
    error, 
    isPending, 
    sendTransaction 
  } = useSendTransaction() 

  async function submit(e: React.FormEvent<HTMLFormElement>) { 
    e.preventDefault() 
    const formData = new FormData(e.target as HTMLFormElement) 
    const to = formData.get('address') as `0x${string}` 
    const value = formData.get('value') as string 
    sendTransaction({ to, value: parseEther(value) }) 
  } 

  const { isLoading: isConfirming, isSuccess: isConfirmed } = 
    useWaitForTransactionReceipt({ 
      hash, 
    }) 

  return (
    <form onSubmit={submit}>
      <input name="address" placeholder="0xA0Cf…251e" required />
      <input name="value" placeholder="0.05" required />
      <button 
        disabled={isPending} 
        type="submit"
      >
        {isPending ? 'Confirming...' : 'Send'} 
      </button>
      {hash && <div>Transaction Hash: {hash}</div>} 
      {isConfirming && <div>Waiting for confirmation...</div>} 
      {isConfirmed && <div>Transaction confirmed.</div>} 
      {error && ( 
        <div>Error: {(error as BaseError).shortMessage || error.message}</div> 
      )} 
    </form>
  )
}

----------------------------------------

TITLE: Basic Usage of getEnsAvatar
DESCRIPTION: Demonstrates the basic usage of getEnsAvatar to fetch an ENS avatar by providing a normalized ENS name.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getEnsAvatar } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAvatar = await getEnsAvatar(config, {
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Basic useSignMessage Implementation in Vue
DESCRIPTION: Demonstrates a basic implementation of the useSignMessage composable in a Vue component, including a button that triggers message signing.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignMessage.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSignMessage } from '@wagmi/vue'

const { signMessage } = useSignMessage()
</script>

<template>
  <button @click="signMessage({ message: 'hello world' })">
    Sign message
  </button>
</template>

----------------------------------------

TITLE: Migrating from usePrepareSendTransaction to useEstimateGas with useSendTransaction in React
DESCRIPTION: This example shows how to replace the usePrepareSendTransaction hook with useEstimateGas, which can be composed with useSendTransaction for transaction sending functionality in Wagmi v2.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_9

LANGUAGE: tsx
CODE:
import { usePrepareSendTransaction, useSendTransaction } from 'wagmi' // [!code --]
import { useEstimateGas, useSendTransaction } from 'wagmi' // [!code ++]
import { parseEther } from 'viem'

const { config } = usePrepareSendTransaction({ // [!code --]
const { data } = useEstimateGas({ // [!code ++]
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})
const { sendTransaction } = useSendTransaction(config) // [!code --]
const { sendTransaction } = useSendTransaction() // [!code ++]

<button
  disabled={!Boolean(sendTransaction)} // [!code --]
  onClick={() => sendTransaction()} // [!code --]
  disabled={!Boolean(data)} // [!code ++]
  onClick={() => sendTransaction({ // [!code ++]
    gas: data, // [!code ++]
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code ++]
    value: parseEther('0.01'), // [!code ++]
  })} // [!code ++]
>
  Send transaction
</button>

----------------------------------------

TITLE: Using useWriteContract in a Vue Component
DESCRIPTION: Complete Vue component example demonstrating how to use the useWriteContract composable to execute a transferFrom function on an ERC-20 token contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWriteContract.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWriteContract } from '@wagmi/vue'
import { abi } from './abi'

const { writeContract } = useWriteContract()
</script>

<template>
  <button @click="writeContract({ 
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
  })">
    Transfer
  </button>
</template>

----------------------------------------

TITLE: Using verifyTypedData to Verify a Typed Data Signature
DESCRIPTION: Demonstrates how to use the verifyTypedData function to check if a typed data signature is valid. It includes the necessary parameters such as domain, types, message, primaryType, address, and signature.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { verifyTypedData } from '@wagmi/core'
import { domain, types } from './data'
import { config } from './config'

const valid = await verifyTypedData(config, {
  domain,
  types,
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  primaryType: 'Mail',
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})
// true

----------------------------------------

TITLE: Basic Wagmi Usage Example
DESCRIPTION: Example showing how to use Wagmi actions with the configured instance to get account information and ENS name.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/getting-started.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getAccount, getEnsName } from '@wagmi/core'
import { config } from './config'

const { address } = getAccount(config)
const ensName = await getEnsName(config, { address })

----------------------------------------

TITLE: Creating MintNft.vue Component for Transaction Handling
DESCRIPTION: This Vue component handles NFT minting functionality. It uses wagmi hooks to write to a smart contract and monitor transaction status. The component includes a form for inputting a token ID, displays transaction status, and handles errors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-14_snippet_7

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { 
  useWaitForTransactionReceipt,
  useWriteContract 
} from 'wagmi'
import { abi } from './abi'

const { 
  data: hash,
  error, 
  isPending,
  writeContract 
} = useWriteContract()

function submit(event: Event) { 
  const formData = new FormData(e.target as HTMLFormElement) 
  const tokenId = formData.get('tokenId') as string 
  writeContract({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    abi,
    functionName: 'mint',
    args: [BigInt(tokenId)],
  })
} 

const { isLoading: isConfirming, isSuccess: isConfirmed } =
  useWaitForTransactionReceipt({
    hash,
  })
</script>

<template
  <form @submit.prevent="submit"> 
    <input name="tokenId" placeholder="69420" required />
    <button :disabled="isPending" type="submit">
      <span v-if="isPending">Sending...</span>
      <span v-else>Send</span>
    </button>
    <div v-if="hash">Transaction Hash: {{ hash }}</div>
    <div v-if="isConfirming">Waiting for confirmation...</div>
    <div v-if="isConfirmed">Transaction Confirmed!</div>
    <div v-if="error">
      Error: {{ (error as BaseError).shortMessage || error.message }}
    </div>
  </form>
</template>

----------------------------------------

TITLE: Migrating getBalance Token Parameter to readContracts
DESCRIPTION: Shows how to migrate from the deprecated getBalance token parameter to using readContracts for checking ERC20 token balances. The new approach uses multiple contract calls to get balance, decimals and symbol information.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_14

LANGUAGE: typescript
CODE:
import { getBalance } from '@wagmi/core'
import { readContracts } from '@wagmi/core'
import { erc20Abi } from 'viem'
import { config } from './config'

const result = await getBalance(config, {
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  token: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
})
const result = await readContracts(config, {
  allowFailure: false,
  contracts: [
    {
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
      abi: erc20Abi,
      functionName: 'balanceOf',
      args: ['0x4557B18E779944BFE9d78A672452331C186a9f48'],
    },
    {
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
      abi: erc20Abi,
      functionName: 'decimals',
    },
    {
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
      abi: erc20Abi,
      functionName: 'symbol',
    },
  ]
})

----------------------------------------

TITLE: Basic Vue NFT Minting Form Component
DESCRIPTION: Initial setup of a Vue component with a basic form structure for NFT minting.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup lang="ts">
</script>
 
<template>
  <form>
    <input name="tokenId" placeholder="69420" required />
    <button type="submit">Mint</button>
  </form>
</template>

----------------------------------------

TITLE: Creating an Account Component with Wagmi Hooks
DESCRIPTION: Implements an Account component that displays user information including ENS name and avatar if available, and provides a disconnect button. Uses useAccount, useDisconnect, useEnsName, and useEnsAvatar hooks from Wagmi.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useAccount, useDisconnect, useEnsAvatar, useEnsName } from 'wagmi'

export function Account() {
  const { address } = useAccount()
  const { disconnect } = useDisconnect()
  const { data: ensName } = useEnsName({ address })
  const { data: ensAvatar } = useEnsAvatar({ name: ensName! })

  return (
    <div>
      {ensAvatar && <img alt="ENS Avatar" src={ensAvatar} />}
      {address && <div>{ensName ? `${ensName} (${address})` : address}</div>}
      <button onClick={() => disconnect()}>Disconnect</button>
    </div>
  )
}

----------------------------------------

TITLE: Integrating SendTransaction Component in Main App with Wagmi
DESCRIPTION: The main application component that provides Wagmi and React Query context to the application and renders the SendTransaction component. It imports the necessary providers and configures them with the application settings.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiProvider, useAccount } from 'wagmi'
import { config } from './config'
import { SendTransaction } from './send-transaction' // [!code ++]

const queryClient = new QueryClient()

function App() {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}> 
        <SendTransaction /> // [!code ++]
      </QueryClientProvider> 
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Converting Viem Client to Ethers.js Provider (Ethers v5)
DESCRIPTION: Implementation of functions to convert a Viem client to an Ethers.js v5 provider. Includes a clientToProvider utility and a useEthersProvider React hook to use the provider in components.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'
import { useMemo } from 'react'
import type { Chain, Client, Transport } from 'viem'
import { Config, useClient } from 'wagmi'

export function clientToProvider(client: Client<Transport, Chain>) {
  const { chain, transport } = client
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  }
  if (transport.type === 'fallback')
    return new providers.FallbackProvider(
      (transport.transports as ReturnType<Transport>[]).map(
        ({ value }) => new providers.JsonRpcProvider(value?.url, network),
      ),
    )
  return new providers.JsonRpcProvider(transport.url, network)
}

/** Hook to convert a viem Client to an ethers.js Provider. */
export function useEthersProvider({
  chainId,
}: { chainId?: number | undefined } = {}) {
  const client = useClient<Config>({ chainId })
  return useMemo(() => (client ? clientToProvider(client) : undefined), [client])
}

----------------------------------------

TITLE: Creating Custom Wagmi CLI Plugin
DESCRIPTION: Demonstrates how to create a custom plugin for the Wagmi CLI by implementing a function that returns a Plugin object with required properties. The example shows the minimal implementation needed with the required 'name' property.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
function myPlugin(): Plugin {
  // `name` is the only required property.
  name: 'MyPlugin',
  // You likely want to at least include `contracts` or `run`.
  // ...
}

----------------------------------------

TITLE: Adding Form Handler to SendTransaction Component
DESCRIPTION: Enhances the SendTransaction component by adding a form submission handler. Captures form data for transaction processing.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import * as React from 'react'

export function SendTransaction() {
  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
  }

  return (
    <form onSubmit={submit}>
      <input name="address" placeholder="0xA0Cf…251e" required />
      <input name="value" placeholder="0.05" required />
      <button type="submit">Send</button>
    </form>
  )
}

----------------------------------------

TITLE: Watching Balance and Invalidating on Block Change
DESCRIPTION: Example of watching a user's balance and automatically invalidating the balance query when a new block is detected.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useQueryClient } from '@tanstack/vue-query' 
import { useBlockNumber, useBalance } from '@wagmi/vue' 
import { watchEffect } from 'vue' 

const queryClient = useQueryClient()
const { data: blockNumber } = useBlockNumber({ watch: true }) // [!code hl]
const { data: balance, queryKey } = useBalance() // [!code hl]
  
watchEffect(() => { // [!code hl]
  queryClient.invalidateQueries({ queryKey }) // [!code hl]
}) // [!code hl]
</script>

<template>
  <div>Block Number: {{ blockNumber }}</div>
  <div>Balance: {{ balance }}</div>
</template>

----------------------------------------

TITLE: Installing Create-Wagmi with Different Package Managers
DESCRIPTION: Commands to create a new Wagmi project using different package managers (pnpm, npm, yarn, bun).
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/create-wagmi.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm create wagmi

LANGUAGE: bash
CODE:
npm create wagmi@latest

LANGUAGE: bash
CODE:
yarn create wagmi

LANGUAGE: bash
CODE:
bun create wagmi

----------------------------------------

TITLE: Installing Wagmi using CLI
DESCRIPTION: Commands for installing Wagmi using different package managers via the create-wagmi CLI.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
pnpm create wagmi

LANGUAGE: bash
CODE:
npm create wagmi@latest

LANGUAGE: bash
CODE:
yarn create wagmi

LANGUAGE: bash
CODE:
bun create wagmi

----------------------------------------

TITLE: Implementing Query Invalidation with Block Watching
DESCRIPTION: Implementation of a pattern that watches for new blocks and invalidates balance queries when a new block is detected. This ensures balance data stays fresh with each new block.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useQueryClient } from '@tanstack/react-query' 
import { useEffect } from 'react' 
import { useBlockNumber, useBalance } from 'wagmi' 

function App() {
  const queryClient = useQueryClient()
  const { data: blockNumber } = useBlockNumber({ watch: true })
  const { data: balance, queryKey } = useBalance()
  
  useEffect(() => {
    queryClient.invalidateQueries({ queryKey })
  }, [blockNumber])

  return <div>{balance}</div>
}

----------------------------------------

TITLE: Adding Transaction Receipt Tracking to NFT Minting Component
DESCRIPTION: This snippet adds transaction receipt tracking to the Mint NFT component using the useWaitForTransactionReceipt hook. It displays the confirmation status to the user.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { 
  useWaitForTransactionReceipt,
  useWriteContract 
} from 'wagmi'
import { abi } from './abi'

export function MintNFT() {
  const { 
    data: hash, 
    isPending, 
    writeContract 
  } = useWriteContract()

  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const tokenId = formData.get('tokenId') as string
    writeContract({
      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'mint',
      args: [BigInt(tokenId)],
    })
  }

  const { isLoading: isConfirming, isSuccess: isConfirmed } =
    useWaitForTransactionReceipt({
      hash,
    })

  return (
    <form onSubmit={submit}>
      <input name="tokenId" placeholder="69420" required />
      <button 
        disabled={isPending} 
        type="submit"
      >
        {isPending ? 'Confirming...' : 'Mint'} 
      </button>
      {hash && <div>Transaction Hash: {hash}</div>}
      {isConfirming && <div>Waiting for confirmation...</div>}
      {isConfirmed && <div>Transaction confirmed.</div>}
    </form>
  )
}

LANGUAGE: ts
CODE:
export const abi = [
  {
    name: 'mint',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],
    outputs: [],
  },
] as const

----------------------------------------

TITLE: Reading Contract Balance with Vue and Wagmi
DESCRIPTION: Vue component demonstrating how to read token balance from a smart contract using useReadContract composable. Uses the Wagmi Example contract to fetch balance for a specific address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/read-from-contract.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useReadContract } from 'wagmi'
import { wagmiContractConfig } from './contracts'

const { data: balance } = useReadContract({
  ...wagmiContractConfig,
  functionName: 'balanceOf',
  args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],
})
</script>

<template>
  <div>Balance: {{ balance?.toString() }}</div>
</template>

----------------------------------------

TITLE: Configuring Application Entry Point with Wagmi in React
DESCRIPTION: Sets up the main application component with WagmiProvider and QueryClientProvider, adding a ConnectWallet component that conditionally renders either an Account or WalletOptions component based on connection status.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiProvider, useAccount } from 'wagmi'
import { config } from './config'
import { Account } from './account' // [!code ++]
import { WalletOptions } from './wallet-options' // [!code ++]

const queryClient = new QueryClient()

function ConnectWallet() { // [!code ++]
  const { isConnected } = useAccount() // [!code ++]
  if (isConnected) return <Account /> // [!code ++]
  return <WalletOptions /> // [!code ++]
} // [!code ++]

function App() {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}> 
        <ConnectWallet /> // [!code ++]
      </QueryClientProvider> 
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Basic Usage of waitForCallsStatus
DESCRIPTION: Complete example demonstrating how to use waitForCallsStatus with sendCalls to monitor transaction status.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { sendCalls, waitForCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

const id = await sendCalls(config, {
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }]
})

const { status, receipts } = await waitForCallsStatus(config, {
  id,
})

----------------------------------------

TITLE: Basic Transaction Request Preparation
DESCRIPTION: Example showing how to prepare a basic transaction request with a recipient address and value.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/prepareTransactionRequest.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { prepareTransactionRequest } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

await prepareTransactionRequest(config, {
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1'),
})

----------------------------------------

TITLE: Using writeContracts for Batch Contract Calls
DESCRIPTION: Demonstrates how to use writeContracts to perform batch contract calls, including ABI parsing and contract interaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseAbi } from 'viem'
import { writeContracts } from '@wagmi/core/experimental'
import { config } from './config'

const abi = parseAbi([
  'function approve(address, uint256) returns (bool)',
  'function transferFrom(address, address, uint256) returns (bool)',
])

const id = await writeContracts(config, {
  contracts: [
    {
      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'approve',
      args: [
        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
        100n
      ],
    },
    {
      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'transferFrom',
      args: [
        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
        '0x0000000000000000000000000000000000000000',
        100n
      ],
    },
  ],
})

----------------------------------------

TITLE: Using switchChain Action in TypeScript
DESCRIPTION: Demonstrates how to use the switchChain action to switch to the mainnet chain.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { switchChain } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

await switchChain(config, { chainId: mainnet.id })

----------------------------------------

TITLE: Using readContracts to Call Multiple Contract Methods
DESCRIPTION: Demonstrates how to use the readContracts function to call multiple read methods on different contracts, including setting up contract objects and passing arguments.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const wagmigotchiContract = {
  address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
  abi: wagmigotchiABI,
} as const
const mlootContract = {
  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
  abi: mlootABI,
} as const

const result = await readContracts(config, {
  contracts: [
    {
      ...wagmigotchiContract,
      functionName: 'getAlive',
    },
    {
      ...wagmigotchiContract,
      functionName: 'getBoredom',
    },
    {
      ...mlootContract,
      functionName: 'getChest',
      args: [69],
    },
    {
      ...mlootContract,
      functionName: 'getWaist',
      args: [69],
    },
  ],
})

----------------------------------------

TITLE: Using useWatchContractEvent to Monitor Contract Events in Vue
DESCRIPTION: A complete example showing how to set up event watching for a contract's Transfer event using the useWatchContractEvent composable in a Vue component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchContractEvent.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
<script setup lang="ts">
import { useWatchContractEvent } from '@wagmi/vue'
import { abi } from './abi'

useWatchContractEvent({
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  abi,
  eventName: 'Transfer',
  onLogs(logs) {
    console.log('New logs!', logs)
  },
})
</script>

----------------------------------------

TITLE: Using useWriteContracts Hook
DESCRIPTION: Demonstrates implementation of useWriteContracts hook to execute multiple contract calls (approve and transferFrom) in a single transaction. Shows complete component setup with ABI parsing and button click handler.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContracts.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useWriteContracts } from 'wagmi/experimental'
import { parseAbi } from 'viem'

const abi = parseAbi([
  'function approve(address, uint256) returns (bool)',
  'function transferFrom(address, address, uint256) returns (bool)',
])

function App() {
  const { writeContracts } = useWriteContracts()

  return (
    <button
      onClick={() =>
        writeContracts({
          contracts: [
            {
              address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
              abi,
              functionName: 'approve',
              args: [
                '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
                100n
              ],
            },
            {
              address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
              abi,
              functionName: 'transferFrom',
              args: [
                '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
                '0x0000000000000000000000000000000000000000',
                100n
              ],
            },
          ],
        })
      }
    >
      Send calls
    </button>
  )
}

----------------------------------------

TITLE: Using useSignTypedData Hook
DESCRIPTION: Demonstrates basic usage of useSignTypedData hook with a button component that triggers typed data signing. Includes complete example with type definitions for Person and Mail types.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignTypedData.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useSignTypedData } from 'wagmi'

function App() {
  const { signTypedData } = useSignTypedData()

  return (
    <button
      onClick={() =>
        signTypedData({
          types: {
            Person: [
              { name: 'name', type: 'string' },
              { name: 'wallet', type: 'address' },
            ],
            Mail: [
              { name: 'from', type: 'Person' },
              { name: 'to', type: 'Person' },
              { name: 'contents', type: 'string' },
            ],
          },
          primaryType: 'Mail',
          message: {
            from: {
              name: 'Cow',
              wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
            },
            to: {
              name: 'Bob',
              wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
            },
            contents: 'Hello, Bob!',
          },
        })
      }
    >
      Sign message
    </button>
  )
}

----------------------------------------

TITLE: Basic Contract Read Operation
DESCRIPTION: Demonstrates how to import and use the readContract function to call a totalSupply function on a smart contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { readContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await readContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'totalSupply',
})

----------------------------------------

TITLE: Creating a custom injected connector using createConnector
DESCRIPTION: Demonstrates how to create a custom injected connector using the createConnector function. It defines a type for parameters and returns a function that uses createConnector.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/createConnector.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConnector } from '@wagmi/core'

export type InjectedParameters = {}

export function injected(parameters: InjectedParameters = {}) {
  return createConnector((config) => ({
    // ...
  }))
}

----------------------------------------

TITLE: Simulating Contract with Nonce in TypeScript
DESCRIPTION: This snippet illustrates how to use the simulateContract function with a specified nonce. It simulates a transferFrom function call on an ERC20 token contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_14

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  nonce: 123,
})

----------------------------------------

TITLE: Defining NFT Contract ABI for mint Function
DESCRIPTION: This snippet defines the ABI (Application Binary Interface) for the NFT contract, specifically for the mint function which takes a tokenId parameter of type uint32.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_8

LANGUAGE: ts
CODE:
export const abi = [
  {
    name: 'mint',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],
    outputs: [],
  },
] as const

----------------------------------------

TITLE: TypeScript Type Inference with useReadContract
DESCRIPTION: This example demonstrates TypeScript type inference for the useReadContract hook, including function name, arguments, and return type.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContract.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { createConfig, http, useReadContract } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

const result = useReadContract({
  abi: [
    {
      type: 'function',
      name: 'balanceOf',
      stateMutability: 'view',
      inputs: [{ name: 'account', type: 'address' }],
      outputs: [{ type: 'uint256' }],
    },
    {
      type: 'function',
      name: 'totalSupply',
      stateMutability: 'view',
      inputs: [],
      outputs: [{ name: 'supply', type: 'uint256' }],
    },
  ],
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'balanceOf',
  args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],
})

result.data

----------------------------------------

TITLE: Using useConnect Hook in React Component
DESCRIPTION: Demonstrates how to use the useConnect hook in a React component to connect with the injected connector.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnect.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useConnect } from 'wagmi'
import { injected } from 'wagmi/connectors'

function App() {
  const { connect } = useConnect()

  return (
    <button onClick={() => connect({ connector: injected() })}>
      Connect
    </button>
  )
}

----------------------------------------

TITLE: Main App Component Integration
DESCRIPTION: Combines Connect and Account components in the main App component with conditional rendering based on connection status. Uses useAccount composable for connection state.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useAccount } from '@wagmi/vue';
import Account from './Account.vue';
import Connect from './Connect.vue';

const { isConnected } = useAccount();
</script>

<template>
  <Account v-if="isConnected" />
  <Connect v-else />
</template>

----------------------------------------

TITLE: Updating provider usage with Viem transports
DESCRIPTION: This code block demonstrates how to replace the usage of Wagmi providers with Viem transports in Wagmi Core v2.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_13

LANGUAGE: typescript
CODE:
import { alchemyProvider } from '@wagmi/core/providers/alchemy' // [!code --]
import { http } from 'viem' // [!code ++]

const transport = http('https://mainnet.example.com')

----------------------------------------

TITLE: Contract Configuration Setup
DESCRIPTION: TypeScript configuration for the Wagmi contract including ABI definitions for balanceOf and totalSupply functions. Defines the contract address and interface for interaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/read-from-contract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiContractConfig = {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: [
    {
      type: 'function',
      name: 'balanceOf',
      stateMutability: 'view',
      inputs: [{ name: 'account', type: 'address' }],
      outputs: [{ type: 'uint256' }],
    },
    {
      type: 'function',
      name: 'totalSupply',
      stateMutability: 'view',
      inputs: [],
      outputs: [{ name: 'supply', type: 'uint256' }],
    },
  ],
} as const

----------------------------------------

TITLE: Setting up Vue App with Wagmi Plugin
DESCRIPTION: Initializes a Vue application with Wagmi and Vue Query plugins for state management and caching. Demonstrates proper plugin injection order.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
// 1. Import modules.
import { VueQueryPlugin } from '@tanstack/vue-query';
import { WagmiPlugin } from '@wagmi/vue';
import { createApp } from 'vue';

import App from './App.vue';
import { config } from './wagmi';

createApp(App)
  // 2. Inject the Wagmi plugin.
  .use(WagmiPlugin, { config })
  // 3. Inject the Vue Query plugin.
  .use(VueQueryPlugin, {})
  .mount('#app');

----------------------------------------

TITLE: Implementing Account Display Component
DESCRIPTION: Creates an Account component to display connected wallet information and disconnect functionality. Uses useAccount and useDisconnect composables from Wagmi.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useAccount, useDisconnect } from '@wagmi/vue';

const { address, connector } = useAccount();
const { disconnect } = useDisconnect();
</script>

<template>
  <div>Address: {{ address }}</div>
  <div>Connected to {{ connector?.name }} Connector.</div>
  <button @click="disconnect()">Disconnect</button>
</template>

----------------------------------------

TITLE: Complete Multicall Implementation
DESCRIPTION: Demonstrates a full example of using multicall to batch multiple contract function calls across different contracts
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/multicall.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { multicall } from '@wagmi/core'
import { config } from './config'

const wagmigotchiContract = {
  address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
  abi: wagmigotchiABI,
} as const
const mlootContract = {
  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
  abi: mlootABI,
} as const

const result = await multicall(config, {
  contracts: [
    {
      ...wagmigotchiContract,
      functionName: 'getAlive',
    },
    {
      ...wagmigotchiContract,
      functionName: 'getBoredom',
    },
    {
      ...mlootContract,
      functionName: 'getChest',
      args: [69],
    },
    {
      ...mlootContract,
      functionName: 'getWaist',
      args: [69],
    },
  ],
})

----------------------------------------

TITLE: Configuring wagmi with cookieStorage
DESCRIPTION: Shows how to set up a wagmi configuration using createConfig, including the use of cookieStorage for SSR compatibility. It also sets up HTTP transports for mainnet and sepolia chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/cookieToInitialState.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { 
  createConfig, 
  http, 
  cookieStorage,
  createStorage
} from '{{packageName}}'
import { mainnet, sepolia } from '{{packageName}}/chains'

export const config = createConfig({
  chains: [mainnet, sepolia],
  ssr: true,
  storage: createStorage({ 
    storage: cookieStorage,
  }), 
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Basic Contract Simulation in Vue
DESCRIPTION: Simple example of using useSimulateContract to simulate a contract's transferFrom function. Shows basic setup with ABI, address and function arguments.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { abi } from './abi'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
})
</script>

----------------------------------------

TITLE: Basic Usage of createConfig with HTTP Transports
DESCRIPTION: Demonstrates how to create a basic configuration with mainnet and sepolia chains using HTTP transports.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Configuring Wagmi for Blockchain Interaction
DESCRIPTION: Configuration setup for wagmi that defines the blockchain networks, wallet connectors, and transports to be used in the application. It sets up mainnet and base networks with HTTP transport, and includes various wallet connection options like injected, WalletConnect, MetaMask, and Safe.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-14_snippet_8

LANGUAGE: tsx
CODE:
import { http, createConfig } from 'wagmi'
import { base, mainnet, optimism } from 'wagmi/chains'
import { injected, metaMask, safe, walletConnect } from 'wagmi/connectors'

const projectId = '<WALLETCONNECT_PROJECT_ID>'

export const config = createConfig({
  chains: [mainnet, base],
  connectors: [
    injected(),
    walletConnect({ projectId }),
    metaMask(),
    safe(),
  ],
  transports: {
    [mainnet.id]: http(),
    [base.id]: http(),
  },
})

----------------------------------------

TITLE: Multiple Contract Function Calls using useReadContracts
DESCRIPTION: Demonstrates how to read multiple contract functions in a single call using the useReadContracts hook with error handling.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { type BaseError, useReadContracts } from 'wagmi'

function ReadContract() {
  const { 
    data,
    error,
    isPending
  } = useReadContracts({ 
    contracts: [{ 
      ...wagmiContractConfig,
      functionName: 'balanceOf',
      args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],
    }, { 
      ...wagmiContractConfig, 
      functionName: 'ownerOf', 
      args: [69n], 
    }, { 
      ...wagmiContractConfig, 
      functionName: 'totalSupply', 
    }] 
  }) 
  const [balance, ownerOf, totalSupply] = data || [] 

  if (isPending) return <div>Loading...</div>

  if (error)
    return (
      <div>
        Error: {(error as BaseError).shortMessage || error.message}
      </div>
    ) 

  return (
    <>
      <div>Balance: {balance?.toString()}</div>
      <div>Owner of Token 69: {ownerOf?.toString()}</div> 
      <div>Total Supply: {totalSupply?.toString()}</div> 
    </>
  )
}

----------------------------------------

TITLE: Importing useBalance Hook
DESCRIPTION: Basic import statement for the useBalance hook from wagmi library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useBalance } from 'wagmi'

----------------------------------------

TITLE: Converting Viem Connector Client to Ethers.js Signer (Ethers v5)
DESCRIPTION: Implementation to convert a Viem connector client to an Ethers.js v5 signer. Uses Web3Provider and includes a React hook for easy integration with Wagmi connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'
import { useMemo } from 'react'
import type { Account, Chain, Client, Transport } from 'viem'
import { Config, useConnectorClient } from 'wagmi'

export function clientToSigner(client: Client<Transport, Chain, Account>) {
  const { account, chain, transport } = client
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  }
  const provider = new providers.Web3Provider(transport, network)
  const signer = provider.getSigner(account.address)
  return signer
}

/** Hook to convert a Viem Client to an ethers.js Signer. */
export function useEthersSigner({ chainId }: { chainId?: number } = {}) {
  const { data: client } = useConnectorClient<Config>({ chainId })
  return useMemo(() => (client ? clientToSigner(client) : undefined), [client])
}

----------------------------------------

TITLE: Complete Chain Configuration Using defineChain
DESCRIPTION: Provides a full implementation of Ethereum mainnet chain configuration using the defineChain function. Includes all required properties like chain ID, name, native currency, RPC URLs, block explorers, and contract addresses.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/create-chain.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { defineChain } from 'viem'

export const mainnet = defineChain({
  id: 1,
  name: 'Ethereum',
  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },
  rpcUrls: {
    default: { http: ['https://eth.merkle.io'] },
  },
  blockExplorers: {
    default: { name: 'Etherscan', url: 'https://etherscan.io' },
  },
  contracts: {
    ensRegistry: {
      address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
    },
    ensUniversalResolver: {
      address: '0xE4Acdd618deED4e6d2f03b9bf62dc6118FC9A4da',
      blockCreated: 16773775,
    },
    multicall3: {
      address: '0xca11bde05977b3631167028862be2a173976ca11',
      blockCreated: 14353601,
    },
  },
})

----------------------------------------

TITLE: Migrating WalletConnect Connector Implementation in Wagmi v2
DESCRIPTION: This example demonstrates how to update from the class-based WalletConnectConnector to the function-based walletConnect connector in Wagmi v2.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_14

LANGUAGE: ts
CODE:
import { WalletConnectConnector } from 'wagmi/connectors/walletConnect' // [!code --]
import { walletConnect } from 'wagmi/connectors' // [!code ++]

const connector = new WalletConnectConnector({ // [!code --]
const connector = walletConnect({ // [!code ++]
  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
})

----------------------------------------

TITLE: Basic useReadContracts Implementation
DESCRIPTION: Demonstrates basic usage of useReadContracts hook with multiple contract calls to wagmigotchi and mloot contracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useReadContracts } from 'wagmi'

const wagmigotchiContract = {
  address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
  abi: wagmigotchiABI,
} as const
const mlootContract = {
  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
  abi: mlootABI,
} as const

function App() {
  const result = useReadContracts({
    contracts: [
      {
        ...wagmigotchiContract,
        functionName: 'getAlive',
      },
      {
        ...wagmigotchiContract,
        functionName: 'getBoredom',
      },
      {
        ...mlootContract,
        functionName: 'getChest',
        args: [69],
      },
      {
        ...mlootContract,
        functionName: 'getWaist',
        args: [69],
      },
    ],
  })
}

----------------------------------------

TITLE: Handling ENS Name Normalization in Wagmi v2
DESCRIPTION: In Wagmi v2, ENS name normalization is no longer handled internally. You must normalize ENS names yourself before passing them to hooks like useEnsAddress, using Viem's normalize function or any other UTS-46 normalization implementation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_16

LANGUAGE: typescript
CODE:
import { useEnsAddress } from 'wagmi'
import { normalize } from 'viem/ens' // [!code ++]

const result = useEnsAddress({
  name: 'wevm.eth', // [!code --]
  name: normalize('wevm.eth'), // [!code ++]
})

----------------------------------------

TITLE: Basic Usage of useSignMessage
DESCRIPTION: Demonstrates basic implementation of useSignMessage hook in a React component to create a button that signs messages.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignMessage.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useSignMessage } from 'wagmi'

function App() {
  const { signMessage } = useSignMessage()

  return (
    <button onClick={() => signMessage({ message: 'hello world' })}>
      Sign message
    </button>
  )
}

----------------------------------------

TITLE: Basic Transaction Implementation - React TSX
DESCRIPTION: Example showing how to implement a basic transaction using the useSendTransaction hook with a button click handler. The example demonstrates sending 0.01 ETH to a specific address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendTransaction.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useSendTransaction } from 'wagmi'
import { parseEther } from 'viem'

function App() {
  const { sendTransaction } = useSendTransaction()

  return (
    <button
      onClick={() =>
        sendTransaction({
          to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
          value: parseEther('0.01'),
        })
      }
    >
      Send transaction
    </button>
  )
}

----------------------------------------

TITLE: Displaying Connected Account Information with Wagmi Hooks
DESCRIPTION: Implements a component that shows the connected account's address, ENS name, and avatar using various Wagmi hooks. It also provides a disconnect button functionality.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useAccount, useDisconnect, useEnsAvatar, useEnsName } from 'wagmi'

export function Account() {
  const { address } = useAccount()
  const { disconnect } = useDisconnect()
  const { data: ensName } = useEnsName({ address })
  const { data: ensAvatar } = useEnsAvatar({ name: ensName! })

  return (
    <div>
      {ensAvatar && <img alt="ENS Avatar" src={ensAvatar} />}
      {address && <div>{ensName ? `${ensName} (${address})` : address}</div>}
      <button onClick={() => disconnect()}>Disconnect</button>
    </div>
  )
}

----------------------------------------

TITLE: Integrating SendTransaction Component in Vue App
DESCRIPTION: This snippet demonstrates how to integrate the SendTransaction component into the main App component, conditionally rendering it when the user is connected.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useAccount } from '@wagmi/vue';
import Account from './Account.vue';
import Connect from './Connect.vue';
import SendTransaction from './SendTransaction.vue';

const { isConnected } = useAccount();
</script>

<template>
  <Account v-if="isConnected" />
  <Connect v-else />
  <SendTransaction v-if="isConnected" />
</template>

----------------------------------------

TITLE: Basic Gas Estimation with Wagmi Core
DESCRIPTION: Basic example of estimating gas for an ETH transfer using @wagmi/core. Demonstrates sending 0.01 ETH to a specified address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { estimateGas } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const result = await estimateGas(config, {
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Converting Viem Client to Ethers v6 Signer
DESCRIPTION: Reference implementation for converting a Viem client to an Ethers.js v6 signer. Uses BrowserProvider and JsonRpcSigner to create a signer instance for the connected account.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { Config, getConnectorClient } from '@wagmi/core'
import { BrowserProvider, JsonRpcSigner } from 'ethers'
import type { Account, Chain, Client, Transport } from 'viem'

export function clientToSigner(client: Client<Transport, Chain, Account>) {
  const { account, chain, transport } = client
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  }
  const provider = new BrowserProvider(transport, network)
  const signer = new JsonRpcSigner(provider, account.address)
  return signer
}

/** Action to convert a viem Wallet Client to an ethers.js Signer. */
export async function getEthersSigner(
  config: Config,
  { chainId }: { chainId?: number } = {},
) {
  const client = await getConnectorClient(config, { chainId })
  return clientToSigner(client)
}

----------------------------------------

TITLE: Contract Reading with Const Assertion
DESCRIPTION: Example of using readContract with a const-asserted ABI for type safety.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/typescript.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const abi = […] as const // <--- const assertion
const result = readContract({ abi })

----------------------------------------

TITLE: Configuring TanStack Query with Sync Storage Persistence for Wagmi
DESCRIPTION: Implementation of TanStack Query with Wagmi using synchronous storage persistence. This setup enables query data to persist in localStorage across page refreshes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
// 1. Import modules.
import { createSyncStoragePersister } from '@tanstack/query-sync-storage-persister'
import { QueryClient } from '@tanstack/react-query'
import { PersistQueryClientProvider } from '@tanstack/react-query-persist-client'
import { WagmiProvider, deserialize, serialize } from 'wagmi'

// 2. Create a new Query Client with a default `gcTime`.
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      gcTime: 1_000 * 60 * 60 * 24, // 24 hours
    },
  },
})

// 3. Set up the persister.
const persister = createSyncStoragePersister({
  serialize,
  storage: window.localStorage,
  deserialize,
})

function App() {
  return (
    <WagmiProvider config={config}>
      {/* 4. Wrap app in PersistQueryClientProvider */}
      <PersistQueryClientProvider
        client={queryClient}
        persistOptions={{ persister }}
      >
        {/* ... */}
      </PersistQueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Setting up TanStack Query with Wagmi v2
DESCRIPTION: Code example showing how to set up TanStack Query with the WagmiProvider in a React app. TanStack Query is now a peer dependency in Wagmi v2.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiProvider } from 'wagmi'
import { config } from './config'

const queryClient = new QueryClient()

function App() {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        {/** ... */}
      </QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Migrating from useToken to useReadContracts
DESCRIPTION: The useToken hook is deprecated in Wagmi v2. Use useReadContracts instead to fetch token information by directly calling the token contract's functions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_23

LANGUAGE: typescript
CODE:
import { useToken } from 'wagmi' // [!code --]
import { useReadContracts } from 'wagmi' // [!code ++]
import { erc20Abi } from 'viem' // [!code ++]

const result = useToken({ // [!code --]
  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code --]
}) // [!code --]
const result = useReadContracts({ // [!code ++]
  allowFailure: false, // [!code ++]
  contracts: [ // [!code ++]
    { // [!code ++]
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]
      abi: erc20Abi, // [!code ++]
      functionName: 'decimals', // [!code ++]
    }, // [!code ++]
    { // [!code ++]
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]
      abi: erc20Abi, // [!code ++]
      functionName: 'name', // [!code ++]
    }, // [!code ++]
    { // [!code ++]
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]
      abi: erc20Abi, // [!code ++]
      functionName: 'symbol', // [!code ++]
    }, // [!code ++]
    { // [!code ++]
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]
      abi: erc20Abi, // [!code ++]
      functionName: 'totalSupply', // [!code ++]
    }, // [!code ++]
  ] // [!code ++]
}) // [!code ++]

----------------------------------------

TITLE: Breaking Change to readContract Function in Wagmi
DESCRIPTION: Example showing the consolidated parameter structure for the readContract function, moving to a single config object with a functionName property.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_30

LANGUAGE: tsx
CODE:
readContract({
  addressOrName: "0xecb504d39723b0be0e3a9aa33d646642d1051ee1",
  contractInterface: wagmigotchiABI,
  functionName: "getHunger",
  args: [0],
});

----------------------------------------

TITLE: Implementing Wallet Connection Options with Wagmi
DESCRIPTION: Creates a WalletOptions component that displays available wallet connectors and a WalletOption component for each connector. Uses the useConnect hook to get connectors and initiate connections.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { Connector, useConnect } from 'wagmi'

export function WalletOptions() {
  const { connectors, connect } = useConnect()

  return connectors.map((connector) => (
    <WalletOption
      key={connector.uid}
      connector={connector}
      onClick={() => connect({ connector })}
    />
  ))
}

function WalletOption({
  connector,
  onClick,
}: {
  connector: Connector
  onClick: () => void
}) {
  const [ready, setReady] = React.useState(false)

  React.useEffect(() => {
    ;(async () => {
      const provider = await connector.getProvider()
      setReady(!!provider)
    })()
  }, [connector])

  return (
    <button disabled={!ready} onClick={onClick}>
      {connector.name}
    </button>
  )
}

----------------------------------------

TITLE: Handling Errors in Wagmi Core with TypeScript
DESCRIPTION: This code demonstrates how to handle errors from the getBlockNumber action in Wagmi Core using TypeScript. It shows how to cast the error to the specific error type and access properties based on the error name.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/error-handling.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
import { type GetBlockNumberErrorType, getBlockNumber } from '@wagmi/core'
import { config } from './config'

try {
  const blockNumber = await getBlockNumber(config)
} catch (e) {
  const error = e as GetBlockNumberErrorType
  error.name
  //    ^? (property) name: "Error" | "ChainDisconnectedError" | "HttpRequestError" | "InternalRpcError" | "InvalidInputRpcError" | "InvalidParamsRpcError" | "InvalidRequestRpcError" | "JsonRpcVersionUnsupportedError" | ... 16 more ... | "WebSocketRequestError"

  if (error.name === 'InternalRpcError')
    error.code
    //    ^? (property) code: -32603

  if (error.name === 'HttpRequestError')
    error.headers
    //    ^? (property) headers: Headers
    error.status
    //    ^? (property) status: number
}

----------------------------------------

TITLE: Handling Typed Errors in Wagmi Hooks (React/TypeScript)
DESCRIPTION: This snippet demonstrates how to handle different error types in a React component using Wagmi's useBlockNumber hook. It shows type discrimination using the 'name' property of the error object and provides specific error handling for HttpRequestError and LimitExceededRpcError.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/error-handling.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
import { useBlockNumber } from 'wagmi'

function App() {
  const { data, error } = useBlockNumber()
  //            ^?

  error?.name
  //     ^?






  if (error?.name === 'HttpRequestError') {
    const { status } = error
    //      ^?      


    return <div>A HTTP error occurred. Status: {status}</div>
  }
  if (error?.name === 'LimitExceededRpcError') {
    const { code } = error
    //      ^?

    
    return <div>Rate limit exceeded. Code: {code}</div>
  }
  // ...
}

----------------------------------------

TITLE: Setting maxPriorityFeePerGas for EIP-1559 Transactions
DESCRIPTION: Example showing how to set both maxFeePerGas and maxPriorityFeePerGas when writing a contract transaction. Demonstrates setting priority fee separate from total fee.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { writeContract } from '@wagmi/core'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = await writeContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
})

----------------------------------------

TITLE: Basic Usage of sendTransaction
DESCRIPTION: Demonstrates a basic example of using the sendTransaction function to send 0.01 ETH to a specific address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Creating Basic Mint NFT Form Component in React
DESCRIPTION: This snippet shows the initial setup of a React component for minting an NFT. It includes a form with an input for the token ID and a submit button.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
import * as React from 'react'

export function MintNFT() {
  return (
    <form>
      <input name="tokenId" placeholder="69420" required />
      <button type="submit">Mint</button>
    </form>
  )
}

----------------------------------------

TITLE: Handling Errors in SendTransaction Component with Wagmi
DESCRIPTION: Implements error handling in the SendTransaction component to display error messages for transaction rejections or insufficient funds scenarios.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import * as React from 'react'
import {
  type BaseError,
  useSendTransaction,
  useWaitForTransactionReceipt
} from 'wagmi'
import { parseEther } from 'viem'

export function SendTransaction() {
  const {
    data: hash,
    error,
    isPending,
    sendTransaction
  } = useSendTransaction()

  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
    sendTransaction({ to, value: parseEther(value) })
  }

  const { isLoading: isConfirming, isSuccess: isConfirmed } =
    useWaitForTransactionReceipt({
      hash,
    })

  return (
    <form onSubmit={submit}>
      <input name="address" placeholder="0xA0Cf…251e" required />
      <input name="value" placeholder="0.05" required />
      <button
        disabled={isPending}
        type="submit"
      >
        {isPending ? 'Confirming...' : 'Send'}
      </button>
      {hash && <div>Transaction Hash: {hash}</div>}
      {isConfirming && <div>Waiting for confirmation...</div>}
      {isConfirmed && <div>Transaction confirmed.</div>}
      {error && (
        <div>Error: {(error as BaseError).shortMessage || error.message}</div>
      )}
    </form>
  )
}

----------------------------------------

TITLE: Adding Connectors to createConfig
DESCRIPTION: Shows how to add wallet connectors when creating a configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'
import { injected } from 'wagmi/connectors' 

const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [injected()], 
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Converting Viem Connector Client to Ethers.js Signer (Ethers v6)
DESCRIPTION: Implementation to convert a Viem connector client to an Ethers.js v6 signer. Uses BrowserProvider and JsonRpcSigner classes from Ethers v6 with Wagmi connector clients.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { BrowserProvider, JsonRpcSigner } from 'ethers'
import { useMemo } from 'react'
import type { Account, Chain, Client, Transport } from 'viem'
import { type Config, useConnectorClient } from 'wagmi'

export function clientToSigner(client: Client<Transport, Chain, Account>) {
  const { account, chain, transport } = client
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  }
  const provider = new BrowserProvider(transport, network)
  const signer = new JsonRpcSigner(provider, account.address)
  return signer
}

/** Hook to convert a viem Wallet Client to an ethers.js Signer. */
export function useEthersSigner({ chainId }: { chainId?: number } = {}) {
  const { data: client } = useConnectorClient<Config>({ chainId })
  return useMemo(() => (client ? clientToSigner(client) : undefined), [client])
}

----------------------------------------

TITLE: Basic Usage of useEstimateGas Hook in React
DESCRIPTION: Demonstrates a simple implementation of the useEstimateGas hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useEstimateGas } from 'wagmi'

function App() {
  const result = useEstimateGas()
}

----------------------------------------

TITLE: Integrating Viem Client with createConfig
DESCRIPTION: Shows how to use the client property for more fine-grained control over Wagmi's internal Client creation using Viem.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'
import { createClient } from 'viem'

const config = createConfig({
  chains: [mainnet, sepolia],
  client({ chain }) {
    return createClient({ chain, transport: http() })
  },
})

----------------------------------------

TITLE: Configuring TypeScript with Wagmi
DESCRIPTION: Examples of TypeScript configuration for Wagmi, showing how to register config types and use hook config properties for type safety.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/getting-started.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { useBlockNumber } from 'wagmi'

useBlockNumber({ chainId: 123 })

declare module 'wagmi' {
  interface Register {
    config: typeof config
  }
}

LANGUAGE: typescript
CODE:
import { useBlockNumber } from 'wagmi'

useBlockNumber({ chainId: 123, config })

----------------------------------------

TITLE: Complete Chain Configuration Using Type Assertion
DESCRIPTION: Provides a full implementation of Ethereum mainnet chain configuration using type assertion method. Includes all required properties like chain ID, name, native currency, RPC URLs, block explorers, and contract addresses.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/create-chain.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type Chain } from 'viem'

export const mainnet = {
  id: 1,
  name: 'Ethereum',
  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },
  rpcUrls: {
    default: { http: ['https://eth.merkle.io'] },
  },
  blockExplorers: {
    default: { name: 'Etherscan', url: 'https://etherscan.io' },
  },
  contracts: {
    ensRegistry: {
      address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
    },
    ensUniversalResolver: {
      address: '0xE4Acdd618deED4e6d2f03b9bf62dc6118FC9A4da',
      blockCreated: 16773775,
    },
    multicall3: {
      address: '0xca11bde05977b3631167028862be2a173976ca11',
      blockCreated: 14353601,
    },
  },
} as const satisfies Chain

----------------------------------------

TITLE: Basic Usage of getTransaction with Transaction Hash
DESCRIPTION: Shows the basic usage of getTransaction action to fetch a transaction using its hash as the identifier.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getTransaction } from '@wagmi/core'
import { config } from './config'

const transaction = getTransaction(config, {
  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
})

----------------------------------------

TITLE: Gas Estimation with Access List
DESCRIPTION: Example showing how to estimate gas with a custom access list, which can help optimize gas costs for contract interactions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { estimateGas } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const result = await estimateGas(config, {
  accessList: [{
    address: '0x1',
    storageKeys: ['0x1'],
  }],
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Creating Custom Hooks with Client Actions in Wagmi
DESCRIPTION: This example shows an alternative approach to create custom React Query hooks using Viem client actions with Wagmi's useClient and useConnectorClient hooks. This method uses the client's built-in methods rather than tree-shakable actions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/viem.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
// 1. Import modules. 
import { useMutation, useQuery } from '@tanstack/react-query'
import { http, createConfig, useClient, useConnectorClient } from 'wagmi' 
import { base, mainnet, optimism, zora } from 'wagmi/chains' 

// 2. Set up a Wagmi Config 
export const config = createConfig({ 
  chains: [base, mainnet, optimism, zora], 
  transports: { 
    [base.id]: http(), 
    [mainnet.id]: http(), 
    [optimism.id]: http(), 
    [zora.id]: http(), 
  }, 
}) 

function Example() {
  // 3. Extract a Viem Client for the current active chain. 
  const publicClient = useClient({ config }) 

  // 4. Create a "custom" Query Hook that utilizes the Client. 
  const { data: logs } = useQuery({ 
    queryKey: ['logs', publicClient.uid], 
    queryFn: () => publicClient.getLogs(/* ... */) 
  }) 
  
  // 5. Extract a Viem Client for the current active chain & account. 
  const { data: walletClient } = useConnectorClient({ config }) 

  // 6. Create a "custom" Mutation Hook that utilizes the Client. 
  const { mutate } = useMutation({ 
    mutationFn: (asset) => walletClient.watchAsset(asset) 
  }) 

  return (
    <div>
      {/* ... */}
    </div>
  )
}

----------------------------------------

TITLE: Using useReadContract Hook in React Component
DESCRIPTION: This example demonstrates how to use the useReadContract hook in a React component to call a read-only function on a smart contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContract.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
  })
}

----------------------------------------

TITLE: Using Viem Wallet Actions with Wagmi
DESCRIPTION: Example showing how to create a custom mutation composable using Viem's watchAsset action with useMutation from Wagmi to add tokens to a wallet.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/viem.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
// 1. Import modules. 
import { useConnectorClient } from '@wagmi/vue' 
import { useMutation } from '@wagmi/vue/query'
import { watchAsset } from 'viem/actions'

// 2. Extract a Viem Client for the current active chain. 
const { data: connectorClient } = useConnectorClient()

// 3. Create a "custom" Mutation Composable that utilizes the Client. 
const { mutate } = useMutation({
  mutationFn: (asset) => watchAsset(connectorClient, asset)
})
</script>

----------------------------------------

TITLE: Setting up React App with wagmi Provider
DESCRIPTION: This snippet shows how to configure and set up the main React application with WagmiProvider and QueryClientProvider, and integrate the MintNft component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiProvider, useAccount } from 'wagmi'
import { config } from './config'
import { MintNft } from './mint-nft' // [!code ++]

const queryClient = new QueryClient()

function App() {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}> 
        <MintNft /> // [!code ++]
      </QueryClientProvider> 
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Basic Chain Switching Implementation in Vue
DESCRIPTION: Demonstrates a complete Vue component implementation for chain switching, including both script and template sections. Shows how to list available chains and handle switching between them.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchChain.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSwitchChain } from '@wagmi/vue'

const { chains, switchChain } = useSwitchChain()
</script>

<template>
  <div>
    <button 
      v-for="chain in chains" 
      :key="chain.id" 
      @click="switchChain({ chainId: chain.id })"
    >
      {{ chain.name }}
    </button>
  </div>
</template>

----------------------------------------

TITLE: Importing useSendTransaction Hook - TypeScript
DESCRIPTION: Basic import statement for the useSendTransaction hook from wagmi library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useSendTransaction } from 'wagmi'

----------------------------------------

TITLE: Adding Loading State to NFT Minting Component
DESCRIPTION: This snippet adds a loading state to the Mint NFT component using the isPending property from the useWriteContract hook. It disables the button and changes its text while the transaction is pending.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { useWriteContract } from 'wagmi'
import { abi } from './abi'

export function MintNFT() {
  const { 
    data: hash, 
    isPending,
    writeContract 
  } = useWriteContract()

  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const tokenId = formData.get('tokenId') as string
    writeContract({
      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'mint',
      args: [BigInt(tokenId)],
    })
  }

  return (
    <form onSubmit={submit}>
      <input name="tokenId" placeholder="69420" required />
      <button 
        disabled={isPending}
        type="submit"
      >
        {isPending ? 'Confirming...' : 'Mint'}
      </button>
      {hash && <div>Transaction Hash: {hash}</div>}
    </form>
  )
}

LANGUAGE: ts
CODE:
export const abi = [
  {
    name: 'mint',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],
    outputs: [],
  },
] as const

----------------------------------------

TITLE: Adding Loading State to SendTransaction Component
DESCRIPTION: This snippet adds a loading state to the SendTransaction component, disabling the submit button and showing a loading message while the transaction is pending.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
  import { useSendTransaction } from 'wagmi'
  import { parseEther } from 'viem'

  const { 
    data: hash, 
    isPending,
    sendTransaction 
  } = useSendTransaction()

  function submit(event: Event) {
    const formData = new FormData(event.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
    sendTransaction({ to, value: parseEther(value) })
  }
</script>

<template>
  <form @submit.prevent="submit">
    <input name="address" placeholder="0xA0Cf…251e" required />
    <input name="value" placeholder="0.05" required />
    <button :disabled="isPending" type="submit">
      <span v-if="isPending">Sending...</span>
      <span v-else>Send</span>
    </button>
    <div v-if="hash">Transaction Hash: {{ hash }}</div>
  </form>
</template>

----------------------------------------

TITLE: Registering Wagmi Config with TypeScript using Declaration Merging
DESCRIPTION: Demonstrates how to use declaration merging to register the Wagmi config globally with TypeScript, enabling type inference across the application.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/typescript.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConfig, http } from '@wagmi/vue'
import { mainnet, sepolia } from 'wagmi/chains'

declare module '@wagmi/vue' {
  interface Register {
    config: typeof config
  }
}

export const config = createConfig({
  chains: [mainnet, sepolia],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Basic Usage of useCall Hook in React
DESCRIPTION: Demonstrates a basic usage example of the useCall hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useCall } from 'wagmi'

function App() {
  const result = useCall({
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  })
}

----------------------------------------

TITLE: Moving TanStack Query Parameters to query Property
DESCRIPTION: Example showing how to migrate from passing TanStack Query parameters directly to hooks in v1 to using the query property in v2.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
useReadContract({
  enabled: false, // [!code --]
  staleTime: 1_000, // [!code --]
  query: { // [!code ++]
    enabled: false, // [!code ++]
    staleTime: 1_000, // [!code ++]
  }, // [!code ++]
})

----------------------------------------

TITLE: Configuring Wagmi for Wallet Connections in TypeScript
DESCRIPTION: Sets up the Wagmi configuration with specified chains and connectors for wallet integration. It includes connectors for injected wallets, WalletConnect, MetaMask, and Safe.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { http, createConfig } from 'wagmi'
import { base, mainnet, optimism } from 'wagmi/chains'
import { injected, metaMask, safe, walletConnect } from 'wagmi/connectors'

const projectId = '<WALLETCONNECT_PROJECT_ID>'

export const config = createConfig({
  chains: [mainnet, base],
  connectors: [
    injected(),
    walletConnect({ projectId }),
    metaMask(),
    safe(),
  ],
  transports: {
    [mainnet.id]: http(),
    [base.id]: http(),
  },
})

----------------------------------------

TITLE: Implementing Transaction Receipt Waiting in SendTransaction Component
DESCRIPTION: Adds functionality to wait for and display transaction confirmation status using the useWaitForTransactionReceipt hook from Wagmi.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import * as React from 'react'
import {
  useSendTransaction,
  useWaitForTransactionReceipt
} from 'wagmi'
import { parseEther } from 'viem'

export function SendTransaction() {
  const {
    data: hash,
    isPending,
    sendTransaction
  } = useSendTransaction()

  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
    sendTransaction({ to, value: parseEther(value) })
  }

  const { isLoading: isConfirming, isSuccess: isConfirmed } =
    useWaitForTransactionReceipt({
      hash,
    })

  return (
    <form onSubmit={submit}>
      <input name="address" placeholder="0xA0Cf…251e" required />
      <input name="value" placeholder="0.05" required />
      <button
        disabled={isPending}
        type="submit"
      >
        {isPending ? 'Confirming...' : 'Send'}
      </button>
      {hash && <div>Transaction Hash: {hash}</div>}
      {isConfirming && <div>Waiting for confirmation...</div>}
      {isConfirmed && <div>Transaction confirmed.</div>}
    </form>
  )
}

----------------------------------------

TITLE: Conditional Contract Read with Query Enabled
DESCRIPTION: Demonstrates how to conditionally enable contract reads based on dependency availability using the query.enabled option.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
const { data: balance } = useReadContract({
  ...wagmiContractConfig,
  functionName: 'balanceOf',
  args: [address],
  query: {
    enabled: !!address,
  },
})

----------------------------------------

TITLE: Creating Wallet Connect Component
DESCRIPTION: Implements a Connect component that displays available wallet connectors and handles connection requests. Uses Wagmi's useConnect and useChainId composables.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnect, useChainId } from '@wagmi/vue';

const chainId = useChainId();
const { connectors, connect } = useConnect();
</script>

<template>
  <button
    v-for="connector in connectors"
    @click="connect({ connector, chainId })"
  >
    {{ connector.name }}
  </button>
</template>

----------------------------------------

TITLE: Basic Usage Example
DESCRIPTION: Demonstrates basic usage of getTransactionCount to fetch transaction count for an address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionCount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getTransactionCount } from '@wagmi/core'
import { config } from './config'

const transactionCount = getTransactionCount(config, {
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
})

----------------------------------------

TITLE: Basic useAccount Hook Usage
DESCRIPTION: Demonstrates basic implementation of useAccount hook in a React component
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccount.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useAccount } from 'wagmi'

function App() {
  const account = useAccount()
}

----------------------------------------

TITLE: Custom Logger Configuration in TypeScript
DESCRIPTION: Demonstrates how to configure a custom logger for the wagmi client to override default logging behavior. Shows both custom logging implementation and how to disable logging.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_19

LANGUAGE: typescript
CODE:
const client = createClient({
  logger: {
    warn: message => logWarn(message)
  }
})

LANGUAGE: typescript
CODE:
const client = createClient({
  logger: {
    warn: null
  }
})

----------------------------------------

TITLE: Contract Read with Block Tag
DESCRIPTION: Shows how to read contract data using a specific block tag like 'safe' or 'latest'.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { readContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await readContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'totalSupply',
  blockTag: 'safe',
})

----------------------------------------

TITLE: Converting Viem Client to Ethers v5 Provider
DESCRIPTION: Reference implementation for converting a Viem client to an Ethers.js v5 provider. Supports both standard JsonRpcProvider and FallbackProvider configurations based on the transport type.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { type Config, getClient } from '@wagmi/core'
import { providers } from 'ethers'
import type { Client, Chain, Transport } from 'viem'

export function clientToProvider(client: Client<Transport, Chain>) {
  const { chain, transport } = client
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  }
  if (transport.type === 'fallback')
    return new providers.FallbackProvider(
      (transport.transports as ReturnType<Transport>[]).map(
        ({ value }) => new providers.JsonRpcProvider(value?.url, network),
      ),
    )
  return new providers.JsonRpcProvider(transport.url, network)
}

/** Action to convert a viem Public Client to an ethers.js Provider. */
export function getEthersProvider(
  config: Config,
  { chainId }: { chainId?: number } = {},
) {
  const client = getClient(config, { chainId })
  if (!client) return
  return clientToProvider(client)
}

----------------------------------------

TITLE: Implementing useSendTransaction Composable in Vue
DESCRIPTION: This snippet shows how to integrate the useSendTransaction composable from Wagmi to handle the actual transaction sending process.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
  import { useSendTransaction } from 'wagmi'
  import { parseEther } from 'viem'

  const { data: hash, sendTransaction } = useSendTransaction()

  function submit(event: Event) {
    const formData = new FormData(event.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
    sendTransaction({ to, value: parseEther(value) })
  }
</script>

<template>
  <form @submit.prevent="submit">
    <input name="address" placeholder="0xA0Cf…251e" required />
    <input name="value" placeholder="0.05" required />
    <button type="submit">Send</button>
    <div v-if="hash">Transaction Hash: {{ hash }}</div>
  </form>
</template>

----------------------------------------

TITLE: Using webSocket Transport in Wagmi Config
DESCRIPTION: Demonstrates how to use the webSocket Transport in a Wagmi configuration to connect to different chains via WebSocket connections.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { 
  createConfig, 
  webSocket // [!code hl]
} from '{{packageName}}'
import { mainnet, sepolia } from '{{packageName}}/chains'

export const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [injected()],
  transports: {
    [mainnet.id]: webSocket('wss://foo-bar-baz.quiknode.pro/...'), // [!code hl]
    [sepolia.id]: webSocket('wss://foo-bar-sep.quicknode.pro/...'), // [!code hl]
  },
})

----------------------------------------

TITLE: Basic useEstimateGas Usage
DESCRIPTION: Demonstrates basic usage of the useEstimateGas composable in a Vue component
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEstimateGas } from '@wagmi/vue'

const result = useEstimateGas()
</script>

----------------------------------------

TITLE: Contract Read with Loading and Error Handling
DESCRIPTION: Implements comprehensive error handling and loading states for contract reads using useReadContract hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { type BaseError, useReadContract } from 'wagmi'

function ReadContract() {
  const { 
    data: balance,
    error,
    isPending
  } = useReadContract({
    ...wagmiContractConfig,
    functionName: 'balanceOf',
    args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],
  })

  if (isPending) return <div>Loading...</div>

  if (error)
    return (
      <div>
        Error: {(error as BaseError).shortMessage || error.message}
      </div>
    )

  return (
    <div>Balance: {balance?.toString()}</div>
  )
}

----------------------------------------

TITLE: Comparing Manual vs Generated Smart Contract Hooks in React
DESCRIPTION: Shows the difference between using raw Wagmi hooks with manual ABI/address management versus using generated contract-specific hooks. Demonstrates simplified code structure and reduced boilerplate when using generated hooks.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/why.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useReadContract, useWriteContract } from 'wagmi'
import { froggyFriendsAbi, froggyFriendsAddress } from './generated'

function App() {
  const { data } = useReadContract({
    abi: froggyFriendsAbi,
    address: froggyFriendsAddress,
    functionName: 'tokenURI',
    args: [123n],
  })

  const { write } = useWriteContract()
  const onClick = React.useCallback(() => {
    write({
      abi: froggyFriendsAbi,
      address: froggyFriendsAddress,
      functionName: 'mint',
      args: ['foo', 123n],
    })
  }, [write])
}

LANGUAGE: typescript
CODE:
import { useReadFroggyFriends, useWriteFroggyFriends } from './generated'

function App() {
  const { data } = useReadFroggyFriends({
    functionName: 'tokenURI',
    args: [123n],
  })

  const { write } = useWriteFroggyFriends()
  const onClick = React.useCallback(() => {
    write({
      functionName: 'mint',
      args: ['foo', 123n],
    })
  }, [write])
}

----------------------------------------

TITLE: Setting Transaction Value
DESCRIPTION: Example showing how to send ETH value along with a contract transaction using parseEther to convert from ETH to wei.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { writeContract } from '@wagmi/core'
import { parseEther } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = await writeContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Updating Chain Imports from Main Entrypoint to Dedicated Entrypoint
DESCRIPTION: This snippet shows how to update imports for mainnet and sepolia chains, which were removed from the main entrypoint and should now be imported from wagmi/chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_15

LANGUAGE: ts
CODE:
import { mainnet, sepolia } from 'wagmi' // [!code --]
import { mainnet, sepolia } from 'wagmi/chains' // [!code ++]

----------------------------------------

TITLE: Implementing Transaction Receipt Confirmation in Vue
DESCRIPTION: This snippet demonstrates how to use the useWaitForTransactionReceipt composable to display transaction confirmation status to the user.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
  import { 
    useSendTransaction,
    useWaitForTransactionReceipt,
  } from 'wagmi'
  import { parseEther } from 'viem'

  const { 
    data: hash, 
    isPending,
    sendTransaction 
  } = useSendTransaction()

  function submit(event: Event) {
    const formData = new FormData(event.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
    sendTransaction({ to, value: parseEther(value) })
  }

  const { isLoading: isConfirming, isSuccess: isConfirmed } =
    useWaitForTransactionReceipt({
      hash,
    })
</script>

<template>
  <form @submit.prevent="submit">
    <input name="address" placeholder="0xA0Cf…251e" required />
    <input name="value" placeholder="0.05" required />
    <button :disabled="isPending" type="submit">
      <span v-if="isPending">Sending...</span>
      <span v-else>Send</span>
    </button>
    <div v-if="hash">Transaction Hash: {{ hash }}</div>
    <div v-if="isConfirming">Waiting for confirmation...</div>
    <div v-if="isConfirmed">Transaction Confirmed!</div>
  </form>
</template>

----------------------------------------

TITLE: Configuring Custom Storage for createConfig
DESCRIPTION: Shows how to set up custom storage for persisting the configuration state between sessions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { createConfig, createStorage, http } from 'wagmi' 
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  storage: createStorage({ storage: window.localStorage }), 
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Importing Wagmi Connectors
DESCRIPTION: Example showing how to import connectors from the wagmi library. Demonstrates importing the injected connector which is commonly used for browser-based wallet connections.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { injected } from 'wagmi/connectors'

----------------------------------------

TITLE: Complete Example of configureChains with Provider Configuration in Wagmi
DESCRIPTION: A complete example showing how to use the configureChains API to configure chains and providers, and how to use the resulting provider and webSocketProvider in the client configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_35

LANGUAGE: tsx
CODE:
import { chain, createClient, defaultChains } from "wagmi";

import { alchemyProvider } from "wagmi/providers/alchemy";
import { publicProvider } from "wagmi/providers/public";

import { CoinbaseWalletConnector } from "wagmi/connectors/coinbaseWallet";
import { InjectedConnector } from "wagmi/connectors/injected";
import { MetaMaskConnector } from "wagmi/connectors/metaMask";
import { WalletConnectConnector } from "wagmi/connectors/walletConnect";

const alchemyId = process.env.ALCHEMY_ID;

const { chains, provider, webSocketProvider } = configureChains(
  defaultChains,
  [alchemyProvider({ alchemyId }), publicProvider()],
);

const client = createClient({
  autoConnect: true,
  connectors: [
    new MetaMaskConnector({ chains }),
    new CoinbaseWalletConnector({
      chains,
      options: {
        appName: "wagmi",
      },
    }),
    new WalletConnectConnector({
      chains,
      options: {
        qrcode: true,
      },
    }),
    new InjectedConnector({
      chains,
      options: {
        name: "Injected",
        shimDisconnect: true,
      },
    }),
  ],
  provider,
  webSocketProvider,
});

----------------------------------------

TITLE: Implementing Error Handling with Wagmi Vue Composables
DESCRIPTION: Example showing how to handle different error types from Wagmi composables using TypeScript type discrimination. Demonstrates handling HTTP errors and RPC rate limit errors with their specific properties.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/error-handling.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup lang="ts">
// @noErrors
import { useBlockNumber } from 'wagmi'

const { data, error } = useBlockNumber()
//            ^?


error?.name
//     ^?





</script>

<template>
  <div v-if="error?.name === 'HttpRequestError'">
    A HTTP error occurred. Status: {{ error.status }}
//                                          ^?
  </div>

  <div v-else-if="error?.name === 'LimitExceededRpcError'">
    Rate limit exceeded. Code: {{ error.code }}
//                                      ^?
  </div>
</template>

----------------------------------------

TITLE: Setting maxFeePerGas for EIP-1559 Transactions
DESCRIPTION: Example showing how to set maxFeePerGas when writing a contract transaction. Uses parseGwei to convert gas fee from gwei to wei.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { writeContract } from '@wagmi/core'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = await writeContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  maxFeePerGas: parseGwei('20'),
})

----------------------------------------

TITLE: Configuring TanStack Query Devtools with Wagmi
DESCRIPTION: This example shows how to set up TanStack Query Devtools with Wagmi. It includes importing necessary components and configuring the QueryClient with a custom queryKeyHashFn to handle BigInt serialization.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_12

LANGUAGE: tsx
CODE:
import {
  QueryClient,
  QueryClientProvider,
} from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools"; // [!code hl]
import { hashFn } from "@wagmi/core/query"; // [!code hl]

const queryClient = new QueryClient({
  defaultOptions: { // [!code hl]
    queries: { // [!code hl]
      queryKeyHashFn: hashFn, // [!code hl]
    }, // [!code hl]
  }, // [!code hl]
});

----------------------------------------

TITLE: Configuring Wagmi Plugin and Vue Query Client
DESCRIPTION: Initializes and configures the Wagmi plugin with Vue along with Vue Query client setup. Includes custom query key hash function configuration and plugin installation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-14_snippet_10

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { createApp } from 'vue'
import { WagmiPlugin } from '@wagmi/vue'
import { QueryClient, VueQueryPlugin } from '@tanstack/vue-query'

import App from './App.vue'
import { config } from './config' 

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryKeyHashFn: hashFn,
    },
  },
});

createApp(App)
  .use(WagmiPlugin, { config })
  .use(VueQueryPlugin, { queryClient })
  .mount('#app')
</script>

----------------------------------------

TITLE: BigInt Lossless Serialization with Wagmi
DESCRIPTION: Demonstrates how to use Wagmi's serialize and deserialize utilities for lossless BigInt serialization. Converts BigInt values to a format that can be safely serialized and later deserialized.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/faq.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { serialize, deserialize } from 'wagmi'

const serialized = serialize({ value: 69420n })
// '{"value":"#bigint.69420"}'

const deserialized = deserialize(serialized)
// { value: 69420n }

----------------------------------------

TITLE: SendTransaction with Nonce
DESCRIPTION: Demonstrates how to specify a nonce for a transaction using the sendTransaction function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  nonce: 123,
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Subscribing to Wagmi State Changes
DESCRIPTION: Shows how to listen for specific state changes using the subscribe method. This example logs when the chainId changes and demonstrates how to unsubscribe when needed.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_19

LANGUAGE: typescript
CODE:
import { config } from './config'

const unsubscribe = config.subscribe(
  (state) => state.chainId,
  (chainId) => console.log(`Chain ID changed to ${chainId}`),
)
unsubscribe()

----------------------------------------

TITLE: Using Viem Public Actions with Wagmi
DESCRIPTION: Example demonstrating how to create a custom query composable using Viem's getLogs action with useQuery from Wagmi to fetch blockchain logs.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/viem.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup lang="ts">
// 1. Import modules. 
import { useClient, useConnectorClient } from '@wagmi/vue' 
import { useMutation, useQuery } from '@wagmi/vue/query'
import { getLogs, watchAsset } from 'viem/actions'

// 2. Extract a Viem Client for the current active chain. 
const client = useClient() 

// 3. Create a "custom" Query Composable that utilizes the Client. 
const { data: logs } = useQuery( 
  computed(() => ({ 
    queryKey: ['logs', client.value.uid], 
    queryFn: () => getLogs(client.value) 
  })) 
) 
</script>

----------------------------------------

TITLE: Implementing Wagmi Hooks Example
DESCRIPTION: Demonstration of using Wagmi hooks in a React component to fetch ENS name data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/getting-started.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useAccount, useEnsName } from 'wagmi'

export function Profile() {
  const { address } = useAccount()
  const { data, error, status } = useEnsName({ address })
  if (status === 'pending') return <div>Loading ENS name</div>
  if (status === 'error')
    return <div>Error fetching ENS name: {error.message}</div>
  return <div>ENS name: {data}</div>
}

----------------------------------------

TITLE: Basic Usage of call Action
DESCRIPTION: Demonstrates a basic usage example of the 'call' action, including setting up the configuration and calling a contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/call.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { call } from '@wagmi/core'
import { config } from './config'

await call(config, {
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Configuring wagmi with Chains and Connectors
DESCRIPTION: This configuration file sets up wagmi with mainnet and base chains, multiple wallet connectors including injected, WalletConnect, MetaMask, and Safe, and defines HTTP transports for each chain.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_9

LANGUAGE: tsx
CODE:
import { http, createConfig } from 'wagmi'
import { base, mainnet, optimism } from 'wagmi/chains'
import { injected, metaMask, safe, walletConnect } from 'wagmi/connectors'

const projectId = '<WALLETCONNECT_PROJECT_ID>'

export const config = createConfig({
  chains: [mainnet, base],
  connectors: [
    injected(),
    walletConnect({ projectId }),
    metaMask(),
    safe(),
  ],
  transports: {
    [mainnet.id]: http(),
    [base.id]: http(),
  },
})

----------------------------------------

TITLE: Basic MLoot Attributes Fetching Example
DESCRIPTION: Demonstrates how to fetch MLoot NFT attributes (chest, foot, hand) with infinite scroll support using useInfiniteReadContracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useInfiniteReadContracts.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useInfiniteReadContracts } from 'wagmi'
import { abi } from './abi'

const mlootContractConfig = {
  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
  abi,
} as const

function App() {
  const result = useInfiniteReadContracts({
    cacheKey: 'mlootAttributes',
    contracts(pageParam) {
      const args = [pageParam] as const
      return [
        { ...mlootContractConfig, functionName: 'getChest', args },
        { ...mlootContractConfig, functionName: 'getFoot', args },
        { ...mlootContractConfig, functionName: 'getHand', args },
      ]
    }
    query: {
      initialPageParam: 0,
      getNextPageParam: (_lastPage, _allPages, lastPageParam) => {
        return lastPageParam + 1
      }
    }
  })
}

----------------------------------------

TITLE: Configuring watchPendingTransactions with Custom Options
DESCRIPTION: Demonstrates various configuration options for watchPendingTransactions, including disabling batching, specifying a chain ID, handling errors, and setting polling options.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { watchPendingTransactions } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const unwatch = watchPendingTransactions(config, {
  batch: false,
  chainId: mainnet.id,
  onError(error) {
    console.log('Error', error)
  },
  onTransactions(transactions) {
    console.log('New transactions!', transactions)
  },
  poll: false,
  pollingInterval: 1_000,
  syncConnectedChain: false
})

----------------------------------------

TITLE: Using useWatchBlocks Hook in React Component
DESCRIPTION: Demonstrates how to use the useWatchBlocks hook in a React component to watch for new blocks and log their numbers.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useWatchBlocks } from 'wagmi'

function App() {
  useWatchBlocks({
    onBlock(block) {
      console.log('New block', block.number)
    },
  })
}

----------------------------------------

TITLE: Rendering Available Connectors with useConnect
DESCRIPTION: Demonstrates how to use the connectors returned by useConnect to render a list of available connection options.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnect.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useConnect } from 'wagmi'

function App() {
  const { connect, connectors } = useConnect()

  return (
    <div>
      {connectors.map((connector) => (
        <button key={connector.id} onClick={() => connect({ connector })}>
          {connector.name}
        </button>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Basic SendCalls Usage
DESCRIPTION: Example demonstrating basic usage of sendCalls for sending multiple transactions including ETH transfers and contract interactions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { sendCalls } from '@wagmi/core/experimental'
import { config } from './config'

const id = await sendCalls(config, {
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      data: '0xdeadbeef',
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
    },
  ]
})

----------------------------------------

TITLE: Conditional Contract Reading with Query Enabled
DESCRIPTION: Example showing how to conditionally enable contract reading based on address availability using the query.enabled option.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/read-from-contract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const { data: balance } = useReadContract({
  ...wagmiContractConfig,
  functionName: 'balanceOf',
  args: [address],
  query: {
    enabled: !!address,
  },
})

----------------------------------------

TITLE: Configuring Batch Settings with createConfig
DESCRIPTION: Demonstrates how to configure batch settings, including multicall options.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  batch: { multicall: true }, 
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Preparing and Sending Transactions with Wagmi
DESCRIPTION: Code example showing how to use the prepareSendTransaction hook to prepare parameters for sending a transaction, followed by using sendTransaction with the prepared config.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_23

LANGUAGE: typescript
CODE:
import { prepareSendTransaction, sendTransaction } from "@wagmi/core";

const config = await prepareSendTransaction({
  request: {
    to: "moxey.eth",
    value: parseEther("1"),
  },
});
const result = await sendTransaction(config);

----------------------------------------

TITLE: Creating Chain Configuration Using defineChain
DESCRIPTION: Shows how to create a chain configuration using Viem's defineChain utility function. Demonstrates basic structure with empty implementation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/create-chain.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineChain } from 'viem'

export const mainnet = defineChain({})

----------------------------------------

TITLE: Configuring Safe Connector with wagmi
DESCRIPTION: Demonstrates how to set up wagmi configuration with Safe connector, including chain setup and HTTP transport configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/safe.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'
import { safe } from 'wagmi/connectors'

export const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [safe()],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Using simulateContract with accessList parameter
DESCRIPTION: Demonstrates how to use the simulateContract function with an accessList parameter for optimized gas usage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  accessList: [{
    address: '0x1',
    storageKeys: ['0x1'],
  }],
})

----------------------------------------

TITLE: Configuring wagmi with MetaMask Connector
DESCRIPTION: Demonstrates how to set up a wagmi configuration with the MetaMask connector, including chain configuration and HTTP transports.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'
import { metaMask } from 'wagmi/connectors'

export const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [metaMask()],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Loading State Implementation
DESCRIPTION: Adding loading state handling during transaction confirmation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWriteContract } from 'wagmi'
import { abi } from './abi'

const { data: hash, isPending, writeContract } = useWriteContract()

function submit(event: Event) {
  const formData = new FormData(e.target as HTMLFormElement)
  const tokenId = formData.get('tokenId') as string
  writeContract({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    abi,
    functionName: 'mint',
    args: [BigInt(tokenId)],
  })
}
</script>

<template>
  <form @submit.prevent="submit">
    <input name="tokenId" placeholder="69420" required />
    <button :disabled="isPending" type="submit">
      <span v-if="isPending">Sending...</span>
      <span v-else>Send</span>
    </button>
    <div v-if="hash">Transaction Hash: {{ hash }}</div>
  </form>
</template>

----------------------------------------

TITLE: Using simulateContract with dataSuffix parameter
DESCRIPTION: Demonstrates how to use the simulateContract function with a dataSuffix parameter for appending additional data to the calldata.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  dataSuffix: '0xdeadbeef',
})

----------------------------------------

TITLE: Replacing watch Property with useBlockNumber and invalidateQueries
DESCRIPTION: Example showing how to replace the removed watch property using useBlockNumber hook with useEffect and queryClient.invalidateQueries to refresh data on block changes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_4

LANGUAGE: ts
CODE:
import { useQueryClient } from '@tanstack/react-query' // [!code ++]
import { useEffect } from 'react' // [!code ++]
import { useBlockNumber, useBalance } from 'wagmi' // [!code ++]

const queryClient = useQueryClient() // [!code ++]
const { data: blockNumber } = useBlockNumber({ watch: true }) // [!code ++]
const { data: balance, queryKey } = useBalance({ // [!code ++]
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  watch: true, // [!code --]
})

useEffect(() => { // [!code ++]
  queryClient.invalidateQueries({ queryKey }) // [!code ++]
}, [blockNumber, queryClient]) // [!code ++]

----------------------------------------

TITLE: Fetching Block Data Query in React
DESCRIPTION: This example shows how to fetch block data using a query client. It demonstrates the use of getBlockQueryOptions to configure the query based on the current chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_8

LANGUAGE: tsx
CODE:
import { getBlockQueryOptions } from 'wagmi'
import { queryClient } from './app'
import { config } from './config'

export async function fetchBlockData() {
  return queryClient.fetchQuery( // [!code hl]
    getBlockQueryOptions(config, { // [!code hl]
      chainId: config.state.chainId, // [!code hl]
    } // [!code hl]
  )) // [!code hl]
}

----------------------------------------

TITLE: Using blockTag Parameter in watchBlocks
DESCRIPTION: Demonstrates how to use the blockTag parameter to watch for new blocks on a specific tag.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { watchBlocks } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlocks(config, {
  blockTag: 'pending',
  onBlock(block) {
    console.log('Block changed!', block)
  },
})
unwatch()

----------------------------------------

TITLE: Using getAccount Function with wagmi Configuration
DESCRIPTION: Demonstrates how to use the getAccount function with a wagmi configuration to retrieve the current account.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getAccount } from '@wagmi/core'
import { config } from './config'

const account = getAccount(config)

----------------------------------------

TITLE: Using Ethers.js Signer Hook in Components
DESCRIPTION: Example of how to use the useEthersSigner hook in React components to get an Ethers.js signer instance that works with Wagmi connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { useEthersSigner } from './ethers'

function example() {
  const signer = useEthersSigner()
  ...
}

----------------------------------------

TITLE: Wagmi Configuration with Plugins
DESCRIPTION: TypeScript configuration file for Wagmi CLI with etherscan and react plugins, including ERC-20 contract setup
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { etherscan, react } from '@wagmi/cli/plugins'
import { erc20Abi } from 'viem'
import { mainnet, sepolia } from 'wagmi/chains'
 
export default defineConfig({
  out: 'src/generated.ts',
  contracts: [
    {
      name: 'erc20',
      abi: erc20Abi,
    },
  ],
  plugins: [
    etherscan({
      apiKey: process.env.ETHERSCAN_API_KEY!,
      chainId: mainnet.id,
      contracts: [
        {
          name: 'EnsRegistry',
          address: {
            [mainnet.id]: '0x314159265dd8dd680622144e6dd1de0b0d0fd2',
            [sepolia.id]: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
          },
        },
      ],
    }),
    react(),
  ],
})

----------------------------------------

TITLE: Configuring Wagmi with Cookie Storage for SSR in Vue
DESCRIPTION: This snippet shows how to set up Wagmi configuration with cookie storage for SSR in Vue applications. It includes enabling SSR, configuring chains, and setting up cookie-based storage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/ssr.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { 
  createConfig, 
  http, 
  cookieStorage, // [!code ++]
  createStorage // [!code ++]
} from '@wagmi/vue'
import { mainnet, sepolia } from '@wagmi/vue/chains'

export const config = createConfig({
  chains: [mainnet, sepolia],
  ssr: true,
  storage: createStorage({  // [!code ++]
    storage: cookieStorage, // [!code ++]
  }),  // [!code ++]
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Migrating Connection Callbacks from useAccount to useAccountEffect in React
DESCRIPTION: This snippet shows how to use the new useAccountEffect hook for connection and disconnection callbacks instead of using the onConnect and onDisconnect callbacks from useAccount.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_12

LANGUAGE: ts
CODE:
import { useAccount } from 'wagmi' // [!code --]
import { useAccountEffect } from 'wagmi' // [!code ++]

useAccount({ // [!code --]
useAccountEffect({ // [!code ++]
  onConnect(data) {
    console.log('connected', data)
  },
  onDisconnect() {
    console.log('disconnected')
  },
}) 

----------------------------------------

TITLE: Importing createConfig from wagmi
DESCRIPTION: Shows how to import the createConfig function from the wagmi package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createConfig } from 'wagmi'

----------------------------------------

TITLE: Smart Contract Write Integration
DESCRIPTION: Implementing contract write functionality using Wagmi's useWriteContract composable with ABI definition.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWriteContract } from 'wagmi'
import { abi } from './abi'

const { data: hash, writeContract } = useWriteContract()

function submit(event: Event) {
  const formData = new FormData(e.target as HTMLFormElement)
  const tokenId = formData.get('tokenId') as string
  writeContract({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    abi,
    functionName: 'mint',
    args: [BigInt(tokenId)],
  })
}
</script>

<template>
  <form @submit.prevent="submit">
    <input name="tokenId" placeholder="69420" required />
    <button type="submit">Mint</button>
    <div v-if="hash">Transaction Hash: {{ hash }}</div>
  </form>
</template>

LANGUAGE: typescript
CODE:
export const abi = [
  {
    name: 'mint',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],
    outputs: [],
  },
] as const

----------------------------------------

TITLE: Adding Loading State to SendTransaction Component
DESCRIPTION: Enhances the SendTransaction component with a loading state indicator while waiting for transaction confirmation from the user's wallet.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { useSendTransaction } from 'wagmi'
import { parseEther } from 'viem'

export function SendTransaction() {
  const {
    data: hash,
    isPending,
    sendTransaction
  } = useSendTransaction()

  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
    sendTransaction({ to, value: parseEther(value) })
  }

  return (
    <form onSubmit={submit}>
      <input name="address" placeholder="0xA0Cf…251e" required />
      <input name="value" placeholder="0.05" required />
      <button
        disabled={isPending}
        type="submit"
      >
        {isPending ? 'Confirming...' : 'Send'}
      </button>
      {hash && <div>Transaction Hash: {hash}</div>}
    </form>
  )
}

----------------------------------------

TITLE: Using signTypedData to Sign EIP-712 Typed Data
DESCRIPTION: Demonstrates how to use the signTypedData function to sign EIP-712 compliant typed data, including defining types, primary type, and message content.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { signTypedData } from '@wagmi/core'
import { config } from './config'

const result = await signTypedData(config, {
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Basic Multicall Import
DESCRIPTION: Shows how to import the multicall function from @wagmi/core
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/multicall.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { multicall } from '@wagmi/core'

----------------------------------------

TITLE: Accessing Query Keys via Vue Composable
DESCRIPTION: Demonstrates how to access the query key from a Wagmi Vue composable within a Vue component with proper reactivity handling.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBalance } from '@wagmi/vue' // [!code hl]

const { data: balance } = useBalance() // [!code hl]
</script>

<template>
  <div>{{ balance }}</div>
</template>

----------------------------------------

TITLE: Converting Viem Client to Ethers v5 Signer
DESCRIPTION: Reference implementation for converting a Viem client to an Ethers.js v5 signer. Creates a Web3Provider and returns a signer instance for the connected account.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { Config, getConnectorClient } from '@wagmi/core'
import { providers } from 'ethers'
import type { Account, Chain, Client, Transport } from 'viem'

export function clientToSigner(client: Client<Transport, Chain, Account>) {
  const { account, chain, transport } = client
  const network = {
    chainId: chain.id,
    name: chain.name,
    ensAddress: chain.contracts?.ensRegistry?.address,
  }
  const provider = new providers.Web3Provider(transport, network)
  const signer = provider.getSigner(account.address)
  return signer
}

/** Action to convert a Viem Client to an ethers.js Signer. */
export async function getEthersSigner(
  config: Config,
  { chainId }: { chainId?: number } = {},
) {
  const client = await getConnectorClient(config, { chainId })
  return clientToSigner(client)
}

----------------------------------------

TITLE: IndexedDB Storage Implementation
DESCRIPTION: Example of implementing storage using IndexedDB via idb-keyval library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { createStorage } from '{{packageName}}'
import { del, get, set } from 'idb-keyval'

const storage = createStorage({
  storage: {
    async getItem(name) {
      return get(name)
    },
    async setItem(name, value) {
      await set(name, value)
    },
    async removeItem(name) {
      await del(name)
    },
  },
})

----------------------------------------

TITLE: useReadContract with Chain Configuration
DESCRIPTION: Example showing how to specify chain ID and custom configuration when using useReadContract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useReadContract } from '@wagmi/vue'
import { mainnet } from 'wagmi/chains'
import { abi } from './abi'
import { config } from './config'

const result = useReadContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'totalSupply',
  chainId: mainnet.id,
  config,
})
</script>

----------------------------------------

TITLE: Basic useBalance Hook Implementation
DESCRIPTION: Basic usage example of useBalance hook to fetch balance for an Ethereum address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useBalance } from 'wagmi'

function App() {
  const result = useBalance({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  })
}

----------------------------------------

TITLE: Contract Reading with Loading and Error States
DESCRIPTION: Enhanced Vue component showing how to handle loading and error states when reading contract data, including proper error message display and loading indicators.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/read-from-contract.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useReadContract } from 'wagmi'

const { 
  data: balance,
  error,
  isPending
} = useReadContract({
  ...wagmiContractConfig,
  functionName: 'balanceOf',
  args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],
})
</script>

<template>
  <div v-if="isPending">Loading...</div>

  <div v-else-if="error">
    Error: {{ (error as BaseError).shortMessage || error.message }}
  </div>

  <div v-else>Balance: {{ balance?.toString() }}</div>
</template>

----------------------------------------

TITLE: Using Advanced Transport Configuration with Fallback
DESCRIPTION: Demonstrates how to set up advanced transport configuration with fallback options.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_13

LANGUAGE: typescript
CODE:
import { createConfig, fallback, http } from 'wagmi' 
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  transports: { 
    [mainnet.id]: fallback([ 
      http('https://...'), 
      http('https://...'), 
    ]), 
    [sepolia.id]: http('https://...'), 
  }, 
})

----------------------------------------

TITLE: Wrapping React App with Wagmi and React Query Providers
DESCRIPTION: Sets up the necessary context providers for Wagmi and React Query to enable reactive state management and in-memory caching for the wallet connection functionality.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
// 1. Import modules
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiProvider } from 'wagmi'
import { config } from './config'

// 2. Set up a React Query client.
const queryClient = new QueryClient()

function App() {
  // 3. Wrap app with Wagmi and React Query context.
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}> 
        {/** ... */} 
      </QueryClientProvider> 
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Updating Network Related Code
DESCRIPTION: Examples showing how to replace deprecated getNetwork and watchNetwork functionality with new methods.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { watchAccount } from '@wagmi/core'
import { config } from './config'

const unwatch = watchAccount(config, {
  onChange(data) {
    const chains = config.chains
    const chain = chains.find(chain => chain.id === data.chainId)
  },
})

----------------------------------------

TITLE: Basic Usage of useDisconnect Hook
DESCRIPTION: Demonstrates basic implementation of the useDisconnect hook in a React component with a disconnect button.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDisconnect.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useDisconnect } from 'wagmi'

function App() {
  const { disconnect } = useDisconnect()

  return (
    <button onClick={() => disconnect()}>
      Disconnect
    </button>
  )
}

----------------------------------------

TITLE: Configuring Wagmi Client (TypeScript)
DESCRIPTION: This snippet shows the configuration for the Wagmi client. It imports necessary components from wagmi and creates a client with specific configurations for chains and connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/error-handling.md#2025-04-14_snippet_1

LANGUAGE: ts
CODE:
import { configureChains, createConfig } from 'wagmi'
import { goerli, mainnet } from 'wagmi/chains'
import { CoinbaseWalletConnector } from 'wagmi/connectors/coinbaseWallet'
import { InjectedConnector } from 'wagmi/connectors/injected'
import { MetaMaskConnector } from 'wagmi/connectors/metaMask'
import { WalletConnectConnector } from 'wagmi/connectors/walletConnect'
import { publicProvider } from 'wagmi/providers/public'

const { chains, publicClient, webSocketPublicClient } = configureChains(
  [mainnet, goerli],
  [publicProvider()],
)

export const config = createConfig({
  autoConnect: true,
  connectors: [
    new MetaMaskConnector({ chains }),
    new CoinbaseWalletConnector({
      chains,
      options: {
        appName: 'wagmi',
      },
    }),
    new WalletConnectConnector({
      chains,
      options: {
        projectId: process.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID,
      },
    }),
    new InjectedConnector({
      chains,
      options: {
        name: 'Injected',
        shimDisconnect: true,
      },
    }),
  ],
  publicClient,
  webSocketPublicClient,
})

----------------------------------------

TITLE: Basic Fetch Plugin Usage
DESCRIPTION: Demonstrates the basic setup of the fetch plugin with contract configuration and request handling for fetching ABIs from Etherscan.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/fetch.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { fetch } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    fetch({
      contracts: [
        {
          name: 'Wagmigotchi',
          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
        },
      ],
      request(contract) {
        if (!contract.address) throw new Error('address is required')
        const address =
          typeof contract.address === 'string'
            ? contract.address
            : Object.values(contract.address)[0]
        return {
          url: `https://api.etherscan.io/api?module=contract&action=getabi&address=${address}`,
        }
      },
    }),
  ],
})

----------------------------------------

TITLE: Verifying Typed Data with Signature in React
DESCRIPTION: This snippet demonstrates how to use the useVerifyTypedData hook to verify a typed data signature. It includes the domain, types, message, and signature parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { domain, types } from './data'
import { useVerifyTypedData } from 'wagmi'

function App() {
  const result = useVerifyTypedData({
    domain,
    types,
    message: {
      from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
      },
      to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
      },
      contents: 'Hello, Bob!',
    },
    primaryType: 'Mail',
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Basic Usage of useEnsAddress in Vue Component
DESCRIPTION: Basic example of using the useEnsAddress composable in a Vue component to fetch an Ethereum address for a normalized ENS name.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAddress } from '@wagmi/vue'
import { normalize } from 'viem/ens'

const result = useEnsAddress({
  name: normalize('wevm.eth'),
})
</script>

----------------------------------------

TITLE: Configuring Legacy Hook Names in Wagmi CLI v2
DESCRIPTION: TypeScript configuration for Wagmi CLI that preserves v1 naming conventions for generated actions and hooks by setting getActionName and getHookName properties to 'legacy'.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { actions, react } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    actions({
      getActionName: 'legacy', // [!code focus]
    }),
    react({
      getHookName: 'legacy', // [!code focus]
    }),
  ],
})

----------------------------------------

TITLE: Updating connector imports and usage
DESCRIPTION: This code block demonstrates how to update the imports and usage of connectors in Wagmi Core v2. It shows the changes for InjectedConnector, CoinbaseWalletConnector, and the new injected connector.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { InjectedConnector } from '@wagmi/core/connectors/injected' // [!code --]
import { CoinbaseWalletConnector } from '@wagmi/core/connectors/coinbaseWallet' // [!code --]
import { coinbaseWallet, injected } from '@wagmi/connectors' // [!code ++]

const connector = new MetaMaskConnector() // [!code --]
const connector = injected({ target: 'metaMask' }) // [!code ++]

----------------------------------------

TITLE: Using useSwitchChain Hook in React Component
DESCRIPTION: Demonstrates how to use the useSwitchChain hook in a React component to render buttons for switching chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchChain.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useSwitchChain } from 'wagmi'

function App() {
  const { chains, switchChain } = useSwitchChain()

  return (
    <div>
      {chains.map((chain) => (
        <button key={chain.id} onClick={() => switchChain({ chainId: chain.id })}>
          {chain.name}
        </button>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Contract Simulation with Custom Block Parameters
DESCRIPTION: Demonstrates contract simulation at a specific block number or block tag. Shows how to query historical or pending state.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { abi } from './abi'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  blockNumber: 17829139n,
  blockTag: 'safe',
})
</script>

----------------------------------------

TITLE: Configuring wagmi with Injected Connector
DESCRIPTION: Demonstrates how to set up a wagmi configuration using the injected connector with mainnet and sepolia chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/injected.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConfig, http } from '{{packageName}}'
import { mainnet, sepolia } from '{{packageName}}/chains'
import { injected } from '{{connectorsPackageName}}'

export const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [injected()],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Prefetching Queries on User Interaction
DESCRIPTION: Shows how to prefetch data when a user hovers or focuses on an element, improving perceived performance.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-14_snippet_7

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConfig, useChainId, useQueryClient } from '@wagmi/vue'
import { getBlockQueryOptions } from '@wagmi/vue/query'

const config = useConfig()
const chainId = useChainId()
const queryClient = useQueryClient()

const prefetch = () => 
  queryClient.prefetchQuery(getBlockQueryOptions(config, { chainId })) 
</script>

<template>
  <a
    @mouseenter="prefetch" 
    @focus="prefetch" 
    href="..."
  >
    Block details
  </a>
</template>

----------------------------------------

TITLE: Using getProof to retrieve account and storage proofs
DESCRIPTION: Demonstrates how to use the getProof function to retrieve account and storage proofs for a specific address and storage keys.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getProof.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getProof } from '@wagmi/core'
import { config } from './config'

await getProof(config, {
  address: '0x4200000000000000000000000000000000000016',
  storageKeys: [
    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
  ],
})

----------------------------------------

TITLE: Using useWatchContractEvent Hook in React Component
DESCRIPTION: Demonstrates how to use the useWatchContractEvent hook in a React component to watch for Transfer events on a specific contract address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchContractEvent.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useWatchContractEvent } from 'wagmi'
import { abi } from './abi'

function App() {
  useWatchContractEvent({
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    abi,
    eventName: 'Transfer',
    onLogs(logs) {
      console.log('New logs!', logs)
    },
  })
}

----------------------------------------

TITLE: Basic Usage of getEnsText
DESCRIPTION: Demonstrates the basic usage of getEnsText function to fetch a text record for an ENS name and key like Twitter handle.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getEnsText } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensText = getEnsText(config, {
  name: normalize('wevm.eth'),
  key: 'com.twitter',
})

----------------------------------------

TITLE: Updating Config Parameter Usage
DESCRIPTION: Example showing how to update code to pass config explicitly to Wagmi actions instead of using the global singleton.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getAccount, readContract } from '@wagmi/core'
import { parseAbi } from 'viem'
import { config } from './config'

const account = getAccount(config)

const balanceOf = readContract(config, {
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  abi: parseAbi(['function balanceOf(address) view returns (uint256)']),
  functionName: 'balanceOf',
  args: ['0xd2135CfB216b74109775236E36d4b433F1DF507B'],
})

----------------------------------------

TITLE: Enabling Missed Blocks Emission in useWatchBlocks
DESCRIPTION: Shows how to enable the emitMissed option in the useWatchBlocks hook to receive missed blocks in the callback.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { useWatchBlocks } from 'wagmi'

function App() {
  useWatchBlocks({
    emitMissed: true,
    onBlock(block) {
      console.log('New block', block.number)
    },
  })
}

----------------------------------------

TITLE: Using useSignTypedData in a Vue Component
DESCRIPTION: Demonstrates how to use the useSignTypedData composable within a Vue component to sign typed data. It includes a button that triggers the signing process with example typed data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignTypedData.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSignTypedData } from '@wagmi/vue'

const { signTypedData } = useSignTypedData()
</script>

<template>
  <button
    @click="signTypedData({
      types: {
        Person: [
          { name: 'name', type: 'string' },
          { name: 'wallet', type: 'address' },
        ],
        Mail: [
          { name: 'from', type: 'Person' },
          { name: 'to', type: 'Person' },
          { name: 'contents', type: 'string' },
        ],
      },
      primaryType: 'Mail',
      message: {
        from: {
          name: 'Cow',
          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
        },
        to: {
          name: 'Bob',
          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
        },
        contents: 'Hello, Bob!',
      },
    })"
  >
    Sign message
  </button>
</template>

----------------------------------------

TITLE: WriteContract with SimulateContract
DESCRIPTION: Example demonstrating how to pair simulateContract with writeContract for transaction validation before execution.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { simulateContract, writeContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const { request } = await simulateContract(config, {
  abi,
  address: '0x6175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
})
const hash = await writeContract(config, request)

----------------------------------------

TITLE: Using Custom Client Function with createConfig
DESCRIPTION: Shows how to provide a custom client function for creating Viem clients.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_14

LANGUAGE: typescript
CODE:
import { createClient, http } from 'viem' 
import { createConfig } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  client({ chain }) { 
    return createClient({ chain, transport: http('https://...') }) 
  }, 
})

----------------------------------------

TITLE: Enabling Headless Mode in MetaMask Connector
DESCRIPTION: Demonstrates how to configure the MetaMask connector in headless mode to disable the built-in modal and allow custom UI implementation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { metaMask } from 'wagmi/connectors'

const connector = metaMask({
  headless: true
})

----------------------------------------

TITLE: Installation Commands for Package Managers
DESCRIPTION: Commands for installing Wagmi Core and its dependencies using different package managers (pnpm, npm, yarn, bun).
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/getting-started.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm add @wagmi/core @wagmi/connectors viem@{{viemVersion}}

LANGUAGE: bash
CODE:
npm install @wagmi/core @wagmi/connectors viem@{{viemVersion}}

LANGUAGE: bash
CODE:
yarn add @wagmi/core @wagmi/connectors viem@{{viemVersion}}

LANGUAGE: bash
CODE:
bun add @wagmi/core @wagmi/connectors viem@{{viemVersion}}

----------------------------------------

TITLE: Defining Smart Contract ABI for NFT Minting
DESCRIPTION: This TypeScript file exports the ABI (Application Binary Interface) for the NFT smart contract. It defines the 'mint' function which takes a tokenId parameter of type uint32 and has no return values.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
export const abi = [
  {
    name: 'mint',
    type: 'function',
    stateMutability: 'nonpayable',
    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],
    outputs: [],
  },
] as const

----------------------------------------

TITLE: Updating App.vue to Include NFT Minting Component
DESCRIPTION: This snippet shows how to integrate the MintNft component into the main App.vue file. It imports the MintNft component and conditionally renders it when a user is connected to their wallet.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useAccount } from '@wagmi/vue';
import Account from './Account.vue';
import Connect from './Connect.vue';
import MintNft from './MintNft.vue'; // [!code ++]

const { isConnected } = useAccount();
</script>

<template>
  <Account v-if="isConnected" />
  <Connect v-else />
  <MintNft v-if="isConnected" /> // [!code ++]
</template>

----------------------------------------

TITLE: Package Manager Installation Commands
DESCRIPTION: Package manager commands for installing Wagmi Core and its dependency Viem using different package managers (pnpm, npm, yarn, bun).
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/installation.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
pnpm add @wagmi/core viem@{{viemVersion}}

LANGUAGE: bash
CODE:
npm install @wagmi/core viem@{{viemVersion}}

LANGUAGE: bash
CODE:
yarn add @wagmi/core viem@{{viemVersion}}

LANGUAGE: bash
CODE:
bun add @wagmi/core viem@{{viemVersion}}

----------------------------------------

TITLE: Using usePublicClient Hook in React Component
DESCRIPTION: Demonstrates how to use the usePublicClient hook within a React component to obtain a Viem PublicClient instance.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePublicClient.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { usePublicClient } from 'wagmi'

function App() {
  const client = usePublicClient()
}

----------------------------------------

TITLE: Basic Contract Deployment Implementation
DESCRIPTION: Demonstrates basic usage of useDeployContract hook to deploy a contract with bytecode but without constructor arguments.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useDeployContract } from 'wagmi'
import { parseEther } from 'viem'
import { wagmiAbi } from './abi'

function App() {
  const { deployContract } = useDeployContract()

  return (
    <button
      onClick={() =>
        deployContract({
          abi: wagmiAbi,
          bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
        })
      }
    >
      Deploy Contract
    </button>
  )
}

----------------------------------------

TITLE: Configuring VitePress Homepage for Wagmi Documentation
DESCRIPTION: YAML configuration for the Wagmi documentation homepage using VitePress. Defines the layout, hero section, and key features of the Wagmi library including React hooks, TypeScript support, wallet connectivity, and caching capabilities.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/index.md#2025-04-14_snippet_0

LANGUAGE: yaml
CODE:
layout: home

description: Type Safe, Extensible, and Modular by design. Build high-performance blockchain frontends.
title: 'Wagmi | Reactivity for Ethereum apps'
titleTemplate: false

hero:
  name: Wagmi
  text: Reactivity for Ethereum apps
  tagline: Type Safe, Extensible, and Modular by design. Build high-performance blockchain frontends.
  actions:
    - theme: brand
      text: Get Started
      link: /react/getting-started
    - theme: alt
      text: Why Wagmi
      link: /react/why
    - theme: alt
      text: View on GitHub
      link: https://github.com/wevm/wagmi
  image:
    src: /logo-dark.svg
    alt: Wagmi Logo

features:
  - icon: 🚀
    title: 20+ React Hooks
    details: React Hooks for accounts, wallets, contracts, transactions, signing, ENS, and more.
    link: /react/api/hooks
    linkText: See all hooks
  - icon: 🦄
    title: TypeScript Ready
    details: Infer types from ABIs and EIP-712 Typed Data and autocomplete your way to productivity.
    link: /react/typescript
    linkText: Learn about TypeScript support
  - icon: 💼
    title: Connect Wallet
    details: Official connectors for MetaMask, EIP-6963, WalletConnect, Coinbase Wallet, and more.
    link: /react/api/connectors
    linkText: See all connectors
  - icon: 👟
    title: Caching. Deduplication. Persistence.
    details: Built-in caching, deduplication, persistence powered by TanStack Query.
    link: /react/guides/tanstack-query
    linkText: How to use TanStack Query
  - icon: 🌳
    title: Modular By Design
    details: Don't use React or Vue? Use VanillaJS or build an adapter for your favorite framework.
    link: /core/getting-started
    linkText: Learn about Wagmi Core
  - icon: ✌️
    title: Built on Viem
    details: The modern, low-level TypeScript interface for Ethereum that performs blockchain operations.
    link: https://viem.sh
    linkText: Check out Viem

----------------------------------------

TITLE: Configuring Wagmi Settings
DESCRIPTION: Sets up the Wagmi configuration with chain definitions and wallet connectors including injected wallets, WalletConnect, MetaMask, and Safe wallets. Configures HTTP transport for Mainnet and Base chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { http, createConfig } from '@wagmi/vue'
import { base, mainnet, optimism } from '@wagmi/vue/chains'
import { injected, metaMask, safe, walletConnect } from '@wagmi/vue/connectors'

const projectId = '<WALLETCONNECT_PROJECT_ID>'

export const config = createConfig({
  chains: [mainnet, base],
  connectors: [
    injected(),
    walletConnect({ projectId }),
    metaMask(),
    safe(),
  ],
  transports: {
    [mainnet.id]: http(),
    [base.id]: http(),
  },
})

----------------------------------------

TITLE: Contract Read with Account Parameter
DESCRIPTION: Shows how to read contract data while specifying a particular account address for the call.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { readContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await readContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'balanceOf',
  args: ['0xd2135CfB216b74109775236E36d4b433F1DF507B'],
  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
})

----------------------------------------

TITLE: Simulating Contract with maxFeePerGas in TypeScript
DESCRIPTION: This snippet demonstrates how to use the simulateContract function with the maxFeePerGas parameter. It simulates a transferFrom function call on an ERC20 token contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  maxFeePerGas: parseGwei('20'),
})

----------------------------------------

TITLE: Basic Usage of useChains in Vue Component
DESCRIPTION: Demonstrates basic usage of the useChains composable in a Vue component setup script.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChains.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useChains } from '@wagmi/vue'

const chains = useChains()
</script>

----------------------------------------

TITLE: Basic Usage of useBlockNumber Hook
DESCRIPTION: Demonstrates basic implementation of useBlockNumber hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useBlockNumber } from 'wagmi'

function App() {
  const result = useBlockNumber()
}

----------------------------------------

TITLE: Using useTransaction Hook in React Component
DESCRIPTION: Demonstrates how to use the useTransaction hook in a React component to fetch transaction data by hash.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useTransaction } from 'wagmi'

function App() {
  const result = useTransaction({
    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
  })
}

----------------------------------------

TITLE: Using a Specific Connector with writeContracts
DESCRIPTION: Demonstrates how to use a specific connector when calling the writeContracts function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getConnections } from '@wagmi/core'

const connections = getConnections(config)
const id = await writeContracts(config, {
  contracts: [
    // ... contract calls
  ],
  connector: connections[0]?.connector,
})

----------------------------------------

TITLE: Contract Deployment with Constructor Arguments
DESCRIPTION: Shows how to deploy a contract with constructor arguments using deployContract function
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/deployContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { deployContract } from '@wagmi/core'
import { wagmiAbi } from './abi'
import { config } from './config'

const result = await deployContract(config, {
  abi: wagmiAbi,
  args: [69420],
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...'
})

----------------------------------------

TITLE: Accessing Chain List from Config in Wagmi v2
DESCRIPTION: This example demonstrates how to access the list of chains in Wagmi v2 using useConfig instead of the removed useNetwork hook's chains property.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_11

LANGUAGE: ts
CODE:
import { useNetwork } from 'wagmi' // [!code --]
import { useConfig } from 'wagmi' // [!code ++]

const { chains } = useNetwork() // [!code --]
const { chains } = useConfig() // [!code ++]

----------------------------------------

TITLE: Updating MetaMaskConnector to injected Connector in Wagmi v2
DESCRIPTION: This example shows how to migrate from the removed MetaMaskConnector to the injected connector with the target parameter set to 'metaMask' to achieve the same behavior.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_13

LANGUAGE: ts
CODE:
import { MetaMaskConnector } from 'wagmi/connectors/metaMask' // [!code --]
import { injected } from 'wagmi/connectors' // [!code ++]

const connector = new MetaMaskConnector() // [!code --]
const connector = injected({ target: 'metaMask' }) // [!code ++]

----------------------------------------

TITLE: Watching Block Number Changes with Wagmi Core Action in React
DESCRIPTION: This snippet demonstrates how to use the 'watchBlockNumber' action from Wagmi Core in a React component. It uses the useConfig hook to get the Wagmi configuration and sets up an effect to watch for block number changes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/actions.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useConfig } from 'wagmi'
import { watchBlockNumber } from 'wagmi/actions'
import { useEffect } from 'react'

function App() {
  const config = useConfig()

  useEffect(() => {
    return watchBlockNumber(config, {
      onBlockNumber(blockNumber) {
        console.log('Block number changed!', blockNumber)
      },
    })
  }, [])
}

----------------------------------------

TITLE: Using usePrepareTransactionRequest in a React Component
DESCRIPTION: Demonstrates how to use the usePrepareTransactionRequest hook in a React component to prepare a transaction request.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther } from 'viem'

function App() {
  const result = usePrepareTransactionRequest({
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
  })
}

----------------------------------------

TITLE: Adding Wagmi Plugin to Vue App
DESCRIPTION: Shows how to add the WagmiPlugin to a Vue app instance and pass the configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { WagmiPlugin } from '@wagmi/vue'
import { createApp } from 'vue'
import { config } from './config'
import App from './App.vue'

createApp(App)
  .use(WagmiPlugin, { config })
  .mount('#app')

----------------------------------------

TITLE: Updating ABI imports
DESCRIPTION: This snippet shows how to update the imports for ABIs in Wagmi Core v2. ABIs are now imported from Viem instead of Wagmi.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { erc20ABI } from '@wagmi/core' // [!code --]
import { erc20Abi } from 'viem' // [!code ++]

----------------------------------------

TITLE: Basic ENS Resolver Usage
DESCRIPTION: Example showing basic usage of useEnsResolver hook with name normalization.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useEnsResolver } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsResolver({
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Enabling Batch JSON-RPC in HTTP Transport
DESCRIPTION: Shows how to enable Batch JSON-RPC in the HTTP Transport, which allows multiple JSON-RPC requests to be sent in a single HTTP request.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const transport = http('https://foo-bar-baz.quiknode.pro/...', {
  batch: true // [!code hl]
})

----------------------------------------

TITLE: Using watchAccount to subscribe to account changes
DESCRIPTION: Demonstrates how to use the watchAccount function to subscribe to account changes and log them to the console. It also shows how to unsubscribe from the watcher.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { watchAccount } from '@wagmi/core'
import { config } from './config'

const unwatch = watchAccount(config, {
  onChange(data) {
    console.log('Account changed!', data)
  },
})
unwatch()

----------------------------------------

TITLE: Basic Contract Deployment
DESCRIPTION: Demonstrates basic contract deployment using deployContract function with ABI and bytecode
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/deployContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { deployContract } from '@wagmi/core'
import { wagmiAbi } from './abi'
import { config } from './config'

const result = await deployContract(config, {
  abi: wagmiAbi,
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...'
})

----------------------------------------

TITLE: Using useEnsText with Custom Config
DESCRIPTION: This example demonstrates how to use the useEnsText hook with a custom configuration instead of the default provided by WagmiProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useEnsText } from 'wagmi'
import { normalize } from 'viem/ens'
import { config } from './config'

function App() {
  const result = useEnsText({
    config,
    name: normalize('wevm.eth'),
    key: 'com.twitter',
  })
}

----------------------------------------

TITLE: Creating Wagmi Configuration in TypeScript
DESCRIPTION: Demonstrates how to create and export a Wagmi configuration using createConfig, setting up chains and connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createConfig, http } from '@wagmi/core'
import { mainnet, sepolia } from '@wagmi/core/chains'
import { injected } from '@wagmi/connectors'

export const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [injected()],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Basic watchConnections Usage
DESCRIPTION: Demonstrates how to implement a connection watcher with an onChange handler that logs connection changes. Includes cleanup function usage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnections.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { watchConnections } from '@wagmi/core'
import { config } from './config'

const unwatch = watchConnections(config, {
  onChange(data) {
    console.log('Connections changed!', data)
  },
})
unwatch()

----------------------------------------

TITLE: Using simulateContract to simulate a contract interaction
DESCRIPTION: Demonstrates how to use the simulateContract function to simulate a contract interaction, including specifying the ABI, contract address, function name, and arguments.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
})

----------------------------------------

TITLE: Using useWatchBlockNumber in Vue.js Component
DESCRIPTION: Demonstrates how to use the useWatchBlockNumber composable in a Vue.js component setup. It watches for block number changes and logs them to the console.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchBlockNumber.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWatchBlockNumber } from '@wagmi/vue'

useWatchBlockNumber({
  onBlockNumber(blockNumber) {
    console.log('Block number changed!', blockNumber)
  },
})
</script>

----------------------------------------

TITLE: Disconnecting a Specific Connector
DESCRIPTION: Demonstrates how to disconnect a specific connector by first retrieving the active connector using getAccount and then passing it to the disconnect function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/disconnect.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { disconnect, getAccount } from '@wagmi/core'
import { config } from './config'

const { connector } = getAccount(config)
const result = await disconnect(config, {
  connector, // [!code focus]
})

----------------------------------------

TITLE: Configuring Plugins in Wagmi CLI (TypeScript)
DESCRIPTION: This snippet shows how to configure plugins in Wagmi CLI. It includes examples of using the 'etherscan' plugin for fetching contract data and the 'react' plugin for generating React hooks.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/options.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { etherscan, react } from '@wagmi/cli/plugins'

export default {
  out: 'src/generated.js',
  plugins: [
    etherscan({
      apiKey: process.env.ETHERSCAN_API_KEY,
      chainId: 5,
      contracts: [
        {
          name: 'EnsRegistry',
          address: {
            1: '0x314159265dd8dbb310642f98f50c066173c1259b',
            5: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
          },
        },
      ],
    }),
    react(),
  ],
}

----------------------------------------

TITLE: Using a Specific Connector for Signing Typed Data
DESCRIPTION: Demonstrates how to use a specific connector when signing typed data with the signTypedData function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getAccount, signTypedData } from '@wagmi/core'
import { config } from './config'
import { types } from './typedData'

const { connector } = getAccount(config)
const result = await signTypedData(config, {
  connector,
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Using WagmiProvider with Config Parameter
DESCRIPTION: Illustrates how to use the WagmiProvider component with the required config parameter, which injects the configuration into the context.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { WagmiProvider } from 'wagmi'
import { config } from './config' 

function App() {
  return (
    <WagmiProvider
      config={config} // [!code focus]
    >
      {/** ... */}
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Using watchPendingTransactions to Monitor Pending Transactions
DESCRIPTION: Shows how to use the watchPendingTransactions function to monitor pending transactions and log them to the console. It includes the configuration import and demonstrates the basic usage of the function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { watchPendingTransactions } from '@wagmi/core'
import { config } from './config'

const unwatch = watchPendingTransactions(config, {
  onTransactions(transactions) {
    console.log('New transactions!', transactions)
  },
})

----------------------------------------

TITLE: Handling Transaction Errors in Vue Component
DESCRIPTION: This snippet shows how to handle and display transaction errors in the SendTransaction component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
  import { 
    useSendTransaction,
    useWaitForTransactionReceipt,
  } from 'wagmi'
  import { parseEther } from 'viem'

  const { 
    data: hash, 
    error,
    isPending,
    sendTransaction 
  } = useSendTransaction()

  function submit(event: Event) {
    const formData = new FormData(event.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
    sendTransaction({ to, value: parseEther(value) })
  }

  const { isLoading: isConfirming, isSuccess: isConfirmed } = 
    useWaitForTransactionReceipt({ 
      hash, 
    }) 
</script>

<template>
  <form @submit.prevent="submit">
    <input name="address" placeholder="0xA0Cf…251e" required />
    <input name="value" placeholder="0.05" required />
    <button :disabled="isPending" type="submit">
      <span v-if="isPending">Sending...</span>
      <span v-else>Send</span>
    </button>
    <div v-if="hash">Transaction Hash: {{ hash }}</div>
    <div v-if="isConfirming">Waiting for confirmation...</div> 
    <div v-if="isConfirmed">Transaction Confirmed!</div> 
    <div v-if="error">
      Error: {{ (error as BaseError).shortMessage || error.message }}
    </div>
  </form>
</template>

----------------------------------------

TITLE: Basic Usage of Sourcify Plugin in wagmi Configuration
DESCRIPTION: Demonstrates how to configure and use the Sourcify plugin in a wagmi CLI configuration file. This example shows defining a contract with a name and address for ABI fetching.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { sourcify } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    sourcify({
      contracts: [
        {
          name: 'deposit',
          address: '0x00000000219ab540356cbb839cbe05303d7705fa',
        },
      ],
    }),
  ],
})

----------------------------------------

TITLE: Installing Wagmi CLI with Package Managers
DESCRIPTION: Commands to install Wagmi CLI using different package managers (pnpm, npm, yarn, bun)
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm add -D @wagmi/cli

LANGUAGE: bash
CODE:
npm install --save-dev @wagmi/cli

LANGUAGE: bash
CODE:
yarn add -D @wagmi/cli

LANGUAGE: bash
CODE:
bun add -D @wagmi/cli

----------------------------------------

TITLE: Implementing Private Key & Mnemonic Accounts with Wagmi
DESCRIPTION: Demonstrates how to use Viem's Private Key & Mnemonic Accounts within the Wagmi framework by passing account information explicitly to actions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/viem.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { http, createConfig, sendTransaction } from '@wagmi/core' 
import { base, mainnet, optimism, zora } from '@wagmi/core/chains' 
import { parseEther } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'

export const config = createConfig({ 
  chains: [base, mainnet, optimism, zora], 
  transports: { 
    [base.id]: http(), 
    [mainnet.id]: http(), 
    [optimism.id]: http(), 
    [zora.id]: http(), 
  }, 
}) 

const account = privateKeyToAccount('0x...')

const hash = await sendTransaction({ 
  account,
  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  value: parseEther('0.001')
})

----------------------------------------

TITLE: SendTransaction with Specific Account
DESCRIPTION: Demonstrates how to specify a particular account when using the sendTransaction function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Conditional Wagmi Configuration
DESCRIPTION: Creating a conditional configuration that changes based on the environment by exporting a function instead of an object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-14_snippet_4

LANGUAGE: javascript
CODE:
export default defineConfig(() => {
  if (process.env.NODE_ENV === 'dev') {
    return {
      // dev specific config
    }
  } else {
    return {
      // production specific config
    }
  }
})

----------------------------------------

TITLE: Configuring TanStack Query with Async Storage Persistence for Wagmi
DESCRIPTION: Implementation of TanStack Query with Wagmi using asynchronous storage persistence. This setup enables query data to persist in AsyncStorage, typically used in React Native applications.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
// 1. Import modules.
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createAsyncStoragePersister } from '@tanstack/query-async-storage-persister'
import { QueryClient } from '@tanstack/react-query'
import { PersistQueryClientProvider } from '@tanstack/react-query-persist-client'
import { WagmiProvider, deserialize, serialize } from 'wagmi'

// 2. Create a new Query Client with a default `gcTime`.
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      gcTime: 1_000 * 60 * 60 * 24, // 24 hours
    },
  },
})

// 3. Set up the persister.
const persister = createAsyncStoragePersister({
  serialize,
  storage: AsyncStorage,
  deserialize,
})

function App() {
  return (
    <WagmiProvider config={config}>
      {/* 4. Wrap app in PersistQueryClientProvider */}
      <PersistQueryClientProvider
        client={queryClient}
        persistOptions={{ persister }}
      >
        {/* ... */}
      </PersistQueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Updating WalletConnect connector usage
DESCRIPTION: This snippet shows how to update the usage of the WalletConnect connector in Wagmi Core v2. The connector is now a function instead of a class.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect' // [!code --]
import { walletConnect } from '@wagmi/connectors' // [!code ++]

const connector = new WalletConnectConnector({ // [!code --]
const connector = walletConnect({ // [!code ++]
  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
})

----------------------------------------

TITLE: Using useCallsStatus Hook in React Component
DESCRIPTION: This example demonstrates how to use the useCallsStatus hook in a React component to fetch the status of a call batch.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCallsStatus.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useCallsStatus } from 'wagmi/experimental'

function App() {
  const result = useCallsStatus({
    id: '0x...', // [!code focus]
  })
}

----------------------------------------

TITLE: Migrating from suspense Property to useSuspenseQuery
DESCRIPTION: Example showing how to migrate from using the removed suspense property to using TanStack Query's useSuspenseQuery with the getBalanceQueryOptions function from wagmi/query.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_7

LANGUAGE: ts
CODE:
import { useSuspenseQuery } from '@tanstack/react-query' // [!code ++]
import { useConfig } from 'wagmi' // [!code ++]
import { getBalanceQueryOptions } from 'wagmi/query' // [!code ++]
import { useBalance } from 'wagmi' // [!code --]

const config = useConfig() // [!code ++]
const options = getBalanceQueryOptions(config, { address: '0x…' }) // [!code ++]
const result = useSuspenseQuery(options) // [!code ++]
const result = useBalance({ // [!code --]
  address: '0x…', // [!code --]
  suspense: true, // [!code --]
}) // [!code --]

----------------------------------------

TITLE: Configuring TypeScript Compiler Options for Wagmi
DESCRIPTION: Basic tsconfig.json setup required for Wagmi with strict mode enabled for type safety.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/typescript.md#2025-04-14_snippet_0

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strict": true
  }
}

----------------------------------------

TITLE: Setting up TanStack Query with Wagmi in Vue
DESCRIPTION: Demonstrates how to set up TanStack Query alongside Wagmi in a Vue application.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { QueryClient, VueQueryPlugin } from '@tanstack/vue-query'
import { WagmiPlugin } from '@wagmi/vue'
import { createApp } from 'vue'
import { config } from './config'
import App from './App.vue'

const queryClient = new QueryClient()

createApp(App)
  .use(WagmiPlugin, { config })
  .use(VueQueryPlugin, { queryClient })
  .mount('#app')

----------------------------------------

TITLE: Basic useAccountEffect Implementation
DESCRIPTION: Example showing basic usage of useAccountEffect hook with connect and disconnect handlers
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccountEffect.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useAccountEffect } from 'wagmi'

function App() {
  useAccountEffect({
    onConnect(data) {
      console.log('Connected!', data)
    },
    onDisconnect() {
      console.log('Disconnected!')
    },
  })
}

----------------------------------------

TITLE: Using Generated React Hooks
DESCRIPTION: Example of using generated React hooks for ERC-20 contract interactions
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useReadErc20, useReadErc20BalanceOf } from './generated'

// Use the generated ERC-20 read hook
const { data } = useReadErc20({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  functionName: 'balanceOf',
  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],
})

// Use the generated ERC-20 "balanceOf" hook
const { data } = useReadErc20BalanceOf({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],
})

----------------------------------------

TITLE: Handling Errors in useWatchBlocks Hook
DESCRIPTION: Shows how to handle errors that may occur during block watching by providing an onError callback.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { useWatchBlocks } from 'wagmi'

function App() {
  useWatchBlocks({
    onBlock(block) { 
      console.log('New block', block.number) 
    }, 
    onError(error) {
      console.error('Block error', error)
    },
  })
}

----------------------------------------

TITLE: Specifying Block Number for Contract Call
DESCRIPTION: This example demonstrates how to specify a block number when calling a contract function using useReadContract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContract.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
    blockNumber: 17829139n,
  })
}

----------------------------------------

TITLE: Using Chain-Specific Properties in Contract Simulation
DESCRIPTION: Demonstrates how to use chain-specific properties, such as Celo's feeCurrency, in a contract simulation. It shows how to narrow parameters to a specific chain for better type inference.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/chain-properties.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { useSimulateContract } from '@wagmi/vue'
import { celo } from '@wagmi/vue/chains'

const result = useSimulateContract({
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
  chainId: celo.id,
  feeCurrency: '0x…',
  // ^? (property) feeCurrency?: `0x${string}` | undefined
})

----------------------------------------

TITLE: SendTransaction with Max Fee Per Gas
DESCRIPTION: Demonstrates how to set the maximum fee per gas for an EIP-1559 transaction using the sendTransaction function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther, parseGwei } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  maxFeePerGas: parseGwei('20'),
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: watchAsset with Connector Example
DESCRIPTION: Example showing how to use watchAsset with a specific connector instance.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getAccount, watchAsset } from '@wagmi/core'
import { config } from './config'

const { connector } = getAccount(config)
const result = await watchAsset(config, {
  connector,
  options: {
    address: '0x0000000000000000000000000000000000000000',
    symbol: 'WAGMI',
    decimals: 18,
  },
  type: 'ERC20',
})

----------------------------------------

TITLE: Using disconnect Action to Disconnect All Connections
DESCRIPTION: Shows how to use the disconnect action to disconnect all active connections using a wagmi configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/disconnect.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { disconnect } from '@wagmi/core'
import { config } from './config'

await disconnect(config)

----------------------------------------

TITLE: Using simulateContract with connector parameter
DESCRIPTION: Shows how to use the simulateContract function with a specific connector for the simulation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { getAccount, simulateContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const { connector } = getAccount(config)
const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  connector,
})

----------------------------------------

TITLE: Wagmi Config with JSDoc Type Hints
DESCRIPTION: Using JSDoc annotations to provide TypeScript intellisense for a JavaScript configuration file.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-14_snippet_2

LANGUAGE: javascript
CODE:
/** @type {import('@wagmi/cli').Config} */
export default {
  // ...
}

----------------------------------------

TITLE: Defining Types for EIP-712 Typed Data
DESCRIPTION: Demonstrates how to define types for EIP-712 typed data when using the signTypedData function, which enables TypeScript to infer correct types for message and primaryType.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { signTypedData } from '@wagmi/core'
import { config } from './config'

const result = await signTypedData(config, {
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Specifying Transaction Type
DESCRIPTION: Example showing how to specify the transaction type (legacy, eip1559, or eip2930) when writing a contract transaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { writeContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await writeContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  type: 'eip1559',
})

----------------------------------------

TITLE: Importing useConnect in Vue
DESCRIPTION: Shows how to import the useConnect composable from the @wagmi/vue package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useConnect } from '@wagmi/vue'

----------------------------------------

TITLE: Basic Usage of coinbaseWallet with wagmi Configuration
DESCRIPTION: Demonstrates how to set up the wagmi configuration with the coinbaseWallet connector, including chain configuration and HTTP transport.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'
import { coinbaseWallet } from 'wagmi/connectors' // [!code hl]

export const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [coinbaseWallet()], // [!code hl]
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Normalizing ENS names manually
DESCRIPTION: This snippet shows how to manually normalize ENS names before passing them to Wagmi Core v2 actions. It uses Viem's normalize function for UTS-46 normalization.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { getEnsAddress } from '@wagmi/core'
import { normalize } from 'viem' // [!code ++]
import { config } from './config'

const result = await getEnsAddress(config, {
  name: 'wevm.eth', // [!code --]
  name: normalize('wevm.eth'), // [!code ++]
})

----------------------------------------

TITLE: Checking Disconnected Status in TypeScript
DESCRIPTION: Shows how to use the 'status' property to check for a disconnected state, guaranteeing that properties like 'address' are undefined when the account is not connected.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/getAccount-return-type.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
if (account.status === 'disconnected') {
  account
  // ^?
}

----------------------------------------

TITLE: Implementing Declaration Merging with Wagmi Config
DESCRIPTION: Example of using declaration merging to register a Wagmi config globally with TypeScript for enhanced type inference.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/typescript.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

declare module 'wagmi' {
  interface Register {
    config: typeof config
  }
}

export const config = createConfig({
  chains: [mainnet, sepolia],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Accessing and Using Connectors with useDisconnect
DESCRIPTION: Example of accessing the connected connectors and using them to create a list of disconnect buttons.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useDisconnect.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useDisconnect } from '@wagmi/vue'
import { mainnet } from 'wagmi/chains'

const { connectors, disconnect } = useDisconnect()
</script>

<template>
  <div>
    <button v-for="connector in connectors" :key="connector.id" @click="disconnect({ connector })">
      {{ connector.name }}
    </button>
  </div>
</template>

----------------------------------------

TITLE: Using onTransactions Callback with useWatchPendingTransactions
DESCRIPTION: Demonstrates the required onTransactions callback that gets invoked when new pending transactions are detected.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import { useWatchPendingTransactions } from 'wagmi'

function App() {
  useWatchPendingTransactions({
    onTransactions(transactions) {
      console.log('New transactions!', transactions)
    },
  })
}

----------------------------------------

TITLE: Using usePrepareTransactionRequest with Max Fee Per Gas
DESCRIPTION: Demonstrates how to use the usePrepareTransactionRequest hook with a specified max fee per gas for EIP-1559 transactions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther, parseGwei } from 'viem'

function App() {
  const result = usePrepareTransactionRequest({
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    maxFeePerGas: parseGwei('20'),
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
  })
}

----------------------------------------

TITLE: Using WagmiProvider in a React Application
DESCRIPTION: Demonstrates how to use the WagmiProvider component to wrap a React application, providing it with the Wagmi configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { WagmiProvider } from 'wagmi'
import { config } from './config' 

function App() {
  return (
    <WagmiProvider config={config}> 
      {/** ... */}
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Configuring fallback Transport with multiple HTTP endpoints
DESCRIPTION: Demonstrates how to set up a wagmi configuration using the fallback Transport with multiple HTTP provider endpoints. If the first endpoint fails, the request will fall back to subsequent endpoints in the array.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/fallback.md#2025-04-14_snippet_1

LANGUAGE: ts
CODE:
import { 
  createConfig, 
  fallback, // [!code hl]
  http,
} from '{{packageName}}'
import { mainnet } from '{{packageName}}/chains'

export const config = createConfig({
  chains: [mainnet],
  connectors: [injected()],
  transports: {
    [mainnet.id]: fallback([ // [!code hl]
      http('https://foo-bar-baz.quiknode.pro/...'), // [!code hl]
      http('https://mainnet.infura.io/v3/...'), // [!code hl]
    ]) // [!code hl]
  },
})

----------------------------------------

TITLE: Simulating Contract with maxPriorityFeePerGas in TypeScript
DESCRIPTION: This example shows how to use the simulateContract function with both maxFeePerGas and maxPriorityFeePerGas parameters. It simulates a transferFrom function call on an ERC20 token contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_13

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
})

----------------------------------------

TITLE: Replacing configureChains with Native Multichain Support
DESCRIPTION: Wagmi v2 removes the configureChains function in favor of direct multichain support through the chains parameter and transports configuration in createConfig.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_17

LANGUAGE: typescript
CODE:
import { configureChains, createConfig } from 'wagmi' // [!code --]
import { http, createConfig } from 'wagmi' // [!code ++]
import { mainnet, sepolia } from 'wagmi/chains'

const { chains, publicClient } = configureChains( // [!code --]
  [mainnet, sepolia], // [!code --]
  [publicProvider(), publicProvider()], // [!code --]
) // [!code --]

export const config = createConfig({
  publicClient, // [!code --]
  chains: [mainnet, sepolia], // [!code ++]
  transports: { // [!code ++]
    [mainnet.id]: http(), // [!code ++]
    [sepolia.id]: http(), // [!code ++]
  }, // [!code ++]
})

----------------------------------------

TITLE: Invalidating Queries After User Interaction
DESCRIPTION: Example of invalidating a balance query after a user interaction, which marks the data as stale and triggers a refetch.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBalance } from '@wagmi/vue'

// 1. Extract `queryKey` from the useBalance Hook. // [!code hl]
const { queryKey } = useBalance() // [!code hl]
</script>

<template>
  // 2. Add a button that invalidates the balance query. // [!code hl]
  <button @click="queryClient.invalidateQueries({ queryKey })"> // [!code hl]
    Invalidate // [!code hl]
  </button> // [!code hl]
</template>

----------------------------------------

TITLE: Contract Deployment with Custom Connector
DESCRIPTION: Shows contract deployment using a specific connector instance
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/deployContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getAccount, deployContract } from '@wagmi/core'
import { wagmiAbi } from './abi'
import { config } from './config'

const { connector } = getAccount(config)
const result = await deployContract(config, {
  abi: wagmiAbi,
  args: [69420],
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
  connector
})

----------------------------------------

TITLE: Configuring useWatchContractEvent with Additional Options
DESCRIPTION: Shows how to use the useWatchContractEvent hook with additional configuration options such as batching, chainId, and error handling.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchContractEvent.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useWatchContractEvent } from 'wagmi'
import { abi } from './abi'
import { config } from './config'

function App() {
  useWatchContractEvent({
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    abi,
    config,
    eventName: 'Transfer',
    onLogs(logs) {
      console.log('New logs!', logs)
    },
    onError(error) {
      console.log('Error', error)
    },
    batch: false,
    chainId: 1,
    poll: true,
    pollingInterval: 1_000,
    strict: true,
    syncConnectedChain: true
  })
}

----------------------------------------

TITLE: Using useSimulateContract Hook in React Component
DESCRIPTION: Demonstrates how to use the useSimulateContract hook in a React component to simulate a contract interaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
  })
}

----------------------------------------

TITLE: Basic WalletConnect Configuration
DESCRIPTION: Example of creating a wagmi configuration with WalletConnect connector, including chain setup and HTTP transport
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConfig, http } from '{{packageName}}'
import { mainnet, sepolia } from '{{packageName}}/chains'
import { walletConnect } from '{{connectorsPackageName}}'

export const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [
    walletConnect({
      projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
    }),
  ],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Rendering Available Connectors
DESCRIPTION: Example showing how to render a list of available connectors using useConnect.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnect } from '@wagmi/vue'

const { connect, connectors } = useConnect()
</script>

<template>
  <div>
    <button v-for="connector in connectors" :key="connector.id" @click="connect({ connector })">
      {{ connector.name }}
    </button>
  </div>
</template>

----------------------------------------

TITLE: Using useToken Hook with Custom Config in React
DESCRIPTION: This example demonstrates how to use the useToken hook with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useToken } from 'wagmi'
import { config } from './config'

function App() {
  const result = useToken({
    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
    config,
  })
}

----------------------------------------

TITLE: Setting Up Cookie Storage in Wagmi Configuration
DESCRIPTION: This code shows how to set up cookie storage in the Wagmi configuration for persisting data between server and client.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ssr.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { 
  createConfig, 
  http, 
  cookieStorage,
  createStorage
} from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

export function getConfig() {
  return createConfig({
    chains: [mainnet, sepolia],
    ssr: true,
    storage: createStorage({
      storage: cookieStorage,
    }),
    transports: {
      [mainnet.id]: http(),
      [sepolia.id]: http(),
    },
  })
}

----------------------------------------

TITLE: useReadContract with Custom Account
DESCRIPTION: Example demonstrating useReadContract with a specific account address for calling balanceOf function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useReadContract } from '@wagmi/vue'
import { abi } from './abi'

const result = useReadContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'balanceOf',
  args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],
  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
})
</script>

----------------------------------------

TITLE: Using useConfig Hook in React Component
DESCRIPTION: This example demonstrates how to use the useConfig hook within a React component to access the Config object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConfig.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useConfig } from 'wagmi'

function App() {
  const config = useConfig()
}

----------------------------------------

TITLE: Basic ENS Avatar Usage in Vue
DESCRIPTION: Example showing basic usage of useEnsAvatar with ENS name normalization.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAvatar } from '@wagmi/vue'
import { normalize } from 'viem/ens'

const result = useEnsAvatar({
  name: normalize('wevm.eth'),
})
</script>

----------------------------------------

TITLE: Using useSendTransaction in Vue Component
DESCRIPTION: Example showing how to implement the useSendTransaction composable in a Vue component with a button that triggers a transaction when clicked.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSendTransaction.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSendTransaction } from '@wagmi/vue'
import { parseEther } from 'viem'

const { sendTransaction } = useSendTransaction()
</script>

<template>
  <button
    @click="sendTransaction({
      to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      value: parseEther('0.01')
    })"
  >
    Send transaction
  </button>
</template>

----------------------------------------

TITLE: Installing Wagmi and Dependencies with Package Managers
DESCRIPTION: These code snippets demonstrate how to install Wagmi and its dependencies (viem and @tanstack/react-query) using different package managers like pnpm, npm, yarn, and bun.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/installation.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
pnpm add wagmi viem@{{viemVersion}} @tanstack/react-query

LANGUAGE: bash
CODE:
npm install wagmi viem@{{viemVersion}} @tanstack/react-query

LANGUAGE: bash
CODE:
yarn add wagmi viem@{{viemVersion}} @tanstack/react-query

LANGUAGE: bash
CODE:
bun add wagmi viem@{{viemVersion}} @tanstack/react-query

----------------------------------------

TITLE: Configuring Gas Parameter in useSimulateContract with Vue
DESCRIPTION: Example showing how to set the gas parameter when simulating a contract transaction using useSimulateContract in a Vue component. The gas parameter specifies the amount of gas provided for transaction execution.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  gas: parseGwei('20'), // [!code focus]
})
</script>

----------------------------------------

TITLE: Basic useReadContract Usage in Vue
DESCRIPTION: Example showing basic usage of useReadContract composable to call totalSupply function on a contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useReadContract } from '@wagmi/vue'
import { abi } from './abi'

const result = useReadContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'totalSupply',
})
</script>

----------------------------------------

TITLE: Using usePrepareTransactionRequest with Nonce
DESCRIPTION: Demonstrates how to use the usePrepareTransactionRequest hook with a specified nonce for the transaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_9

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther } from 'viem'

function App() {
  const result = usePrepareTransactionRequest({
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
    nonce: 5,
  })
}

----------------------------------------

TITLE: Ethereum Library Comparison Table in Markdown
DESCRIPTION: A markdown table comparing key metrics and features of wagmi, web3-react, and useDApp libraries, including GitHub stats, downloads, license information, and framework support.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/comparisons.md#2025-04-14_snippet_0

LANGUAGE: markdown
CODE:
|                      | [wagmi](https://github.com/wagmi-dev/wagmi)                                                     | [web3-react](https://github.com/NoahZinsmeister/web3-react)                                             | [useDApp](https://github.com/EthWorks/useDApp)                                                     |
| -------------------- | :---------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------ | :------------------------------------------------------------------------------------------------- |
| GitHub Stars         | ![wagmi star count](https://img.shields.io/github/stars/wagmi-dev/wagmi?colorB=27292E&label=)   | ![web3-react star count](https://img.shields.io/github/stars/Uniswap/web3-react?colorB=27292E&label=)   | ![useDApp star count](https://img.shields.io/github/stars/EthWorks/useDApp?colorB=27292E&label=)   |
| Open Issues          | ![wagmi issue count](https://img.shields.io/github/issues/wagmi-dev/wagmi?colorB=27292E&label=) | ![web3-react issue count](https://img.shields.io/github/issues/Uniswap/web3-react?colorB=27292E&label=) | ![useDApp issue count](https://img.shields.io/github/issues/EthWorks/useDApp?colorB=27292E&label=) |

----------------------------------------

TITLE: Basic WriteContract Usage
DESCRIPTION: Example showing basic usage of writeContract to execute a transferFrom function on an ERC20 contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { writeContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await writeContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
})

----------------------------------------

TITLE: Using useVerifyMessage Hook in React Component
DESCRIPTION: Demonstrates how to use the useVerifyMessage hook in a React component to verify a signed message.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useVerifyMessage } from 'wagmi'

function App() {
  const result = useVerifyMessage({
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    message: 'hello world',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Using pollingInterval Parameter
DESCRIPTION: Demonstrates how to set a custom polling interval for transaction status checks
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { waitForTransactionReceipt } from '@wagmi/core'
import { config } from './config'

const transactionReceipt = await waitForTransactionReceipt(config, {
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  pollingInterval: 1_000,
})

----------------------------------------

TITLE: Using serialize to handle bigint values
DESCRIPTION: Example demonstrating how to use the serialize function to stringify an object containing a bigint value, which standard JSON.stringify doesn't support natively.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/serialize.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { serialize } from '{{packageName}}'

const result = serialize({ foo: 'wagmi', bar: 123n })

----------------------------------------

TITLE: SendTransaction with Specific Connector
DESCRIPTION: Demonstrates how to use a specific connector when sending a transaction using the sendTransaction function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getConnections, sendTransaction } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const connections = getConnections(config)
const result = await sendTransaction(config, {
  connector: connections[0]?.connector,
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Including Value in Contract Simulation
DESCRIPTION: Example showing how to include a value parameter when simulating a contract transaction. This parameter represents the amount of ether (in wei) to be sent with the transaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_9

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { parseEther } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  value: parseEther('0.01'), // [!code focus]
})
</script>

----------------------------------------

TITLE: Transaction Request with Chain ID
DESCRIPTION: Example demonstrating how to prepare a transaction request for a specific chain using mainnet chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/prepareTransactionRequest.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { prepareTransactionRequest } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { parseEther } from 'viem'
import { config } from './config'

await prepareTransactionRequest(config, {
  chainId: mainnet.id,
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1'),
})

----------------------------------------

TITLE: WalletConnect Metadata Configuration
DESCRIPTION: Example of setting up metadata for the WalletConnect connection request
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { walletConnect } from '{{connectorsPackageName}}'

const connector = walletConnect({
  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
  metadata: {
    name: 'Example',
    description: 'Example website',
    url: 'https://example.com',
  },
})

----------------------------------------

TITLE: Basic Usage of getCapabilities
DESCRIPTION: Demonstrates the basic usage of getCapabilities function with a config object to fetch wallet capabilities.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCapabilities.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getCapabilities } from '@wagmi/core/experimental'
import { config } from './config'

const capabilities = await getCapabilities(config)

----------------------------------------

TITLE: Basic Usage of useConnectorClient
DESCRIPTION: Demonstrates basic implementation of the useConnectorClient hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useConnectorClient } from 'wagmi'

function App() {
  const result = useConnectorClient()
}

----------------------------------------

TITLE: Using Private Key Accounts with Wagmi Actions
DESCRIPTION: This snippet demonstrates how to integrate Viem's private key accounts with Wagmi by explicitly passing the account through the account argument on Wagmi Actions like useSendTransaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/viem.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { http, createConfig, useSendTransaction } from 'wagmi' 
import { base, mainnet, optimism, zora } from 'wagmi/chains' 
import { parseEther } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'

export const config = createConfig({ 
  chains: [base, mainnet, optimism, zora], 
  transports: { 
    [base.id]: http(), 
    [mainnet.id]: http(), 
    [optimism.id]: http(), 
    [zora.id]: http(), 
  }, 
}) 

const account = privateKeyToAccount('0x...') 

function Example() {
  const { data: hash } = useSendTransaction({
    account, 
    to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
    value: parseEther('0.001')
  })
}

----------------------------------------

TITLE: Multiple Wagmi Configs Implementation
DESCRIPTION: Example showing how to create and use multiple Wagmi configurations with different chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/typescript.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, optimism } from 'wagmi/chains'

export const configA = createConfig({
  chains: [mainnet],
  transports: {
    [mainnet.id]: http(),
  },
})

export const configB = createConfig({
  chains: [optimism],
  transports: {
    [optimism.id]: http(),
  },
})

----------------------------------------

TITLE: Importing SimulateContractParameters type
DESCRIPTION: Shows how to import the SimulateContractParameters type for TypeScript type checking.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type SimulateContractParameters } from '@wagmi/core'

----------------------------------------

TITLE: Basic Storage Creation
DESCRIPTION: Example of creating a basic storage instance using localStorage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createStorage } from '{{packageName}}'

const storage = createStorage({ storage: localStorage })

----------------------------------------

TITLE: Using getEnsName with chainId Parameter
DESCRIPTION: This snippet demonstrates using getEnsName with the chainId parameter, which specifies which blockchain to query for the ENS name.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { getEnsName } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const ensName = await getEnsName(config, {
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  chainId: mainnet.id, // [!code focus]
})

----------------------------------------

TITLE: Configuring Wagmi with SSR Enabled in Vue
DESCRIPTION: This snippet demonstrates how to create a Wagmi configuration with SSR enabled for Vue applications. It includes setting up chains and HTTP transports.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/ssr.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
import { createConfig, http } from '@wagmi/vue'
import { mainnet, sepolia } from '@wagmi/vue/chains'

const config = createConfig({ // [!code focus:99]
  chains: [mainnet, sepolia],
  ssr: true, // [!code ++]
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Using useSendCalls Hook in React Component
DESCRIPTION: Demonstrates how to use the useSendCalls hook in a React component to send multiple calls to the network. It includes examples of sending Ether and calling a contract function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendCalls.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useSendCalls } from 'wagmi/experimental'
import { parseEther } from 'viem'

function App() {
  const { sendCalls } = useSendCalls()

  return (
    <button
      onClick={() =>
        sendCalls({
          calls: [
            {
              to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
              value: parseEther('1')
            },
            {
              data: '0xdeadbeef',
              to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
            },
          ]
        })
      }
    >
      Send calls
    </button>
  )
}

----------------------------------------

TITLE: Basic Usage of waitForTransactionReceipt
DESCRIPTION: Demonstrates basic usage of waitForTransactionReceipt to get a transaction receipt
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { waitForTransactionReceipt } from '@wagmi/core'
import { config } from './config'

const transactionReceipt = waitForTransactionReceipt(config, {
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})

----------------------------------------

TITLE: Using Const-Asserted ABI for Type Inference in useReadContract
DESCRIPTION: Demonstrates how to use a const-asserted ABI to achieve full type inference when using the useReadContract composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/typescript.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const erc721Abi = [
  {
    name: 'balanceOf',
    type: 'function',
    stateMutability: 'view',
    inputs: [{ type: 'address', name: 'owner' }],
    outputs: [{ type: 'uint256' }],
  },
  // ... other ABI items
] as const

import { useReadContract } from '@wagmi/vue'

const { data } = useReadContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: erc721Abi,
  functionName: 'balanceOf',
  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],
})

----------------------------------------

TITLE: Basic Wagmi Configuration in JavaScript
DESCRIPTION: The most basic configuration file for Wagmi CLI, using a JavaScript file that exports a default configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-14_snippet_0

LANGUAGE: javascript
CODE:
export default {
  // config options
}

----------------------------------------

TITLE: Basic Usage of useDisconnect in Vue Component
DESCRIPTION: Demonstrates the basic implementation of useDisconnect in a Vue component with a disconnect button.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useDisconnect.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useDisconnect } from '@wagmi/vue'

const { disconnect } = useDisconnect()
</script>

<template>
  <button @click="disconnect()">
    Disconnect
  </button>
</template>

----------------------------------------

TITLE: Transaction Receipt Monitoring
DESCRIPTION: Adding transaction confirmation monitoring using useWaitForTransactionReceipt composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWaitForTransactionReceipt, useWriteContract } from 'wagmi'
import { abi } from './abi'

const { data: hash, isPending, writeContract } = useWriteContract()

function submit(event: Event) {
  const formData = new FormData(e.target as HTMLFormElement)
  const tokenId = formData.get('tokenId') as string
  writeContract({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    abi,
    functionName: 'mint',
    args: [BigInt(tokenId)],
  })
}

const { isLoading: isConfirming, isSuccess: isConfirmed } = useWaitForTransactionReceipt({ hash })
</script>

<template>
  <form @submit.prevent="submit">
    <input name="tokenId" placeholder="69420" required />
    <button :disabled="isPending" type="submit">
      <span v-if="isPending">Sending...</span>
      <span v-else>Send</span>
    </button>
    <div v-if="hash">Transaction Hash: {{ hash }}</div>
    <div v-if="isConfirming">Waiting for confirmation...</div>
    <div v-if="isConfirmed">Transaction Confirmed!</div>
  </form>
</template>

----------------------------------------

TITLE: Importing WatchBlocksParameters Type
DESCRIPTION: Shows how to import the WatchBlocksParameters type for TypeScript type checking.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type WatchBlocksParameters } from '@wagmi/core'

----------------------------------------

TITLE: Importing getBlock from Wagmi Core
DESCRIPTION: Shows how to import the getBlock action from the @wagmi/core package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getBlock } from '@wagmi/core'

----------------------------------------

TITLE: Contract Deployment with Constructor Arguments
DESCRIPTION: Shows how to deploy a contract using useDeployContract hook with constructor arguments passed to the contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useDeployContract } from 'wagmi'
import { parseEther } from 'viem'
import { wagmiAbi } from './abi'

function App() {
  const { deployContract } = useDeployContract()

  return (
    <button
      onClick={() =>
        deployContract({
          abi: wagmiAbi,
          args: [69420],
          bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
        })
      }
    >
      Deploy Contract
    </button>
  )
}

----------------------------------------

TITLE: Integrating WagmiPlugin in Vue Application Entry Point
DESCRIPTION: Demonstrates how to integrate the WagmiPlugin into a Vue application's main entry point with a configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createApp } from 'vue'
import { WagmiPlugin } from '@wagmi/vue'

import App from './App.vue'
import { config } from './config' 

createApp(App)
  .use(WagmiPlugin, { config })
  .mount('#app')

----------------------------------------

TITLE: Fetching ERC-20 Token Balance with getBalance
DESCRIPTION: Demonstrates how to fetch an ERC-20 token balance by specifying the token address parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { getBalance } from '@wagmi/core'
import { config } from './config'

const balance = getBalance(config, {
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  token: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code focus]
})

----------------------------------------

TITLE: Basic useStorageAt Hook Usage - React TypeScript
DESCRIPTION: Basic example demonstrating how to use the useStorageAt hook to read a storage slot from a specific contract address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useStorageAt } from 'wagmi'

function App() {
  const result = useStorageAt({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    slot: '0x0',
  })
}

----------------------------------------

TITLE: Using the initialState Parameter with WagmiPlugin
DESCRIPTION: Shows how to use the initialState parameter for hydrating state into the Wagmi Config, which is useful for server-side rendering.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createApp } from 'vue'
import { WagmiPlugin } from '@wagmi/vue'

import App from './App.vue'
import { config } from './config' 

createApp(App)
  .use(WagmiPlugin, { 
    config,
    initialState: /* ... */ // [!code focus]
  })
  .mount('#app')

----------------------------------------

TITLE: Using useBalance with Custom Config
DESCRIPTION: Example demonstrating how to use a custom configuration with useBalance hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useBalance } from 'wagmi'
import { config } from './config'

function App() {
  const result = useBalance({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    config,
  })
}

----------------------------------------

TITLE: Contract Read with Chain ID
DESCRIPTION: Demonstrates how to specify a particular chain ID when reading contract data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { readContract } from '@wagmi/core'
import { mainnet } from 'wagmi/chains'
import { abi } from './abi'
import { config } from './config'

const result = await readContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'totalSupply',
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Using Wagmi Composables in Vue Component
DESCRIPTION: Illustrates how to use Wagmi Vue Composables within a Vue component to fetch and display ENS name.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useAccount, useEnsName } from '@wagmi/vue'

const { address } = useAccount()
const { data, error, status } = useEnsName({ address })
</script>

<template>
  <div v-if="status === 'pending'">Loading ENS name</div>
  <div v-else-if="status === 'error'">
    Error fetching ENS name: {{error.message}}
  </div>
  <div v-else>ENS name: {{data}}</div>
</template>

----------------------------------------

TITLE: Configuring Chain Properties in TypeScript
DESCRIPTION: Sets up a Wagmi configuration file to enable chain-specific properties. It declares custom types for chains and configures the Wagmi client with specific chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/chain-properties.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { Chain, Config, configureChains, createConfig } from '@wagmi/core'
import { mainnet, sepolia } from '@wagmi/core/chains'
import { publicProvider } from '@wagmi/core/providers/public'

const { chains, publicClient } = configureChains(
  [mainnet, sepolia],
  [publicProvider()],
)

declare module '@wagmi/core' {
  interface Register {
    config: Config<Chains>
  }
}

type Chains = Chain<'mainnet'> | Chain<'sepolia'>

export const config = createConfig<Chains>({
  autoConnect: true,
  publicClient,
})

----------------------------------------

TITLE: Watching Block Numbers with Wagmi Core Actions in Vue
DESCRIPTION: This snippet demonstrates how to use the watchBlockNumber action from Wagmi Core in a Vue component. It sets up a watcher for blockchain block number changes and logs them to the console, properly cleaning up the watcher when the component is unmounted.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/actions.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { watchEffect } from 'vue'
import { useConfig } from '@wagmi/vue'
import { watchBlockNumber } from '@wagmi/vue/actions'

const config = useConfig()

watchEffect((onCleanup) => {
  const unwatch = watchBlockNumber(config, {
    onBlockNumber(blockNumber) {
      console.log('Block number changed!', blockNumber)
    },
  })

  onCleanup(unwatch)
})
</script>

----------------------------------------

TITLE: Setting Function Arguments in readContracts
DESCRIPTION: Demonstrates how to pass arguments to contract functions when using readContracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
    },
    // ...
  ],
})

----------------------------------------

TITLE: SendTransaction with Chain ID
DESCRIPTION: Shows how to specify a chain ID when using the sendTransaction function to validate the transaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { parseEther } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  chainId: mainnet.id,
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Installing Wagmi CLI with Package Managers
DESCRIPTION: Commands for installing the latest version of Wagmi CLI using different package managers including pnpm, npm, yarn, and bun.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm add @wagmi/cli

LANGUAGE: bash
CODE:
npm install @wagmi/cli

LANGUAGE: bash
CODE:
yarn add @wagmi/cli

LANGUAGE: bash
CODE:
bun add @wagmi/cli

----------------------------------------

TITLE: Using useTransactionReceipt in a Vue Component
DESCRIPTION: Demonstrates how to use the useTransactionReceipt composable within a Vue component setup script.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useTransactionReceipt } from '@wagmi/vue'

const result = useTransactionReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})
</script>

----------------------------------------

TITLE: Using onChange callback in watchAccount
DESCRIPTION: Demonstrates how to use the onChange callback function in watchAccount to handle account changes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAccount.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { watchAccount } from '@wagmi/core'
import { config } from './config'

const unwatch = watchAccount(config, {
  onChange(account) { // [!code focus:3]
    console.log('Account changed!', account)
  },
})
unwatch()

----------------------------------------

TITLE: Using useToken Hook with Chain ID in React
DESCRIPTION: This example shows how to use the useToken hook with a specific chain ID for fetching token data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useToken } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useToken({
    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using useBlockTransactionCount with Custom Config
DESCRIPTION: This snippet shows how to use the useBlockTransactionCount hook with a custom configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useBlockTransactionCount } from 'wagmi'
import { config } from './config'

function App() {
  const result = useBlockTransactionCount({
    config,
  })
}

----------------------------------------

TITLE: Basic Usage of useWatchPendingTransactions
DESCRIPTION: Demonstrates how to use the useWatchPendingTransactions hook to watch for pending transactions and log them to the console.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useWatchPendingTransactions } from 'wagmi'

function App() {
  useWatchPendingTransactions({
    onTransactions(transactions) {
      console.log('New transactions!', transactions)
    },
  })
}

----------------------------------------

TITLE: Configuring MetaMask Connector with dappMetadata
DESCRIPTION: Demonstrates how to initialize the MetaMask connector with dappMetadata configuration for customizing the UI in MetaMask confirmation screens.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { metaMask } from 'wagmi/connectors'

const connector = metaMask({
  dappMetadata: {
    name: 'My Wagmi App',
    url: 'https://example.com',
    iconUrl: 'https://example.com/favicon.ico',
  }
})

----------------------------------------

TITLE: Adding Form Submission Handler in Vue Component
DESCRIPTION: This snippet demonstrates how to add a form submission handler to the SendTransaction component, capturing user input for the transaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
  function submit(event: Event) {
    const formData = new FormData(event.target as HTMLFormElement)
    const to = formData.get('address') as `0x${string}`
    const value = formData.get('value') as string
    sendTransaction({ to, value: parseEther(value) })
  }
</script>

<template>
  <form @submit.prevent="submit">
    <input name="address" placeholder="0xA0Cf…251e" required />
    <input name="value" placeholder="0.05" required />
    <button type="submit">Send</button>
  </form>
</template>

----------------------------------------

TITLE: Verifying Typed Data with blockTag in TypeScript
DESCRIPTION: This snippet shows how to use the verifyTypedData function with a blockTag parameter. It imports necessary dependencies and verifies a typed data signature using the 'latest' block tag.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { verifyTypedData } from '@wagmi/core'
import { domain, types } from './data'
import { config } from './config'

const valid = await verifyTypedData(config, {
  blockTag: 'latest', // [!code focus]
  domain,
  types,
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  primaryType: 'Mail',
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})
// true

----------------------------------------

TITLE: Replacing watch Property with useBlockNumber and refetch
DESCRIPTION: Alternative approach to replace the removed watch property using useBlockNumber with useEffect and refetch to refresh data on block changes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_5

LANGUAGE: ts
CODE:
import { useEffect } from 'react' // [!code ++]
import { useBlockNumber, useBalance } from 'wagmi' // [!code ++]

const { data: blockNumber } = useBlockNumber({ watch: true }) // [!code ++]
const { data: balance, refetch } = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  watch: true, // [!code --]
})

useEffect(() => { // [!code ++]
  refetch() // [!code ++]
}, [blockNumber]) // [!code ++]

----------------------------------------

TITLE: Basic Usage of estimateFeesPerGas
DESCRIPTION: Demonstrates the basic usage of the estimateFeesPerGas function, showing how to call it with a configuration object to get gas fee estimates.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { estimateFeesPerGas } from '@wagmi/core'
import { config } from './config'

const result = await estimateFeesPerGas(config)

----------------------------------------

TITLE: Specifying Nonce for Transaction Simulation
DESCRIPTION: Example showing how to set the nonce parameter when simulating a contract transaction. The nonce is a unique number identifying the transaction, useful for transaction sequencing.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_7

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { abi } from './abi'
import { config } from './config'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  nonce: 123, // [!code focus]
})
</script>

----------------------------------------

TITLE: Watch Parameter Usage with useBlockNumber
DESCRIPTION: Shows different ways to enable and configure block number watching functionality.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useBlockNumber } from 'wagmi'

function App() {
  const result = useBlockNumber({
    watch: true,
  })
}

LANGUAGE: tsx
CODE:
import { useBlockNumber } from 'wagmi'

function App() {
  const result = useBlockNumber({
    watch: {
      pollingInterval: 4_000,
    },
  })
}

----------------------------------------

TITLE: Using the chains Parameter with createConfig
DESCRIPTION: Demonstrates how to specify the chains parameter when creating a configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia], 
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Fetching Token Balance
DESCRIPTION: Demonstrates how to fetch the balance of an ERC-20 token using the token parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-14_snippet_9

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBalance } from '@wagmi/vue'

const result = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  token: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code focus]
})
</script>

----------------------------------------

TITLE: TypeScript Return Type for useEnsAddress
DESCRIPTION: TypeScript type definition for importing the return type of useEnsAddress for type safety in TypeScript projects.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { type UseEnsAddressReturnType } from '@wagmi/vue'

----------------------------------------

TITLE: Transaction Request with Account
DESCRIPTION: Example demonstrating how to prepare a transaction request with a specific sender account address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/prepareTransactionRequest.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { prepareTransactionRequest } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

await prepareTransactionRequest(config, {
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1'),
})

----------------------------------------

TITLE: Using simulateContract with account parameter
DESCRIPTION: Shows how to use the simulateContract function with a specific account for signing the transaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
})

----------------------------------------

TITLE: Invalidating Balance Query After User Interaction in React
DESCRIPTION: This snippet demonstrates how to invalidate a user's balance query after an interaction, marking it as stale and triggering a refetch for all rendered balance queries.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import { useBalance } from 'wagmi'

function App() {
  // 1. Extract `queryKey` from the useBalance Hook. // [!code hl]
  const { queryKey } = useBalance() // [!code hl]

  return (
    <button
      onClick={async () => {
        // 2. Invalidate the query when the user clicks "Invalidate". // [!code hl]
        await queryClient.invalidateQueries({ queryKey }) // [!code hl]
      }}
    >
      Invalidate
    </button>
  )
}

function Example() {
  // 3. Other `useBalance` Hooks in your rendered React tree will be refetched! // [!code hl]
  const { data: balance } = useBalance() // [!code hl]

  return <div>{balance}</div>
}

----------------------------------------

TITLE: Configuring Fetch Options for HTTP Transport
DESCRIPTION: Demonstrates how to pass fetch options to the internal fetch function, useful for auth headers or cache options.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const transport = http('https://foo-bar-baz.quiknode.pro/...', {
  fetchOptions: { // [!code focus:5]
    headers: {
      'Authorization': 'Bearer ...'
    }
  }
})

----------------------------------------

TITLE: Creating Chain Configuration Using Type Assertion
DESCRIPTION: Demonstrates how to create a chain configuration using TypeScript's 'as const' and 'satisfies' operators with the Chain type from Viem. Shows basic structure and empty implementation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/create-chain.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { type Chain } from 'viem'

export const mainnet = {} as const satisfies Chain

----------------------------------------

TITLE: Using Multiple Wagmi Configs with Hook Config Property
DESCRIPTION: Shows how to create and use multiple Wagmi configurations by passing them directly to composables via the config property.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/typescript.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createConfig, http } from '@wagmi/vue'
import { mainnet, optimism } from '@wagmi/vue/chains'

export const configA = createConfig({
  chains: [mainnet],
  transports: {
    [mainnet.id]: http(),
  },
})

export const configB = createConfig({
  chains: [optimism],
  transports: {
    [optimism.id]: http(),
  },
})

----------------------------------------

TITLE: Verifying Typed Data with ChainId in React
DESCRIPTION: This example shows how to use the chainId parameter when verifying typed data signed by a Smart Contract Account. It specifies the chain ID to check for contract deployment.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { domain, types } from './data'
import { useVerifyTypedData } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useVerifyTypedData({
    chainId: mainnet.id,
    domain,
    types,
    message: {
      from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
      },
      to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
      },
      contents: 'Hello, Bob!',
    },
    primaryType: 'Mail',
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Error Handling Implementation
DESCRIPTION: Adding error handling for transaction failures and user rejections.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWaitForTransactionReceipt, useWriteContract } from 'wagmi'
import { abi } from './abi'

const { data: hash, error, isPending, writeContract } = useWriteContract()

function submit(event: Event) {
  const formData = new FormData(e.target as HTMLFormElement)
  const tokenId = formData.get('tokenId') as string
  writeContract({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    abi,
    functionName: 'mint',
    args: [BigInt(tokenId)],
  })
}

const { isLoading: isConfirming, isSuccess: isConfirmed } = useWaitForTransactionReceipt({ hash })
</script>

<template>
  <form @submit.prevent="submit">
    <input name="tokenId" placeholder="69420" required />
    <button :disabled="isPending" type="submit">
      <span v-if="isPending">Sending...</span>
      <span v-else>Send</span>
    </button>
    <div v-if="hash">Transaction Hash: {{ hash }}</div>
    <div v-if="isConfirming">Waiting for confirmation...</div>
    <div v-if="isConfirmed">Transaction Confirmed!</div>
    <div v-if="error">
      Error: {{ (error as BaseError).shortMessage || error.message }}
    </div>
  </form>
</template>

----------------------------------------

TITLE: Using watchChainId to Subscribe to Chain ID Changes
DESCRIPTION: This example shows how to use the watchChainId function to subscribe to chain ID changes. It sets up a watcher and logs the new chain ID when it changes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchChainId.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { watchChainId } from '@wagmi/core'
import { config } from './config'

const unwatch = watchChainId(config, {
  onChange(chainId) {
    console.log('Chain ID changed!', chainId)
  },
})
unwatch()

----------------------------------------

TITLE: Using getWalletClient with account parameter
DESCRIPTION: Shows how to use getWalletClient with a specific account address as a parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getWalletClient.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getWalletClient } from '@wagmi/core'
import { config } from './config'

const client = getWalletClient(config, {
  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
})

----------------------------------------

TITLE: Defining Domain and Types for Typed Data
DESCRIPTION: This snippet shows how to define the domain and types objects used in the typed data verification process. These objects specify the structure of the data being signed.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_4

LANGUAGE: ts
CODE:
// All properties on a domain are optional
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const

// The named list of all type definitions
export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Manual Installation of Wagmi and Dependencies
DESCRIPTION: Commands for manually installing Wagmi and its dependencies using different package managers.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-14_snippet_2

LANGUAGE: bash
CODE:
pnpm add @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query

LANGUAGE: bash
CODE:
npm install @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query

LANGUAGE: bash
CODE:
yarn add @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query

LANGUAGE: bash
CODE:
bun add @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query

----------------------------------------

TITLE: Using confirmations Parameter in useWaitForTransactionReceipt
DESCRIPTION: Demonstrates how to specify the number of confirmations to wait for when using the useWaitForTransactionReceipt hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { useWaitForTransactionReceipt } from 'wagmi'

function App() {
  const result = useWaitForTransactionReceipt({
    confirmations: 2,
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  })
}

----------------------------------------

TITLE: Basic useWalletClient Usage
DESCRIPTION: Demonstrates basic implementation of the useWalletClient hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useWalletClient } from 'wagmi'

function App() {
  const result = useWalletClient()
}

----------------------------------------

TITLE: Using chainId Parameter with getEnsResolver
DESCRIPTION: Shows how to specify the chain ID when fetching an ENS resolver, allowing cross-chain ENS resolution.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsResolver.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getEnsResolver } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensResolver = await getEnsResolver(config, {
  chainId: mainnet.id, // [!code focus]
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Using Custom Config with useConnect Hook
DESCRIPTION: Demonstrates how to use a custom config with the useConnect hook instead of the default from WagmiProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnect.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useConnect } from 'wagmi'
import { config } from './config'

function App() {
  const result = useConnect({
    config,
  })
}

----------------------------------------

TITLE: Adding Form Submission Handler to Mint NFT Component
DESCRIPTION: This snippet adds a form submission handler to the MintNFT component. It prevents the default form submission behavior and extracts the token ID from the form data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import * as React from 'react'

export function MintNFT() {
  async function submit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const tokenId = formData.get('tokenId') as string
  }

  return (
    <form onSubmit={submit}>
      <input name="tokenId" placeholder="69420" required />
      <button type="submit">Mint</button>
    </form>
  )
}

----------------------------------------

TITLE: Using Ethers.js Provider Hook in Components
DESCRIPTION: Example of how to use the useEthersProvider hook in React components to get an Ethers.js provider instance that works with Wagmi.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useEthersProvider } from './ethers'

function Example() {
  const provider = useEthersProvider()
  ...
}

----------------------------------------

TITLE: Defining Typed Data Domain and Types
DESCRIPTION: Shows how to define the domain and types for typed data used in the verifyTypedData function. The domain includes optional properties like name, version, chainId, and verifyingContract. The types define the structure of the data being signed.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
// All properties on a domain are optional
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const

// The named list of all type definitions
export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Using estimateMaxPriorityFeePerGas with Specific Chain
DESCRIPTION: Demonstrates how to use the estimateMaxPriorityFeePerGas function with a specific chainId parameter to target a particular blockchain network.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateMaxPriorityFeePerGas.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { estimateMaxPriorityFeePerGas } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const result = await estimateMaxPriorityFeePerGas(config, {
  chainId: mainnet.id, // [!code focus]
})

----------------------------------------

TITLE: Using usePublicClient with Custom Config
DESCRIPTION: Demonstrates how to use the usePublicClient hook with a custom configuration instead of the default from WagmiProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePublicClient.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { usePublicClient } from 'wagmi'
import { config } from './config'

function App() {
  const client = usePublicClient({
    config,
  })
}

----------------------------------------

TITLE: Configuring Polling Interval for createConfig
DESCRIPTION: Shows how to set the polling interval frequency for polling-enabled features.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  pollingInterval: 4_000, 
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Using useEnsText Hook in React Component
DESCRIPTION: This example demonstrates how to use the useEnsText hook in a React component to fetch an ENS text record. It includes normalizing the ENS name using viem's normalize function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useEnsText } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsText({
    name: normalize('wevm.eth'),
    key: 'com.twitter',
  })
}

----------------------------------------

TITLE: Basic Transaction Query Implementation
DESCRIPTION: Demonstrates basic usage of useTransaction composable to query a transaction by hash
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useTransaction } from '@wagmi/vue'

const result = useTransaction({
  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
})
</script>

----------------------------------------

TITLE: Specifying Chain ID in call Action
DESCRIPTION: Shows how to specify a chain ID when using the 'call' action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/call.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { call } from '@wagmi/core'
import { config } from './config'
import { mainnet } from '@wagmi/core/chains'

await call(config, {
  chainId: mainnet.id,
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Using blockTag Parameter with getBalance
DESCRIPTION: Demonstrates using blockTag to specify which block state to query (latest, earliest, pending, etc.).
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getBalance } from '@wagmi/core'
import { config } from './config'

const balance = getBalance(config, {
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  blockTag: 'latest', // [!code focus]
})

----------------------------------------

TITLE: Estimating Gas with Max Fee Per Gas in TypeScript
DESCRIPTION: Demonstrates using the useEstimateGas hook with a specified max fee per gas for EIP-1559 transactions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { useEstimateGas } from 'wagmi'
import { parseEther, parseGwei } from 'viem'
import { config } from './config'

function App() {
  const result = useEstimateGas({
    maxFeePerGas: parseGwei('20'),
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    value: parseEther('0.01'),
  })
}

----------------------------------------

TITLE: normalizeChainId Function with Different Parameter Types
DESCRIPTION: Demonstrates using the normalizeChainId function with different supported parameter types including bigint, number, and string representations of a chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/normalizeChainId.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { normalizeChainId } from 'wagmi'

normalizeChainId(1n)
normalizeChainId(1)
normalizeChainId('0x1')

----------------------------------------

TITLE: Contract Read with Block Number
DESCRIPTION: Demonstrates reading contract data at a specific block number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { readContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await readContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'totalSupply',
  blockNumber: 17829139n,
})

----------------------------------------

TITLE: Hydrating Cookie State in Next.js App Directory Layout
DESCRIPTION: This snippet illustrates how to extract the cookie from headers and pass it to cookieToInitialState in a Next.js App Directory layout file.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ssr.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type ReactNode } from 'react'
import { headers } from 'next/headers'
import { cookieToInitialState } from 'wagmi'

import { getConfig } from './config'
import { Providers } from './providers'

export default async function Layout({ children }: { children: ReactNode }) {
  const initialState = cookieToInitialState(
    getConfig(),
    (await headers()).get('cookie')
  )
  return (
    <html lang="en">
      <body>
        <Providers initialState={initialState}>
          {children}
        </Providers>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Using useTransactionReceipt Hook in React Component
DESCRIPTION: This example demonstrates how to use the useTransactionReceipt hook in a React component to fetch a transaction receipt by its hash.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionReceipt.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useTransactionReceipt } from 'wagmi'

function App() {
  const result = useTransactionReceipt({
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  })
}

----------------------------------------

TITLE: Using Private Key Accounts with Wagmi
DESCRIPTION: Example showing how to use Viem's private key accounts with Wagmi by explicitly passing the account through the account argument on Wagmi actions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/viem.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { privateKeyToAccount } from 'viem/accounts'
import { useConfig } from '@wagmi/vue'
import { sendTransactionMutationOptions, useMutation } from '@wagmi/vue/query'

const config = useConfig()
const { mutate: sendTransaction } = useMutation(
  sendTransactionMutationOptions(config)
)

const account = privateKeyToAccount('0x...') // [!code hl]

sendTransaction({
  account, // [!code hl]
  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  value: parseEther('0.001')
})
</script>

----------------------------------------

TITLE: Estimating Gas with Specific Nonce in TypeScript
DESCRIPTION: Demonstrates using the useEstimateGas hook with a specified nonce.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
import { useEstimateGas } from 'wagmi'
import { parseEther } from 'viem'
import { config } from './config'

function App() {
  const result = useEstimateGas({
    nonce: 123,
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    value: parseEther('0.01'),
  })
}

----------------------------------------

TITLE: Updating Providers Component for Cookie State Hydration
DESCRIPTION: This code updates the Providers component to accept and use the initial state derived from the cookie for Wagmi configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ssr.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
'use client'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { type ReactNode, useState } from 'react'
import { type State, WagmiProvider } from 'wagmi'

import { getConfig } from './config'

type Props = {
  children: ReactNode,
  initialState: State | undefined,
}

export function Providers({ children, initialState }: Props) {
  const [config] = useState(() => getConfig())
  const [queryClient] = useState(() => new QueryClient())

  return (
    <WagmiProvider config={config} initialState={initialState}>
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Using GetConnections with Config
DESCRIPTION: Demonstrates how to use the getConnections function with a configuration object to retrieve active connections.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnections.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getConnections } from '@wagmi/core'
import { config } from './config'

const connections = getConnections(config)

----------------------------------------

TITLE: Importing UseClientReturnType
DESCRIPTION: Demonstrates how to import the UseClientReturnType for TypeScript type checking of the return value.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { type UseClientReturnType } from '@wagmi/vue'

----------------------------------------

TITLE: Setting Transaction Nonce
DESCRIPTION: Example showing how to set a custom nonce when writing a contract transaction. The nonce is a unique number identifying the transaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { writeContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await writeContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  nonce: 123,
})

----------------------------------------

TITLE: Using simulateContract with blockNumber parameter
DESCRIPTION: Demonstrates how to use the simulateContract function with a specific block number for the simulation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  blockNumber: 17829139n,
})

----------------------------------------

TITLE: Verifying Typed Data with chainId in TypeScript
DESCRIPTION: This snippet demonstrates how to use the verifyTypedData function with a chainId parameter. It imports necessary dependencies, defines domain and types, and verifies a typed data signature.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { verifyTypedData } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { domain, types } from './data'
import { config } from './config'

const valid = await verifyTypedData(config, {
  chainId: mainnet.id, // [!code focus]
  domain,
  types,
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  primaryType: 'Mail',
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})
// true

----------------------------------------

TITLE: Using onChange Callback in watchChainId
DESCRIPTION: This example demonstrates how to use the onChange callback function in watchChainId. The callback is called when the chain ID changes and receives the new chain ID as a parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchChainId.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { watchChainId } from '@wagmi/core'
import { config } from './config'

const unwatch = watchChainId(config, {
  onChange(chainId) {
    console.log('Chain ID changed!', chainId)
  },
})
unwatch()

----------------------------------------

TITLE: Retrieving and Updating Query Data
DESCRIPTION: Examples of how to imperatively get and set query data using queryClient methods, useful for manipulating data outside Vue components.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import type { GetBalanceReturnType } from '@wagmi/vue/actions'
import { getBalanceQueryOptions } from '@wagmi/vue/query'
import { queryClient } from './app'
import { config } from './config'

export function getBalanceData() {
  return queryClient.getQueryData( // [!code hl]
    getBalanceQueryOptions(config, { // [!code hl]
      chainId: config.state.chainId, // [!code hl]
    } // [!code hl]
  )) // [!code hl]
}

export function setBalanceData(parameters: Partial<GetBalanceReturnType>) {
  return queryClient.setQueryData( // [!code hl]
    getBalanceQueryOptions(config, { // [!code hl]
      chainId: config.state.chainId, // [!code hl]
    }, // [!code hl]
    data => ({ ...data, ...parameters }) // [!code hl]
  )) // [!code hl]
}

----------------------------------------

TITLE: Configuring Wagmi with Mock Connector
DESCRIPTION: Demonstrates how to set up a Wagmi configuration using the mock connector with specified accounts and chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/mock.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createConfig, http } from '{{packageName}}'
import { mainnet, sepolia } from '{{packageName}}/chains'
import { mock } from '{{connectorsPackageName}}'

export const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [
    mock({
      accounts: [
        '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
        '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
        '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',
      ],
    }),
  ],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Using watchBlockNumber with Error Handling
DESCRIPTION: Shows how to add error handling to the watchBlockNumber function using the onError callback.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { watchBlockNumber } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlockNumber(config, {
  onBlockNumber(blockNumber) { 
    console.log('Block number changed!', blockNumber) 
  }, 
  onError(error) {
    console.error('Block number error', error)
  },
})
unwatch()

----------------------------------------

TITLE: Basic Usage of getEnsName
DESCRIPTION: This snippet demonstrates the basic usage of getEnsName to fetch the ENS name for a specific Ethereum address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getEnsName } from '@wagmi/core'
import { config } from './config'

const ensName = getEnsName(config, {
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
})

----------------------------------------

TITLE: Using useChainId Hook with Custom Config in React
DESCRIPTION: Illustrates how to use the useChainId hook with a custom configuration in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChainId.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useChainId } from 'wagmi'
import { config } from './config'

function App() {
  const chainId = useChainId({
    config,
  })
}

----------------------------------------

TITLE: Basic getClient Usage
DESCRIPTION: Demonstrates basic usage of getClient function to obtain a Viem Client instance using a configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getClient.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getClient } from '@wagmi/core'
import { config } from './config'

const client = getClient(config)

----------------------------------------

TITLE: Using useCapabilities with Connector
DESCRIPTION: Demonstrates how to use the useCapabilities hook with a specific connector from useConnections.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useCapabilities, useConnections } from 'wagmi/experimental'
import { config } from './config'

function App() {
  const connections = useConnections()
  const result = useCapabilities({
    connector: connections[0]?.connector,
  })
}

----------------------------------------

TITLE: ENS Avatar with Asset Gateway Configuration
DESCRIPTION: Example demonstrating useEnsAvatar with custom IPFS gateway configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { getEnsAvatar } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const result = useEnsAvatar({
  assetGatewayUrls: {
    ipfs: 'https://cloudflare-ipfs.com',
  },
  name: normalize('wevm.eth'),
})
</script>

----------------------------------------

TITLE: Using watchBlockNumber with emitOnBegin Option
DESCRIPTION: Shows how to use the emitOnBegin option to emit the latest block number when the subscription opens.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { watchBlockNumber } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlockNumber(config, {
  emitOnBegin: true,
  onBlockNumber(blockNumber) {
    console.log('Block number changed!', blockNumber)
  },
})
unwatch()

----------------------------------------

TITLE: Using useBlockTransactionCount Hook in React Component
DESCRIPTION: This example demonstrates how to use the useBlockTransactionCount hook within a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useBlockTransactionCount } from 'wagmi'

function App() {
  const result = useBlockTransactionCount()
}

----------------------------------------

TITLE: Using useToken Hook in React Component
DESCRIPTION: This example demonstrates how to use the useToken hook in a React component to fetch token information for a specific address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useToken } from 'wagmi'

function App() {
  const result = useToken({
    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
  })
}

----------------------------------------

TITLE: Using getPublicClient with Chain ID
DESCRIPTION: Example showing how to use getPublicClient with a specific chain ID parameter for the mainnet.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getPublicClient.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getPublicClient } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const client = getPublicClient(config, {
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Using WagmiProvider with Initial State
DESCRIPTION: Shows how to use the WagmiProvider with an initialState parameter, which is useful for server-side rendering (SSR) scenarios.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { WagmiProvider } from 'wagmi'
import { config } from './config' 

function App() {
  return (
    <WagmiProvider
      config={config}
      initialState={/* ... /*} // [!code focus]
    >
      {/** ... */}
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Using useEnsText with Custom Universal Resolver Address
DESCRIPTION: This example demonstrates how to use the useEnsText hook with a custom Universal Resolver Contract address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { useEnsText } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsText({
    name: normalize('wevm.eth'),
    key: 'com.twitter',
    universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',
  })
}

----------------------------------------

TITLE: Specifying Chain ID for Contract Call
DESCRIPTION: This snippet shows how to specify a chain ID when calling a contract function using useReadContract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContract.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useReadContract } from 'wagmi'
import { mainnet } from 'wagmi/chains'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply',
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: useReadContract with Block Number
DESCRIPTION: Example showing how to specify a block number when calling a contract function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useReadContract } from '@wagmi/vue'
import { abi } from './abi'

const result = useReadContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'totalSupply',
  blockNumber: 17829139n,
})
</script>

----------------------------------------

TITLE: Using Ethers.js Provider with Wagmi
DESCRIPTION: Example showing how to use an ethers.js Provider with the required chains property for the Wagmi client configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_27

LANGUAGE: diff
CODE:
import {
  createClient,
+ defaultChains
} from 'wagmi'
import ethers from 'ethers'

const client = createClient({
- provider: getDefaultProvider()
+ provider: Object.assign(getDefaultProvider(), { chains: defaultChains })
})

----------------------------------------

TITLE: Narrowing Account Status in TypeScript
DESCRIPTION: Demonstrates how to use the 'status' property to narrow the return type of the account object, ensuring type safety when accessing properties like 'address' based on the connection status.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/getAccount-return-type.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
if (account.status === 'connected') {
  account
  // ^?
}

----------------------------------------

TITLE: Using gatewayUrls with getEnsAvatar
DESCRIPTION: Demonstrates how to provide custom gateway URLs for resolving CCIP-Read requests through the ENS Universal Resolver.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { getEnsAvatar } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAvatar = await getEnsAvatar(config, {
  gatewayUrls: ['https://cloudflare-ipfs.com'],
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Basic Chain Property Usage in TypeScript
DESCRIPTION: Demonstrates basic usage of chain-specific properties like Celo's feeCurrency in a contract simulation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/chain-properties.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { useSimulateContract } from 'wagmi'

const result = useSimulateContract({
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
  feeCurrency: '0x…'
})

----------------------------------------

TITLE: Setting Chain ID and Multiple Contracts in Etherscan Plugin
DESCRIPTION: Demonstrates how to set the chain ID and configure multiple contracts, including one with addresses for different chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { blockExplorer } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    etherscan({
      apiKey: process.env.ETHERSCAN_API_KEY,
      chainId: 1,
      contracts: [
        {
          name: 'Wagmigotchi',
          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
        },
        {
          name: 'EnsRegistry',
          address: {
            1: '0x314159265dd8dbb310642f98f50c066173c1259b',
            5: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
          },
        },
      ],
    }),
  ],
})

----------------------------------------

TITLE: Using blockTag Parameter with getStorageAt
DESCRIPTION: Demonstrates how to specify a block tag to check the storage at when using getStorageAt action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { getStorageAt } from '@wagmi/core'
import { config } from './config'

await getStorageAt(config, {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  blockTag: 'safe', // [!code focus]
  slot: '0x0',
})

----------------------------------------

TITLE: Using useTransactionReceipt with scopeKey
DESCRIPTION: Demonstrates how to use the useTransactionReceipt composable with a scopeKey for cache scoping.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useTransactionReceipt } from '@wagmi/vue'
import { config } from './config'

const result = useTransactionReceipt({
  scopeKey: 'foo',
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})
</script>

----------------------------------------

TITLE: Updating Wagmi State with setState Method
DESCRIPTION: Demonstrates how to update the config object's internal state using the setState method. This example conditionally sets the chainId based on whether there's a current connection.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_18

LANGUAGE: typescript
CODE:
import { mainnet } from '{{packageName}}/chains'
import { config } from './config'

config.setState((x) => ({
  ...x,
  chainId: x.current ? x.chainId : mainnet.id,
}))

----------------------------------------

TITLE: Using universalResolverAddress with getEnsAvatar
DESCRIPTION: Shows how to specify a custom ENS Universal Resolver Contract address when fetching an ENS avatar.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { getEnsAvatar } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAvatar = await getEnsAvatar(config, {
  name: normalize('wevm.eth'),
  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',
})

----------------------------------------

TITLE: Basic Usage of watchBlocks
DESCRIPTION: Demonstrates the basic usage of watchBlocks function, including setting up a watcher and unwatching.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { watchBlocks } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlocks(config, {
  onBlock(block) {
    console.log('Block changed!', block)
  },
})
unwatch()

----------------------------------------

TITLE: Using getBlock with blockNumber parameter
DESCRIPTION: Example of using getBlock to fetch block information at a specific block number using a bigint value.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getBlock } from '@wagmi/core'
import { config } from './config'

const blockNumber = await getBlock(config, {
  blockNumber: 42069n // [!code focus]
})

----------------------------------------

TITLE: Using cookieToInitialState in a server handler
DESCRIPTION: Demonstrates how to use the cookieToInitialState function in a server-side request handler. It takes the config and the request's cookie header as arguments to generate the initial state.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/cookieToInitialState.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { cookieToInitialState } from '{{packageName}}'
import config from './config'

function handler(req: Request) {
  const initialState = cookieToInitialState(config, req.headers.cookie)
  // ...
}

----------------------------------------

TITLE: Updating chain imports
DESCRIPTION: This code block demonstrates how to update the imports for mainnet and sepolia chains in Wagmi Core v2. They are now imported from '@wagmi/core/chains' instead of the main entrypoint.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { mainnet, sepolia } from '@wagmi/core' // [!code --]
import { mainnet, sepolia } from '@wagmi/core/chains' // [!code ++]

----------------------------------------

TITLE: Adding Capabilities to writeContracts
DESCRIPTION: Demonstrates how to add capability metadata, such as a paymaster service, to the writeContracts function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const id = await writeContracts(config, {
  contracts: [
    // ... contract calls
  ],
  capabilities: {
    paymasterService: {
      url: 'https://...'
    }
  }
})

----------------------------------------

TITLE: Using getProof with chainId parameter
DESCRIPTION: Demonstrates how to use the getProof function with a specific chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getProof.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getProof } from '@wagmi/core'
import { config } from './config'
import { optimism } from '@wagmi/core/chains'

await getProof(config, {
  chainId: optimism.id,
  address: '0x4200000000000000000000000000000000000016',
  storageKeys: [
    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
  ],
})

----------------------------------------

TITLE: Using watchContractEvent to monitor contract events
DESCRIPTION: Demonstrates how to use watchContractEvent to watch for Transfer events on a specific contract address. It sets up the watcher and provides a callback for handling new logs.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchContractEvent.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { watchContractEvent } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const unwatch = watchContractEvent(config, {
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  abi,
  eventName: 'Transfer',
  onLogs(logs) {
    console.log('New logs!', logs)
  },
})
unwatch()

----------------------------------------

TITLE: useBlock with Watch Parameters
DESCRIPTION: Demonstrates using useBlock hook with block watching functionality.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-14_snippet_9

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'

function App() {
  const result = useBlock({
    watch: true,
  })
}

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'

function App() {
  const result = useBlock({
    watch: {
      pollingInterval: 4_000,
    },
  })
}

----------------------------------------

TITLE: AccessList Parameter Example
DESCRIPTION: Shows how to use the accessList parameter when estimating gas
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEstimateGas } from '@wagmi/vue'
import { parseEther } from 'viem'
import { config } from './config'

const result = useEstimateGas({
  accessList: [{
    address: '0x1',
    storageKeys: ['0x1'],
  }],
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})
</script>

----------------------------------------

TITLE: Using useCallsStatus with Custom Connector in React
DESCRIPTION: This example demonstrates how to use the useCallsStatus hook with a custom connector in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCallsStatus.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useCallsStatus, useConnections } from 'wagmi/experimental'
import { config } from './config' // [!code focus]

function App() {
  const connections = useConnections()
  const result = useCallsStatus({
    connector: connections[0]?.connector, // [!code focus]
    id: '0x...',
  })
}

----------------------------------------

TITLE: Basic Usage of useConnect in Vue Component
DESCRIPTION: Demonstrates basic implementation of useConnect with the injected connector in a Vue component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnect } from '@wagmi/vue'
import { injected } from '@wagmi/connectors'

const { connect } = useConnect()
</script>

<template>
  <button @click="connect({ connector: injected() })">
    Connect
  </button>
</template>

----------------------------------------

TITLE: SendTransaction with Max Priority Fee Per Gas
DESCRIPTION: Shows how to set both the maximum fee and maximum priority fee per gas for an EIP-1559 transaction using the sendTransaction function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther, parseGwei } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Integrating Vue Query Devtools
DESCRIPTION: Sets up Vue Query development tools component for debugging and monitoring queries.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-14_snippet_9

LANGUAGE: vue
CODE:
<script setup>
import { VueQueryDevtools } from '@tanstack/vue-query-devtools'
</script>

<template>
  <VueQueryDevtools />
</template>

----------------------------------------

TITLE: Using useReconnect Hook in React Component
DESCRIPTION: Demonstrates how to use the useReconnect hook in a React component, calling the reconnect function in a useEffect hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReconnect.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useReconnect } from 'wagmi'
import { useEffect } from 'react'

function App() {
  const { reconnect } = useReconnect()

  useEffect(() => {
    reconnect()
  }, [])
}

----------------------------------------

TITLE: Installing Wagmi Connectors as peer dependencies
DESCRIPTION: This code block demonstrates how to install the @wagmi/connectors package as a peer dependency using different package managers (pnpm, npm, yarn, and bun).
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_5

LANGUAGE: bash
CODE:
pnpm add @wagmi/connectors

LANGUAGE: bash
CODE:
npm install @wagmi/connectors

LANGUAGE: bash
CODE:
yarn add @wagmi/connectors

LANGUAGE: bash
CODE:
bun add @wagmi/connectors

----------------------------------------

TITLE: Basic usage of actions plugin in Wagmi configuration
DESCRIPTION: Demonstrates how to integrate the actions plugin into a Wagmi CLI configuration file. Highlighted lines show the import and usage of the plugin.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/actions.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { actions } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    actions(),
  ],
})

----------------------------------------

TITLE: watchClient onChange Handler Example
DESCRIPTION: Detailed example showing the onChange handler implementation with client parameter
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchClient.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { watchClient } from '@wagmi/core'
import { config } from './config'

const unwatch = watchClient(config, {
  onChange(client) {
    console.log('Client changed!', client)
  },
})
unwatch()

----------------------------------------

TITLE: Basic Usage of Hardhat Plugin in wagmi Configuration
DESCRIPTION: Demonstrates the basic setup for using the Hardhat plugin in a wagmi CLI configuration file, pointing to a Hardhat project.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { hardhat } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    hardhat({
      project: '../hello_hardhat',
    }),
  ],
})

----------------------------------------

TITLE: Basic getGasPrice Usage
DESCRIPTION: Demonstrates basic usage of getGasPrice function to fetch the current gas price using a config object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getGasPrice.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getGasPrice } from '@wagmi/core'
import { config } from './config'

const gasPrice = await getGasPrice(config)

----------------------------------------

TITLE: Specifying a chainId Parameter
DESCRIPTION: Shows how to specify a particular chain ID when fetching balance data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBalance } from '@wagmi/vue'
import { mainnet } from '@wagmi/vue/chains' // [!code focus]

const result = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  chainId: mainnet.id, // [!code focus]
})
</script>

----------------------------------------

TITLE: Setting Value in call Action
DESCRIPTION: Demonstrates how to set the value (in wei) to be sent with the transaction in the 'call' action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/call.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { call } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

await call(config, {
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1'),
})

----------------------------------------

TITLE: Setting gasPrice in useSimulateContract for Legacy Transactions
DESCRIPTION: Example demonstrating how to set the gasPrice parameter when simulating a contract transaction using useSimulateContract. This parameter only applies to Legacy Transactions and represents the price in wei to pay per gas.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  gasPrice: parseGwei('20'), // [!code focus]
})
</script>

----------------------------------------

TITLE: Estimating Gas with Specific Connector in TypeScript
DESCRIPTION: Demonstrates using the useEstimateGas hook with a specific connector.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getConnections, estimateGas } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

function App() {
  const connections = getConnections(config)
  const result = useEstimateGas({
    connector: connections[0]?.connector,
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    value: parseEther('0.01'),
  })
}

----------------------------------------

TITLE: Configuring watchContractEvent with various parameters
DESCRIPTION: Shows multiple examples of configuring watchContractEvent with different parameters such as args, batch, chainId, and polling options.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchContractEvent.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { watchContractEvent } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { abi } from './abi'
import { config } from './config'

const unwatch = watchContractEvent(config, {
  abi,
  args: {
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  },
  batch: false,
  chainId: mainnet.id,
  eventName: 'Approval',
  onLogs(logs) {
    console.log('Logs changed!', logs)
  },
  onError(error) {
    console.error('Logs error', error)
  },
  poll: true,
  pollingInterval: 1_000,
  strict: true,
  syncConnectedChain: false,
})
unwatch()

----------------------------------------

TITLE: Chain-Specific Property Narrowing
DESCRIPTION: Shows how to narrow chain-specific properties using chainId parameter for better type inference and autocomplete.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/chain-properties.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { useSimulateContract } from 'wagmi'
import { celo } from 'wagmi/chains'

const result = useSimulateContract({
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
  chainId: celo.id,
  feeCurrency: '0x…'
})

----------------------------------------

TITLE: Using estimateMaxPriorityFeePerGas with Wagmi Config
DESCRIPTION: Demonstrates how to use the estimateMaxPriorityFeePerGas function with a Wagmi configuration to estimate gas fees.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateMaxPriorityFeePerGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { estimateMaxPriorityFeePerGas } from '@wagmi/core'
import { config } from './config'

const result = await estimateMaxPriorityFeePerGas(config)

----------------------------------------

TITLE: Custom Storage Prefix Configuration
DESCRIPTION: Example of configuring WalletConnect with a custom storage prefix for persisting provider state
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { walletConnect } from '{{connectorsPackageName}}'

const connector = walletConnect({
  customStoragePrefix: 'wagmi',
  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
})

----------------------------------------

TITLE: Updating useSignMessage Hook Implementation
DESCRIPTION: Example showing how to migrate from the Wagmi v1 approach of passing arguments to hooks to the v2 approach of passing arguments to mutation functions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useSignMessage } from 'wagmi'

const { signMessage } = useSignMessage({ message: 'foo bar baz' }) // [!code --]
const { signMessage } = useSignMessage() // [!code ++]

<button
  onClick={() => signMessage()} // [!code --]
  onClick={() => signMessage({ message: 'foo bar baz' })} // [!code ++]
>
  Sign message
</button>

----------------------------------------

TITLE: Setting the Fee Type for estimateFeesPerGas
DESCRIPTION: Demonstrates configuring the type parameter to specify whether to use legacy or EIP-1559 fee estimation, with 'eip1559' being the default.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { estimateFeesPerGas } from '@wagmi/core'
import { config } from './config'

const result = estimateFeesPerGas(config, {
  type: 'legacy', // [!code focus]
})

----------------------------------------

TITLE: Using usePrepareTransactionRequest with Chain ID
DESCRIPTION: Shows how to use the usePrepareTransactionRequest hook with a specific chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther } from 'viem'

function App() {
  const result = usePrepareTransactionRequest({
    chainId: mainnet.id,
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
  })
}

----------------------------------------

TITLE: Using watchBlockNumber with Basic Configuration
DESCRIPTION: Demonstrates basic usage of watchBlockNumber, including setting up a callback for block number changes and unsubscribing.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { watchBlockNumber } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlockNumber(config, {
  onBlockNumber(blockNumber) {
    console.log('Block number changed!', blockNumber)
  },
})
unwatch()

----------------------------------------

TITLE: Configuring Error Handling in readContracts
DESCRIPTION: Shows how to configure error handling behavior for contract calls in readContracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_8

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  allowFailure: false,
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
    },
    // ...
  ],
})

----------------------------------------

TITLE: Basic useProof Hook Usage
DESCRIPTION: Demonstrates basic usage of useProof hook with required address and storage keys parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useProof } from 'wagmi'

function App() {
  const result = useProof({
    address: '0x4200000000000000000000000000000000000016',
    storageKeys: [
      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
    ],
  })
}

----------------------------------------

TITLE: Setting Value for Contract Simulation in TypeScript React
DESCRIPTION: This snippet illustrates how to set the value parameter when using the useSimulateContract hook. It specifies the value in wei sent with the transaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_17

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { parseEther } from 'viem'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    value: parseEther('0.01'), // [!code focus]
  })
}

----------------------------------------

TITLE: Using getBlock with includeTransactions parameter
DESCRIPTION: Example of using getBlock with the includeTransactions flag set to true to include full transaction objects in the response.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { getBlock } from '@wagmi/core'
import { config } from './config'

const blockNumber = await getBlock(config, {
  includeTransactions: true // [!code focus]
})

----------------------------------------

TITLE: Using blockTag Parameter with getEnsText
DESCRIPTION: Demonstrates how to use the blockTag parameter to specify which state of the blockchain to query when fetching ENS text records.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getEnsText } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensText = getEnsText(config, {
  blockTag: 'latest', // [!code focus]
  name: normalize('wevm.eth'),
  key: 'com.twitter',
})

----------------------------------------

TITLE: Using watchBlockNumber with Polling
DESCRIPTION: Demonstrates how to use watchBlockNumber with polling instead of WebSocket subscription.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { watchBlockNumber } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlockNumber(config, {
  onBlockNumber(blockNumber) { 
    console.log('Block number changed!', blockNumber) 
  }, 
  poll: true,
})
unwatch()

----------------------------------------

TITLE: SignMessage with Raw Hex Data
DESCRIPTION: Demonstrates how to sign raw hexadecimal data instead of UTF-8 text
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { signMessage } from '@wagmi/core'
import { config } from './config'

const result = await signMessage(config, {
  message: { raw: '0x68656c6c6f20776f726c64' },
})

----------------------------------------

TITLE: Custom Config Usage with useDisconnect
DESCRIPTION: Example showing how to use useDisconnect with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDisconnect.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useDisconnect } from 'wagmi'
import { config } from './config'

function App() {
  const result = useDisconnect({
    config,
  })
}

----------------------------------------

TITLE: Using getFeeHistory with blockNumber Parameter
DESCRIPTION: Shows how to use getFeeHistory with the optional blockNumber parameter, which specifies the highest number block of the requested range.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-14_snippet_4

LANGUAGE: ts
CODE:
import { getFeeHistory } from '@wagmi/core'
import { config } from './config'

const feeHistory = await getFeeHistory(config, {
  blockCount: 4,
  blockNumber: 1551231n, // [!code focus]
  rewardPercentiles: [25, 75],
})

----------------------------------------

TITLE: Configuring Contracts with Addresses in Wagmi CLI (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure contracts in Wagmi CLI, including setting up single and multi-chain addresses. It shows the structure of the 'contracts' array with 'abi', 'address', and 'name' properties.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/options.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
export default {
  out: 'src/generated.ts',
  contracts: [
    {
      abi: […],
      address: '0x…',
      name: 'MyCoolContract',
    },
    {
      abi: […],
      address: {
        1: '0xfoo…',
        5: '0xbar…',
      },
      name: 'MyCoolMultichainContract'
    }
  ],
}

----------------------------------------

TITLE: Using addEthereumChainParameter in switchChain
DESCRIPTION: Demonstrates how to use the addEthereumChainParameter when switching chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { switchChain } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const result = await switchChain(config, {
  addEthereumChainParameter: {
    iconUrls: ['https://example.com/icon.png'],
  },
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Importing UseSignMessageReturnType
DESCRIPTION: Shows how to import the UseSignMessageReturnType type definition from the @wagmi/vue package for type checking return values.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignMessage.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { type UseSignMessageReturnType } from '@wagmi/vue'

----------------------------------------

TITLE: Using useWatchContractEvent with Custom Arguments
DESCRIPTION: Demonstrates how to use the useWatchContractEvent hook with custom arguments for filtering events.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchContractEvent.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useWatchContractEvent } from 'wagmi'
import { abi } from './abi'

function App() {
  useWatchContractEvent({
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    abi,
    args: {
      to: '0xd2135CfB216b74109775236E36d4b433F1DF507B'
    }
    eventName: 'Transfer',
    onLogs(logs) {
      console.log('New logs!', logs)
    },
  })
}

----------------------------------------

TITLE: Accessing Chain-Specific Properties in Wagmi
DESCRIPTION: Demonstrates how to access chain-specific properties like Celo's feeCurrency using simulateContract. Shows basic usage with config object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/chain-properties.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { simulateContract } from '@wagmi/core'
import { config } from './config'

const result = await simulateContract(config, {
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
  feeCurrency: '0x…'
})

----------------------------------------

TITLE: Type Inference with Inline Types for useSignTypedData
DESCRIPTION: Demonstrates type inference capabilities of useSignTypedData when using inline type definitions for the typed data structure.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignTypedData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useSignTypedData } from '@wagmi/vue'

const { signTypedData } = useSignTypedData()

signTypedData({
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: SendCalls with Capabilities
DESCRIPTION: Example showing sendCalls implementation with paymaster service capabilities.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { sendCalls } from '@wagmi/core/experimental'
import { config } from './config'

const id = await sendCalls(config, {
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      data: '0xdeadbeef',
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
    },
  ],
  capabilities: {
    paymasterService: {
      url: 'https://...'
    }
  }
})

----------------------------------------

TITLE: Basic watchAsset Usage
DESCRIPTION: Demonstrates basic usage of watchAsset function to add an ERC20 token to a wallet.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { watchAsset } from '@wagmi/core'
import { config } from './config'

await watchAsset(config, {
  type: 'ERC20',
  options: {
    address: '0x0000000000000000000000000000000000000000',
    symbol: 'WAGMI',
    decimals: 18,
  },
})

----------------------------------------

TITLE: Defining Domain for EIP-712 Typed Data
DESCRIPTION: Shows how to define the domain for EIP-712 typed data when using the signTypedData function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { signTypedData } from '@wagmi/core'
import { config } from './config'
import { types } from './typedData'

const result = await signTypedData(config, {
  domain: {
    name: 'Ether Mail',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
    version: '1',
  },
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Using pollingInterval Parameter with useWatchPendingTransactions
DESCRIPTION: Demonstrates how to set a custom polling interval in milliseconds when using polling to check for pending transactions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-14_snippet_9

LANGUAGE: tsx
CODE:
import { useWatchPendingTransactions } from 'wagmi'

function App() {
  useWatchPendingTransactions({
    onTransactions(transactions) {
      console.log('New transactions!', transactions)
    },
    pollingInterval: 1_000,
  })
}

----------------------------------------

TITLE: Configuring TypeScript for Wagmi in tsconfig.json
DESCRIPTION: Sets up the tsconfig.json file with strict mode enabled, which is required for Wagmi to work correctly with TypeScript.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/typescript.md#2025-04-14_snippet_0

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strict": true
  }
}

----------------------------------------

TITLE: Basic Plugin Configuration Example
DESCRIPTION: Demonstrates basic setup of the blockExplorer plugin with minimal configuration including baseUrl and contract details.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { blockExplorer } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    blockExplorer({
      baseUrl: 'https://api.etherscan.io/v2/api',
      contracts: [
        {
          name: 'Wagmigotchi',
          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
        },
      ],
    }),
  ],
})

----------------------------------------

TITLE: Basic useClient Implementation
DESCRIPTION: Demonstrates basic usage of the useClient hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useClient.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useClient } from 'wagmi'

function App() {
  const client = useClient()
}

----------------------------------------

TITLE: Handling Errors with onError Callback in useWatchBlockNumber
DESCRIPTION: Shows how to implement the onError callback to handle errors that occur when getting block information.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { useWatchBlockNumber } from 'wagmi'

function App() {
  useWatchBlockNumber({
    onBlockNumber(blockNumber) { 
      console.log('New block number', blockNumber) 
    }, 
    onError(error) { // [!code focus]
      console.error('Block error', error) // [!code focus]
    }, // [!code focus]
  })
}

----------------------------------------

TITLE: Using getConnectorClient with ChainId Parameter
DESCRIPTION: Example showing how to use getConnectorClient with a specific chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getConnectorClient } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const client = await getConnectorClient(config, {
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Narrowing Return Types with chainId Data Property
DESCRIPTION: Illustrates how to use the chainId property on return types to narrow results for chain-specific properties. This method uses a conditional check to ensure type-safe access to chain-specific data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/chain-properties.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useWaitForTransactionReceipt } from '@wagmi/vue'
import { zkSync } from '@wagmi/vue/chains'

const { data } = useWaitForTransactionReceipt({
  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',
})

if (data?.chainId === zkSync.id) {
  data?.logs
  //    ^? (property) logs: ZkSyncLog[] | undefined
}

----------------------------------------

TITLE: Using useEnsText with Scope Key
DESCRIPTION: This snippet shows how to use the useEnsText hook with a scope key to share cache between hooks with identical context.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { useEnsText } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsText({
    scopeKey: 'foo',
    name: normalize('wevm.eth'),
    key: 'com.twitter',
  })
}

----------------------------------------

TITLE: Using useBalance with Block Number
DESCRIPTION: Example showing how to fetch balance for a specific block number using useBalance hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useBalance } from 'wagmi'

function App() {
  const result = useBalance({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    blockNumber: 17829139n,
  })
}

----------------------------------------

TITLE: Using Chain ID with useVerifyMessage for Smart Contract Accounts
DESCRIPTION: Demonstrates how to include a chain ID when verifying a message signed by a Smart Contract Account.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useVerifyMessage } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useVerifyMessage({
    chainId: mainnet.id,
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    message: 'hello world',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Using emitOnBegin Parameter in watchBlocks
DESCRIPTION: Shows how to use the emitOnBegin parameter to receive the initial block when the subscription opens.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { watchBlocks } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlocks(config, {
  emitOnBegin: true,
  onBlock(block) {
    console.log('Block changed!', block)
  },
})
unwatch()

----------------------------------------

TITLE: Using getConnectorClient with Connector Parameter
DESCRIPTION: Example showing how to use getConnectorClient with a specific connector instance.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { getConnections, getConnectorClient } from '@wagmi/core'
import { config } from './config'

const connections = getConnections(config)
const client = await getConnectorClient(config, {
  connector: connections[0]?.connector,
})

----------------------------------------

TITLE: Using useTransactionReceipt with Custom Config
DESCRIPTION: This example demonstrates how to use the useTransactionReceipt hook with a custom configuration object imported from another file.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionReceipt.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useTransactionReceipt } from 'wagmi'
import { config } from './config'

function App() {
  const result = useTransactionReceipt({
    config,
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  })
}

----------------------------------------

TITLE: Using Block Tag with useVerifyMessage for Smart Contract Accounts
DESCRIPTION: Demonstrates how to use a block tag when verifying a message signed by a Smart Contract Account.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useVerifyMessage } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useVerifyMessage({
    blockTag: 'pending',
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    message: 'hello world',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Importing sendTransaction from @wagmi/core
DESCRIPTION: Shows how to import the sendTransaction function from the @wagmi/core package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'

----------------------------------------

TITLE: Specifying Block Number in readContracts
DESCRIPTION: Shows how to specify a block number for contract calls in readContracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_10

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  blockNumber: 69420n,
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
    },
    // ...
  ],
})

----------------------------------------

TITLE: Using getEnsAddress with blockTag parameter
DESCRIPTION: This example demonstrates how to use the getEnsAddress function with a specific block tag to fetch the ENS address at that block state.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getEnsAddress } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAddress = getEnsAddress(config, {
  blockTag: 'latest',
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Using useEnsText with Chain ID Parameter
DESCRIPTION: This snippet shows how to use the useEnsText hook with a specific chain ID to fetch the ENS text record from a particular network.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useEnsText } from 'wagmi'
import { mainnet } from 'wagmi/chains'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsText({
    chainId: mainnet.id,
    name: normalize('wevm.eth'),
    key: 'com.twitter',
  })
}

----------------------------------------

TITLE: Configuring Custom Build Commands for Hardhat Plugin
DESCRIPTION: Shows how to customize the clean, build, and rebuild commands used by the Hardhat plugin for project compilation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { hardhat } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    hardhat({
      commands: {
        clean: 'pnpm hardhat clean',
        build: 'pnpm hardhat compile',
        rebuild: 'pnpm hardhat compile',
      },
      project: '../hello_hardhat',
    }),
  ],
})

----------------------------------------

TITLE: Using useSimulateContract with Connector
DESCRIPTION: Demonstrates how to use the useSimulateContract hook with a specific connector.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_9

LANGUAGE: tsx
CODE:
import { useConnectorClient, useSimulateContract } from 'wagmi'
import { abi } from './abi'
import { config } from './config'

function App() {
  const { data: connector } = useConnectorClient()
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    connector,
  })
}

----------------------------------------

TITLE: Using Connector Parameter
DESCRIPTION: Example showing how to use waitForCallsStatus with a specific connector from connections.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getConnections, waitForCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

const connections = getConnections(config)
const status = await waitForCallsStatus(config, {
  connector: connections[0]?.connector,
  id: '0x1234567890abcdef',
})

----------------------------------------

TITLE: GetToken with ChainId - TypeScript
DESCRIPTION: Example showing how to use getToken with a specific chain ID parameter
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getToken } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const token = await getToken(config, {
  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Contract Deployment with Custom Account
DESCRIPTION: Demonstrates contract deployment using a specific account address
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/deployContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { deployContract } from '@wagmi/core'
import { wagmiAbi } from './abi'
import { config } from './config'

const result = await deployContract(config, {
  abi: wagmiAbi,
  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  args: [69420],
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...'
})

----------------------------------------

TITLE: Using useVerifyTypedData Hook in React Component
DESCRIPTION: Demonstrates how to use the useVerifyTypedData hook in a React component. It includes setting up the domain, types, message, and other required parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { domain, types } from './data'
import { useVerifyTypedData } from 'wagmi'

function App() {
  const result = useVerifyTypedData({
    domain,
    types,
    message: {
      from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
      },
      to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
      },
      contents: 'Hello, Bob!',
    },
    primaryType: 'Mail',
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Raw Message Verification
DESCRIPTION: Example demonstrating how to verify a message using raw hexadecimal data instead of UTF-8 encoding.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyMessage.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { verifyMessage } from '@wagmi/core'
import { config } from './config'

await verifyMessage(config, {
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  message: { raw: '0x68656c6c6f20776f726c64' }
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})

----------------------------------------

TITLE: Using getFeeHistory with chainId Parameter
DESCRIPTION: Shows how to use getFeeHistory with the optional chainId parameter, which specifies the ID of the chain to use when fetching data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-14_snippet_6

LANGUAGE: ts
CODE:
import { getFeeHistory } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const feeHistory = await getFeeHistory(config, {
  blockCount: 4,
  chainId: mainnet.id, // [!code focus]
  rewardPercentiles: [25, 75],
})

----------------------------------------

TITLE: Importing fallback Transport from wagmi
DESCRIPTION: Shows how to import the fallback Transport from the wagmi package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/fallback.md#2025-04-14_snippet_0

LANGUAGE: ts
CODE:
import { fallback } from '{{packageName}}'

----------------------------------------

TITLE: Transaction Query by Block Hash
DESCRIPTION: Shows how to query a transaction using block hash and index parameters
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useTransaction } from '@wagmi/vue'

const result = useTransaction({
  blockHash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  index: 0,
})
</script>

----------------------------------------

TITLE: Verifying Typed Data with Custom Config in React
DESCRIPTION: This snippet demonstrates how to use a custom config object with the useVerifyTypedData hook, allowing for more specific configuration options.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_8

LANGUAGE: tsx
CODE:
import { domain, types } from './data'
import { useVerifyTypedData } from 'wagmi'
import { config } from './config'

function App() {
  const result = useVerifyTypedData({
    config,
    domain,
    types,
    message: {
      from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
      },
      to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
      },
      contents: 'Hello, Bob!',
    },
    primaryType: 'Mail',
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Using useBlockTransactionCount with blockTag Parameter
DESCRIPTION: This snippet shows how to use the useBlockTransactionCount hook with a specific block tag.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'

function App() {
  const result = useBlock({
    blockTag: 'pending'
  })
}

----------------------------------------

TITLE: Using useSimulateContract with Data Suffix
DESCRIPTION: Shows how to use the useSimulateContract hook with a data suffix parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_10

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    dataSuffix: '0xdeadbeef',
  })
}

----------------------------------------

TITLE: Setting ENS Text Key with getEnsText
DESCRIPTION: Demonstrates how to specify the ENS key to retrieve a specific text record for an ENS name.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getEnsText } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensText = await getEnsText(config, {
  name: normalize('wevm.eth'),
  key: 'com.twitter', // [!code focus]
})

----------------------------------------

TITLE: Importing GetEnsTextReturnType
DESCRIPTION: Demonstrates how to import the return type for the getEnsText function for TypeScript type checking.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { type GetEnsTextReturnType } from '@wagmi/core'

----------------------------------------

TITLE: Contract Simulation with Access List
DESCRIPTION: Example showing how to simulate a contract call with a custom access list parameter for optimizing gas usage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { abi } from './abi'
import { config } from './config'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  accessList: [{
    address: '0x1',
    storageKeys: ['0x1'],
  }],
})
</script>

----------------------------------------

TITLE: Advanced Usage with Multiple Connectors
DESCRIPTION: Demonstrates how to use useDisconnect with multiple connectors, showing how to map through and disconnect from specific connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDisconnect.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useDisconnect } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const { connectors, disconnect } = useDisconnect()

  return (
    <div>
      {connectors.map((connector) => (
        <button key={connector.id} onClick={() => disconnect({ connector })}>
          {connector.name}
        </button>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Basic Usage of useEnsName
DESCRIPTION: Basic example of using the useEnsName composable to fetch an ENS name for a specific Ethereum address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsName } from '@wagmi/vue'

const result = useEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
})
</script>

----------------------------------------

TITLE: SendTransaction with Transaction Type
DESCRIPTION: Shows how to specify the transaction type when using the sendTransaction function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  type: 'eip1559',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Verifying Typed Data with Block Tag in React
DESCRIPTION: This example shows how to use the blockTag parameter when verifying typed data signed by a Smart Contract Account. It specifies the block tag to check for contract deployment.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import { domain, types } from './data'
import { useVerifyTypedData } from 'wagmi'

function App() {
  const result = useVerifyTypedData({
    blockTag: 'latest',
    domain,
    types,
    message: {
      from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
      },
      to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
      },
      contents: 'Hello, Bob!',
    },
    primaryType: 'Mail',
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Basic Usage of getStorageAt Action
DESCRIPTION: Demonstrates the basic usage of getStorageAt action to retrieve a value from a specific storage slot at the given address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getStorageAt } from '@wagmi/core'
import { config } from './config'

await getStorageAt(config, {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  slot: '0x0',
})

----------------------------------------

TITLE: Transaction Request with Access List
DESCRIPTION: Example showing how to prepare a transaction request with an access list for optimized gas usage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/prepareTransactionRequest.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { prepareTransactionRequest } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

await prepareTransactionRequest(config, {
  accessList: [
    {
      address: '0x1',
      storageKeys: ['0x1'],
    },
  ],
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1'),
})

----------------------------------------

TITLE: SendTransaction with Data Parameter
DESCRIPTION: Shows how to include contract data when using the sendTransaction function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Async Wagmi Configuration
DESCRIPTION: Creating an asynchronous configuration that can await external resources before generating the config.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-14_snippet_5

LANGUAGE: javascript
CODE:
export default defineConfig(async () => {
  const data = await asyncFunction()
  return {
    // ...
  }
})

----------------------------------------

TITLE: Basic Reconnect Usage Example
DESCRIPTION: Demonstrates basic usage of the reconnect action with injected connector.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/reconnect.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { reconnect } from '@wagmi/core'
import { injected } from '@wagmi/connectors'
import { config } from './config'

const result = await reconnect(config, { connectors: [injected()] })

----------------------------------------

TITLE: Using blockNumber Parameter with getEnsText
DESCRIPTION: Shows how to specify a block number when fetching ENS text records to retrieve historical data from a specific block.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getEnsText } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensText = getEnsText(config, {
  blockNumber: 17829139n, // [!code focus]
  name: normalize('wevm.eth'),
  key: 'com.twitter',
})

----------------------------------------

TITLE: Using chainId Parameter
DESCRIPTION: Example showing usage of getBlockNumber with chainId parameter to specify the target chain
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getBlockNumber } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const blockNumber = await getBlockNumber(config, {
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Using connect Action with Injected Connector
DESCRIPTION: Demonstrates how to use the connect action with an injected connector. It imports necessary dependencies and calls the connect function with a configuration and connector options.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/connect.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { connect } from '@wagmi/core'
import { injected } from '@wagmi/connectors'
import { config } from './config'

const result = await connect(config, { connector: injected() })

----------------------------------------

TITLE: GetToken with Format Units - TypeScript
DESCRIPTION: Demonstrates using getToken with the formatUnits parameter to specify token value formatting
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getToken } from '@wagmi/core'
import { config } from './config'

const token = getToken(config, {
  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
  formatUnits: 'ether',
})

----------------------------------------

TITLE: Using watchBlockNumber with syncConnectedChain Option
DESCRIPTION: Demonstrates how to use the syncConnectedChain option to control chain change subscriptions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { watchBlockNumber } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlockNumber(config, {
  onBlockNumber(blockNumber) {
    console.log('Block number changed!', blockNumber)
  },
  syncConnectedChain: false,
})
unwatch()

----------------------------------------

TITLE: Setting Cache Time for createConfig
DESCRIPTION: Shows how to set the cache time for polling-enabled features.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  cacheTime: 4_000, 
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Importing getWalletClient from @wagmi/core
DESCRIPTION: Shows how to import the getWalletClient function from the @wagmi/core package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getWalletClient.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getWalletClient } from '@wagmi/core'

----------------------------------------

TITLE: Specifying Account for Contract Call
DESCRIPTION: This snippet shows how to specify an account when calling a contract function using useReadContract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContract.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useReadContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'balanceOf',
    args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],
    account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  })
}

----------------------------------------

TITLE: Simulating Contract with Transaction Type in TypeScript
DESCRIPTION: This example demonstrates how to use the simulateContract function with a specified transaction type. It simulates a transferFrom function call on an ERC20 token contract using the EIP-1559 transaction type.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_15

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  type: 'eip1559',
})

----------------------------------------

TITLE: Specifying Chain ID in readContracts
DESCRIPTION: Shows how to specify the chain ID for a contract call when using readContracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
      chainId: 1,
    },
    // ...
  ],
})

----------------------------------------

TITLE: Using blockNumber Parameter with getBalance
DESCRIPTION: Shows how to specify a block number to fetch the balance at a specific block.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getBalance } from '@wagmi/core'
import { config } from './config'

const balance = getBalance(config, {
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  blockNumber: 17829139n, // [!code focus]
})

----------------------------------------

TITLE: Setting preference Parameter as Object for Coinbase Wallet
DESCRIPTION: Demonstrates the recommended way to configure the preference parameter as an object with options property, which controls the type of wallet to display.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { coinbaseWallet } from 'wagmi/connectors'

const connector = coinbaseWallet({
  appName: 'My Wagmi App',
  preference: { // [!code focus]
    options: 'smartWalletOnly' // [!code focus]
  }, // [!code focus]
})

----------------------------------------

TITLE: Using useBalance with Block Tag
DESCRIPTION: Example demonstrating how to use block tags with useBalance hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useBalance } from 'wagmi'

function App() {
  const result = useBalance({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    blockTag: 'latest',
  })
}

----------------------------------------

TITLE: Using getBlock with chainId parameter
DESCRIPTION: Example of using getBlock to fetch block information for a specific chain by providing its chainId.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { getBlock } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const blockNumber = await getBlock(config, {
  chainId: mainnet.id, // [!code focus]
})

----------------------------------------

TITLE: Basic Usage Example
DESCRIPTION: Example showing how to use getTransactionReceipt to fetch a transaction receipt using a transaction hash
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionReceipt.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getTransactionReceipt } from '@wagmi/core'
import { config } from './config'

await getTransactionReceipt(config, {
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})

----------------------------------------

TITLE: Setting ENS Name with getEnsText
DESCRIPTION: Shows how to specify and normalize the ENS name when fetching text records, ensuring proper handling of ENS name restrictions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { getEnsText } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensText = await getEnsText(config, {
  name: normalize('wevm.eth'), // [!code focus]
  key: 'com.twitter',
})

----------------------------------------

TITLE: Using hash Parameter with useWaitForTransactionReceipt
DESCRIPTION: Shows how to provide the transaction hash to monitor with the useWaitForTransactionReceipt composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-14_snippet_8

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWaitForTransactionReceipt } from '@wagmi/vue'

const result = useWaitForTransactionReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d', 
})
</script>

----------------------------------------

TITLE: Type Inference with Const-Asserted Types for useSignTypedData
DESCRIPTION: Shows how to use const-asserted types to enhance type inference when using the useSignTypedData composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignTypedData.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { useSignTypedData } from '@wagmi/vue'

const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

const { signTypedData } = useSignTypedData()

signTypedData({
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Custom Config Usage with useConnect
DESCRIPTION: Example showing how to use useConnect with a custom configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnect } from '@wagmi/vue'
import { config } from './config'

const result = useConnect({
  config,
})
</script>

----------------------------------------

TITLE: Using call Action with AccessList
DESCRIPTION: Shows how to use the 'call' action with an access list parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/call.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { call } from '@wagmi/core'
import { config } from './config'

await call(config, {
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  accessList: [
    {
      address: '0x1',
      storageKeys: ['0x1'],
    },
  ],
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Using usePrepareTransactionRequest with Data Parameter
DESCRIPTION: Demonstrates how to use the usePrepareTransactionRequest hook with a data parameter for contract method calls.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther } from 'viem'

function App() {
  const result = usePrepareTransactionRequest({
    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
  })
}

----------------------------------------

TITLE: Using onConnect Callback in useAccountEffect
DESCRIPTION: Demonstrates how to use the onConnect callback to handle account connection events.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { useAccountEffect } from '@wagmi/vue'

function App() {
  useAccountEffect({
    onConnect(data) {
      console.log('Connected!', data)
    },
  })
}

----------------------------------------

TITLE: Chain-Specific Verification
DESCRIPTION: Example showing message verification with specific chain ID for Smart Contract Accounts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyMessage.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { verifyMessage } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

await verifyMessage(config, {
  chainId: mainnet.id,
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  message: 'hello world',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})

----------------------------------------

TITLE: Specifying Chain ID for writeContracts
DESCRIPTION: Shows how to specify a target chain ID when using the writeContracts function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const id = await writeContracts(config, {
  contracts: [
    // ... contract calls
  ],
  chainId: 10,
})

----------------------------------------

TITLE: Disabling multiInjectedProviderDiscovery
DESCRIPTION: Shows how to disable the multi-injected provider discovery feature when creating a configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  multiInjectedProviderDiscovery: false, 
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Basic Usage of getPublicClient
DESCRIPTION: Demonstrates basic usage of getPublicClient to obtain a Viem PublicClient instance using a configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getPublicClient.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getPublicClient } from '@wagmi/core'
import { config } from './config'

const client = getPublicClient(config)

----------------------------------------

TITLE: useWalletClient with Chain ID
DESCRIPTION: Demonstrates using useWalletClient with a specific blockchain network ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useWalletClient } from 'wagmi'

function App() {
  const result = useWalletClient({
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using blockTag Parameter
DESCRIPTION: Example showing how to specify the blockTag parameter to get an ENS name at a specific block tag.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsName } from '@wagmi/vue'

const result = useEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  blockTag: 'latest', // [!code focus]
})
</script>

----------------------------------------

TITLE: Using blockNumber Parameter with getStorageAt
DESCRIPTION: Demonstrates how to specify a specific block number to check the storage at when using getStorageAt action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getStorageAt } from '@wagmi/core'
import { config } from './config'

await getStorageAt(config, {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  blockNumber: 16280770n, // [!code focus]
  slot: '0x0',
})

----------------------------------------

TITLE: Basic Usage of useBlockNumber in Vue Component
DESCRIPTION: Demonstrates basic implementation of useBlockNumber in a Vue component to display the current block number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBlockNumber } from '@wagmi/vue'

const { data: blockNumber } = useBlockNumber()
</script>

<template>
  Block Number: {{ blockNumber }}
</template>

----------------------------------------

TITLE: Specifying Account for writeContracts
DESCRIPTION: Shows how to specify an account when using the writeContracts function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const id = await writeContracts(config, {
  account: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  contracts: [
    // ... contract calls
  ],
})

----------------------------------------

TITLE: Basic Usage Implementation
DESCRIPTION: Demonstrates basic usage of showCallsStatus function with configuration and ID parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/showCallsStatus.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { showCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

await showCallsStatus(config, {
  id: '0x1234567890abcdef',
})

----------------------------------------

TITLE: Preparing Contract Write Operations with Wagmi
DESCRIPTION: Demonstrates the prepareWriteContract hook that prepares parameters for a contract write transaction, returning config to be passed to writeContract.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_24

LANGUAGE: typescript
CODE:
import { prepareWriteContract, writeContract } from "@wagmi/core";

const config = await prepareWriteContract({
  addressOrName: "0x...",
  contractInterface: wagmiAbi,
  functionName: "mint",
});
const result = await writeContract(config);

----------------------------------------

TITLE: Basic Usage of watchConnectors
DESCRIPTION: Demonstrates how to implement a connector watcher with a basic onChange callback function. Returns an unwatch function for cleanup.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnectors.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { watchConnectors } from '@wagmi/core'
import { config } from './config'

const unwatch = watchConnectors(config, {
  onChange(connectors) {
    console.log('Connectors changed!', connectors)
  },
})
unwatch()

----------------------------------------

TITLE: Specifying Account for Signing Typed Data
DESCRIPTION: Shows how to specify an account when using the signTypedData function. The account can be an address or an Account object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { signTypedData } from '@wagmi/core'
import { config } from './config'
import { types } from './typedData'

const result = await signTypedData(config, {
  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Prefetching Block Data on Link Hover in React
DESCRIPTION: This example shows how to prefetch block data when a user hovers over or focuses on a link. It uses the queryClient.prefetchQuery method to fetch the data ahead of time and seed the cache.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_10

LANGUAGE: tsx
CODE:
import { Link } from 'next/link'
import { getBlockQueryOptions } from 'wagmi'

function App() {
  const config = useConfig()
  const chainId = useChainId()

  // 1. Set up a function to prefetch the block data. // [!code hl]
  const prefetch = () => // [!code hl]
    queryClient.prefetchQuery(getBlockQueryOptions(config, { chainId })) // [!code hl]
  

  return (
    <Link
      // 2. Add event handlers to prefetch the block data // [!code hl] 
      // when user hovers over or focuses on the button. // [!code hl]
      onMouseEnter={prefetch} // [!code hl]
      onFocus={prefetch} // [!code hl]
      to="/block-details"
    >
      Block details
    </Link>
  )
}

----------------------------------------

TITLE: SendTransaction with Access List
DESCRIPTION: Shows how to use the sendTransaction function with an access list parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  accessList: [{
    address: '0x1',
    storageKeys: ['0x1'],
  }],
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Using useConnectorClient with Custom Config
DESCRIPTION: Shows how to use useConnectorClient with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useConnectorClient } from 'wagmi'
import { config } from './config'

function App() {
  const result = useConnectorClient({
    config,
  })
}

----------------------------------------

TITLE: Format Units Parameter
DESCRIPTION: Example showing how to specify format units for the results.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { useEstimateFeesPerGas } from 'wagmi'

function App() {
  const result = useEstimateFeesPerGas({
    formatUnits: 'ether',
  })
}

----------------------------------------

TITLE: SendCalls with Account Parameter
DESCRIPTION: Example showing sendCalls usage with explicit account address specification.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { sendCalls } from '@wagmi/core/experimental'
import { config } from './config'

const id = await sendCalls(config, {
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      data: '0xdeadbeef',
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
    },
  ],
})

----------------------------------------

TITLE: Using useEnsAddress with coinType Parameter
DESCRIPTION: Example showing how to fetch an ENS address for a specific ENSIP-9 coin type, allowing for multi-chain address resolution.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAddress } from '@wagmi/vue'
import { normalize } from 'viem/ens'

const result = useEnsAddress({
  coinType: 60, // [!code focus]
  name: normalize('wevm.eth'),
})
</script>

----------------------------------------

TITLE: Using useConnectors Hook in React Component
DESCRIPTION: Demonstrates how to use the useConnectors hook within a React component to access configured connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectors.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useConnectors } from 'wagmi'

function App() {
  const connectors = useConnectors()
}

----------------------------------------

TITLE: Using the chainId Parameter with estimateFeesPerGas
DESCRIPTION: Demonstrates how to specify a specific chain ID when estimating gas fees, which determines which blockchain network to use for the estimation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { estimateFeesPerGas } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const result = await estimateFeesPerGas(config, {
  chainId: mainnet.id, // [!code focus]
})

----------------------------------------

TITLE: Using useClient in Vue Component
DESCRIPTION: Demonstrates how to use the useClient composable within a Vue component's setup script.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useClient } from '@wagmi/vue'

const client = useClient()
</script>

----------------------------------------

TITLE: useFeeHistory with Custom Config
DESCRIPTION: Example showing how to use useFeeHistory with a custom configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useFeeHistory } from 'wagmi'
import { config } from './config'

function App() {
  const result = useFeeHistory({
    blockCount: 4,
    rewardPercentiles: [25, 75],
    config,
  })
}

----------------------------------------

TITLE: Specifying Chain ID for Multi-Chain Contracts in Sourcify Plugin
DESCRIPTION: Shows how to configure the chain ID for the Sourcify plugin, particularly useful when working with contracts deployed across multiple chains. The example demonstrates defining a contract with addresses for different chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { sourcify } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    sourcify({
      chainId: 100, // [!code focus]
      contracts: [
        {
          name: 'Community',
          address: {
            100: '0xC4c622862a8F548997699bE24EA4bc504e5cA865',
            137: '0xC4c622862a8F548997699bE24EA4bc504e5cA865',
          },
        },
      ],
    }),
  ],
})

----------------------------------------

TITLE: Using Connector with useWaitForCallsStatus
DESCRIPTION: Demonstrates how to use a specific connector with the useWaitForCallsStatus hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useWaitForCallsStatus, useConnections } from 'wagmi/experimental'
import { config } from './config' // [!code focus]

function App() {
  const connections = useConnections()
  const result = useWaitForCallsStatus({
    connector: connections[0]?.connector, // [!code focus]
    id: '0x...'
  })
}

----------------------------------------

TITLE: Paginated Parameters Example
DESCRIPTION: Shows how to implement pagination with a custom limit for fetching contract functions in batches.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useInfiniteReadContracts.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useInfiniteReadContracts } from 'wagmi'
import { abi } from './abi'

function Example({ limit = 10 }: { limit?: number } = {}) {
  const result = useInfiniteReadContracts({
    cacheKey: 'mlootAttributes',
    contracts(pageParam) {
      return [...new Array(limit)].map(
        (_, i) =>
          ({
            address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
            abi,
            functionName: 'getHand',
            args: [BigInt(pageParam + i)],
          }) as const,
      )
    },
    query: {
      initialPageParam: 1,
      getNextPageParam(_lastPage, _allPages, lastPageParam) {
        return lastPageParam + limit
      },
    }
  })
}

----------------------------------------

TITLE: useBlock with Chain ID
DESCRIPTION: Demonstrates using useBlock hook with a specific chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useBlock({
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using getFeeHistory with rewardPercentiles Parameter
DESCRIPTION: Demonstrates how to use getFeeHistory with the rewardPercentiles parameter, which is a list of percentile values to sample from each block's effective priority fees.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-14_snippet_3

LANGUAGE: ts
CODE:
import { getFeeHistory } from '@wagmi/core'
import { config } from './config'

const feeHistory = await getFeeHistory(config, {
  blockCount: 4,
  rewardPercentiles: [25, 75] // [!code focus]
})

----------------------------------------

TITLE: Setting the URL for HTTP Transport
DESCRIPTION: Shows how to set the URL of the JSON-RPC API for the HTTP Transport.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const transport = http('https://foo-bar-baz.quiknode.pro/...')

----------------------------------------

TITLE: Using useBytecode with Block Tag Parameter
DESCRIPTION: Demonstrates how to use the useBytecode hook with a block tag to retrieve bytecode from a specific block state.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useBytecode } from 'wagmi'

function App() {
  const result = useBytecode({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    blockTag: 'safe',
  })
}

----------------------------------------

TITLE: Configuring Wagmi Module in Nuxt Config (TypeScript)
DESCRIPTION: This snippet shows how to add the Wagmi Vue Nuxt module to the Nuxt configuration file. It enables auto-importing of Wagmi composables in the project.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/Nuxt.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { defineNuxtConfig } from 'nuxt/config'

export default defineNuxtConfig({
  modules: ['@wagmi/vue/nuxt'],
})

----------------------------------------

TITLE: Installing wagmi and dependencies with pnpm
DESCRIPTION: Command to install the wagmi library along with its required dependencies viem and @tanstack/react-query using the pnpm package manager.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/README.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm add wagmi viem @tanstack/react-query

----------------------------------------

TITLE: Importing estimateFeesPerGas from @wagmi/core
DESCRIPTION: Shows how to import the estimateFeesPerGas function from the @wagmi/core library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { estimateFeesPerGas } from '@wagmi/core'

----------------------------------------

TITLE: Setting Batch Size in readContracts
DESCRIPTION: Demonstrates how to set the maximum batch size for contract calls in readContracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_9

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  batchSize: 1_024,
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
    },
    // ...
  ],
})

----------------------------------------

TITLE: Using useShowCallsStatus in a React component
DESCRIPTION: This example demonstrates how to use the useShowCallsStatus hook in a React component. It creates a button that, when clicked, calls the showCallsStatus function with an ID parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useShowCallsStatus.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useShowCallsStatus } from 'wagmi/experimental'
import { parseEther } from 'viem'

function App() {
  const { showCallsStatus } = useShowCallsStatus()

  return (
    <button
      onClick={() =>
        showCallsStatus({
          id: '0x1234567890abcdef',
        })
      }
    >
      Show calls status
    </button>
  )
}

----------------------------------------

TITLE: Using useEnsAvatar Hook in React Component
DESCRIPTION: Demonstrates how to use the useEnsAvatar hook in a React component to fetch an ENS avatar. It includes normalizing the ENS name using viem's normalize function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useEnsAvatar } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsAvatar({
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Using chainId Parameter with useWatchPendingTransactions
DESCRIPTION: Shows how to specify a chain ID when watching for pending transactions on a specific blockchain network.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useWatchPendingTransactions } from 'wagmi'

function App() {
  useWatchPendingTransactions({
    chainId: 1
    onTransactions(transactions) {
      console.log('New transactions!', transactions)
    },
  })
}

----------------------------------------

TITLE: Using onDisconnect Callback in useAccountEffect
DESCRIPTION: Demonstrates how to use the onDisconnect callback to handle account disconnection events.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { useAccountEffect } from '@wagmi/vue'

function App() {
  useAccountEffect({
    onDisconnect() {
      console.log('Disconnected!')
    },
  })
}

----------------------------------------

TITLE: Emitting Initial Block in useWatchBlocks Hook
DESCRIPTION: Demonstrates how to enable the emitOnBegin option to receive the initial block when the subscription opens.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { useWatchBlocks } from 'wagmi'

function App() {
  useWatchBlocks({
    emitOnBegin: true,
    onBlock(block) {
      console.log('New block', block.number)
    },
  })
}

----------------------------------------

TITLE: Verifying Raw Message Data with useVerifyMessage
DESCRIPTION: Shows how to use the useVerifyMessage hook to verify a message using its raw data representation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useVerifyMessage } from 'wagmi'

function App() {
  const result = useVerifyMessage({
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    message: { raw: '0x68656c6c6f20776f726c64' }
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Enabling Proxy Implementation Fetching in Etherscan Plugin
DESCRIPTION: Demonstrates how to enable fetching of proxy implementation addresses for contracts in the Etherscan plugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { blockExplorer } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    etherscan({
      apiKey: process.env.ETHERSCAN_API_KEY,
      chainId: 1, 
      contracts: [
        {
          name: 'FiatToken',
          address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
        },
      ],
      tryFetchProxyImplementation: true,
    }),
  ],
})

----------------------------------------

TITLE: Using Custom Config with useWriteContract
DESCRIPTION: Demonstrates how to use a custom configuration with the useWriteContract hook instead of the context provider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContract.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useWriteContract } from 'wagmi'
import { config } from './config' // [!code focus]

function App() {
  const result = useWriteContract({
    config, // [!code focus]
  })
}

----------------------------------------

TITLE: watchAsset Parameters Type Import
DESCRIPTION: Shows how to import the WatchAssetParameters type definition.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { type WatchAssetParameters } from '@wagmi/core'

----------------------------------------

TITLE: Using blockTag Parameter
DESCRIPTION: Example showing how to get transaction count at a specific block tag.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionCount.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getTransactionCount } from '@wagmi/core'
import { config } from './config'

const transactionCount = getTransactionCount(config, {
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  blockTag: 'latest',
})

----------------------------------------

TITLE: Using emitMissed Parameter in watchBlocks
DESCRIPTION: Demonstrates how to use the emitMissed parameter to receive missed blocks in the callback.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { watchBlocks } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlocks(config, {
  emitMissed: true,
  onBlock(block) {
    console.log('Block changed!', block)
  },
})
unwatch()

----------------------------------------

TITLE: Basic getCallsStatus Usage Example
DESCRIPTION: Demonstrates basic usage of getCallsStatus action to fetch the status of a call batch using an ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCallsStatus.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

const status = await getCallsStatus(config, {
  id: '0x1234567890abcdef',
})

----------------------------------------

TITLE: Basic Usage Example
DESCRIPTION: Demonstrates basic usage of signMessage function with a simple message
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { signMessage } from '@wagmi/core'
import { config } from './config'

await signMessage(config, { message: 'hello world' })

----------------------------------------

TITLE: Setting Contract Address in readContracts
DESCRIPTION: Shows how to specify the contract address when using the readContracts function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
    },
    // ...
  ],
})

----------------------------------------

TITLE: Basic Usage of useSwitchAccount in Vue
DESCRIPTION: Demonstrates the basic implementation of useSwitchAccount in a Vue component, showing how to switch between different connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchAccount.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSwitchAccount } from 'wagmi'

const { connectors, switchAccount } = useSwitchAccount()
</script>

<template>
  <div>
    <button 
      v-for="connector in connectors" 
      :key="connector.id" 
      @click="switchAccount({ connector })"
    >
      {{ connector.name }}
    </button>
  </div>
</template>

----------------------------------------

TITLE: Using connect Action with Specific Chain ID
DESCRIPTION: Illustrates how to use the connect action with a specific chain ID. It imports the mainnet chain and uses its ID when calling the connect function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/connect.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { connect } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { injected } from '@wagmi/connectors'
import { config } from './config'

const result = await connect(config, {
  chainId: mainnet.id,
  connector: injected(),
})

----------------------------------------

TITLE: Using getWalletClient with connector parameter
DESCRIPTION: Shows how to use getWalletClient with a specific connector as a parameter, obtained from getConnections.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getWalletClient.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getConnections, getWalletClient } from '@wagmi/core'
import { config } from './config'

const connections = getConnections(config)
const client = getWalletClient(config, {
  connector: connections[0]?.connector,
})

----------------------------------------

TITLE: Using onReplaced Callback with useWaitForTransactionReceipt
DESCRIPTION: Shows how to use the onReplaced callback to handle scenarios where a transaction is replaced, repriced, or cancelled.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWaitForTransactionReceipt } from '@wagmi/vue'

const result = useWaitForTransactionReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  onReplaced: replacement => console.log(replacement), 
})
</script>

----------------------------------------

TITLE: Basic Usage of useChains
DESCRIPTION: Demonstrates basic implementation of the useChains hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChains.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useChains } from 'wagmi'

function App() {
  const chains = useChains()
}

----------------------------------------

TITLE: Importing useAccount Hook
DESCRIPTION: Shows how to import the useAccount hook from the wagmi library
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useAccount } from 'wagmi'

----------------------------------------

TITLE: Basic Usage of useWaitForCallsStatus
DESCRIPTION: Demonstrates basic implementation of the useWaitForCallsStatus hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useWaitForCallsStatus } from 'wagmi/experimental'

function App() {
  const result = useWaitForCallsStatus({
    id: '0x...', // [!code focus]
  })
}

----------------------------------------

TITLE: Using onReplaced Callback in useWaitForTransactionReceipt
DESCRIPTION: Shows how to use the onReplaced callback to handle replaced transactions in the useWaitForTransactionReceipt hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { useWaitForTransactionReceipt } from 'wagmi'

function App() {
  const result = useWaitForTransactionReceipt({
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
    onReplaced: replacement => console.log(replacement),
  })
}

----------------------------------------

TITLE: Using useToken Hook with Formatting Options in TypeScript
DESCRIPTION: This example shows how to use the useToken hook with custom formatting units for the result.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { useToken } from 'wagmi'

function App() {
  const result = useToken({
    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
    formatUnits: 'ether',
  })
}

----------------------------------------

TITLE: Using Custom Config with useSendTransaction
DESCRIPTION: Example demonstrating how to provide a custom configuration to the useSendTransaction composable instead of using the default from WagmiPlugin.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSendTransaction.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSendTransaction } from '@wagmi/vue'
import { config } from './config' // [!code focus]

const result = useSendTransaction({
  config, // [!code focus]
})
</script>

----------------------------------------

TITLE: Using useEnsText with Block Number Parameter
DESCRIPTION: This snippet shows how to use the useEnsText hook with a specific block number to fetch the ENS text record at that block.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useEnsText } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsText({
    blockNumber: 17829139n,
    name: normalize('wevm.eth'),
    key: 'com.twitter',
  })
}

----------------------------------------

TITLE: Using chainId Parameter with getBlockTransactionCount
DESCRIPTION: Example showing how to specify a particular chain ID when fetching the block transaction count data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getBlockTransactionCount } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const blockTransactionCount = await getBlockTransactionCount(config, {
  chainId: mainnet.id, // [!code focus]
})

----------------------------------------

TITLE: Using connector Parameter in switchChain
DESCRIPTION: Demonstrates how to specify a connector when using the switchChain action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { getConnections, switchAccount } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const connections = getConnections(config)
const result = await switchChain(config, {
  chainId: mainnet.id,
  connector: connections[0]?.connector,
})

----------------------------------------

TITLE: Gas Estimation with EIP-1559 Parameters
DESCRIPTION: Example showing gas estimation with EIP-1559 specific parameters including maxFeePerGas and maxPriorityFeePerGas.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateGas.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { estimateGas } from '@wagmi/core'
import { parseEther, parseGwei } from 'viem'
import { config } from './config'

const result = await estimateGas(config, {
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Importing signTypedData from @wagmi/core
DESCRIPTION: Shows how to import the signTypedData function from the @wagmi/core library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { signTypedData } from '@wagmi/core'

----------------------------------------

TITLE: Configuring Disconnect Simulation for Safe Connector
DESCRIPTION: Demonstrates how to enable shimDisconnect feature which simulates disconnect behavior by tracking connection status in storage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/safe.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { safe } from 'wagmi/connectors'

const connector = safe({
  shimDisconnect: true,
})

----------------------------------------

TITLE: Configuring Max Fee Per Gas for EIP-1559 Transactions in TypeScript React
DESCRIPTION: This snippet illustrates how to set the maxFeePerGas parameter for EIP-1559 Transactions when using the useSimulateContract hook. It specifies the total fee per gas in wei.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_13

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    maxFeePerGas: parseGwei('20'), // [!code focus]
  })
}

----------------------------------------

TITLE: Defining Contracts in Sourcify Plugin Configuration
DESCRIPTION: Shows how to define the contracts array in the Sourcify plugin configuration. Each contract requires a name and can include an address as either a direct string or a record of addresses mapped by chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { sourcify } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    sourcify({
      chainId: 100,
      contracts: [ // [!code focus]
        { // [!code focus]
          name: 'Deposit', // [!code focus]
          address: '0x00000000219ab540356cbb839cbe05303d7705fa', // [!code focus]
        }, // [!code focus]
      ], // [!code focus]
    }),
  ],
})

----------------------------------------

TITLE: Using useCapabilities with Custom Config
DESCRIPTION: Shows how to use the useCapabilities hook with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useCapabilities } from 'wagmi/experimental'
import { config } from './config'

function App() {
  const result = useCapabilities({
    config,
  })
}

----------------------------------------

TITLE: Using useBalance with Scope Key
DESCRIPTION: Example showing how to use scope key for cache management with useBalance hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useBalance } from 'wagmi'

function App() {
  const result = useBalance({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    scopeKey: 'foo',
  })
}

----------------------------------------

TITLE: Basic Usage of getBlockNumber
DESCRIPTION: Demonstrates basic usage of getBlockNumber with configuration
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getBlockNumber } from '@wagmi/core'
import { config } from './config'

const blockNumber = await getBlockNumber(config)

----------------------------------------

TITLE: Importing useEstimateGas Hook in TypeScript
DESCRIPTION: Shows how to import the useEstimateGas hook from the wagmi library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useEstimateGas } from 'wagmi'

----------------------------------------

TITLE: Basic Usage of useBytecode in Vue Component
DESCRIPTION: Demonstrates basic usage of the useBytecode composable to retrieve bytecode for a specific contract address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBytecode } from '@wagmi/vue'

const { data: byteCode } = useBytecode({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
})
</script>

<template>
  Byte Code: {{ byteCode }}
</template>

----------------------------------------

TITLE: Using useSimulateContract with Access List
DESCRIPTION: Demonstrates how to use the useSimulateContract hook with an access list parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    accessList: [{
      address: '0x1',
      storageKeys: ['0x1'],
    }],
  })
}

----------------------------------------

TITLE: Configuring Batch Size for HTTP Transport
DESCRIPTION: Demonstrates how to configure the maximum number of JSON-RPC requests to send in a batch.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const transport = http('https://foo-bar-baz.quiknode.pro/...', {
  batch: {
    batchSize: 2_000 // [!code focus]
  }
})

----------------------------------------

TITLE: Basic Usage Example
DESCRIPTION: Simple example showing how to use the useEstimateFeesPerGas hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useEstimateFeesPerGas } from 'wagmi'

function App() {
  const result = useEstimateFeesPerGas()
}

----------------------------------------

TITLE: Using the config Parameter with WagmiPlugin
DESCRIPTION: Demonstrates how to specify the config parameter when using WagmiPlugin in a Vue application.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createApp } from 'vue'
import { WagmiPlugin } from '@wagmi/vue'

import App from './App.vue'
import { config } from './config' 

createApp(App)
  .use(WagmiPlugin, { 
    config // [!code focus]
  })
  .mount('#app')

----------------------------------------

TITLE: Enabling SSR in Wagmi Configuration
DESCRIPTION: This snippet demonstrates how to enable server-side rendering in the Wagmi configuration by setting the 'ssr' property to true.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ssr.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  ssr: true,
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http(),
  },
})

----------------------------------------

TITLE: Enabling Server-Side Rendering with createConfig
DESCRIPTION: Demonstrates how to enable server-side rendering support in the configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi' 
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  ssr: true, 
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Configuring maxFeePerGas for EIP-1559 Transactions
DESCRIPTION: Example showing how to set the maxFeePerGas parameter when simulating a contract transaction. This parameter represents the total fee per gas in wei for EIP-1559 transactions, inclusive of maxPriorityFeePerGas.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  maxFeePerGas: parseGwei('20'), // [!code focus]
})
</script>

----------------------------------------

TITLE: Using Custom Config with useConnections in Vue
DESCRIPTION: Example of using useConnections with a custom config parameter in a Vue component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnections.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnections } from 'wagmi'
import { config } from './config' // [!code focus]

const connections = useConnections({
  config, // [!code focus]
})
</script>

----------------------------------------

TITLE: Using the blockTag Parameter
DESCRIPTION: Demonstrates setting a blockTag when fetching balance data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBalance } from '@wagmi/vue'

const result = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  blockTag: 'latest', // [!code focus]
})
</script>

----------------------------------------

TITLE: Using useBalance with Token Address
DESCRIPTION: Example showing how to fetch ERC-20 token balance using useBalance hook (deprecated).
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { useBalance } from 'wagmi'

function App() {
  const result = useBalance({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    token: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
  })
}

----------------------------------------

TITLE: watchConnectors Implementation with onChange Handler
DESCRIPTION: Detailed example showing the implementation of watchConnectors with focused highlight on the onChange callback handler.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnectors.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { watchConnectors } from '@wagmi/core'
import { config } from './config'

const unwatch = watchConnectors(config, {
  onChange(connectors) {
    console.log('Connectors changed!', connectors)
  },
})
unwatch()

----------------------------------------

TITLE: Setting maxPriorityFeePerGas for EIP-1559 Transactions
DESCRIPTION: Example demonstrating how to configure both maxFeePerGas and maxPriorityFeePerGas parameters for EIP-1559 transactions. The maxPriorityFeePerGas parameter represents the max priority fee per gas in wei.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'), // [!code focus]
})
</script>

----------------------------------------

TITLE: useEnsAddress with Block Number
DESCRIPTION: Example showing useEnsAddress configuration with specific block number parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useEnsAddress } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsAddress({
    blockNumber: 17829139n,
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Using getWalletClient with config
DESCRIPTION: Demonstrates how to use the getWalletClient function with a configuration object to obtain a WalletClient.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getWalletClient.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getWalletClient } from '@wagmi/core'
import { config } from './config'

const client = getWalletClient(config)

----------------------------------------

TITLE: Configuring Gas for Contract Simulation in TypeScript React
DESCRIPTION: This snippet demonstrates how to set the gas parameter when using the useSimulateContract hook. It specifies the gas provided for transaction execution.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_11

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    gas: parseGwei('20'), // [!code focus]
  })
}

----------------------------------------

TITLE: Using useWatchAsset Hook in React Component
DESCRIPTION: Demonstrates how to implement the useWatchAsset hook in a React component to add token tracking functionality. Shows setting up a button that triggers the watchAsset function with ERC20 token parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchAsset.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useWatchAsset } from 'wagmi'

function App() {
  const { watchAsset } = useWatchAsset()

  return (
    <button
      onClick={() => watchAsset({
        type: 'ERC20',
        options: {
          address: '0x0000000000000000000000000000000000000000',
          symbol: 'WAGMI',
          decimals: 18,
        },
      })}
    >
      Watch asset
    </button>
  )
}

----------------------------------------

TITLE: Configuring formatUnits Parameter for estimateFeesPerGas
DESCRIPTION: Shows how to set the formatUnits parameter to control the unit format of the returned gas fee estimates, with 'ether' as the default.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { estimateFeesPerGas } from '@wagmi/core'
import { config } from './config'

const feesPerGas = estimateFeesPerGas(config, {
  formatUnits: 'ether', // [!code focus]
})

----------------------------------------

TITLE: Verifying Typed Data with blockNumber in TypeScript
DESCRIPTION: This example demonstrates using the verifyTypedData function with a blockNumber parameter. It imports necessary dependencies and verifies a typed data signature using a specific block number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { verifyTypedData } from '@wagmi/core'
import { domain, types } from './data'
import { config } from './config'

const valid = await verifyTypedData(config, {
  blockNumber: 12345678n, // [!code focus]
  domain,
  types,
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  primaryType: 'Mail',
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})
// true

----------------------------------------

TITLE: Usage with Chain ID
DESCRIPTION: Example demonstrating how to specify a chain ID when fetching a transaction receipt
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionReceipt.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getTransactionReceipt } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

await getTransactionReceipt(config, {
  chainId: mainnet.id,
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})

----------------------------------------

TITLE: Implementing the Request Function for Custom Transport
DESCRIPTION: Shows how to implement the required request function that follows the EIP-1193 standard.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { customRpc } from './rpc'

const transport = custom({
  async request({ method, params }) { // [!code focus:3]
    const response = await customRpc.request(method, params)
    return response
  }
})

----------------------------------------

TITLE: Using address Parameter with getStorageAt
DESCRIPTION: Demonstrates how to specify the contract address parameter when using getStorageAt action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getStorageAt } from '@wagmi/core'
import { config } from './config'

await getStorageAt(config, {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', // [!code focus]
  slot: '0x0',
})

----------------------------------------

TITLE: Importing UseWatchPendingTransactionsParameters Type
DESCRIPTION: Shows how to import the type definition for the parameters of the useWatchPendingTransactions hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type UseWatchPendingTransactionsParameters } from 'wagmi'

----------------------------------------

TITLE: useWalletClient with Account Parameter
DESCRIPTION: Shows how to use useWalletClient with a specific Ethereum account address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useWalletClient } from 'wagmi'

function App() {
  const result = useWalletClient({
    account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  })
}

----------------------------------------

TITLE: Specifying chainId with getEnsAvatar
DESCRIPTION: Shows how to fetch an ENS avatar using a specific chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { getEnsAvatar } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAvatar = await getEnsAvatar(config, {
  chainId: mainnet.id,
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Configuring Retry Count for Custom Transport
DESCRIPTION: Shows how to configure the maximum number of retry attempts when a request fails.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const transport = custom(provider, {
  retryCount: 5, // [!code focus]
})

----------------------------------------

TITLE: Using Custom Config with useSignMessage
DESCRIPTION: Example showing how to use useSignMessage with a custom configuration instead of the default WagmiProvider config.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignMessage.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useSignMessage } from 'wagmi'
import { config } from './config'

function App() {
  const result = useSignMessage({
    config,
  })
}

----------------------------------------

TITLE: getChains Return Type
DESCRIPTION: Shows the TypeScript type definition for the return value of the getChains function, which is a readonly array of Chain objects.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getChains.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type GetChainsReturnType } from '@wagmi/core'

----------------------------------------

TITLE: Setting appLogoUrl Parameter for Coinbase Wallet
DESCRIPTION: Demonstrates configuring the appLogoUrl parameter, which sets the application logo displayed in the Coinbase Wallet interface.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { coinbaseWallet } from 'wagmi/connectors'

const connector = coinbaseWallet({
  appName: 'My Wagmi App',
  appLogoUrl: 'https://example.com/myLogoUrl.png', // [!code focus]
})

----------------------------------------

TITLE: Using onReplaced Callback
DESCRIPTION: Shows how to handle transaction replacement events using the onReplaced callback
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { waitForTransactionReceipt } from '@wagmi/core'
import { config } from './config'

const transactionReceipt = await waitForTransactionReceipt(config, {
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  onReplaced: replacement => console.log(replacement),
})

----------------------------------------

TITLE: Basic watchClient Usage Example
DESCRIPTION: Demonstrates how to use watchClient to subscribe to client changes with a basic onChange handler
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchClient.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { watchClient } from '@wagmi/core'
import { config } from './config'

const unwatch = watchClient(config, {
  onChange(client) {
    console.log('Client changed!', client)
  },
})
unwatch()

----------------------------------------

TITLE: Using usePrepareTransactionRequest with Gas Price
DESCRIPTION: Shows how to use the usePrepareTransactionRequest hook with a specified gas price for legacy transactions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther, parseGwei } from 'viem'

function App() {
  const result = usePrepareTransactionRequest({
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    gasPrice: parseGwei('20'),
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
  })
}

----------------------------------------

TITLE: Using getConnectorClient with Account Parameter
DESCRIPTION: Example showing how to use getConnectorClient with a specific account address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getConnectorClient } from '@wagmi/core'
import { config } from './config'

const client = await getConnectorClient(config, {
  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
})

----------------------------------------

TITLE: useAccountEffect with Custom Config
DESCRIPTION: Example showing useAccountEffect implementation with custom configuration
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccountEffect.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useAccountEffect } from 'wagmi'
import { config } from './config'

function App() {
  useAccountEffect({
    config,
    onConnect(data) {
      console.log('Connected!', data)
    },
    onDisconnect() {
      console.log('Disconnected!')
    },
  })
}

----------------------------------------

TITLE: useEnsName with Universal Resolver
DESCRIPTION: Example showing useEnsName hook usage with a custom universal resolver address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { useEnsName } from 'wagmi'

function App() {
  const result = useEnsName({
    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',
  })
}

----------------------------------------

TITLE: Importing useAccount Hook in Vue
DESCRIPTION: Shows how to import the useAccount composable from the @wagmi/vue package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useAccount } from '@wagmi/vue'

----------------------------------------

TITLE: Importing useAccountEffect in Vue
DESCRIPTION: Shows how to import the useAccountEffect composable from the @wagmi/vue package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useAccountEffect } from '@wagmi/vue'

----------------------------------------

TITLE: Using useBalance with Chain ID
DESCRIPTION: Example showing how to specify a chain ID when fetching balance using useBalance hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useBalance } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useBalance({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using blockTag with getEnsAvatar
DESCRIPTION: Demonstrates how to specify a block tag when fetching an ENS avatar.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getEnsAvatar } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAvatar = await getEnsAvatar(config, {
  blockTag: 'latest',
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Using useConnectorClient with Custom Connector
DESCRIPTION: Demonstrates using useConnectorClient with a specific connector from connections array.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { useConnections, useConnectorClient } from 'wagmi'

function App() {
  const connections = useConnections(config)
  const result = useConnectorClient({
    connector: connections[0]?.connector,
  })
}

----------------------------------------

TITLE: useEnsName with Chain ID
DESCRIPTION: Example demonstrating useEnsName hook usage with a specific chain ID parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useEnsName } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useEnsName({
    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using useConfig in Vue Component
DESCRIPTION: Demonstrates how to use the useConfig composable within a Vue component's setup script to access the wagmi configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConfig.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConfig } from 'wagmi'

const config = useConfig()
</script>

----------------------------------------

TITLE: Basic Usage of normalizeChainId Function
DESCRIPTION: Shows a basic example of using the normalizeChainId function to convert a hexadecimal chain ID string to a number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/normalizeChainId.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { normalizeChainId } from 'wagmi'

const result = normalizeChainId('0x1')

----------------------------------------

TITLE: Using useEnsAddress with blockNumber Parameter
DESCRIPTION: Example showing how to use the blockNumber parameter to fetch an ENS address at a specific block height.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAddress } from '@wagmi/vue'
import { normalize } from 'viem/ens'

const result = useEnsAddress({
  blockNumber: 17829139n, // [!code focus]
  name: normalize('wevm.eth'),
})
</script>

----------------------------------------

TITLE: Chain Staleness Configuration
DESCRIPTION: Configuration example for handling new chain additions and their staleness behavior
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { walletConnect } from '{{connectorsPackageName}}'

const connector = walletConnect({
  isNewChainsStale: true,
  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
})

----------------------------------------

TITLE: Using useEnsAddress with Custom Config
DESCRIPTION: Example showing how to use a custom wagmi configuration when fetching an ENS address instead of using the global configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAddress } from '@wagmi/vue'
import { normalize } from 'viem/ens'
import { config } from './config' // [!code focus]

const result = useEnsAddress({
  config, // [!code focus]
  name: normalize('wevm.eth'),
})
</script>

----------------------------------------

TITLE: Using Polling Interval
DESCRIPTION: Example showing how to configure polling interval for waitForCallsStatus.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { waitForCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

const status = await waitForCallsStatus(config, {
  id: '0x1234567890abcdef',
  pollingInterval: 1_000,
})

----------------------------------------

TITLE: Using slot Parameter with getStorageAt
DESCRIPTION: Demonstrates how to specify the storage slot parameter (as a hex encoded value) when using getStorageAt action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getStorageAt } from '@wagmi/core'
import { config } from './config'

await getStorageAt(config, {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  slot: '0x0', // [!code focus]
})

----------------------------------------

TITLE: Using useReconnect with Specific Connectors in React
DESCRIPTION: Demonstrates how to use the useReconnect hook with specific connectors in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReconnect.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useReconnect } from 'wagmi'
import { mainnet } from 'wagmi/chains'
import { useEffect } from 'react'

function App() {
  const { reconnect, connectors } = useReconnect()

  useEffect(() => {
    reconnect({ connectors })
  }, [])
}

----------------------------------------

TITLE: Basic Message Verification
DESCRIPTION: Example showing basic usage of verifyMessage function to verify a signed message.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { verifyMessage } from '@wagmi/core'
import { config } from './config'

await verifyMessage(config, {
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  message: 'hello world',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})

----------------------------------------

TITLE: Basic useFeeHistory Implementation
DESCRIPTION: Demonstrates basic usage of the useFeeHistory hook with blockCount and rewardPercentiles parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useFeeHistory } from 'wagmi'

function App() {
  const result = useFeeHistory({
    blockCount: 4,
    rewardPercentiles: [25, 75]
})
}

----------------------------------------

TITLE: useEnsAddress with Block Tag
DESCRIPTION: Example showing useEnsAddress configuration with block tag parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useEnsAddress } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsAddress({
    name: normalize('wevm.eth'),
    blockTag: 'latest',
  })
}

----------------------------------------

TITLE: Gas Estimation with Custom Account
DESCRIPTION: Example demonstrating gas estimation using a specific Ethereum account address as the transaction sender.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { estimateGas } from '@wagmi/core'
import { parseEther } from 'viem'
import { config } from './config'

const result = await estimateGas(config, {
  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Using getTransaction with Specific Chain ID
DESCRIPTION: Shows how to fetch a transaction from a specific blockchain by providing the chainId parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransaction.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { getTransaction } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const transaction = await getTransaction(config, {
  chainId: mainnet.id, 
  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
})

----------------------------------------

TITLE: Using useBytecode Hook in React Component
DESCRIPTION: Demonstrates basic usage of the useBytecode hook within a React component to retrieve bytecode for a specific address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useBytecode } from 'wagmi'

function App() {
  const result = useBytecode({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  })
}

----------------------------------------

TITLE: Using usePublicClient with Specific Chain ID
DESCRIPTION: Shows how to use the usePublicClient hook with a specific chain ID, in this case, the mainnet.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePublicClient.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { usePublicClient } from 'wagmi'
import { mainnet } from 'wagmi/chains'
import { config } from './config'

function App() {
  const client = usePublicClient({
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using getTransaction with Block Tag and Index
DESCRIPTION: Demonstrates fetching a transaction using a block tag (like 'safe', 'latest', etc.) and transaction index.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransaction.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getTransaction } from '@wagmi/core'
import { config } from './config'

const transaction = getTransaction(config, {
  blockTag: 'safe', 
  index: 0,
})

----------------------------------------

TITLE: Specifying Unit for Balance Formatting
DESCRIPTION: Shows how to specify the unit parameter to control how the balance is formatted in the result.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { getBalance } from '@wagmi/core'
import { config } from './config'

const balance = getBalance(config, {
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  unit: 'ether', // [!code focus]
})

----------------------------------------

TITLE: Using getCallsStatus with ID Parameter
DESCRIPTION: Shows how to use getCallsStatus with the required ID parameter that identifies the call batch.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCallsStatus.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

const status = await getCallsStatus(config, {
  id: '0x1234567890abcdef', // [!code focus]
})

----------------------------------------

TITLE: Using useCapabilities with Account Parameter
DESCRIPTION: Demonstrates how to use the useCapabilities hook with a specific account address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useCapabilities } from '@wagmi/core'
import { config } from './config'

const status = await useCapabilities({
  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
})

----------------------------------------

TITLE: Using pollingInterval Parameter in useWaitForTransactionReceipt
DESCRIPTION: Demonstrates how to set a custom polling interval for the useWaitForTransactionReceipt hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { useWaitForTransactionReceipt } from 'wagmi'

function App() {
  const result = useWaitForTransactionReceipt({
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
    pollingInterval: 1_000,
  })
}

----------------------------------------

TITLE: Custom Config Usage - React TSX
DESCRIPTION: Example showing how to use useSendTransaction with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendTransaction.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useSendTransaction } from 'wagmi'
import { config } from './config'

function App() {
  const result = useSendTransaction({
    config,
  })
}

----------------------------------------

TITLE: Using Custom Config with useWatchBlocks Hook
DESCRIPTION: Demonstrates how to use a custom config object with the useWatchBlocks hook instead of the default WagmiProvider config.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { useWatchBlocks } from 'wagmi'
import { config } from './config'

function App() {
  useWatchBlocks({
    config,
    onBlock(block) {
      console.log('New block', block.number)
    },
  })
}

----------------------------------------

TITLE: SendTransaction with Gas Parameter
DESCRIPTION: Demonstrates how to specify the gas amount for a transaction using the sendTransaction function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther, parseGwei } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  gas: parseGwei('20'),
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Using Block Tag with useTransactionCount Hook
DESCRIPTION: This example demonstrates how to use the useTransactionCount hook with a specific block tag to get the transaction count at that block state.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useTransactionCount } from 'wagmi'

function App() {
  const result = useTransactionCount({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    blockTag: 'latest',
  })
}

----------------------------------------

TITLE: Using Timeout Parameter
DESCRIPTION: Example demonstrating how to set a timeout for waitForCallsStatus polling.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { waitForCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

const status = await waitForCallsStatus(config, {
  id: '0x1234567890abcdef',
  timeout: 10_000,
})

----------------------------------------

TITLE: Using Custom Config with useAccountEffect
DESCRIPTION: Shows how to provide a custom Config instance to useAccountEffect instead of using the one from WagmiPlugin.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useAccountEffect } from '@wagmi/vue'
import { config } from './config'

useAccountEffect({
  config,
  onConnect(data) {
    console.log('Connected!', data)
  },
  onDisconnect() {
    console.log('Disconnected!')
  },
})
</script>

----------------------------------------

TITLE: Using useConnectorClient with ChainId Parameter
DESCRIPTION: Shows how to specify a chain ID when using the useConnectorClient composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnectorClient } from '@wagmi/vue'

const result = useConnectorClient({
  chainId: mainnet.id,
})
</script>

----------------------------------------

TITLE: Customizing Hook Names in Wagmi CLI React Plugin Configuration
DESCRIPTION: Illustrates how to customize hook names using the getHookName option in the react plugin configuration. This example sets a custom naming pattern for the generated hooks.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/react.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { react } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    react({
      getHookName({ contractName, type }) {
        return `use${contractName}__${type}`
      },
    }),
  ],
})

----------------------------------------

TITLE: Configuring Cache Duration in Sourcify Plugin
DESCRIPTION: Demonstrates setting a custom cache duration for fetched ABIs. The cache duration is specified in milliseconds and defaults to 30 minutes if not provided.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { sourcify } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    sourcify({
      cacheDuration: 300_000, // [!code focus]
      chainId: 100,
      contracts: [
        {
          name: 'Deposit',
          address: '0x00000000219ab540356cbb839cbe05303d7705fa',
        },
      ],
    }),
  ],
})

----------------------------------------

TITLE: Narrowing Return Types with chainId Parameter
DESCRIPTION: Shows how to use the chainId parameter to narrow return types for chain-specific properties. This example uses zkSync chain to demonstrate type inference for transaction logs.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/chain-properties.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useWaitForTransactionReceipt } from '@wagmi/vue'
import { zkSync } from '@wagmi/vue/chains'

const { data } = useWaitForTransactionReceipt({
  chainId: zkSync.id,
  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',
})

data?.logs
//    ^? (property) logs: ZkSyncLog[] | undefined

----------------------------------------

TITLE: Importing useFeeHistory Hook
DESCRIPTION: Shows how to import the useFeeHistory hook from the wagmi library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useFeeHistory } from 'wagmi'

----------------------------------------

TITLE: Using useTransactionReceipt with Scope Key
DESCRIPTION: This snippet shows how to use the useTransactionReceipt hook with a scope key to manage caching context.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionReceipt.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useTransactionReceipt } from 'wagmi'
import { config } from './config'

function App() {
  const result = useTransactionReceipt({
    scopeKey: 'foo'
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  })
}

----------------------------------------

TITLE: Using Gateway URLs for CCIP-Read Resolution
DESCRIPTION: Demonstrates how to use the gatewayUrls parameter to specify Universal Resolver gateways for resolving CCIP-Read requests.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { useEnsAvatar } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsAvatar({
    gatewayUrls: ['https://cloudflare-ipfs.com'],
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Using useConnectorClient with ChainId Parameter
DESCRIPTION: Demonstrates using useConnectorClient with a specific blockchain network chainId.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useConnectorClient } from 'wagmi'

function App() {
  const result = useConnectorClient({
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using getEnsAddress to fetch an ENS address
DESCRIPTION: This example demonstrates how to use the getEnsAddress function to fetch an ENS address for a given name. It also shows the usage of the normalize function from viem/ens for proper name handling.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getEnsAddress } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAddress = getEnsAddress(config, {
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Configuring Output Path in Wagmi CLI (TypeScript)
DESCRIPTION: This example demonstrates how to set the 'out' property in Wagmi CLI configuration. It specifies the path where generated code will be output.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/options.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
export default {
  out: 'src/generated.ts',
  contracts: [
    {
      abi: […],
      name: 'MyCoolContract'
    },
  ],
}

----------------------------------------

TITLE: Basic Usage of HTTP Transport in Wagmi Config
DESCRIPTION: Demonstrates how to use the http Transport with createConfig to set up chain configurations with custom RPC endpoints.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { 
  createConfig, 
  http // [!code hl]
} from '{{packageName}}'
import { mainnet, sepolia } from '{{packageName}}/chains'

export const config = createConfig({
  chains: [mainnet, sepolia],
  connectors: [injected()],
  transports: {
    [mainnet.id]: http('https://foo-bar-baz.quiknode.pro/...'), // [!code hl]
    [sepolia.id]: http('https://foo-bar-sep.quiknode.pro/...'), // [!code hl]
  },
})

----------------------------------------

TITLE: BigInt Lossy Serialization with JSON
DESCRIPTION: Shows how to implement lossy BigInt serialization using JSON.stringify with a custom replacer function. Converts BigInt values to string format without ability to deserialize back to BigInt.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/faq.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
const replacer = (key, value) =>
  typeof value === 'bigint' ? value.toString() : value

JSON.stringify({ value: 69420n }, replacer)
// '{"value":"69420"}'

----------------------------------------

TITLE: Using Custom Config with useWatchBlockNumber
DESCRIPTION: Example of providing a custom configuration to the useWatchBlockNumber hook instead of using the nearest WagmiProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { useWatchBlockNumber } from 'wagmi'
import { config } from './config'

function App() {
  useWatchBlockNumber({
    config, // [!code focus]
    onBlockNumber(blockNumber) {
      console.log('New block number', blockNumber)
    },
  })
}

----------------------------------------

TITLE: Deprecated Usage of normalizeChainId with Recommended Alternative
DESCRIPTION: Demonstrates how the normalizeChainId function is deprecated and shows the recommended alternative using the native Number constructor.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/normalizeChainId.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { normalizeChainId } from 'wagmi' // [!code --]
const chainId = normalizeChainId(123n) // [!code --]
const chainId = Number(123n) // [!code ++]

----------------------------------------

TITLE: Using useGasPrice Hook with Custom Config
DESCRIPTION: Shows how to use the useGasPrice hook with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useGasPrice.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useGasPrice } from 'wagmi'
import { config } from './config'

function App() {
  const result = useGasPrice({
    config,
  })
}

----------------------------------------

TITLE: Setting Gas Price in call Action
DESCRIPTION: Demonstrates how to set the gas price when using the 'call' action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/call.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { call } from '@wagmi/core'
import { parseGwei } from 'viem'
import { config } from './config'

await call(config, {
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  gasPrice: parseGwei('20'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Basic Usage of getBytecode
DESCRIPTION: Demonstrates how to use the getBytecode action to retrieve bytecode at a specific address using a configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getBytecode } from '@wagmi/core'
import { config } from './config'

await getBytecode(config, {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
})

----------------------------------------

TITLE: Using chainId Parameter in switchChain
DESCRIPTION: Shows how to specify the chainId when using the switchChain action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { switchChain } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const result = await switchChain(config, {
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Specifying Block Number for ENS Avatar Retrieval
DESCRIPTION: Shows how to use the blockNumber parameter to fetch an ENS avatar at a specific block number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useEnsAvatar } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsAvatar({
    blockNumber: 17829139n,
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: After Migration Example Using configureChains API in Wagmi
DESCRIPTION: Example showing the updated way to configure connectors after version 0.3.0, using the new configureChains API to simplify provider setup and chain configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_34

LANGUAGE: tsx
CODE:
import { chain, createClient, defaultChains } from "wagmi";

import { alchemyProvider } from "wagmi/providers/alchemy";
import { publicProvider } from "wagmi/providers/public";

import { CoinbaseWalletConnector } from "wagmi/connectors/coinbaseWallet";
import { InjectedConnector } from "wagmi/connectors/injected";
import { MetaMaskConnector } from "wagmi/connectors/metaMask";
import { WalletConnectConnector } from "wagmi/connectors/walletConnect";

const alchemyId = process.env.ALCHEMY_ID;

const { chains } = configureChains(defaultChains, [
  alchemyProvider({ alchemyId }),
  publicProvider(),
]);

const client = createClient({
  autoConnect: true,
  connectors: [
    new MetaMaskConnector({ chains }),
    new CoinbaseWalletConnector({
      chains,
      options: {
        appName: "wagmi",
      },
    }),
    new WalletConnectConnector({
      chains,
      options: {
        qrcode: true,
      },
    }),
    new InjectedConnector({
      chains,
      options: {
        name: "Injected",
        shimDisconnect: true,
      },
    }),
  ],
});

----------------------------------------

TITLE: Basic Usage of getToken - TypeScript
DESCRIPTION: Demonstrates basic usage of getToken to fetch information about a token using its address
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getToken } from '@wagmi/core'
import { config } from './config'

const token = getToken(config, {
  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
})

----------------------------------------

TITLE: Setting Transaction Type for Contract Simulation
DESCRIPTION: Example demonstrating how to specify the transaction request type when simulating a contract transaction. This parameter allows narrowing down the transaction parameters to those specific to the chosen type.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_8

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { abi } from './abi'
import { config } from './config'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  type: 'eip1559', // [!code focus]
})
</script>

----------------------------------------

TITLE: Using useEnsAddress with blockTag Parameter
DESCRIPTION: Example showing how to use the blockTag parameter to fetch an ENS address at a specific block tag.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAddress } from '@wagmi/vue'
import { normalize } from 'viem/ens'

const result = useEnsAddress({
  name: normalize('wevm.eth'),
  blockTag: 'latest', // [!code focus]
})
</script>

----------------------------------------

TITLE: Using getEnsAddress with coinType parameter
DESCRIPTION: This example demonstrates how to use the getEnsAddress function with a specific coin type to fetch the ENS address for that coin type.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getEnsAddress } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAddress = await getEnsAddress(config, {
  coinType: 60,
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Using scopeKey with useBlockNumber
DESCRIPTION: Shows how to use the scopeKey parameter to isolate caching context for specific instances of useBlockNumber.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBlockNumber } from '@wagmi/vue'

const { data: blockNumber } = useBlockNumber({
  scopeKey: 'foo',
})
</script>

----------------------------------------

TITLE: useBlock with Scope Key
DESCRIPTION: Shows how to use useBlock hook with a scope key for cache management.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-14_snippet_8

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'
import { config } from './config'

function App() {
  const result = useBlock({
    scopeKey: 'foo'
  })
}

----------------------------------------

TITLE: Using getWalletClient with chainId parameter
DESCRIPTION: Demonstrates how to use getWalletClient with a specific chainId as a parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getWalletClient.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getWalletClient } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const client = getWalletClient(config, {
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Specifying Chain ID in useWatchBlocks Hook
DESCRIPTION: Shows how to set the chainId parameter in the useWatchBlocks hook to watch blocks on a specific chain.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { useWatchBlocks } from 'wagmi'

function App() {
  useWatchBlocks({
    chainId: 1,
    onBlock(block) {
      console.log('New block', block.number)
    },
  })
}

----------------------------------------

TITLE: Using getChainId with Wagmi Config
DESCRIPTION: Demonstrates how to use the getChainId function with a Wagmi configuration to retrieve the current chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getChainId.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getChainId } from '@wagmi/core'
import { config } from './config'

const chainId = getChainId(config)

----------------------------------------

TITLE: Using useSimulateContract with Block Number
DESCRIPTION: Demonstrates how to use the useSimulateContract hook with a specific block number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { abi } from './abi'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f', 
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    blockNumber: 17829139n,
  })
}

----------------------------------------

TITLE: Using useTransactionReceipt with Custom Config
DESCRIPTION: Shows how to use the useTransactionReceipt composable with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useTransactionReceipt } from '@wagmi/vue'
import { config } from './config'

const result = useTransactionReceipt({
  config,
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})
</script>

----------------------------------------

TITLE: Configuring Custom Target Provider
DESCRIPTION: Shows how to configure a custom target provider for the injected connector using a function that returns provider details.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/injected.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { injected } from '{{connectorsPackageName}}'

const connector = injected({
  target() {
    return {
      id: 'windowProvider',
      name: 'Window Provider',
      provider: window.ethereum,
    }
  },
})

----------------------------------------

TITLE: Using useConnectorClient in Vue Component
DESCRIPTION: Demonstrates basic usage of the useConnectorClient composable within a Vue component's setup script.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnectorClient } from '@wagmi/vue'

const result = useConnectorClient()
</script>

----------------------------------------

TITLE: Updating fetchBalance Function Calls with New Parameter Names
DESCRIPTION: Example of updating the fetchBalance function call to use the new 'address' parameter instead of the deprecated 'addressOrName' parameter. This shows both the old and new syntax.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_14

LANGUAGE: typescript
CODE:
const result = await fetchBalance({
- addressOrName: '0x…',
+ address: '0x…',
})

----------------------------------------

TITLE: Storage Method Examples
DESCRIPTION: Examples of using getItem, setItem, and removeItem methods with the storage object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { createStorage } from '{{packageName}}'

const storage = createStorage({ storage: localStorage })
const recentConnectorId = storage.getItem('recentConnectorId')
storage.setItem('recentConnectorId', 'foo')
storage.removeItem('recentConnectorId')

----------------------------------------

TITLE: useFeeHistory with Block Tag
DESCRIPTION: Shows how to use useFeeHistory with a block tag parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useFeeHistory } from 'wagmi'

function App() {
  const result = useFeeHistory({
    blockCount: 4,
    blockTag: 'safe',
    rewardPercentiles: [25, 75]
  })
}

----------------------------------------

TITLE: Enabling Polling in useWatchBlocks Hook
DESCRIPTION: Demonstrates how to enable polling instead of WebSocket subscription for checking new blocks by setting the poll option to true.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
import { useWatchBlocks } from 'wagmi'

function App() {
  useWatchBlocks({
    onBlock(block) { 
      console.log('New block', block.number) 
    }
    poll: true,
  })
}

----------------------------------------

TITLE: Using useTransaction with Custom Config
DESCRIPTION: Shows how to use the useTransaction hook with a custom configuration instead of the default WagmiProvider config.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useTransaction } from 'wagmi'
import { config } from './config'

function App() {
  const result = useTransaction({
    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
    config,
  })
}

----------------------------------------

TITLE: Verifying Typed Data with Scope Key in React
DESCRIPTION: This example shows how to use the scopeKey parameter to scope the cache to a specific context when using the useVerifyTypedData hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_9

LANGUAGE: tsx
CODE:
import { domain, types } from './data'
import { useVerifyTypedData } from 'wagmi'

function App() {
  const result = useVerifyTypedData({
    scopeKey: 'foo'
    domain,
    types,
    message: {
      from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
      },
      to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
      },
      contents: 'Hello, Bob!',
    },
    primaryType: 'Mail',
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Custom Name Configuration
DESCRIPTION: Example showing how to set a custom name for the block explorer source.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { blockExplorer } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    blockExplorer({
      baseUrl: 'https://api.etherscan.io/v2/api',
      contracts: [
        {
          name: 'Wagmigotchi',
          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
        },
      ],
      name: 'Etherscan',
    }),
  ],
})

----------------------------------------

TITLE: QR Modal Display Configuration
DESCRIPTION: Example of configuring QR modal display behavior for WalletConnect
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
import { walletConnect } from '{{connectorsPackageName}}'

const connector = walletConnect({
  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
  showQrModal: true,
})

----------------------------------------

TITLE: Using watchBlockNumber with Specific Chain ID
DESCRIPTION: Demonstrates how to use watchBlockNumber with a specific chain ID, in this case, the Ethereum mainnet.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { watchBlockNumber } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const unwatch = watchBlockNumber(config, {
  chainId: mainnet.id,
  onBlockNumber(blockNumber) {
    console.log('Block number changed!', blockNumber)
  },
})
unwatch()

----------------------------------------

TITLE: Using useTransactionConfirmations with Custom Config
DESCRIPTION: Demonstrates how to use a custom configuration with the useTransactionConfirmations hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useTransactionConfirmations } from 'wagmi'
import { config } from './config'

function App() {
  const result = useTransactionConfirmations({
    config,
    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
  })
}

----------------------------------------

TITLE: ProjectId Configuration
DESCRIPTION: Example of configuring WalletConnect with a project ID from WalletConnect Cloud
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { walletConnect } from '{{connectorsPackageName}}'

const connector = walletConnect({
  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
})

----------------------------------------

TITLE: Basic Usage of useChainId in Vue Component
DESCRIPTION: Shows how to use the useChainId composable in a Vue component to get the current chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChainId.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useChainId } from '@wagmi/vue'

const chainId = useChainId()
</script>

----------------------------------------

TITLE: Using useEnsAddress with chainId Parameter
DESCRIPTION: Example showing how to specify a chain ID when fetching an ENS address to target a specific blockchain network.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAddress } from '@wagmi/vue'
import { mainnet } from '@wagmi/vue/chains' // [!code focus]
import { normalize } from 'viem/ens'

const result = useEnsAddress({
  chainId: mainnet.id, // [!code focus]
  name: normalize('wevm.eth'),
})
</script>

----------------------------------------

TITLE: Basic Usage of getBalance
DESCRIPTION: Demonstrates basic usage of getBalance to fetch a balance for a specific address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getBalance } from '@wagmi/core'
import { config } from './config'

const balance = getBalance(config, {
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
})

----------------------------------------

TITLE: Using useCapabilities Hook in React Component
DESCRIPTION: Demonstrates how to use the useCapabilities hook within a React component to fetch wallet capabilities.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useCapabilities } from 'wagmi/experimental'

function App() {
  const result = useCapabilities()
}

----------------------------------------

TITLE: Custom Config with useBlockNumber
DESCRIPTION: Demonstrates using a custom configuration with the useBlockNumber hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useBlockNumber } from 'wagmi'
import { config } from './config'

function App() {
  const result = useBlockNumber({
    config,
  })
}

----------------------------------------

TITLE: Configuring Name Prefix in Foundry Plugin
DESCRIPTION: Demonstrates how to set a name prefix for artifacts in the Foundry plugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { foundry } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    foundry({
      namePrefix: 'HelloFoundry',
    }),
  ],
})

----------------------------------------

TITLE: Using useSimulateContract with Custom Config
DESCRIPTION: Shows how to use the useSimulateContract hook with a custom configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_8

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f', 
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    config,
  })
}

----------------------------------------

TITLE: Configuring Contract ABI in Wagmi CLI (TypeScript)
DESCRIPTION: This example shows how to set up the 'abi' property for a contract in the Wagmi CLI configuration. The ABI is used by plugins to generate code based on contract properties.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/options.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export default {
  out: 'src/generated.ts',
  contracts: [
    {
      abi: […],
      name: 'MyCoolContract'
    },
  ],
}

----------------------------------------

TITLE: Using Prepared Contract Write Configuration in Wagmi
DESCRIPTION: Example showing how to use the prepareWriteContract action to prepare configuration for writeContract. This pattern was introduced as a breaking change to improve contract writing functionality.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_21

LANGUAGE: typescript
CODE:
import { prepareWriteContract, writeContract } from '@wagmi/core'

const tokenId = 69

const config = await prepareWriteContract({
 addressOrName: '0x...',
 contractInterface: wagmiAbi,
 functionName: 'mint',
 args: [tokenId]
})

const result = await writeContract({
 ...config
})

----------------------------------------

TITLE: useEnsName with Block Number
DESCRIPTION: Example demonstrating useEnsName hook usage with a specific block number parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useEnsName } from 'wagmi'

function App() {
  const result = useEnsName({
    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    blockNumber: 17829139n,
  })
}

----------------------------------------

TITLE: useEnsAddress with Chain ID
DESCRIPTION: Example showing useEnsAddress configuration with specific chain ID parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useEnsAddress } from 'wagmi'
import { mainnet } from 'wagmi/chains'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsAddress({
    chainId: mainnet.id,
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Accessing Query Keys via Import Method
DESCRIPTION: Shows how to get query options and keys using the import method in vanilla JavaScript, suitable for utility functions outside Vue components.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getBalanceQueryOptions } from '@wagmi/vue/query' // [!code hl]
import { config } from './config'

function perform() {
  const { queryKey } = getBalanceQueryOptions(config, { // [!code hl]
    chainId: config.state.chainId // [!code hl]
  }) // [!code hl]
}

----------------------------------------

TITLE: Estimating Gas with Transaction Data in TypeScript
DESCRIPTION: Shows how to use the useEstimateGas hook with specific transaction data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { useEstimateGas } from 'wagmi'
import { parseEther } from 'viem'
import { config } from './config'

function App() {
  const result = useEstimateGas({
    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    value: parseEther('0.01'),
  })
}

----------------------------------------

TITLE: Using useSwitchAccount Hook in React Component
DESCRIPTION: Demonstrates how to use the useSwitchAccount hook in a React component to render buttons for switching accounts using available connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchAccount.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useSwitchAccount } from 'wagmi'

function App() {
  const { connectors, switchAccount } = useSwitchAccount()

  return (
    <div>
      {connectors.map((connector) => (
        <button key={connector.id} onClick={() => switchAccount({ connector })}>
          {connector.name}
        </button>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Using useBytecode with chainId Parameter
DESCRIPTION: Example showing how to specify a different chain to query using the chainId parameter with a chain imported from @wagmi/vue/chains.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBytecode } from '@wagmi/vue'
import { mainnet } from '@wagmi/vue/chains'

const { data: byteCode } = useBytecode({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  chainId: mainnet.id, // [!code focus]
})
</script>

<template>
  Byte Code: {{ byteCode }}
</template>

----------------------------------------

TITLE: Configuring Mock Connector with Feature Flags
DESCRIPTION: Shows how to set up a mock connector with custom feature flags to change behavior of Wagmi internals, including error simulation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/mock.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { mock } from '{{connectorsPackageName}}'
import { UserRejectedRequestError } from 'viem'

const connector = mock({
  accounts: [
    '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
    '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',
  ],
  features: {
    connectError: new UserRejectedRequestError(new Error('Failed to connect.')),
    reconnect: false,
  },
})

----------------------------------------

TITLE: useProof with Scope Key
DESCRIPTION: Example showing how to use useProof hook with a scope key for cache context management.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useProof } from 'wagmi'
import { config } from './config'

function App() {
  const result = useProof({
    scopeKey: 'foo'
    address: '0x4200000000000000000000000000000000000016',
    storageKeys: [
      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
    ],
  })
}

----------------------------------------

TITLE: Importing WatchBlockNumberReturnType
DESCRIPTION: Shows how to import the WatchBlockNumberReturnType for TypeScript type checking of the return value.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { type WatchBlockNumberReturnType } from '@wagmi/core'

----------------------------------------

TITLE: Using useShowCallsStatus with custom config
DESCRIPTION: This snippet illustrates how to use the useShowCallsStatus hook with a custom configuration object instead of the default provided by WagmiProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useShowCallsStatus.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useShowCallsStatus } from 'wagmi/experimental'
import { config } from './config'

function App() {
  const result = useShowCallsStatus({
    config,
  })
}

----------------------------------------

TITLE: Setting Block Tag in useWatchBlocks Hook
DESCRIPTION: Demonstrates how to set the blockTag parameter in the useWatchBlocks hook to watch for specific block types.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useWatchBlocks } from 'wagmi'

function App() {
  useWatchBlocks({
    blockTag: 'latest',
    onBlock(block) {
      console.log('New block', block.number)
    },
  })
}

----------------------------------------

TITLE: Basic Usage of getEnsResolver
DESCRIPTION: Demonstrates the basic usage of getEnsResolver to fetch an ENS resolver for a normalized ENS name.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsResolver.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getEnsResolver } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensResolver = getEnsResolver(config, {
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Using useSimulateContract with Chain ID
DESCRIPTION: Demonstrates how to use the useSimulateContract hook with a specific chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { mainnet } from 'wagmi/chains'
import { abi } from './abi'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f', 
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Importing UseBytecodeParameters Type
DESCRIPTION: Shows how to import the type definition for the useBytecode parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type UseBytecodeParameters } from '@wagmi/vue'

----------------------------------------

TITLE: Using usePrepareTransactionRequest with Access List
DESCRIPTION: Demonstrates how to use the usePrepareTransactionRequest hook with an access list parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther } from 'viem'

function App() {
  const result = usePrepareTransactionRequest({
    accessList: [
      {
        address: '0x1',
        storageKeys: ['0x1'],
      },
    ],
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
  })
}

----------------------------------------

TITLE: Using account Parameter with getCapabilities
DESCRIPTION: Demonstrates how to use getCapabilities with a specific account address parameter to fetch capabilities for that account.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCapabilities.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getCapabilities } from '@wagmi/core/experimental'
import { config } from './config'

const capabilities = await getCapabilities(config, {
  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e', 
})

----------------------------------------

TITLE: Using the reconnectOnMount Parameter with WagmiPlugin
DESCRIPTION: Demonstrates how to use the reconnectOnMount parameter to control whether previously connected connectors should reconnect on component mount.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { createApp } from 'vue'
import { WagmiPlugin } from '@wagmi/vue'

import App from './App.vue'
import { config } from './config' 

createApp(App)
  .use(WagmiPlugin, { 
    config,
    reconnectOnMount: false // [!code focus]
  })
  .mount('#app')

----------------------------------------

TITLE: Specifying Block Number in call Action
DESCRIPTION: Shows how to specify a block number to perform the call against in the 'call' action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/call.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { call } from '@wagmi/core'
import { config } from './config'

await call(config, {
  blockNumber: 15121123n,
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Using getFeeHistory with blockTag Parameter
DESCRIPTION: Demonstrates how to use getFeeHistory with the optional blockTag parameter, which specifies the block tag of the highest number block of the requested range.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-14_snippet_5

LANGUAGE: ts
CODE:
import { getFeeHistory } from '@wagmi/core'
import { config } from './config'

const feeHistory = await getFeeHistory(config, {
  blockCount: 4,
  blockTag: 'safe', // [!code focus]
  rewardPercentiles: [25, 75],
})

----------------------------------------

TITLE: Using the scopeKey Parameter
DESCRIPTION: Shows how to use scopeKey to scope the cache to a specific context.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-14_snippet_8

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBalance } from '@wagmi/vue'

const result = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  scopeKey: 'foo', // [!code focus]
})
</script>

----------------------------------------

TITLE: Using useClient with Custom Config
DESCRIPTION: Shows how to use useClient with a custom config parameter in a Vue component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useClient } from '@wagmi/vue'
import { config } from './config'

const client = useClient({
  config,
})
</script>

----------------------------------------

TITLE: QR Modal Options Configuration
DESCRIPTION: Example of customizing the QR modal appearance for WalletConnect
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { walletConnect } from '{{connectorsPackageName}}'

const connector = walletConnect({
  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
  qrModalOptions: {
    themeMode: 'dark',
  },
})

----------------------------------------

TITLE: UseCallParameters Type Import in TypeScript
DESCRIPTION: Shows how to import the UseCallParameters type for TypeScript type checking.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type UseCallParameters } from 'wagmi'

----------------------------------------

TITLE: Using Custom Config with useVerifyMessage
DESCRIPTION: Shows how to use a custom configuration with the useVerifyMessage hook instead of the default WagmiProvider config.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useVerifyMessage } from 'wagmi'
import { config } from './config'

function App() {
  const result = useVerifyMessage({
    config,
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    message: 'hello world',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Configuring Timeout for webSocket Transport
DESCRIPTION: Demonstrates how to set a custom timeout for asynchronous WebSocket requests in a webSocket Transport.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://foo-bar-baz.quiknode.pro/...', {
  timeout: 60_000, // [!code focus]
})

----------------------------------------

TITLE: Using the blockNumber Parameter with getBytecode
DESCRIPTION: Shows how to specify a specific block number when retrieving bytecode.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getBytecode } from '@wagmi/core'
import { config } from './config'

await getBytecode(config, {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  blockNumber: 16280770n, // [!code focus]
})

----------------------------------------

TITLE: Using useChainId with Custom Config
DESCRIPTION: Demonstrates how to use useChainId with a custom config object instead of the default plugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChainId.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useChainId } from '@wagmi/vue'
import { config } from './config'

const chainId = useChainId({
  config,
})
</script>

----------------------------------------

TITLE: Using useTransactionConfirmations with Transaction Receipt
DESCRIPTION: Demonstrates how to use the useTransactionConfirmations hook with a transaction receipt parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useTransactionConfirmations } from 'wagmi'

function App() {
  const result = useTransactionConfirmations({
    transactionReceipt: { ... },
  })
}

----------------------------------------

TITLE: SignMessage with Custom Connector
DESCRIPTION: Shows how to use signMessage with a specific connector instance
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getAccount, signMessage } from '@wagmi/core'
import { config } from './config'

const { connector } = getAccount(config)
const result = await signMessage(config, {
  connector,
  message: 'hello world',
})

----------------------------------------

TITLE: Refreshing Data Every Five Blocks
DESCRIPTION: Example showing how to customize data refresh behavior by refreshing data every five blocks instead of every block, demonstrating the flexibility of the new approach.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_6

LANGUAGE: ts
CODE:
const { data: blockNumber } = useBlockNumber({ watch: true })
const { data: balance, queryKey } = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
})

useEffect(() => {
  if (blockNumber % 5 === 0)
    queryClient.invalidateQueries({ queryKey })
}, [blockNumber, queryClient])

----------------------------------------

TITLE: Using useGasPrice Hook in React Component
DESCRIPTION: Demonstrates how to use the useGasPrice hook within a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useGasPrice.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useGasPrice } from 'wagmi'

function App() {
  const result = useGasPrice()
}

----------------------------------------

TITLE: Using onError Callback in watchBlocks
DESCRIPTION: Demonstrates how to handle errors using the onError callback in the watchBlocks function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { watchBlocks } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlocks(config, {
  onBlock(block) { 
    console.log('Block changed!', block) 
  }, 
  onError(error) {
    console.error('Block error', error)
  },
})
unwatch()

----------------------------------------

TITLE: Configuring Nonce for Contract Simulation in TypeScript React
DESCRIPTION: This snippet shows how to set the nonce parameter when using the useSimulateContract hook. It specifies a unique number identifying the transaction.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_15

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    nonce: 123, // [!code focus]
  })
}

----------------------------------------

TITLE: Using Custom Config with useTransactionCount Hook
DESCRIPTION: This example demonstrates how to use the useTransactionCount hook with a custom configuration instead of the default one from WagmiProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useTransactionCount } from 'wagmi'
import { config } from './config'

function App() {
  const result = useTransactionCount({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    config,
  })
}

----------------------------------------

TITLE: Configuring Deployments in Foundry Plugin
DESCRIPTION: Demonstrates how to set up deployments for different chain IDs in the Foundry plugin.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { foundry } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    foundry({
      deployments: {
        Counter: {
          1: '0x314159265dd8dbb310642f98f50c066173c1259b',
          5: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
        },
      },
    }),
  ],
})

----------------------------------------

TITLE: Using Custom Config with useEnsAvatar
DESCRIPTION: Shows how to pass a custom configuration object to the useEnsAvatar hook instead of using the nearest WagmiProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useEnsAvatar } from 'wagmi'
import { normalize } from 'viem/ens'
import { config } from './config'

function App() {
  const result = useEnsAvatar({
    config,
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: useEnsName with Block Tag
DESCRIPTION: Example showing useEnsName hook usage with a block tag parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useEnsName } from 'wagmi'

function App() {
  const result = useEnsName({
    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    blockTag: 'latest',
  })
}

----------------------------------------

TITLE: Specifying Transaction Type for Contract Simulation in TypeScript React
DESCRIPTION: This example demonstrates how to set the type parameter when using the useSimulateContract hook. It specifies the transaction request type to narrow parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_16

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    type: 'eip1559', // [!code focus]
  })
}

----------------------------------------

TITLE: useAccount with Custom Config
DESCRIPTION: Example of using useAccount hook with a custom configuration parameter
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccount.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useAccount } from 'wagmi'
import { config } from './config'

function App() {
  const account = useAccount({
    config,
  })
}

----------------------------------------

TITLE: Basic Usage of useWatchBlockNumber Hook in React
DESCRIPTION: Demonstrates the basic implementation of the useWatchBlockNumber hook in a React component to watch for block number changes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useWatchBlockNumber } from 'wagmi'

function App() {
  useWatchBlockNumber({
    onBlockNumber(blockNumber) {
      console.log('Block number changed!', blockNumber)
    },
  })
}

----------------------------------------

TITLE: Configuring Retry Count for webSocket Transport
DESCRIPTION: Demonstrates how to configure the maximum number of retry attempts for a webSocket Transport when requests fail.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://foo-bar-baz.quiknode.pro/...', {
  retryCount: 5, // [!code focus]
})

----------------------------------------

TITLE: Importing Custom Transport in Wagmi
DESCRIPTION: Shows how to import the custom transport from the Wagmi package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { custom } from '{{packageName}}'

----------------------------------------

TITLE: Implementing onBlockNumber Callback in useWatchBlockNumber
DESCRIPTION: Demonstrates how to implement the onBlockNumber callback function which is called when the block number changes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { useWatchBlockNumber } from 'wagmi'

function App() {
  useWatchBlockNumber({
    onBlockNumber(blockNumber) { // [!code focus]
      console.log('New block number', blockNumber) // [!code focus]
    }, // [!code focus]
  })
}

----------------------------------------

TITLE: Importing UseWatchBlocksParameters Type
DESCRIPTION: Shows how to import the UseWatchBlocksParameters type for TypeScript type checking.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type UseWatchBlocksParameters } from 'wagmi'

----------------------------------------

TITLE: Using useReconnect with Custom Config in React
DESCRIPTION: Shows how to use the useReconnect hook with a custom configuration in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReconnect.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useReconnect } from 'wagmi'
import { config } from './config'

function App() {
  const result = useReconnect({
    config,
  })
}

----------------------------------------

TITLE: useBlock with Block Hash
DESCRIPTION: Shows how to use useBlock hook with a specific block hash parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'

function App() {
  const result = useBlock({
    blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d'
  })
}

----------------------------------------

TITLE: Loading Environment Variables in Wagmi Config
DESCRIPTION: Using the loadEnv utility to load environment variables from .env files in the Wagmi configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-14_snippet_7

LANGUAGE: javascript
CODE:
import { defineConfig, loadEnv } from '@wagmi/cli'

export default defineConfig(() => {
  const env = loadEnv({
    mode: process.env.NODE_ENV,
    envDir: process.cwd(),
  })
  return {
    // ...
  }
})

----------------------------------------

TITLE: Specifying Chain ID for useTransactionCount Hook
DESCRIPTION: This snippet shows how to use the useTransactionCount hook with a specific chain ID to fetch the transaction count from a particular blockchain network.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useTransactionCount } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useTransactionCount({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using pollingInterval Parameter in watchBlocks
DESCRIPTION: Demonstrates how to set a custom polling interval when using the watchBlocks function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { watchBlocks } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlocks(config, {
  pollingInterval: 1_000,
  onBlock(block) {
    console.log('Block changed!', block)
  },
})
unwatch()

----------------------------------------

TITLE: Using scopeKey for Cache Management in Contract Simulation
DESCRIPTION: Example demonstrating how to use the scopeKey parameter to scope the cache to a specific context. Composables with identical context will share the same cache, providing more granular control over cache management.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-14_snippet_10

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSimulateContract } from '@wagmi/vue'
import { abi } from './abi'
import { config } from './config'

const result = useSimulateContract({
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  scopeKey: 'foo', // [!code focus]
})
</script>

----------------------------------------

TITLE: Configuring WagmiProvider Reconnection Behavior
DESCRIPTION: Demonstrates how to use the reconnectOnMount parameter to control whether previously connected connectors should reconnect on mount.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { WagmiProvider } from 'wagmi'
import { config } from './config' 

function App() {
  return (
    <WagmiProvider
      config={config}
      reconnectOnMount={false} // [!code focus]
    >
      {/** ... */}
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Using chainId Parameter in useWaitForTransactionReceipt
DESCRIPTION: Demonstrates how to specify a chainId when using the useWaitForTransactionReceipt hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useWaitForTransactionReceipt } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useWaitForTransactionReceipt({
    chainId: mainnet.id,
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  })
}

----------------------------------------

TITLE: Accessing Query Keys via Direct Import
DESCRIPTION: Example of accessing a Wagmi query key through the direct import method. This approach is useful in vanilla JavaScript contexts outside React components.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_5

LANGUAGE: ts
CODE:
import { getBlockQueryOptions } from 'wagmi/query'
import { config } from './config'

function perform() {
  const { queryKey } = getBlockQueryOptions(config, {
    chainId: config.state.chainId
  })
}

----------------------------------------

TITLE: Using useEnsText with Block Tag Parameter
DESCRIPTION: This example demonstrates using the useEnsText hook with a block tag to specify which block to fetch the ENS text record from.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useEnsText } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsText({
    blockTag: 'latest',
    name: normalize('wevm.eth'),
    key: 'com.twitter',
  })
}

----------------------------------------

TITLE: Using useBytecode with Chain ID Parameter
DESCRIPTION: Shows how to use the useBytecode hook with a specific chain ID to retrieve bytecode from a particular blockchain network.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useBytecode } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useBytecode({
    chainId: mainnet.id,
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  })
}

----------------------------------------

TITLE: Using cacheTime Parameter with useBlockNumber
DESCRIPTION: Example showing how to set cache duration for block number data using the cacheTime parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useBlockNumber } from 'wagmi'

function App() {
  const result = useBlockNumber({
    cacheTime: 4_000,
  })
}

----------------------------------------

TITLE: Using useConnectorClient with Specific Connector
DESCRIPTION: Shows how to use the useConnectorClient composable with a specific connector from the useConnections composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnections, useConnectorClient } from '@wagmi/vue'

const connections = useConnections(config)
const result = useConnectorClient({
  connector: connections[0]?.connector,
})
</script>

----------------------------------------

TITLE: Importing useVerifyTypedData Hook in TypeScript
DESCRIPTION: Shows how to import the useVerifyTypedData hook from the wagmi library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useVerifyTypedData } from 'wagmi'

----------------------------------------

TITLE: Using pollingInterval Parameter with useWaitForTransactionReceipt
DESCRIPTION: Example demonstrating how to customize the polling frequency when waiting for a transaction receipt.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-14_snippet_7

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWaitForTransactionReceipt } from '@wagmi/vue'

const result = useWaitForTransactionReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  pollingInterval: 1_000, 
})
</script>

----------------------------------------

TITLE: Basic Usage of useAccount in Vue Component
DESCRIPTION: Demonstrates basic implementation of useAccount hook in a Vue component with TypeScript configuration and template rendering.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccount.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { type Config } from '@wagmi/vue'
import { mainnet, sepolia } from '@wagmi/vue/chains'

declare module '@wagmi/vue' {
  interface Register {
    config: Config<readonly [typeof mainnet, typeof sepolia]>
  }
}
import { useAccount } from '@wagmi/vue'

const account = useAccount()
</script>

<template>
  Address: {{ account.address }}
</template>

----------------------------------------

TITLE: Using watchBlockNumber with Custom Polling Interval
DESCRIPTION: Shows how to set a custom polling interval for the watchBlockNumber function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { watchBlockNumber } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlockNumber(config, {
  onBlockNumber(blockNumber) { 
    console.log('Block number changed!', blockNumber) 
  }, 
  pollingInterval: 1_000,
})
unwatch()

----------------------------------------

TITLE: Specifying Universal Resolver Address
DESCRIPTION: Shows how to use the universalResolverAddress parameter to specify a custom address for the ENS Universal Resolver Contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { useEnsAvatar } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsAvatar({
    name: normalize('wevm.eth'),
    universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',
  })
}

----------------------------------------

TITLE: Using useBytecode with blockTag Parameter
DESCRIPTION: Example showing how to use the blockTag parameter to specify which block state to query.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBytecode } from '@wagmi/vue'

const { data: byteCode } = useBytecode({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  blockTag: 'safe', // [!code focus]
})
</script>

<template>
  Byte Code: {{ byteCode }}
</template>

----------------------------------------

TITLE: Setting Retry Delay for HTTP Transport
DESCRIPTION: Shows how to set the base delay between retries in milliseconds, which is used in an exponential backoff algorithm.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
const transport = http('https://foo-bar-baz.quiknode.pro/...', {
  retryDelay: 100, // [!code focus]
})

----------------------------------------

TITLE: Specifying chainId with getEnsText
DESCRIPTION: Shows how to specify a specific chain ID when using getEnsText to fetch ENS text records from a particular network.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getEnsText } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensText = await getEnsText(config, {
  chainId: mainnet.id, // [!code focus]
  name: normalize('wevm.eth'),
  key: 'com.twitter',
})

----------------------------------------

TITLE: Using useConnectors in a Vue Component
DESCRIPTION: Demonstrates how to use the useConnectors composable in a Vue component to access the configured connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectors.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnectors } from '@wagmi/vue'

const connectors = useConnectors()
</script>

----------------------------------------

TITLE: Using getTransactionConfirmations with transaction hash
DESCRIPTION: Demonstrates how to use the getTransactionConfirmations function with a transaction hash parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionConfirmations.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getTransactionConfirmations } from '@wagmi/core'
import { config } from './config'

const transaction = getTransactionConfirmations(config, {
  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
})

----------------------------------------

TITLE: Enabling Logging in MetaMask Connector
DESCRIPTION: Shows how to enable logging options in the MetaMask connector for debugging SDK-side operations and RPC calls.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { metaMask } from 'wagmi/connectors'

const connector = metaMask({
  logging: { developerMode: true, sdk: true }
})

----------------------------------------

TITLE: GetClient with Chain ID Parameter
DESCRIPTION: Example of using getClient with a specific chain ID parameter to get a chain-specific Viem Client instance.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getClient.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getClient } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const client = await getClient(config, {
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Using Custom Config with useDisconnect
DESCRIPTION: Example of providing a custom config object to the useDisconnect composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useDisconnect.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useDisconnect } from '@wagmi/vue'
import { config } from './config' // [!code focus]

const result = useDisconnect({
  config, // [!code focus]
})
</script>

----------------------------------------

TITLE: Basic useBlock Hook Usage
DESCRIPTION: Demonstrates basic usage of the useBlock hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'

function App() {
  const result = useBlock()
}

----------------------------------------

TITLE: Using Block Tag in call Action
DESCRIPTION: Demonstrates how to use a block tag to perform the call against in the 'call' action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/call.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { call } from '@wagmi/core'
import { config } from './config'

await call(config, {
  blockTag: 'safe',
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: SendCalls with Chain ID
DESCRIPTION: Example demonstrating sendCalls usage with specific chain ID targeting.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { sendCalls } from '@wagmi/core/experimental'
import { config } from './config'

const id = await sendCalls(config, {
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      data: '0xdeadbeef',
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
    },
  ],
  chainId: 10,
})

----------------------------------------

TITLE: Using getTransactionConfirmations with chainId
DESCRIPTION: Demonstrates how to use the getTransactionConfirmations function with a specific chainId parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionConfirmations.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getTransactionConfirmations } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const transaction = await getTransactionConfirmations(config, {
  chainId: mainnet.id,
  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
})

----------------------------------------

TITLE: Using getCallsStatus with Specific Connector
DESCRIPTION: Demonstrates how to use getCallsStatus with a specific connector retrieved via getConnections.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCallsStatus.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getConnections, getCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

const connections = getConnections(config)
const status = await getCallsStatus(config, {
  connector: connections[0]?.connector, // [!code focus]
  id: '0x1234567890abcdef',
})

----------------------------------------

TITLE: Setting Contract ABI in readContracts
DESCRIPTION: Illustrates how to set the ABI for a contract when using the readContracts function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
    },
    // ...
  ],
})

----------------------------------------

TITLE: Specifying blockNumber with getEnsAvatar
DESCRIPTION: Shows how to fetch an ENS avatar at a specific block number using the blockNumber parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getEnsAvatar } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAvatar = await getEnsAvatar(config, {
  blockNumber: 17829139n,
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Infinite Query Function Type Definition
DESCRIPTION: TypeScript type definition for infinite query pagination functions showing parameters and return types.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/query-result.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
(options?: FetchNextPageOptions) => Promise<InfiniteQueryObserverResult<TData, TError>>

----------------------------------------

TITLE: Using getProof with blockTag parameter
DESCRIPTION: Shows how to use the getProof function with a specific block tag.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getProof.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getProof } from '@wagmi/core'
import { config } from './config'

await getProof(config, {
  address: '0x4200000000000000000000000000000000000016',
  blockTag: 'latest',
  storageKeys: [
    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
  ],
})

----------------------------------------

TITLE: Estimating Gas with Scope Key in TypeScript
DESCRIPTION: Shows how to use the useEstimateGas hook with a scope key for caching purposes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { useEstimateGas } from 'wagmi'
import { parseEther } from 'viem'
import { config } from './config'

function App() {
  const result = useEstimateGas({
    scopeKey: 'foo',
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    value: parseEther('0.01'),
  })
}

----------------------------------------

TITLE: Excluding Specific Artifact Files in Hardhat Plugin
DESCRIPTION: Demonstrates how to exclude specific artifact files using glob patterns in the Hardhat plugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { hardhat } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    hardhat({
      exclude: [
        // the following patterns are excluded by default
        'build-info/**',
        '*.dbg.json',
      ],
      project: '../hello_hardhat',
    }),
  ],
})

----------------------------------------

TITLE: Using getBlock with blockHash parameter
DESCRIPTION: Example of using getBlock to fetch block information using a specific block hash.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getBlock } from '@wagmi/core'
import { config } from './config'

const blockNumber = await getBlock(config, {
  blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d' // [!code focus]
})

----------------------------------------

TITLE: useAccountEffect with onConnect Only
DESCRIPTION: Example showing useAccountEffect implementation with only the onConnect handler
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccountEffect.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useAccountEffect } from 'wagmi'

function App() {
  useAccountEffect({
    onConnect(data) {
      console.log('Connected!', data)
    },
  })
}

----------------------------------------

TITLE: Using getEnsName with blockTag Parameter
DESCRIPTION: This snippet demonstrates using getEnsName with the blockTag parameter, which allows specifying a named block (like 'latest' or 'finalized') to query.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { getEnsName } from '@wagmi/core'
import { config } from './config'

const ensName = getEnsName(config, {
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  blockTag: 'latest', // [!code focus]
})

----------------------------------------

TITLE: Importing WatchPendingTransactionsReturnType
DESCRIPTION: Demonstrates how to import the WatchPendingTransactionsReturnType for TypeScript type checking of the function's return value.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { type WatchPendingTransactionsReturnType } from '@wagmi/core'

----------------------------------------

TITLE: Using useCallsStatus with Specific ID in TypeScript
DESCRIPTION: This snippet shows how to use the useCallsStatus hook with a specific call batch ID in TypeScript.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCallsStatus.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { useCallsStatus } from '@wagmi/core'
import { config } from './config'

const status = await useCallsStatus({
  id: '0x1234567890abcdef', // [!code focus]
})

----------------------------------------

TITLE: Using useBytecode with Scope Key
DESCRIPTION: Shows how to use the useBytecode hook with a scope key to manage cache context for the hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useBytecode } from 'wagmi'
import { config } from './config'

function App() {
  const result = useBytecode({
    scopeKey: 'foo'
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  })
}

----------------------------------------

TITLE: Using useBytecode with blockNumber Parameter
DESCRIPTION: Example demonstrating how to retrieve bytecode at a specific block number using the blockNumber parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBytecode } from '@wagmi/vue'

const { data: byteCode } = useBytecode({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  blockNumber: 16280770n, // [!code focus]
})
</script>

<template>
  Byte Code: {{ byteCode }}
</template>

----------------------------------------

TITLE: Running Wagmi CLI Initialize Command
DESCRIPTION: Commands to initialize Wagmi CLI using different package managers
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
pnpm wagmi init

LANGUAGE: bash
CODE:
npx wagmi init

LANGUAGE: bash
CODE:
yarn wagmi init

LANGUAGE: bash
CODE:
bun wagmi init

----------------------------------------

TITLE: Using getProof with blockNumber parameter
DESCRIPTION: Demonstrates how to use the getProof function with a specific block number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getProof.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getProof } from '@wagmi/core'
import { config } from './config'

await getProof(config, {
  address: '0x4200000000000000000000000000000000000016',
  blockNumber: 42069n,
  storageKeys: [
    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
  ],
})

----------------------------------------

TITLE: Building and Linking Wagmi Locally
DESCRIPTION: Commands for cloning the Wagmi repository, building it locally, and linking it to your project for development. This approach allows testing the latest unreleased features.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/installation.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
gh repo clone wevm/wagmi
cd wagmi
pnpm install
pnpm build
cd packages/{{packageDir}}
pnpm link --global

----------------------------------------

TITLE: Setting preference Parameter as String for Coinbase Wallet
DESCRIPTION: Shows how to configure the preference parameter as a string, which controls the type of wallet to display (EOA, Smart Wallet, or both).
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { coinbaseWallet } from 'wagmi/connectors'

const connector = coinbaseWallet({
  appName: 'My Wagmi App',
  preference: 'smartWalletOnly', // [!code focus]
})

----------------------------------------

TITLE: Using simulateContract with gas parameter
DESCRIPTION: Shows how to use the simulateContract function with a specific gas limit for the simulation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  gas: parseGwei('20'),
})

----------------------------------------

TITLE: Importing GetBlockTransactionCountReturnType
DESCRIPTION: How to import the return type definition for the getBlockTransactionCount function for TypeScript type checking.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { type GetBlockTransactionCountReturnType } from '@wagmi/core'

----------------------------------------

TITLE: useEnsAddress with Coin Type
DESCRIPTION: Example showing useEnsAddress configuration with ENSIP-9 coin type parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { useEnsAddress } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsAddress({
    coinType: 60,
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Using useTransactionCount Hook in React Component
DESCRIPTION: This example demonstrates how to use the useTransactionCount hook within a React component to fetch the transaction count for a specific address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useTransactionCount } from 'wagmi'

function App() {
  const result = useTransactionCount({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  })
}

----------------------------------------

TITLE: Using useEnsAddress with universalResolverAddress Parameter
DESCRIPTION: Example showing how to specify a custom ENS Universal Resolver Contract address when fetching an ENS address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-14_snippet_8

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAddress } from '@wagmi/vue'
import { normalize } from 'viem/ens'

const result = useEnsAddress({
  name: normalize('wevm.eth'),
  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376', // [!code focus]
})
</script>

----------------------------------------

TITLE: Storage Options Configuration
DESCRIPTION: Example of configuring storage options for WalletConnect
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { walletConnect } from '{{connectorsPackageName}}'

const connector = walletConnect({
  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',
  storageOptions: {},
})

----------------------------------------

TITLE: Using useBytecode with Block Number Parameter
DESCRIPTION: Shows how to use the useBytecode hook with a specific block number to retrieve bytecode from a particular block.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useBytecode } from 'wagmi'

function App() {
  const result = useBytecode({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    blockNumber: 16280770n,
  })
}

----------------------------------------

TITLE: Narrowing Chain Parameters with chainId
DESCRIPTION: Shows how to narrow chain-specific parameters by explicitly setting chainId. This example uses Celo chain to demonstrate type narrowing for better TypeScript support.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/chain-properties.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { simulateContract } from '@wagmi/core'
import { celo } from 'wagmi/chains'

const result = await simulateContract({
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
  chainId: celo.id,
  feeCurrency: '0x…'
})

----------------------------------------

TITLE: Configuring Include Patterns in Foundry Plugin
DESCRIPTION: Shows how to set up inclusion patterns for artifact files in the Foundry plugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { foundry } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    foundry({
      include: [
        '*.json',
      ],
    }),
  ],
})

----------------------------------------

TITLE: Using blockNumber Parameter
DESCRIPTION: Example demonstrating how to fetch ENS resolver at a specific block number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useEnsResolver } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsResolver({
    blockNumber: 17829139n,
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Configuring Etherscan Plugin in Wagmi CLI
DESCRIPTION: Demonstrates how to use the Etherscan plugin in the Wagmi CLI configuration, including setting the API key, chain ID, and contract details.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { etherscan } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    etherscan({
      apiKey: process.env.ETHERSCAN_API_KEY,
      chainId: 1,
      contracts: [
        {
          name: 'Wagmigotchi',
          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
        },
      ],
    }),
  ],
})

----------------------------------------

TITLE: useEnsAddress with Custom Config
DESCRIPTION: Example showing useEnsAddress usage with custom configuration import.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useEnsAddress } from 'wagmi'
import { normalize } from 'viem/ens'
import { config } from './config'

function App() {
  const result = useEnsAddress({
    config,
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Using blockTag Parameter with getEnsResolver
DESCRIPTION: Shows how to specify a block tag when fetching an ENS resolver.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsResolver.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getEnsResolver } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensResolver = getEnsResolver(config, {
  blockTag: 'latest', // [!code focus]
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Fetching Transaction by Block Tag and Index
DESCRIPTION: Shows how to use the useTransaction hook to fetch a transaction using a block tag and index.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { useTransaction } from 'wagmi'

function App() {
  const result = useTransaction({
    blockTag: 'safe',
    index: 0,
  })
}

----------------------------------------

TITLE: useBlock with Block Tag
DESCRIPTION: Shows how to use useBlock hook with a block tag parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'

function App() {
  const result = useBlock({
    blockTag: 'pending'
  })
}

----------------------------------------

TITLE: Using confirmations Parameter with useWaitForTransactionReceipt
DESCRIPTION: Example showing how to set the number of confirmations (blocks) to wait for before resolving the transaction receipt.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWaitForTransactionReceipt } from '@wagmi/vue'

const result = useWaitForTransactionReceipt({
  confirmations: 2, 
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})
</script>

----------------------------------------

TITLE: useProof with Block Number
DESCRIPTION: Example showing how to use useProof hook with a specific block number parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useProof } from 'wagmi'

function App() {
  const result = useProof({
    address: '0x4200000000000000000000000000000000000016',
    blockNumber: 42069n,
    storageKeys: [
      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
    ],
  })
}

----------------------------------------

TITLE: Estimating Gas with Access List in TypeScript
DESCRIPTION: Shows how to use the useEstimateGas hook with an access list parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useEstimateGas } from 'wagmi'
import { parseEther } from 'viem'
import { config } from './config'

function App() {
  const result = useEstimateGas({
    accessList: [{
      address: '0x1',
      storageKeys: ['0x1'],
    }],
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    value: parseEther('0.01'),
  })
}

----------------------------------------

TITLE: useAccountEffect with onDisconnect Only
DESCRIPTION: Example showing useAccountEffect implementation with only the onDisconnect handler
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccountEffect.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useAccountEffect } from 'wagmi'

function App() {
  useAccountEffect({
    onDisconnect() {
      console.log('Disconnected!')
    },
  })
}

----------------------------------------

TITLE: Basic useWaitForTransactionReceipt Usage in Vue
DESCRIPTION: Example of a Vue component using the useWaitForTransactionReceipt composable to wait for a transaction receipt by providing a transaction hash.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWaitForTransactionReceipt } from '@wagmi/vue'

const result = useWaitForTransactionReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})
</script>

----------------------------------------

TITLE: Using Scope Key with useTransactionCount Hook
DESCRIPTION: This snippet shows how to use the useTransactionCount hook with a scope key to share cache context between multiple hook instances.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useTransactionCount } from 'wagmi'

function App() {
  const result = useTransactionCount({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    scopeKey: 'foo',
  })
}

----------------------------------------

TITLE: Importing UseSimulateContractParameters Type
DESCRIPTION: Shows how to import the UseSimulateContractParameters type for TypeScript usage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type UseSimulateContractParameters } from 'wagmi'

----------------------------------------

TITLE: Basic Usage of useConnections in Vue Component
DESCRIPTION: Demonstrates how to use the useConnections composable within a Vue component setup script.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnections.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnections } from 'wagmi'

const connections = useConnections()
</script>

----------------------------------------

TITLE: Using formatUnits Instead of useBalance unit Parameter
DESCRIPTION: The unit parameter and formatted return value in useBalance are deprecated. Use Viem's formatUnits function to format the balance value directly.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_22

LANGUAGE: typescript
CODE:
import { formatUnits } from 'viem' // [!code ++]
import { useBalance } from 'wagmi'

const result = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  unit: 'ether', // [!code --]
})
result.data!.formatted // [!code --]
formatUnits(result.data!.value, result.data!.decimals) // [!code ++]

----------------------------------------

TITLE: Using watchBlockNumber with emitMissed Option
DESCRIPTION: Demonstrates how to use the emitMissed option to emit missed block numbers to the callback.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { watchBlockNumber } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlockNumber(config, {
  emitMissed: true,
  onBlockNumber(blockNumber) {
    console.log('Block number changed!', blockNumber)
  },
})
unwatch()

----------------------------------------

TITLE: Contract Reading with Inline ABI
DESCRIPTION: Example of using readContract with an inline ABI definition for type inference.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/typescript.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const result = await readContract({
  abi: […], // <--- defined inline
})

----------------------------------------

TITLE: useWalletClient with Custom Connector
DESCRIPTION: Demonstrates using useWalletClient with a specific connector instance.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { useConnections, useWalletClient } from 'wagmi'

function App() {
  const connections = useConnections(config)
  const result = useWalletClient({
    connector: connections[0]?.connector,
  })
}

----------------------------------------

TITLE: Setting Timeout
DESCRIPTION: Shows how to set a timeout duration for the useWaitForCallsStatus hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { useWaitForCallsStatus } from '@wagmi/core'
import { config } from './config'

const status = await useWaitForCallsStatus({
  id: '0x1234567890abcdef',
  timeout: 10_000, // [!code focus]
})

----------------------------------------

TITLE: SignMessage with Custom Account
DESCRIPTION: Example showing how to use signMessage with a specific Ethereum address
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { signMessage } from '@wagmi/core'
import { config } from './config'

const result = await signMessage(config, {
  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  message: 'hello world',
})

----------------------------------------

TITLE: Using the address Parameter with getBytecode
DESCRIPTION: Demonstrates how to specify the contract address parameter when calling getBytecode.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getBytecode } from '@wagmi/core'
import { config } from './config'

await getBytecode(config, {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', // [!code focus]
})

----------------------------------------

TITLE: Using blockNumber Parameter
DESCRIPTION: Example showing how to specify the blockNumber parameter to get an ENS name at a specific block.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsName } from '@wagmi/vue'

const result = useEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  blockNumber: 17829139n, // [!code focus]
})
</script>

----------------------------------------

TITLE: Using useGasPrice Hook with Chain ID Parameter
DESCRIPTION: Demonstrates how to use the useGasPrice hook with a specific chain ID parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useGasPrice.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useGasPrice } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useGasPrice({
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Specifying Hardhat Project Path
DESCRIPTION: Demonstrates how to specify the path to the Hardhat project in the plugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { hardhat } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    hardhat({
      project: '../hello_hardhat',
    }),
  ],
})

----------------------------------------

TITLE: Using poll Parameter in watchBlocks
DESCRIPTION: Shows how to use polling instead of WebSocket subscription for checking new blocks.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { watchBlocks } from '@wagmi/core'
import { config } from './config'

const unwatch = watchBlocks(config, {
  poll: true,
  onBlock(block) {
    console.log('Block changed!', block)
  },
})
unwatch()

----------------------------------------

TITLE: Using emitOnBegin Parameter with useWatchBlockNumber
DESCRIPTION: Example of using the emitOnBegin parameter to emit the block to the callback immediately when the subscription opens.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { useWatchBlockNumber } from 'wagmi'

function App() {
  useWatchBlockNumber({
    emitOnBegin: true, // [!code focus]
    onBlockNumber(blockNumber) {
      console.log('New block number', blockNumber)
    },
  })
}

----------------------------------------

TITLE: Using useBlockTransactionCount with blockHash Parameter
DESCRIPTION: This snippet shows how to use the useBlockTransactionCount hook with a specific block hash.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'

function App() {
  const result = useBlock({
    blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d'
  })
}

----------------------------------------

TITLE: Query Refetch Function Type Definition
DESCRIPTION: TypeScript type definition for the refetch function showing parameters and return type for manual query refetching.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/query-result.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<TData, TError>>

----------------------------------------

TITLE: Using getEnsAddress with universalResolverAddress parameter
DESCRIPTION: This example shows how to use the getEnsAddress function with a custom Universal Resolver Contract address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { getEnsAddress } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAddress = await getEnsAddress(config, {
  name: normalize('wevm.eth'),
  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',
})

----------------------------------------

TITLE: Using getChains to retrieve configured chains
DESCRIPTION: Demonstrates how to use the getChains action to retrieve chains from a wagmi configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getChains.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getChains } from '@wagmi/core'
import { config } from './config'

const chains = getChains(config)

----------------------------------------

TITLE: Using cacheTime Parameter
DESCRIPTION: Example showing usage of getBlockNumber with cacheTime parameter to control caching duration
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getBlockNumber } from '@wagmi/core'
import { config } from './config'

const blockNumber = await getBlockNumber(config, {
  cacheTime: 4_000,
})

----------------------------------------

TITLE: useStorageAt with Custom Config - React TypeScript
DESCRIPTION: Example demonstrating how to use a custom configuration with the useStorageAt hook.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useStorageAt } from 'wagmi'
import { config } from './config'

function App() {
  const result = useStorageAt({
    config,
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    slot: '0x0',
  })
}

----------------------------------------

TITLE: Using scopeKey Parameter
DESCRIPTION: Example showing how to use scopeKey for cache scoping.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { useEnsResolver } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsResolver({
    name: normalize('wevm.eth'),
    scopeKey: 'foo',
  })
}

----------------------------------------

TITLE: Using Custom Config with useSwitchAccount Hook
DESCRIPTION: Demonstrates how to use a custom config with the useSwitchAccount hook instead of the default config from WagmiProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchAccount.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useSwitchAccount } from 'wagmi'
import { config } from './config'

function App() {
  const result = useSwitchAccount({
    config,
  })
}

----------------------------------------

TITLE: Installing TanStack Query Devtools
DESCRIPTION: This snippet provides installation commands for TanStack Query Devtools using different package managers. Devtools help in visualizing and debugging queries and their cache states.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_11

LANGUAGE: bash
CODE:
pnpm i @tanstack/react-query-devtools

LANGUAGE: bash
CODE:
npm i @tanstack/react-query-devtools

LANGUAGE: bash
CODE:
yarn add @tanstack/react-query-devtools

LANGUAGE: bash
CODE:
bun i @tanstack/react-query-devtools

----------------------------------------

TITLE: Configuring Foundry Plugin in Wagmi CLI
DESCRIPTION: Demonstrates how to use the Foundry plugin in the Wagmi CLI configuration, specifying the project path.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { foundry } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    foundry({
      project: '../hello_foundry',
    }),
  ],
})

----------------------------------------

TITLE: getGasPrice with Chain ID Parameter
DESCRIPTION: Example showing how to specify a chain ID when fetching gas price using the mainnet chain.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getGasPrice.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getGasPrice } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const gasPrice = await getGasPrice(config, {
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Basic Usage of useAccountEffect in Vue
DESCRIPTION: Demonstrates basic usage of useAccountEffect with onConnect and onDisconnect callbacks in a Vue component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useAccountEffect } from '@wagmi/vue'

useAccountEffect({
  onConnect(data) {
    console.log('Connected!', data)
  },
  onDisconnect() {
    console.log('Disconnected!')
  },
})
</script>

----------------------------------------

TITLE: Using address Parameter
DESCRIPTION: Example showing how to specify the Ethereum address parameter when using useEnsName.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsName } from '@wagmi/vue'

const result = useEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]
})
</script>

----------------------------------------

TITLE: Enabling Block Number Watch Mode
DESCRIPTION: Shows how to enable watching for block number changes with a simple boolean flag.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-14_snippet_7

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBlockNumber } from '@wagmi/vue'

const { data: blockNumber } = useBlockNumber({
  watch: true,
})
</script>

----------------------------------------

TITLE: Using usePrepareTransactionRequest with Specific Parameters
DESCRIPTION: Shows how to use the usePrepareTransactionRequest hook with specific parameters to prepare.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_10

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther } from 'viem'

function App() {
  const result = usePrepareTransactionRequest({
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    parameters: ['gas', 'nonce'],
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
  })
}

----------------------------------------

TITLE: Using useConnectorClient with Custom Config
DESCRIPTION: Demonstrates how to use a custom configuration with the useConnectorClient composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useConnectorClient } from '@wagmi/vue'
import { config } from './config'

const result = useConnectorClient({
  config,
})
</script>

----------------------------------------

TITLE: Using chainId Parameter
DESCRIPTION: Example showing how to specify the chainId parameter to fetch an ENS name from a specific chain.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsName } from '@wagmi/vue'
import { mainnet } from 'wagmi/chains' // [!code focus]

const result = useEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  chainId: mainnet.id, // [!code focus]
})
</script>

----------------------------------------

TITLE: Using config Parameter with useWaitForTransactionReceipt
DESCRIPTION: Demonstrates how to provide a custom configuration object when using the useWaitForTransactionReceipt composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWaitForTransactionReceipt } from '@wagmi/vue'
import { config } from './config' 

const result = useWaitForTransactionReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  config, 
})
</script>

----------------------------------------

TITLE: Using useBytecode with Address Parameter
DESCRIPTION: Example showing how to use the address parameter with useBytecode to specify the contract address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBytecode } from '@wagmi/vue'

const { data: byteCode } = useBytecode({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', // [!code focus]
})
</script>

<template>
  Byte Code: {{ byteCode }}
</template>

----------------------------------------

TITLE: Retrieving Viem Client with getClient Method in Wagmi
DESCRIPTION: Creates a new Viem Client object using the getClient method from a wagmi config instance. This allows selecting a specific chain by chainId parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_16

LANGUAGE: typescript
CODE:
import { config } from './config'

const client = config.getClient({ chainId: 1 })

----------------------------------------

TITLE: Fetching Transaction by Block Number and Index
DESCRIPTION: Demonstrates using the useTransaction hook to fetch a transaction using a block number and index.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useTransaction } from 'wagmi'

function App() {
  const result = useTransaction({
    blockNumber: 17829139n,
    index: 0,
  })
}

----------------------------------------

TITLE: Disabling Connected Chain Synchronization
DESCRIPTION: Shows how to disable the automatic synchronization of the chain ID with the current connection.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

const config = createConfig({
  chains: [mainnet, sepolia],
  syncConnectedChain: false, 
  transports: {
    [mainnet.id]: http('https://mainnet.example.com'),
    [sepolia.id]: http('https://sepolia.example.com'),
  },
})

----------------------------------------

TITLE: Importing EstimateFeesPerGasReturnType
DESCRIPTION: Shows how to import the type definition for the return value of the estimateFeesPerGas function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { type EstimateFeesPerGasReturnType } from '@wagmi/core'

----------------------------------------

TITLE: Configuring Connectors with Chains in Wagmi
DESCRIPTION: Example showing how to configure connectors with chains after the removal of chainId parameter, using configureChains to manage RPC URLs internally.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_29

LANGUAGE: diff
CODE:
import {
  chain,
+  configureChains,
  createClient
} from 'wagmi';

+import { publicProvider } from 'wagmi/providers/public'

import { CoinbaseWalletConnector } from 'wagmi/connectors/coinbaseWallet'
import { InjectedConnector } from 'wagmi/connectors/injected'
import { MetaMaskConnector } from 'wagmi/connectors/metaMask'
import { WalletConnectConnector } from 'wagmi/connectors/walletConnect'

+const { chains } = configureChains(
+  [chain.mainnet],
+  [publicProvider()]
+);

const client = createClient({
-  connectors({ chainId }) {
-    const chain = chains.find((x) => x.id === chainId) ?? defaultChain
-    const rpcUrl = chain.rpcUrls.alchemy
-      ? `${chain.rpcUrls.alchemy}/${alchemyId}`
-      : chain.rpcUrls.default
-    return [
+  connectors: [
    new MetaMaskConnector({ chains }),
    new CoinbaseWalletConnector({
      chains,
      options: {
        appName: 'wagmi',
-       chainId: chain.id,
-       jsonRpcUrl: rpcUrl,
      },
    }),
    new WalletConnectConnector({
      chains,
      options: {
        qrcode: true,
-       rpc: { [chain.id]: rpcUrl },
      },
    }),
    new InjectedConnector({
      chains,
      options: { name: 'Injected' },
    }),
  ]
-  },
})

----------------------------------------

TITLE: Migrating from WagmiConfig to WagmiProvider
DESCRIPTION: WagmiConfig has been renamed to WagmiProvider to follow React context naming conventions and reduce confusion with the Wagmi Config type.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_20

LANGUAGE: typescript
CODE:
import { WagmiConfig } from 'wagmi' // [!code --]
import { WagmiProvider } from 'wagmi' // [!code ++]
import { config } from './config'

function App() {
  return (
    <WagmiConfig config={config}> // [!code --]
    <WagmiProvider config={config}> // [!code ++]
      {/** ... */}
    </WagmiProvider> // [!code ++]
    </WagmiConfig> // [!code --]
  )
}

----------------------------------------

TITLE: Using useTransactionReceipt with chainId Parameter
DESCRIPTION: Demonstrates how to use the useTransactionReceipt composable with a specified chainId parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useTransactionReceipt } from '@wagmi/vue'
import { mainnet } from 'wagmi/chains'

const result = useTransactionReceipt({
  chainId: mainnet.id,
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})
</script>

----------------------------------------

TITLE: Specifying Chain ID
DESCRIPTION: Example showing how to specify a chain ID for ENS resolver lookup.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useEnsResolver } from 'wagmi'
import { mainnet } from 'wagmi/chains'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsResolver({
    chainId: mainnet.id,
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Verifying Typed Data with Block Number in React
DESCRIPTION: This snippet demonstrates using the blockNumber parameter when verifying typed data signed by a Smart Contract Account. It specifies the block number to check for contract deployment.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { domain, types } from './data'
import { useVerifyTypedData } from 'wagmi'

function App() {
  const result = useVerifyTypedData({
    blockNumber: 12345678n,
    domain,
    types,
    message: {
      from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
      },
      to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
      },
      contents: 'Hello, Bob!',
    },
    primaryType: 'Mail',
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
  })
}

----------------------------------------

TITLE: Basic Usage Example
DESCRIPTION: Simple example showing how to use the useEstimateMaxPriorityFeePerGas hook in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateMaxPriorityFeePerGas.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useEstimateMaxPriorityFeePerGas } from 'wagmi'

function App() {
  const result = useEstimateMaxPriorityFeePerGas()
}

----------------------------------------

TITLE: ENS Avatar with Block Number Specification
DESCRIPTION: Example showing how to fetch ENS avatar at a specific block number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAvatar } from '@wagmi/vue'
import { normalize } from 'viem/ens'

const result = useEnsAvatar({
  blockNumber: 17829139n,
  name: normalize('wevm.eth'),
})
</script>

----------------------------------------

TITLE: Return Type Narrowing with ChainId Property
DESCRIPTION: Shows how to narrow return types using the chainId property from the returned data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/chain-properties.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useWaitForTransactionReceipt } from 'wagmi'
import { zkSync } from 'wagmi/chains'

const { data } = useWaitForTransactionReceipt({
  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',
})

if (data?.chainId === zkSync.id) {
  data?.logs
}

----------------------------------------

TITLE: Using confirmations Parameter
DESCRIPTION: Demonstrates how to specify the number of confirmations to wait for
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { waitForTransactionReceipt } from '@wagmi/core'
import { config } from './config'

const transactionReceipt = await waitForTransactionReceipt(config, {
  confirmations: 2,
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
})

----------------------------------------

TITLE: Setting a custom name for unstable_connector
DESCRIPTION: Shows how to set a custom name for the Transport when using unstable_connector with the injected connector.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { unstable_connector } from 'wagmi'
import { injected } from 'wagmi/connectors'

const transport = unstable_connector(injected, { 
  name: 'Injected',  // [!code focus]
})

----------------------------------------

TITLE: Using useBlockTransactionCount with chainId Parameter
DESCRIPTION: This example demonstrates using the useBlockTransactionCount hook with a specific chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useBlock({
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using config Parameter
DESCRIPTION: Example showing how to use a custom config with the useEnsName composable.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-14_snippet_7

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsName } from '@wagmi/vue'
import { normalize } from 'viem/ens'
import { config } from './config' // [!code focus]

const result = useEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  config, // [!code focus]
})
</script>

----------------------------------------

TITLE: Using useClient with Chain ID
DESCRIPTION: Example showing how to use useClient with a specific chain ID parameter using the mainnet chain.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useClient.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useClient } from 'wagmi'
import { mainnet } from 'wagmi/chains'
import { config } from './config'

function App() {
  const client = useClient({
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: Using useClient with Specific Chain ID
DESCRIPTION: Demonstrates how to use useClient with a specific chain ID parameter in a Vue component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useClient } from '@wagmi/vue'
import { mainnet } from '@wagmi/vue/chains'
import { config } from './config'

const client = useClient({
  chainId: mainnet.id,
})
</script>

----------------------------------------

TITLE: useEnsName with Scope Key
DESCRIPTION: Example demonstrating useEnsName hook usage with a scope key for cache context.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { useEnsName } from 'wagmi'

function App() {
  const result = useEnsName({
    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    scopeKey: 'foo',
  })
}

----------------------------------------

TITLE: Installing TanStack Query Storage Persisters for Sync Storage
DESCRIPTION: Command line instructions for installing the necessary packages to set up Wagmi with TanStack Query using synchronous storage like localStorage or sessionStorage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm i @tanstack/query-sync-storage-persister @tanstack/react-query-persist-client

LANGUAGE: bash
CODE:
npm i @tanstack/query-sync-storage-persister @tanstack/react-query-persist-client

LANGUAGE: bash
CODE:
yarn add @tanstack/query-sync-storage-persister @tanstack/react-query-persist-client

LANGUAGE: bash
CODE:
bun i @tanstack/query-sync-storage-persister @tanstack/react-query-persist-client

----------------------------------------

TITLE: Configuring Block Number Watch Parameters
DESCRIPTION: Demonstrates how to configure detailed watch parameters such as polling interval when watching for block number changes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-14_snippet_8

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBlockNumber } from '@wagmi/vue'

const { data: blockNumber } = useBlockNumber({
  watch: {
    pollingInterval: 4_000
  },
})
</script>

----------------------------------------

TITLE: Transaction Query with Custom Config
DESCRIPTION: Shows how to use useTransaction with a custom configuration
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-14_snippet_6

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useTransaction } from '@wagmi/vue'
import { config } from './config'

const result = useTransaction({
  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
  config,
})
</script>

----------------------------------------

TITLE: Using switchAccount in a TypeScript file
DESCRIPTION: Demonstrates how to use the switchAccount function with a config and connector. It retrieves connections and switches to the first available connector.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getConnections, switchAccount } from '@wagmi/core'
import { config } from './config'

const connections = getConnections(config)
const result = await switchAccount(config, {
  connector: connections[0]?.connector,
})

----------------------------------------

TITLE: Setting appName Parameter for Coinbase Wallet
DESCRIPTION: Shows how to configure the appName parameter for the Coinbase Wallet connector, which identifies your application within the wallet interface.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { coinbaseWallet } from 'wagmi/connectors'

const connector = coinbaseWallet({
  appName: 'My Wagmi App', // [!code focus]
})

----------------------------------------

TITLE: Using simulateContract with chainId parameter
DESCRIPTION: Demonstrates how to use the simulateContract function with a specific chain ID for validation.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { mainnet } from 'wagmi/chains'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  chainId: mainnet.id,
})

----------------------------------------

TITLE: Importing GetCapabilitiesParameters Type
DESCRIPTION: Shows how to import the type definition for the getCapabilities function parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCapabilities.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type GetCapabilitiesParameters } from '@wagmi/core/experimental'

----------------------------------------

TITLE: Importing getStorageAt Action from @wagmi/core
DESCRIPTION: Shows how to import the getStorageAt action from the @wagmi/core library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getStorageAt } from '@wagmi/core'

----------------------------------------

TITLE: Basic getConnectorClient Usage
DESCRIPTION: Demonstrates basic usage of getConnectorClient with a config object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getConnectorClient } from '@wagmi/core'
import { config } from './config'

const client = await getConnectorClient(config)

----------------------------------------

TITLE: Using the address Parameter
DESCRIPTION: Demonstrates how to specify the address parameter when using useBalance.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBalance } from '@wagmi/vue'
import { mainnet } from '@wagmi/vue/chains'

const result = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48', // [!code focus]
})
</script>

----------------------------------------

TITLE: Initializing WalletConnect Package Constants in Vue
DESCRIPTION: Sets up constants for wagmi core and connectors package names in a Vue component using script setup syntax. Defines package references that can be used throughout the component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors/walletConnect.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup>
const packageName = '@wagmi/core'
const connectorsPackageName = '@wagmi/connectors'
</script>

----------------------------------------

TITLE: Fetching Transaction by Block Hash and Index
DESCRIPTION: Shows how to use the useTransaction hook to fetch a transaction using a block hash and index.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useTransaction } from 'wagmi'

function App() {
  const result = useTransaction({
    blockHash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
    index: 0,
  })
}

----------------------------------------

TITLE: Using unstable_connector with a specific Connector
DESCRIPTION: Shows how to create a Transport using unstable_connector with the Safe connector.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { unstable_connector } from 'wagmi'
import { safe } from 'wagmi/connectors'

const transport = unstable_connector(safe) // [!code focus]

----------------------------------------

TITLE: Setting pollingInterval with useWatchBlockNumber
DESCRIPTION: Shows how to set a custom polling frequency in milliseconds when using polling to check for new blocks.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
import { useWatchBlockNumber } from 'wagmi'

function App() {
  useWatchBlockNumber({
    onBlockNumber(blockNumber) { 
      console.log('New block number', blockNumber) 
    }
    pollingInterval: 1_000, // [!code focus]
  })
}

----------------------------------------

TITLE: Custom Address Resolution Configuration
DESCRIPTION: Shows how to implement custom address resolution logic using the getAddress configuration option.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { blockExplorer } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    blockExplorer({
      baseUrl: 'https://api.etherscan.io/v2/api',
      contracts: [
        {
          name: 'Wagmigotchi',
          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
        },
      ],
      getAddress({ address }) {
        if (typeof address === 'string') return address
        return Object.values(address)[0]
      },
    }),
  ],
})

----------------------------------------

TITLE: Configuring Exclude Patterns in Foundry Plugin
DESCRIPTION: Shows how to set up exclusion patterns for artifact files in the Foundry plugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { foundry } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    foundry({
      exclude: [
        'Common.sol/**',
        'Components.sol/**',
        'Script.sol/**',
        'StdAssertions.sol/**',
        'StdInvariant.sol/**',
        'StdError.sol/**',
        'StdCheats.sol/**',
        'StdMath.sol/**',
        'StdJson.sol/**',
        'StdStorage.sol/**',
        'StdUtils.sol/**',
        'Vm.sol/**',
        'console.sol/**',
        'console2.sol/**',
        'test.sol/**',
        '**.s.sol/*.json',
        '**.t.sol/*.json',
      ],
    }),
  ],
})

----------------------------------------

TITLE: Using ID Parameter
DESCRIPTION: Example demonstrating how to use waitForCallsStatus with a specific call batch ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { waitForCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

const status = await waitForCallsStatus(config, {
  id: '0x1234567890abcdef',
})

----------------------------------------

TITLE: Using Custom Config with useSwitchChain Hook
DESCRIPTION: Illustrates how to use a custom config with the useSwitchChain hook instead of the default one from WagmiProvider.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchChain.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useSwitchChain } from 'wagmi'
import { config } from './config'

function App() {
  const result = useSwitchChain({
    config,
  })
}

----------------------------------------

TITLE: Migrating getBalance Formatting to Manual formatUnits
DESCRIPTION: Demonstrates how to migrate from the deprecated unit parameter and formatted return value in getBalance to using Viem's formatUnits function directly.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_15

LANGUAGE: typescript
CODE:
import { formatUnits } from 'viem'
import { getBalance } from '@wagmi/core'

const result = await getBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  unit: 'ether',
})
result.formatted
formatUnits(result.value, result.decimals)

----------------------------------------

TITLE: Importing useEnsAddress in Vue
DESCRIPTION: Example showing how to import the useEnsAddress composable from the @wagmi/vue package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useEnsAddress } from '@wagmi/vue'

----------------------------------------

TITLE: Using getEnsName with blockNumber Parameter
DESCRIPTION: This snippet demonstrates using getEnsName with the blockNumber parameter, which allows fetching the ENS name as it was at a specific block.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getEnsName } from '@wagmi/core'
import { config } from './config'

const ensName = getEnsName(config, {
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  blockNumber: 17829139n, // [!code focus]
})

----------------------------------------

TITLE: OnChange Handler Implementation
DESCRIPTION: Detailed example showing the onChange handler implementation with TypeScript focus highlighting.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnections.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { watchConnections } from '@wagmi/core'
import { config } from './config'

const unwatch = watchConnections(config, {
  onChange(data) {
    console.log('Connections changed!', data)
  },
})
unwatch()

----------------------------------------

TITLE: Using useCallsStatus with Custom Config in React
DESCRIPTION: This snippet shows how to use the useCallsStatus hook with a custom configuration in a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCallsStatus.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useCallsStatus } from 'wagmi/experimental'
import { config } from './config' // [!code focus]

function App() {
  const result = useCallsStatus({
    config, // [!code focus]
    id: '0x...',
  })
}

----------------------------------------

TITLE: Using Auto-Imported Wagmi Composable in Vue Component
DESCRIPTION: This snippet demonstrates how to use an auto-imported Wagmi composable (useAccount) in a Vue component without explicitly importing it. It displays the account address in the template.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/Nuxt.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
// No need to import `useAccount`!
const account = useAccount()
</script>

<template>
  Address: {{ account.address }}
</template>

----------------------------------------

TITLE: Using useChainId Hook in React Component
DESCRIPTION: Demonstrates how to use the useChainId hook within a React component to get the current chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChainId.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useChainId } from 'wagmi'

function App() {
  const chainId = useChainId()
}

----------------------------------------

TITLE: Using Block Tag with useEnsAvatar
DESCRIPTION: Demonstrates how to use the blockTag parameter to specify which block state to query for the ENS avatar.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { useEnsAvatar } from 'wagmi'
import { normalize } from 'viem/ens'

function App() {
  const result = useEnsAvatar({
    name: normalize('wevm.eth'),
    blockTag: 'latest',
  })
}

----------------------------------------

TITLE: Custom Deserialization Configuration
DESCRIPTION: Example showing how to configure storage with custom deserialization.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createStorage, deserialize } from '{{packageName}}'

const storage = createStorage({
  deserialize,
  storage: localStorage,
})

----------------------------------------

TITLE: Setting Wait Time for Batch Requests in HTTP Transport
DESCRIPTION: Shows how to set the maximum number of milliseconds to wait before sending a batch request.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const transport = http('https://foo-bar-baz.quiknode.pro/...', {
  batch: {
    wait: 16 // [!code focus]
  }
})

----------------------------------------

TITLE: Scope Key Usage
DESCRIPTION: Example demonstrating how to use scope key for cache context.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { useEstimateFeesPerGas } from 'wagmi'

function App() {
  const result = useEstimateFeesPerGas({
    scopeKey: 'foo',
  })
}

----------------------------------------

TITLE: useBlock with Transaction Details
DESCRIPTION: Demonstrates using useBlock hook with transaction inclusion parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'
import { config } from './config'

function App() {
  const result = useBlock({
    includeTransactions: true
  })
}

----------------------------------------

TITLE: Using the blockNumber Parameter
DESCRIPTION: Shows how to specify a specific block number to fetch balance from.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBalance } from '@wagmi/vue'

const result = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  blockNumber: 17829139n, // [!code focus]
})
</script>

----------------------------------------

TITLE: Using a Custom Config with useBlockNumber
DESCRIPTION: Demonstrates providing a custom configuration object to useBlockNumber instead of using the global WagmiPlugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBlockNumber } from '@wagmi/vue'
import { config } from './config'

const { data: blockNumber } = useBlockNumber({
  config,
})
</script>

----------------------------------------

TITLE: useFeeHistory with Block Number
DESCRIPTION: Example showing how to use useFeeHistory with a specific block number parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useFeeHistory } from 'wagmi'

function App() {
  const result = useFeeHistory({
    blockCount: 4,
    blockNumber: 1551231n,
    rewardPercentiles: [25, 75]
  })
}

----------------------------------------

TITLE: useWalletClient with Custom Config
DESCRIPTION: Shows how to use useWalletClient with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-14_snippet_4

LANGUAGE: tsx
CODE:
import { useWalletClient } from 'wagmi'
import { config } from './config'

function App() {
  const result = useWalletClient({
    config,
  })
}

----------------------------------------

TITLE: Array-based Wagmi Configuration
DESCRIPTION: Configuration represented as an array of config objects, allowing multiple configurations in a single file.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-14_snippet_6

LANGUAGE: javascript
CODE:
export default defineConfig([
  {
  // config 1
  },
  {
  // config 2
  },
])

----------------------------------------

TITLE: Migrating getToken to readContracts
DESCRIPTION: Shows how to migrate from the deprecated getToken function to using readContracts for fetching ERC20 token information including decimals, name, symbol and total supply.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_16

LANGUAGE: typescript
CODE:
import { getToken } from '@wagmi/core'
import { readContracts } from '@wagmi/core'
import { erc20Abi } from 'viem'
import { config } from './config'

const result = await getToken(config, {
  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
})
const result = await readContracts(config, {
  allowFailure: false,
  contracts: [
    {
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
      abi: erc20Abi,
      functionName: 'decimals',
    },
    {
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
      abi: erc20Abi,
      functionName: 'name',
    },
    {
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
      abi: erc20Abi,
      functionName: 'symbol',
    },
    {
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
      abi: erc20Abi,
      functionName: 'totalSupply',
    },
  ]
})

----------------------------------------

TITLE: Usage with Chain ID Parameter
DESCRIPTION: Example demonstrating how to use the hook with a specific chain ID parameter for the mainnet.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateMaxPriorityFeePerGas.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useEstimateMaxPriorityFeePerGas } from 'wagmi'
import { mainnet } from 'wagmi/chains'

function App() {
  const result = useEstimateMaxPriorityFeePerGas({
    chainId: mainnet.id,
  })
}

----------------------------------------

TITLE: ENS Avatar with Block Tag Configuration
DESCRIPTION: Example showing how to fetch ENS avatar with a specific block tag.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-14_snippet_4

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsAvatar } from '@wagmi/vue'
import { normalize } from 'viem/ens'

const result = useEnsAvatar({
  name: normalize('wevm.eth'),
  blockTag: 'latest',
})
</script>

----------------------------------------

TITLE: Connector Usage Example
DESCRIPTION: Demonstrates using showCallsStatus with a specific connector from connections list.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/showCallsStatus.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getConnections, showCallsStatus } from '@wagmi/core/experimental'
import { config } from './config'

const connections = getConnections(config)
await showCallsStatus(config, {
  connector: connections[0]?.connector,
  id: '0x1234567890abcdef',
})

----------------------------------------

TITLE: Configuring Retry Count for HTTP Transport
DESCRIPTION: Demonstrates how to set the maximum number of retries when a request fails.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
const transport = http('https://foo-bar-baz.quiknode.pro/...', {
  retryCount: 5, // [!code focus]
})

----------------------------------------

TITLE: Updating Chain Type Definition in TypeScript
DESCRIPTION: Changes to the Chain type definition, including modifications to rpcUrls shape and moving multicall and ens attributes into a contracts object.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
type Chain = {
  ...
  rpcUrls: {
    [key: string]: {
      http: string[]
      webSocket: string[]
    }
  }
  ...
  contracts: {
    multicall3: Contract
    ensRegistry: Contract
  }
  ...
}

----------------------------------------

TITLE: Importing GetStorageAtParameters Type
DESCRIPTION: Shows how to import the type definition for getStorageAt parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type GetStorageAtParameters } from '@wagmi/core'

----------------------------------------

TITLE: Basic usage of getBlock action
DESCRIPTION: Demonstrates the basic usage of the getBlock action to fetch information about a block using a configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getBlock } from '@wagmi/core'
import { config } from './config'

const blockNumber = await getBlock(config)

----------------------------------------

TITLE: Using getBlock with blockTag parameter
DESCRIPTION: Example of using getBlock to fetch block information for a specific block tag like 'pending'.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { getBlock } from '@wagmi/core'
import { config } from './config'

const blockNumber = await getBlock(config, {
  blockTag: 'pending' // [!code focus]
})

----------------------------------------

TITLE: Using a Custom Config
DESCRIPTION: Demonstrates how to provide a custom config when using useBalance.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-14_snippet_7

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBalance } from '@wagmi/vue'
import { config } from './config' // [!code focus]

const result = useBalance({
  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
  config, // [!code focus]
})
</script>

----------------------------------------

TITLE: Setting Retry Delay for webSocket Transport
DESCRIPTION: Shows how to set the base delay between retry attempts for a webSocket Transport, which uses exponential backoff by default.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://foo-bar-baz.quiknode.pro/...', {
  retryDelay: 100, // [!code focus]
})

----------------------------------------

TITLE: UseSwitchAccountReturnType Type Import
DESCRIPTION: Shows how to import the type definition for useSwitchAccount return type.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchAccount.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { type UseSwitchAccountReturnType } from 'wagmi'

----------------------------------------

TITLE: Importing writeContracts from @wagmi/core/experimental
DESCRIPTION: Shows how to import the writeContracts function from the experimental package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { writeContracts } from '@wagmi/core/experimental'

----------------------------------------

TITLE: Setting Max Fee and Priority Fee in call Action
DESCRIPTION: Shows how to set the max fee per gas and max priority fee per gas for EIP-1559 transactions in the 'call' action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/call.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { call } from '@wagmi/core'
import { parseGwei } from 'viem'
import { config } from './config'

await call(config, {
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Using onChange callback in watchPublicClient
DESCRIPTION: Illustrates how to use the onChange callback function in watchPublicClient to handle Public Client changes.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPublicClient.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { watchPublicClient } from '@wagmi/core'
import { config } from './config'

const unwatch = watchPublicClient(config, {
  onChange(client) {
    console.log('Public Client changed!', client)
  },
})
unwatch()

----------------------------------------

TITLE: useProof with Block Tag
DESCRIPTION: Shows how to use useProof hook with a block tag parameter for different block states.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useProof } from 'wagmi'

function App() {
  const result = useProof({
    address: '0x4200000000000000000000000000000000000016',
    blockTag: 'latest',
    storageKeys: [
      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
    ],
  })
}

----------------------------------------

TITLE: Parameters Type Import - TypeScript
DESCRIPTION: Import statement for the UseSendTransactionParameters type definition.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type UseSendTransactionParameters } from 'wagmi'

----------------------------------------

TITLE: Setting Block Tag in readContracts
DESCRIPTION: Illustrates how to set the block tag for contract calls in readContracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_11

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  blockTag: 'safe',
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
    },
    // ...
  ],
})

----------------------------------------

TITLE: Installing Wagmi v2 with Package Managers
DESCRIPTION: Commands for installing Wagmi v2 and its required peer dependencies (viem and @tanstack/react-query) using different package managers.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm add wagmi viem@{{viemVersion}} @tanstack/react-query

LANGUAGE: bash
CODE:
npm install wagmi viem@{{viemVersion}} @tanstack/react-query

LANGUAGE: bash
CODE:
yarn add wagmi viem@{{viemVersion}} @tanstack/react-query

LANGUAGE: bash
CODE:
bun add wagmi viem@{{viemVersion}} @tanstack/react-query

----------------------------------------

TITLE: Importing useSignMessage Hook
DESCRIPTION: Shows how to import the useSignMessage hook from the wagmi library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignMessage.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useSignMessage } from 'wagmi'

----------------------------------------

TITLE: Using getEnsAddress with chainId parameter
DESCRIPTION: This example shows how to use the getEnsAddress function with a specific chain ID to fetch the ENS address on that chain.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getEnsAddress } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensAddress = await getEnsAddress(config, {
  chainId: mainnet.id,
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Form Handler Implementation
DESCRIPTION: Adding form submission handling to capture the token ID input.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-14_snippet_1

LANGUAGE: vue
CODE:
<script setup lang="ts">
function submit(event: Event) {
  const formData = new FormData(e.target as HTMLFormElement)
  const tokenId = formData.get('tokenId') as string
}
</script>

<template>
  <form @submit.prevent="submit">
    <input name="tokenId" placeholder="69420" required />
    <button type="submit">Mint</button>
  </form>
</template>

----------------------------------------

TITLE: Using Custom Config with useWriteContract
DESCRIPTION: Example demonstrating how to provide a custom configuration to the useWriteContract composable instead of using the global configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWriteContract.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useWriteContract } from '@wagmi/vue'
import { config } from './config' // [!code focus]

const result = useWriteContract({
  config, // [!code focus]
})
</script>

----------------------------------------

TITLE: Exporting New Connector in TypeScript
DESCRIPTION: Shows how to export the newly created connector from the main exports file. This ensures the new connector is accessible when importing from the package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/creating-connectors.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export { fooBarBaz } from './fooBarBaz.js'

----------------------------------------

TITLE: Defining Domain and Types for Typed Data in TypeScript
DESCRIPTION: This snippet shows how to define the domain and types objects used in the verifyTypedData function. It includes definitions for Person and Mail types.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
// All properties on a domain are optional
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const

// The named list of all type definitions
export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Using Connectors with useReconnect
DESCRIPTION: Demonstrates how to access and use the connectors property from useReconnect to reconnect specific connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReconnect.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useReconnect } from '@wagmi/vue'
import { mainnet } from '@wagmi/vue/chains'

const { reconnect, connectors } = useReconnect()

reconnect({ connectors })
</script>

----------------------------------------

TITLE: Setting Root Path for Wagmi Generate in Bash
DESCRIPTION: Using the '--root' option to set a custom root path for resolving the configuration in the 'wagmi generate' command.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/generate.md#2025-04-14_snippet_2

LANGUAGE: bash
CODE:
wagmi generate --root path/to/root

----------------------------------------

TITLE: Configuring custom action names in Wagmi CLI actions plugin
DESCRIPTION: Example showing how to customize action naming by providing a getActionName function. This function receives contract name and operation type and returns a custom formatted name.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/actions.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { actions } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    actions({
      getActionName({ contractName, type }) {
        return `${contractName}__${type}`
      },
    }),
  ],
})

----------------------------------------

TITLE: SendTransaction with Gas Price
DESCRIPTION: Shows how to set the gas price for a legacy transaction using the sendTransaction function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { sendTransaction } from '@wagmi/core'
import { parseEther, parseGwei } from 'viem'
import { config } from './config'

const result = await sendTransaction(config, {
  gasPrice: parseGwei('20'),
  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Configuring Artifacts Directory in Foundry Plugin
DESCRIPTION: Example of setting the artifacts directory in the Foundry plugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { foundry } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    foundry({
      artifacts: 'out/',
    }),
  ],
})

----------------------------------------

TITLE: Using getTransaction with Block Hash and Index
DESCRIPTION: Demonstrates fetching a transaction using a block hash and transaction index within that block.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransaction.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getTransaction } from '@wagmi/core'
import { config } from './config'

const transaction = getTransaction(config, {
  blockHash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d', 
  index: 0,
})

----------------------------------------

TITLE: Installing Anvil for Testing
DESCRIPTION: Commands to install Anvil via Foundryup for running tests against local chain forks.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-14_snippet_7

LANGUAGE: bash
CODE:
curl -L https://foundry.paradigm.xyz | bash
foundryup

----------------------------------------

TITLE: Narrowing Return Types with chainId Parameter
DESCRIPTION: Demonstrates how to narrow return types using chainId parameter with waitForTransactionReceipt. Uses zkSync chain to show type inference for chain-specific log types.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/chain-properties.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { waitForTransactionReceipt } from '@wagmi/core'
import { zkSync } from '@wagmi/core/chains'

const result = await waitForTransactionReceipt({
  chainId: zkSync.id,
  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',
})

result.logs

----------------------------------------

TITLE: Setting Custom Root Path for wagmi init
DESCRIPTION: Sets a custom root path to resolve the configuration from using the -r or --root option.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/init.md#2025-04-14_snippet_2

LANGUAGE: bash
CODE:
wagmi init --root path/to/root

----------------------------------------

TITLE: Disabling syncConnectedChain in useWatchBlockNumber
DESCRIPTION: Example of disabling the subscriber for connected chain changes using the syncConnectedChain parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { useWatchBlockNumber } from 'wagmi'

function App() {
  useWatchBlockNumber({
    onBlockNumber(blockNumber) { 
      console.log('New block number', blockNumber) 
    }
    syncConnectedChain: false, // [!code focus]
  })
}

----------------------------------------

TITLE: Usage with Custom Config
DESCRIPTION: Example showing how to use the hook with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateMaxPriorityFeePerGas.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useEstimateMaxPriorityFeePerGas } from 'wagmi'
import { config } from './config'

function App() {
  const result = useEstimateMaxPriorityFeePerGas({
    config,
  })
}

----------------------------------------

TITLE: Using getTransactionConfirmations with transaction receipt
DESCRIPTION: Shows how to use the getTransactionConfirmations function with a transaction receipt parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionConfirmations.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getTransactionConfirmations } from '@wagmi/core'
import { config } from './config'

const transaction = getTransactionConfirmations(config, {
  transactionReceipt: { ... },
})

----------------------------------------

TITLE: Importing useEnsAvatar Hook in TypeScript
DESCRIPTION: Shows how to import the useEnsAvatar hook from the wagmi library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useEnsAvatar } from 'wagmi'

----------------------------------------

TITLE: Using poll Parameter with useWatchPendingTransactions
DESCRIPTION: Shows how to enable polling instead of using WebSocket subscriptions for detecting pending transactions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-14_snippet_8

LANGUAGE: tsx
CODE:
import { useWatchPendingTransactions } from 'wagmi'

function App() {
  useWatchPendingTransactions({
    onTransactions(transactions) {
      console.log('New transactions!', transactions)
    },
    poll: true,
  })
}

----------------------------------------

TITLE: Fetching Transactions with Wagmi
DESCRIPTION: Example showing how to use the fetchTransaction action to retrieve transaction data by providing a transaction hash.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_25

LANGUAGE: typescript
CODE:
import { fetchTransaction } from "@wagmi/core";

const transaction = await fetchTransaction({
  hash: "0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060",
});

----------------------------------------

TITLE: Checking Wagmi CLI Version
DESCRIPTION: Displays the current version of Wagmi CLI using different package managers. The -v or --version flag shows the installed version number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
pnpm wagmi --version

LANGUAGE: bash
CODE:
npx wagmi --version

LANGUAGE: bash
CODE:
yarn wagmi --version

LANGUAGE: bash
CODE:
bun wagmi --version

----------------------------------------

TITLE: Implementing unstable_connector with a fallback Transport
DESCRIPTION: Demonstrates how to create a config using unstable_connector with the injected connector inside a fallback Transport for reliability.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { 
  createConfig, 
  fallback,
  unstable_connector, // [!code hl]
} from '{{packageName}}'
import { mainnet } from '{{packageName}}/chains'

export const config = createConfig({
  chains: [mainnet],
  connectors: [injected()],
  transports: {
    [mainnet.id]: fallback([
      unstable_connector(injected), // [!code hl]
      http('https://foo-bar-baz.quiknode.pro/...')
    ])
  },
})

----------------------------------------

TITLE: Using universalResolverAddress Parameter
DESCRIPTION: Example showing how to specify a custom ENS Universal Resolver Contract address.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-14_snippet_9

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useEnsName } from '@wagmi/vue'

const result = useEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376', // [!code focus]
})
</script>

----------------------------------------

TITLE: Using Custom Config with useChains
DESCRIPTION: Demonstrates using the useChains composable with a custom configuration object in a Vue component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChains.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useChains } from '@wagmi/vue'
import { config } from './config' // [!code focus]

const chains = useChains({
  config, // [!code focus]
})
</script>

----------------------------------------

TITLE: Running Wagmi CLI with a Custom Config File
DESCRIPTION: Command to run Wagmi CLI with an explicitly specified configuration file using the --config or -c option.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
wagmi --config my-config.js

----------------------------------------

TITLE: Importing useBytecode Hook in TypeScript
DESCRIPTION: Shows how to import the useBytecode hook from the wagmi library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useBytecode } from 'wagmi'

----------------------------------------

TITLE: Using useConnectorClient with Account Parameter
DESCRIPTION: Shows how to use useConnectorClient with a specific account address parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useConnectorClient } from 'wagmi'

function App() {
  const result = useConnectorClient({
    account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  })
}

----------------------------------------

TITLE: Specifying Block Number for useTransactionCount Hook
DESCRIPTION: This snippet shows how to use the useTransactionCount hook with a specific block number to get the transaction count at that block.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { useTransactionCount } from 'wagmi'

function App() {
  const result = useTransactionCount({
    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',
    blockNumber: 17829139n,
  })
}

----------------------------------------

TITLE: Using getFeeHistory with blockCount Parameter
DESCRIPTION: Shows how to use getFeeHistory with the blockCount parameter, which specifies the number of blocks in the requested range (between 1 and 1024).
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-14_snippet_2

LANGUAGE: ts
CODE:
import { getFeeHistory } from '@wagmi/core'
import { config } from './config'

const feeHistory = await getFeeHistory(config, {
  blockCount: 4, // [!code focus]
  rewardPercentiles: [25, 75]
})

----------------------------------------

TITLE: Specifying Multicall Address in readContracts
DESCRIPTION: Shows how to specify the multicall contract address when using readContracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_12

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
    },
    // ...
  ],
  multicallAddress: '0xca11bde05977b3631167028862be2a173976ca11',
})

----------------------------------------

TITLE: Importing useWatchContractEvent Return Type
DESCRIPTION: Shows how to import the TypeScript type definition for useWatchContractEvent return value for type safety.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchContractEvent.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { type UseWatchContractEventReturnType } from '@wagmi/vue'

----------------------------------------

TITLE: Importing useToken Hook in TypeScript
DESCRIPTION: This snippet shows how to import the useToken hook from the wagmi library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { useToken } from 'wagmi'

----------------------------------------

TITLE: Wagmi Config Using defineConfig Utility
DESCRIPTION: Using the defineConfig utility to provide intellisense without requiring JSDoc annotations.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-14_snippet_3

LANGUAGE: javascript
CODE:
import { defineConfig } from '@wagmi/cli'

export default defineConfig({
  // ...
})

----------------------------------------

TITLE: Setting up Wagmi Vue Package Variables
DESCRIPTION: Script that sets up essential package information variables for a Vue.js Wagmi application. It imports package.json data to access version information and defines paths and package names for use elsewhere in the application.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/installation.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup>
import packageJson from '../../packages/vue/package.json'
import Browsers from '../components/Browsers.vue'

const docsPath = 'vue'
const packageDir = 'vue'
const packageName = '@wagmi/vue'
const viemVersion = packageJson.peerDependencies.viem
</script>

----------------------------------------

TITLE: Using blockNumber Parameter with getEnsResolver
DESCRIPTION: Shows how to specify a block number when fetching an ENS resolver to get historical data.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsResolver.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getEnsResolver } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensResolver = getEnsResolver(config, {
  blockNumber: 17829139n, // [!code focus]
  name: normalize('wevm.eth'),
})

----------------------------------------

TITLE: Simulating Contract with Value in TypeScript
DESCRIPTION: This snippet shows how to use the simulateContract function with a specified value in Ether. It simulates a transferFrom function call on an ERC20 token contract while sending 0.01 Ether.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-14_snippet_16

LANGUAGE: typescript
CODE:
import { simulateContract } from '@wagmi/core'
import { parseEther } from 'viem'
import { abi } from './abi'
import { config } from './config'

const result = await simulateContract(config, {
  abi,
  address: '0x6b175474e89094c44da98b954eedeac495271d0f',
  functionName: 'transferFrom',
  args: [
    '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    123n,
  ],
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Configuring Request Timeout for HTTP Transport
DESCRIPTION: Demonstrates how to set the timeout for HTTP requests in milliseconds.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
const transport = http('https://foo-bar-baz.quiknode.pro/...', {
  timeout: 60_000, // [!code focus]
})

----------------------------------------

TITLE: Installing TanStack Query Storage Persisters for Async Storage
DESCRIPTION: Command line instructions for installing the necessary packages to set up Wagmi with TanStack Query using asynchronous storage like IndexedDB or AsyncStorage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_2

LANGUAGE: bash
CODE:
pnpm i @tanstack/query-async-storage-persister @tanstack/react-query-persist-client

LANGUAGE: bash
CODE:
npm i @tanstack/query-async-storage-persister @tanstack/react-query-persist-client

LANGUAGE: bash
CODE:
yarn add @tanstack/query-async-storage-persister @tanstack/react-query-persist-client

LANGUAGE: bash
CODE:
bun i @tanstack/query-async-storage-persister @tanstack/react-query-persist-client

----------------------------------------

TITLE: Using Custom universalResolverAddress with getEnsText
DESCRIPTION: Demonstrates how to specify a custom ENS Universal Resolver Contract address when fetching ENS text records.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { getEnsText } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

const ensText = await getEnsText(config, {
  name: normalize('wevm.eth'),
  key: 'com.twitter',
  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376', // [!code focus]
})

----------------------------------------

TITLE: Using useCapabilities with ScopeKey
DESCRIPTION: Shows how to use the useCapabilities hook with a scopeKey for cache scoping.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useCapabilities } from 'wagmi/experimental'
import { config } from './config'

function App() {
  const result = useCapabilities({
    scopeKey: 'foo',
  })
}

----------------------------------------

TITLE: Importing GetBlockParameters type
DESCRIPTION: Shows how to import the type definition for the getBlock parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { type GetBlockParameters } from '@wagmi/core'

----------------------------------------

TITLE: Enabling Debug Mode for Safe Connector
DESCRIPTION: Shows how to enable debug mode in the Safe connector configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/safe.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { safe } from 'wagmi/connectors'

const connector = safe({
  debug: true,
})

----------------------------------------

TITLE: Using usePrepareTransactionRequest with Account Parameter
DESCRIPTION: Shows how to use the usePrepareTransactionRequest hook with the account parameter specified.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther } from 'viem'

function App() {
  const result = usePrepareTransactionRequest({
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
  })
}

----------------------------------------

TITLE: Configuring Cache Duration for Etherscan Plugin
DESCRIPTION: Shows how to set a custom cache duration for ABIs in the Etherscan plugin configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { etherscan } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    etherscan({
      apiKey: process.env.ETHERSCAN_API_KEY,
      cacheDuration: 300_000,
      chainId: 1,
      contracts: [
        {
          name: 'Wagmigotchi',
          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
        },
      ],
    }),
  ],
})

----------------------------------------

TITLE: Custom Storage Key Configuration
DESCRIPTION: Example demonstrating how to set a custom key prefix for storage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createStorage } from '{{packageName}}'

const storage = createStorage({
  key: 'my-app',
  storage: localStorage,
})

----------------------------------------

TITLE: Updating Project Dependencies
DESCRIPTION: Commands for checking and updating project dependencies using Taze.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-14_snippet_11

LANGUAGE: bash
CODE:
pnpm deps       # prints outdated deps
pnpm deps patch # print outdated deps with new patch versions
pnpm deps -w    # updates deps (best done with clean working tree)

----------------------------------------

TITLE: Setting Gas Price for Legacy Transactions in TypeScript React
DESCRIPTION: This example shows how to set the gasPrice parameter for Legacy Transactions when using the useSimulateContract hook. It specifies the price in wei to pay per gas.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-14_snippet_12

LANGUAGE: tsx
CODE:
import { useSimulateContract } from 'wagmi'
import { parseGwei } from 'viem'
import { abi } from './abi'
import { config } from './config'

function App() {
  const result = useSimulateContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'transferFrom',
    args: [
      '0xd2135CfB216b74109775236E36d4b433F1DF507B',
      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
      123n,
    ],
    gasPrice: parseGwei('20'), // [!code focus]
  })
}

----------------------------------------

TITLE: Using Custom Config with useSwitchAccount
DESCRIPTION: Demonstrates how to use useSwitchAccount with a custom configuration object.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchAccount.md#2025-04-14_snippet_3

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSwitchAccount } from 'wagmi'
import { config } from './config'

const result = useSwitchAccount({
  config,
})
</script>

----------------------------------------

TITLE: Defining Package Paths for Vue Wagmi Integration
DESCRIPTION: This script sets up important constants for documentation purposes, defining the documentation path and package names for the main @wagmi/vue package and its connectors.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/createConfig.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup>
const docsPath = 'vue'
const packageName = '@wagmi/vue'
const connectorsPackageName = '@wagmi/vue/connectors'
</script>

----------------------------------------

TITLE: Setting Polling Interval in useWatchBlocks Hook
DESCRIPTION: Shows how to set a custom polling interval for checking new blocks when using the polling mechanism.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { useWatchBlocks } from 'wagmi'

function App() {
  useWatchBlocks({
    onBlock(block) { 
      console.log('New block', block.number) 
    }
    pollingInterval: 1_000,
  })
}

----------------------------------------

TITLE: Using getEnsName with Address Parameter
DESCRIPTION: This snippet demonstrates using getEnsName with a focus on the address parameter, which is required and specifies the Ethereum address to get the ENS name for.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getEnsName } from '@wagmi/core'
import { config } from './config'

const ensName = await getEnsName(config, {
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]
})

----------------------------------------

TITLE: Cloning Wagmi Repository
DESCRIPTION: Commands for cloning the Wagmi repository using Git or GitHub CLI.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
git clone https://github.com/wevm/wagmi.git

LANGUAGE: bash
CODE:
gh repo clone wevm/wagmi

----------------------------------------

TITLE: Using chainId Parameter with useWatchBlockNumber
DESCRIPTION: Example of using the chainId parameter to specify which blockchain network to watch for blocks on.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { useWatchBlockNumber } from 'wagmi'

function App() {
  useWatchBlockNumber({
    chainId: 1, // [!code focus]
    onBlockNumber(blockNumber) {
      console.log('New block number', blockNumber)
    },
  })
}

----------------------------------------

TITLE: Importing WatchChainIdParameters Type
DESCRIPTION: This snippet shows how to import the WatchChainIdParameters type from @wagmi/core, which is used to define the parameters for the watchChainId function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchChainId.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type WatchChainIdParameters } from '@wagmi/core'

----------------------------------------

TITLE: Configuring Contracts in Etherscan Plugin
DESCRIPTION: Shows how to configure contracts in the Etherscan plugin, specifying the name and address for each contract.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { etherscan } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    etherscan({
      apiKey: process.env.ETHERSCAN_API_KEY,
      chainId: 1,
      contracts: [
        {
          name: 'Wagmigotchi',
          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
        },
      ],
    }),
  ],
})

----------------------------------------

TITLE: Importing Wagmi Core Action in TypeScript
DESCRIPTION: This code snippet demonstrates how to import a specific action (getAccount) from the @wagmi/core package.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getAccount } from '@wagmi/core'

----------------------------------------

TITLE: Basic useEnsName Hook Usage
DESCRIPTION: Example showing basic usage of useEnsName hook with an Ethereum address parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-14_snippet_1

LANGUAGE: tsx
CODE:
import { useEnsName } from 'wagmi'

function App() {
  const result = useEnsName({
    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  })
}

----------------------------------------

TITLE: Using Asset Gateway URLs with useEnsAvatar
DESCRIPTION: Illustrates how to use the assetGatewayUrls parameter to specify custom gateway URLs for resolving IPFS assets when fetching ENS avatars.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { getEnsAvatar } from '@wagmi/core'
import { normalize } from 'viem/ens'
import { config } from './config'

function App() {
  const result = useEnsAvatar({
    assetGatewayUrls: {
      ipfs: 'https://cloudflare-ipfs.com',
    },
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Using chainId Parameter in watchBlocks
DESCRIPTION: Shows how to specify a chain ID when using the watchBlocks function.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { watchBlocks } from '@wagmi/core'
import { mainnet } from '@wagmi/core/chains'
import { config } from './config'

const unwatch = watchBlocks(config, {
  chainId: mainnet.id,
  onBlock(block) {
    console.log('Block changed!', block)
  },
})
unwatch()

----------------------------------------

TITLE: Estimating Gas with Max Priority Fee Per Gas in TypeScript
DESCRIPTION: Shows how to use the useEstimateGas hook with specified max fee and max priority fee per gas for EIP-1559 transactions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { useEstimateGas } from 'wagmi'
import { parseEther, parseGwei } from 'viem'
import { config } from './config'

function App() {
  const result = useEstimateGas({
    maxFeePerGas: parseGwei('20'),
    maxPriorityFeePerGas: parseGwei('2'),
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    value: parseEther('0.01'),
  })
}

----------------------------------------

TITLE: Initializing Package Constants in Vue Script Setup
DESCRIPTION: Sets up constant variables for the wagmi package name and its connectors package path. Uses Vue's script setup syntax for composition API usage.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/connectors/mock.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup>
const packageName = 'wagmi'
const connectorsPackageName = 'wagmi/connectors'
</script>

----------------------------------------

TITLE: Configuring useSignTypedData with Custom Config
DESCRIPTION: Illustrates how to use a custom configuration with the useSignTypedData composable by passing a config object as a parameter.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignTypedData.md#2025-04-14_snippet_2

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useSignTypedData } from '@wagmi/vue'
import { config } from './config'

const result = useSignTypedData({
  config,
})
</script>

----------------------------------------

TITLE: Estimating Gas with Specific Gas Price in TypeScript
DESCRIPTION: Shows how to use the useEstimateGas hook with a specified gas price for legacy transactions.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { useEstimateGas } from 'wagmi'
import { parseEther, parseGwei } from 'viem'
import { config } from './config'

function App() {
  const result = useEstimateGas({
    gasPrice: parseGwei('20'),
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    value: parseEther('0.01'),
  })
}

----------------------------------------

TITLE: Using Custom Config
DESCRIPTION: Example demonstrating usage with a custom configuration.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-14_snippet_5

LANGUAGE: tsx
CODE:
import { useEnsResolver } from 'wagmi'
import { normalize } from 'viem/ens'
import { config } from './config'

function App() {
  const result = useEnsResolver({
    config,
    name: normalize('wevm.eth'),
  })
}

----------------------------------------

TITLE: Basic Usage of getFeeHistory with Required Parameters
DESCRIPTION: Demonstrates basic usage of getFeeHistory with the required blockCount and rewardPercentiles parameters.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-14_snippet_1

LANGUAGE: ts
CODE:
import { getFeeHistory } from '@wagmi/core'
import { config } from './config'

const feeHistory = await getFeeHistory(config, {
  blockCount: 4,
  rewardPercentiles: [25, 75]
})

----------------------------------------

TITLE: Using useBytecode with scopeKey Parameter
DESCRIPTION: Example showing how to use the scopeKey parameter to scope the cache to a specific context.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-14_snippet_8

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useBytecode } from '@wagmi/vue'
import { config } from './config' // [!code focus]

const { data: byteCode } = useBytecode({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  scopeKey: 'foo', // [!code focus]
})
</script>

<template>
  Byte Code: {{ byteCode }}
</template>

----------------------------------------

TITLE: useStorageAt with Scope Key - React TypeScript
DESCRIPTION: Example showing how to use scope keys for cache management with useStorageAt.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-14_snippet_6

LANGUAGE: tsx
CODE:
import { useStorageAt } from 'wagmi'
import { config } from './config'

function App() {
  const result = useStorageAt({
    scopeKey: 'foo'
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    slot: '0x0',
  })
}

----------------------------------------

TITLE: Adding Name Prefix to Hardhat Artifacts
DESCRIPTION: Shows how to add a prefix to artifact names to prevent name collisions between contracts from different sources.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { defineConfig } from '@wagmi/cli'
import { hardhat } from '@wagmi/cli/plugins'

export default defineConfig({
  plugins: [
    hardhat({
      namePrefix: 'HelloHardhat',
      project: '../hello_hardhat',
    }),
  ],
})

----------------------------------------

TITLE: Initializing Documentation Variables in Vue Script
DESCRIPTION: Sets up configuration variables for documentation paths and package names using Vue's script setup syntax. Defines the documentation path and package name for Wagmi Core.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/createStorage.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup>
const docsPath = "core"
const packageName = '@wagmi/core'
</script>

----------------------------------------

TITLE: Transaction Query with Chain ID
DESCRIPTION: Demonstrates querying a transaction with specific chain ID specification
SOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-14_snippet_5

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useTransaction } from '@wagmi/vue'
import { mainnet } from 'wagmi/chains'

const result = useTransaction({
  chainId: mainnet.id,
  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',
})
</script>

----------------------------------------

TITLE: Retrieving and Updating Query Data in React
DESCRIPTION: This snippet demonstrates how to retrieve and update query data imperatively using getQueryData and setQueryData. It's useful for scenarios where you need to access or modify query data outside of a React component.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-14_snippet_9

LANGUAGE: tsx
CODE:
import { getBlockQueryOptions } from 'wagmi'
import type { Block } from 'viem'
import { queryClient } from './app'
import { config } from './config'

export function getPendingBlockData() {
  return queryClient.getQueryData( // [!code hl]
    getBlockQueryOptions(config, { // [!code hl]
      chainId: config.state.chainId, // [!code hl]
      tag: 'pending' // [!code hl]
    } // [!code hl]
  )) // [!code hl]
}

export function setPendingBlockData(data: Block) {
  return queryClient.setQueryData( // [!code hl]
    getBlockQueryOptions(config, { // [!code hl]
      chainId: config.state.chainId, // [!code hl]
      tag: 'pending' // [!code hl]
    }, // [!code hl]
    data // [!code hl]
  )) // [!code hl]
}

----------------------------------------

TITLE: Setting Function Name in readContracts
DESCRIPTION: Illustrates how to specify the function name for a contract call in readContracts.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-14_snippet_7

LANGUAGE: tsx
CODE:
import { readContracts } from '@wagmi/core'
import { config } from './config'

const result = await readContracts(config, {
  contracts: [
    {
      address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
      abi: mlootABI,
      functionName: 'getChest',
      args: [69],
    },
    // ...
  ],
})

----------------------------------------

TITLE: Initializing Vue Constants for Wagmi Configuration
DESCRIPTION: Sets up constant variables in a Vue script for Wagmi documentation paths and package names. Defines the core documentation path and package references for both the main Wagmi core and connectors packages.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/createConfig.md#2025-04-14_snippet_0

LANGUAGE: vue
CODE:
<script setup>
const docsPath = 'core'
const packageName = '@wagmi/core'
const connectorsPackageName = '@wagmi/connectors'
</script>

----------------------------------------

TITLE: Importing the disconnect Action from @wagmi/core
DESCRIPTION: Demonstrates how to import the disconnect function from the @wagmi/core library.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/disconnect.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { disconnect } from '@wagmi/core'

----------------------------------------

TITLE: Importing UseWatchContractEventParameters Type
DESCRIPTION: Shows how to import the UseWatchContractEventParameters type for TypeScript type checking.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchContractEvent.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { type UseWatchContractEventParameters } from 'wagmi'

----------------------------------------

TITLE: Importing GetTransactionErrorType
DESCRIPTION: Shows how to import the type definition for potential errors from the getTransaction action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransaction.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { type GetTransactionErrorType } from '@wagmi/core'

----------------------------------------

TITLE: Using usePrepareTransactionRequest with Scope Key
DESCRIPTION: Shows how to use the usePrepareTransactionRequest hook with a scope key for cache management.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-14_snippet_12

LANGUAGE: tsx
CODE:
import { usePrepareTransactionRequest } from 'wagmi'
import { parseEther } from 'viem'
import { config } from './config'

function App() {
  const result = usePrepareTransactionRequest({
    scopeKey: 'foo'
    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1'),
  })
}

----------------------------------------

TITLE: Estimating Gas with Specific Chain ID in TypeScript
DESCRIPTION: Shows how to use the useEstimateGas hook with a specified chain ID.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { useEstimateGas } from 'wagmi'
import { mainnet } from '@wagmi/core/chains'
import { parseEther } from 'viem'
import { config } from './config'

function App() {
  const result = useEstimateGas({
    chainId: mainnet.id,
    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
    value: parseEther('0.01'),
  })
}

----------------------------------------

TITLE: Updating MetaMask SDK in JavaScript
DESCRIPTION: Updated the MetaMask SDK version in the wagmi package.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_0

LANGUAGE: markdown
CODE:
[#3848](https://github.com/wevm/wagmi/pull/3848) [`dd40a41c`](https://github.com/wevm/wagmi/commit/dd40a41c526ab60a288aff2250ed8dba92a27b16) Thanks [@jxom](https://github.com/jxom)! - Updated MetaMask SDK.

----------------------------------------

TITLE: Migrating Chain Usage in TypeScript
DESCRIPTION: Example of how to update code to use the new Chain type structure for accessing RPC URLs and contract addresses.
SOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
const rpcUrl = mainnet.rpcUrls.alchemy.http[0]
const multicallContract = mainnet.contracts.multicall3

----------------------------------------

TITLE: Importing GetBlockErrorType
DESCRIPTION: Shows how to import the type definition for potential errors from the getBlock action.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { type GetBlockErrorType } from '@wagmi/core'

----------------------------------------

TITLE: Configuring Async Injection Shim
DESCRIPTION: Demonstrates how to configure the unstable_shimAsyncInject parameter to handle async provider injection timing.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/injected.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { injected } from '{{connectorsPackageName}}'

const connector = injected({
  unstable_shimAsyncInject: 2_000,
})

----------------------------------------

TITLE: Defining Domain and Types for Typed Data
DESCRIPTION: Shows how to define the domain and types objects used in the useVerifyTypedData hook. These definitions are typically stored in a separate file and imported where needed.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
// All properties on a domain are optional
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const

// The named list of all type definitions
export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Using Custom Config with useWriteContracts
DESCRIPTION: Shows how to use a custom configuration with the useWriteContracts hook instead of using the default WagmiProvider config.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContracts.md#2025-04-14_snippet_2

LANGUAGE: tsx
CODE:
import { useWriteContracts } from 'wagmi/experimental'
import { config } from './config'

function App() {
  const result = useWriteContracts({
    config,
  })
}

----------------------------------------

TITLE: Using useBlockTransactionCount with blockNumber Parameter
DESCRIPTION: This example demonstrates using the useBlockTransactionCount hook with a specific block number.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-14_snippet_3

LANGUAGE: tsx
CODE:
import { useBlock } from 'wagmi'

function App() {
  const result = useBlock({
    blockNumber: 42069n
  })
}

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install the project's dependencies using pnpm.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-14_snippet_4

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Narrowing Return Types with chainId Data Property
DESCRIPTION: Shows how to narrow return types using the chainId property on return data. Demonstrates type narrowing using conditional checks with zkSync chain.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/chain-properties.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { waitForTransactionReceipt } from '@wagmi/core'
import { zkSync } from '@wagmi/core/chains'

const result = await waitForTransactionReceipt({
  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',
})

if (result.chainId === zkSync.id) {
  result.logs
}

----------------------------------------

TITLE: Importing GetBytecodeReturnType
DESCRIPTION: Shows how to import the type definition for the getBytecode return value.
SOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { type GetBytecodeReturnType } from '@wagmi/core'