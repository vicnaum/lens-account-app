This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: packages/connectkit/src/assets/*.*, **/graphics.tsx
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    config.yml
  workflows/
    quality.yml
examples/
  cra/
    public/
      index.html
      robots.txt
    src/
      components/
        Web3Provider.tsx
      App.tsx
      index.css
      index.tsx
      react-app-env.d.ts
      reportWebVitals.ts
      setupTests.ts
    .env.example
    .gitignore
    package.json
    README.md
    tsconfig.json
  nextjs/
    components/
      Web3Provider.tsx
    pages/
      _app.tsx
      index.tsx
    styles/
      globals.css
    .env.example
    .eslintrc.json
    .gitignore
    next.config.js
    package.json
    README.md
    tsconfig.json
  nextjs-app/
    app/
      layout.tsx
      page.tsx
      providers.tsx
    styles/
      globals.css
    .env.example
    .eslintrc.json
    .gitignore
    config.ts
    next.config.js
    package.json
    README.md
    tsconfig.json
  nextjs-siwe/
    public/
      next.svg
      vercel.svg
    src/
      pages/
        api/
          siwe/
            [...route].ts
        _app.tsx
        _document.tsx
        index.tsx
      styles/
        globals.css
      utils/
        siweClient.ts
        siweServer.ts
    .env.example
    .eslintrc.json
    .gitignore
    next.config.js
    package.json
    postcss.config.js
    README.md
    tailwind.config.js
    tsconfig.json
  testbench/
    public/
      manifest.json
    src/
      components/
        CustomAvatar.tsx
        CustomSIWEButton.tsx
        inputs.tsx
        Web3Provider.tsx
      pages/
        api/
          siwe/
            [...route].ts
        siwe/
          token-gated.tsx
        _app.tsx
        _document.tsx
        chains.tsx
        demo.tsx
        iframe.tsx
        index.tsx
      styles/
        globals.css
      utils/
        siweClient.ts
        siweServer.ts
      TestbenchProvider.tsx
    .env.example
    .eslintrc.json
    .gitignore
    next.config.js
    package.json
    README.md
    tsconfig.json
  vite/
    src/
      components/
        Web3Provider.tsx
      App.tsx
      index.css
      main.tsx
      polyfills.ts
      vite-env.d.ts
    .env.example
    .gitignore
    index.html
    package.json
    README.md
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
packages/
  connectkit/
    src/
      components/
        BalanceButton/
          index.tsx
        Common/
          Alert/
            index.tsx
            styles.ts
            types.ts
          Avatar/
            index.tsx
            styles.ts
          BrowserIcon/
            index.tsx
            styles.ts
            types.ts
          Button/
            index.tsx
            styles.ts
            types.ts
          Chain/
            index.tsx
            styles.ts
          ChainSelect/
            index.tsx
          ChainSelectDropdown/
            index.tsx
            styles.ts
          ChainSelectList/
            index.tsx
            styles.ts
          ConnectorList/
            index.tsx
            styles.ts
          CopyToClipboard/
            CopyToClipboardIcon.tsx
            index.tsx
          CustomQRCode/
            index.tsx
            QRCode.tsx
            styles.ts
            types.ts
          DynamicContainer/
            index.tsx
          FamilyAccountsButton/
            index.tsx
            styles.ts
          FitText/
            index.tsx
          LazyImage/
            index.tsx
          Logo/
            index.tsx
            styles.ts
          Modal/
            index.tsx
            styles.ts
          Portal/
            index.tsx
          ScrollArea/
            index.tsx
            styles.ts
          Spinner/
            index.tsx
            styles.ts
          ThemedButton/
            index.tsx
            styles.ts
          Tooltip/
            index.tsx
            styles.ts
            types.ts
        ConnectButton/
          index.tsx
          styles.ts
        ConnectKitThemeProvider/
          ConnectKitThemeProvider.tsx
        ConnectModal/
          ConnectWithInjector/
            CircleSpinner/
              index.tsx
              styles.ts
            SquircleSpinner/
              index.tsx
              styles.ts
            index.tsx
            styles.ts
          ConnectUsing.tsx
          ConnectWithQRCode.tsx
          demo.tsx
          index.tsx
        contexts/
          web3/
            index.tsx
        NetworkButton/
          index.tsx
        Pages/
          About/
            index.tsx
            styles.ts
          Connectors/
            index.tsx
            styles.ts
          DownloadApp/
            index.tsx
          MobileConnectors/
            index.tsx
            styles.ts
          Onboarding/
            index.tsx
            styles.ts
          Profile/
            index.tsx
            styles.ts
          SignInWithEthereum/
            index.tsx
            styles.ts
          SwitchNetworks/
            index.tsx
        Standard/
          SIWE/
            index.tsx
            styles.ts
        ConnectKit.tsx
      constants/
        chainConfigs.tsx
        defaultTheme.ts
      hooks/
        connectors/
          useCoinbaseWalletUri.tsx
          useWalletConnectUri.ts
        useChainIsSupported.ts
        useChains.ts
        useConnect.tsx
        useConnectCallback.ts
        useConnectors.ts
        useEnsFallbackConfig.ts
        useFitText.tsx
        useFocusTrap.tsx
        useGoogleFont.tsx
        useIsMobile.ts
        useIsMounted.tsx
        useLastConnector.ts
        useLocales.tsx
        useLocalStorage.ts
        useLockBodyScroll.ts
        useModal.ts
        usePrevious.tsx
        useWalletConnectModal.tsx
        useWindowSize.ts
      localizations/
        locales/
          ar-AE.ts
          ca-AD.ts
          ee-EE.ts
          en-US.ts
          es-ES.ts
          fa-IR.ts
          fr-FR.ts
          index.ts
          ja-JP.ts
          pt-BR.ts
          ru-RU.ts
          tr-TR.ts
          vi-VN.ts
          zh-CN.ts
        index.tsx
      siwe/
        index.ts
        SIWEContext.tsx
        SIWEProvider.tsx
        useSIWE.ts
      styles/
        styled/
          index.ts
        themes/
          base.ts
          index.ts
          midnight.ts
          minimal.ts
          nouns.ts
          retro.ts
          rounded.ts
          soft.ts
          web95.ts
        defaultTheme.ts
        index.ts
        types.ts
      utils/
        index.ts
        localstorage.ts
        p3.ts
        wallets.ts
      wallets/
        index.ts
        useWallets.tsx
        walletConfigs.tsx
      defaultConfig.ts
      defaultConnectors.ts
      defaultTransports.ts
      index.ts
      types.ts
    package.json
    rollup.config.dev.js
    rollup.config.prod.js
    tsconfig.json
  connectkit-next-siwe/
    src/
      configureSIWE.tsx
      index.ts
    package.json
    README.md
    rollup.config.dev.js
    rollup.config.prod.js
    tsconfig.json
  cra-template/
    template/
      public/
        index.html
        manifest.json
        robots.txt
      src/
        App.test.tsx
        App.tsx
        index.tsx
        reportWebVitals.ts
        setupTests.ts
      .env.example
      gitignore
    package.json
    README.md
    template.json
.gitignore
.prettierrc
.yarnrc.yml
build.js
CHANGELOG.md
CONTRIBUTING.md
LICENSE
package.json
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Let us know about some broken functionality
title: '[BUG] '
labels: bug
assignees: ''

---

**Describe the bug**

A clear and concise description of what the bug is.

**To reproduce**

A CodeSandbox (preferably) or specify which version of ConnectKit you're using along with reproduction steps.

**Expected behavior**

A clear and concise description of what you expected to happen.

**Screenshots**

If applicable, add screenshots to help explain your problem.

**Environment details**

If applicable, let us know which OS, browser, browser version etc you're using.

**Additional context**

Add any other context about the problem here.
</file>

<file path=".github/ISSUE_TEMPLATE/config.yml">
blank_issues_enabled: false
contact_links:
  - name: Ask Question
    url: https://github.com/family/connectkit/discussions/new?category=q-a
    about: Ask questions and discuss with the community
  - name: Feature Request
    url: https://github.com/family/connectkit/discussions/new?category=ideas
    about: Request features or discuss new ideas for ConnectKit
</file>

<file path=".github/workflows/quality.yml">
name: Quality Check
on: [pull_request]
env:
  YARN_ENABLE_IMMUTABLE_INSTALLS: false
jobs:
  lint:
    name: Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Node v16
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Use node_modules cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install deps
        run: yarn

      - name: Build the code
        run: yarn build:ci

      - name: Run ESLint
        run: yarn lint:ci
</file>

<file path="examples/cra/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1"
    />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="ConnectKit CRA Example" />
    <title>ConnectKit CRA Example</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>
</file>

<file path="examples/cra/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="examples/cra/src/components/Web3Provider.tsx">
import React from 'react';

import { WagmiProvider, createConfig } from 'wagmi';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ConnectKitProvider, getDefaultConfig } from 'connectkit';

const config = createConfig(
  getDefaultConfig({
    appName: 'ConnectKit CRA demo',
    walletConnectProjectId: process.env.REACT_APP_WALLETCONNECT_PROJECT_ID!,
  })
);

const queryClient = new QueryClient();

export const Web3Provider = ({ children }: { children: React.ReactNode }) => {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <ConnectKitProvider debugMode>{children}</ConnectKitProvider>
      </QueryClientProvider>
    </WagmiProvider>
  );
};
</file>

<file path="examples/cra/src/App.tsx">
import { ConnectKitButton } from 'connectkit';

function App() {
  return (
    <div
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
      }}
    >
      <ConnectKitButton />
    </div>
  );
}

export default App;
</file>

<file path="examples/cra/src/index.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
</file>

<file path="examples/cra/src/index.tsx">
import React from 'react';
import ReactDOM from 'react-dom/client';
import reportWebVitals from './reportWebVitals';

import './index.css';
import App from './App';

import { Web3Provider } from './components/Web3Provider';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <Web3Provider>
      <App />
    </Web3Provider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="examples/cra/src/react-app-env.d.ts">
/// <reference types="react-scripts" />
</file>

<file path="examples/cra/src/reportWebVitals.ts">
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="examples/cra/src/setupTests.ts">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path="examples/cra/.env.example">
REACT_APP_ALCHEMY_ID=
REACT_APP_INFURA_ID=
REACT_APP_WALLETCONNECT_PROJECT_ID=
SESSION_SECRET=
</file>

<file path="examples/cra/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="examples/cra/package.json">
{
  "name": "cra",
  "version": "0.0.0",
  "private": true,
  "dependencies": {
    "@tanstack/react-query": "^5.17.15",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "connectkit": "workspace:packages/connectkit",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-scripts": "5.0.1",
    "viem": "^2.23.2",
    "wagmi": "^2.14.11",
    "web-vitals": "^2.1.4"
  },
  "devDependencies": {
    "@types/node": "18.7.18",
    "@types/react": "^18.0.6",
    "@types/react-dom": "^18.0.2",
    "eslint": "8.56.0",
    "eslint-config-next": "14.0.4",
    "typescript": "^5.0.4"
  },
  "scripts": {
    "dev": "react-scripts start",
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "lint": "eslint src --ext .ts"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="examples/cra/README.md">
# [Create React App](https://github.com/facebook/create-react-app) + [TypeScript](https://www.typescriptlang.org/) + ConnectKit Example

This is a simple example of how to implement ConnectKit with [Create React App](https://github.com/facebook/create-react-app) in TypeScript.

- If you'd like to look at an example online, try this [CodeSandbox](https://codesandbox.io/s/5rhqm0?file=/README.md)
- If you want to run the example locally have a look at the [instructions in the main README](https://github.com/family/connectkit/blob/main/README.md#running-examples-locally)
</file>

<file path="examples/cra/tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
</file>

<file path="examples/nextjs/components/Web3Provider.tsx">
import React from 'react';

import { WagmiProvider, createConfig } from 'wagmi';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ConnectKitProvider, getDefaultConfig } from 'connectkit';

const config = createConfig(
  getDefaultConfig({
    appName: 'ConnectKit Next.js demo',
    walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID!,
  })
);

const queryClient = new QueryClient();

export const Web3Provider = ({ children }: { children: React.ReactNode }) => {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <ConnectKitProvider debugMode>{children}</ConnectKitProvider>
      </QueryClientProvider>
    </WagmiProvider>
  );
};
</file>

<file path="examples/nextjs/pages/_app.tsx">
import '../styles/globals.css';
import type { AppProps } from 'next/app';

import { Web3Provider } from '../components/Web3Provider';

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <Web3Provider>
      <Component {...pageProps} />
    </Web3Provider>
  );
}

export default MyApp;
</file>

<file path="examples/nextjs/pages/index.tsx">
import type { NextPage } from 'next';
import { ConnectKitButton } from 'connectkit';

const Home: NextPage = () => {
  return (
    <div
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
      }}
    >
      <ConnectKitButton />
    </div>
  );
};

export default Home;
</file>

<file path="examples/nextjs/styles/globals.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
</file>

<file path="examples/nextjs/.env.example">
NEXT_PUBLIC_ALCHEMY_ID=
NEXT_PUBLIC_INFURA_ID=
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=
SESSION_SECRET=
</file>

<file path="examples/nextjs/.eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path="examples/nextjs/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="examples/nextjs/next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig
</file>

<file path="examples/nextjs/package.json">
{
  "name": "nextjs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.17.15",
    "connectkit": "workspace:packages/connectkit",
    "next": "14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "viem": "^2.23.2",
    "wagmi": "^2.14.11"
  },
  "devDependencies": {
    "@types/node": "^18.19.3",
    "@types/react": "^18.2.43",
    "eslint": "^8.15.0",
    "eslint-config-next": "^14.0.4",
    "next": "^14.0.4",
    "typescript": "^5.0.4"
  }
}
</file>

<file path="examples/nextjs/README.md">
# [Next.js](https://nextjs.org/) + [TypeScript](https://www.typescriptlang.org/) + ConnectKit Example

This is a simple example of how to implement ConnectKit with [Next.js](https://nextjs.org/) in TypeScript.

- If you'd like to look at an example online, try this [CodeSandbox](https://codesandbox.io/s/qnvyqe?file=/README.md)
- Or you want to run the example locally have a look at the [instructions in the main README](https://github.com/family/connectkit/blob/main/README.md#running-examples-locally)
</file>

<file path="examples/nextjs/tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

<file path="examples/nextjs-app/app/layout.tsx">
import type { Metadata } from 'next';
import { type ReactNode } from 'react';
import '../styles/globals.css';

import { Providers } from './providers';

export const metadata: Metadata = {
  title: 'ConnectKit Next.js Example',
  description: 'By Family',
};

export default function RootLayout(props: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        <Providers>{props.children}</Providers>
      </body>
    </html>
  );
}
</file>

<file path="examples/nextjs-app/app/page.tsx">
'use client';

import { useAccount, useConnect, useDisconnect } from 'wagmi';
import { ConnectKitButton } from 'connectkit';

function App() {
  const account = useAccount();
  const { connectors, connect, status, error } = useConnect();
  const { disconnect } = useDisconnect();

  return (
    <>
      <div>
        <h2>Account</h2>
        <ConnectKitButton />

        <div>
          status: {account.status}
          <br />
          addresses: {JSON.stringify(account.addresses)}
          <br />
          chainId: {account.chainId}
        </div>

        {account.status === 'connected' && (
          <button type="button" onClick={() => disconnect()}>
            Disconnect
          </button>
        )}
      </div>
      <div>
        <h2>Connect</h2>
        {connectors.map((connector) => (
          <button
            key={connector.uid}
            onClick={() => connect({ connector })}
            type="button"
          >
            {connector.name}
          </button>
        ))}
        <div>{status}</div>
        <div>{error?.message}</div>
      </div>
    </>
  );
}

export default App;
</file>

<file path="examples/nextjs-app/app/providers.tsx">
'use client';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { type ReactNode } from 'react';
import { WagmiProvider } from 'wagmi';

import { config } from '../config';
import { ConnectKitProvider } from 'connectkit';

const queryClient = new QueryClient();
export function Providers(props: { children: ReactNode }) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <ConnectKitProvider>{props.children}</ConnectKitProvider>
      </QueryClientProvider>
    </WagmiProvider>
  );
}
</file>

<file path="examples/nextjs-app/styles/globals.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
</file>

<file path="examples/nextjs-app/.env.example">
NEXT_PUBLIC_ALCHEMY_ID=
NEXT_PUBLIC_INFURA_ID=
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=
SESSION_SECRET=
</file>

<file path="examples/nextjs-app/.eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path="examples/nextjs-app/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="examples/nextjs-app/config.ts">
import { getDefaultConfig } from 'connectkit';
import { createConfig } from 'wagmi';
import { mainnet, polygon, optimism, arbitrum } from 'wagmi/chains';

export const config = createConfig(
  getDefaultConfig({
    appName: 'ConnectKit Next.js demo',
    chains: [mainnet, polygon, optimism, arbitrum],
    walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID!,
  })
);

declare module 'wagmi' {
  interface Register {
    config: typeof config;
  }
}
</file>

<file path="examples/nextjs-app/next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig
</file>

<file path="examples/nextjs-app/package.json">
{
  "name": "nextjs-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.17.15",
    "connectkit": "workspace:packages/connectkit",
    "next": "14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "viem": "^2.23.2",
    "wagmi": "^2.14.11"
  },
  "devDependencies": {
    "@types/node": "^18.19.3",
    "@types/react": "^18.2.43",
    "eslint": "^8.15.0",
    "eslint-config-next": "^14.0.4",
    "next": "^14.0.4",
    "typescript": "^5.0.4"
  }
}
</file>

<file path="examples/nextjs-app/README.md">
# [Next.js](https://nextjs.org/) + [TypeScript](https://www.typescriptlang.org/) + ConnectKit Example

This is a simple example of how to implement ConnectKit with [Next.js](https://nextjs.org/) in TypeScript.

- If you'd like to look at an example online, try this [CodeSandbox](https://codesandbox.io/s/qnvyqe?file=/README.md)
- Or you want to run the example locally have a look at the [instructions in the main README](https://github.com/family/connectkit/blob/main/README.md#running-examples-locally)
</file>

<file path="examples/nextjs-app/tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

<file path="examples/nextjs-siwe/public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="examples/nextjs-siwe/public/vercel.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>
</file>

<file path="examples/nextjs-siwe/src/pages/api/siwe/[...route].ts">
import { siweServer } from '@/utils/siweServer' // Your path to siweServer.ts

export default siweServer.apiRouteHandler
</file>

<file path="examples/nextjs-siwe/src/pages/_app.tsx">
import '@/styles/globals.css';
import { siweClient } from '@/utils/siweClient';
import { ConnectKitProvider, getDefaultConfig } from 'connectkit';
import type { AppProps } from 'next/app';
import { WagmiProvider, createConfig } from 'wagmi';

const config = createConfig(
  getDefaultConfig({
    walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID!,
    appName: 'My ConnectKit App',
  })
);

export default function App({ Component, pageProps }: AppProps) {
  return (
    <WagmiProvider config={config}>
      <siweClient.Provider>
        <ConnectKitProvider>
          <Component {...pageProps} />
        </ConnectKitProvider>
      </siweClient.Provider>
    </WagmiProvider>
  );
}
</file>

<file path="examples/nextjs-siwe/src/pages/_document.tsx">
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
</file>

<file path="examples/nextjs-siwe/src/pages/index.tsx">
import { ConnectKitButton, useSIWE } from 'connectkit';

export default function Home({ address }: { address?: string }) {
  const { data, isSignedIn, signOut, signIn } = useSIWE();
  console.log({ data, isSignedIn, signOut, signIn });
  return (
    <div className="flex items-center justify-center min-h-screen py-2">
      <ConnectKitButton />
    </div>
  );
}
</file>

<file path="examples/nextjs-siwe/src/styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}
</file>

<file path="examples/nextjs-siwe/src/utils/siweClient.ts">
import { configureClientSIWE } from 'connectkit-next-siwe'

export const siweClient = configureClientSIWE({
  apiRoutePrefix: '/api/siwe', // Your API route directory
  statement: 'Sign In With Ethereum to prove you control this wallet.', // optional
})
</file>

<file path="examples/nextjs-siwe/src/utils/siweServer.ts">
import { configureServerSideSIWE } from 'connectkit-next-siwe';

export const siweServer = configureServerSideSIWE({
  session: {
    cookieName: 'connectkit-next-siwe',
    password: process.env.SESSION_SECRET,
    cookieOptions: {
      secure: process.env.NODE_ENV === 'production',
    },
  },
});
</file>

<file path="examples/nextjs-siwe/.env.example">
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=
NEXT_PUBLIC_ALCHEMY_ID=
SESSION_SECRET=
</file>

<file path="examples/nextjs-siwe/.eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path="examples/nextjs-siwe/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="examples/nextjs-siwe/next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
}

module.exports = nextConfig
</file>

<file path="examples/nextjs-siwe/package.json">
{
  "name": "nextjs-siwe",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "connectkit": "workspace:packages/connectkit",
    "connectkit-next-siwe": "workspace:packages/connectkit-next-siwe",
    "next": "12.3.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "siwe": "^2.1.4",
    "viem": "^2.23.2",
    "wagmi": "^2.14.11"
  },
  "devDependencies": {
    "@types/node": "18.7.18",
    "@types/react": "^18.0.6",
    "@types/react-dom": "^18.0.2",
    "eslint": "8.23.1",
    "eslint-config-next": "12.3.0",
    "typescript": "^5.0.4"
  }
}
</file>

<file path="examples/nextjs-siwe/postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="examples/nextjs-siwe/README.md">
# [Next.js](https://nextjs.org/) + [TypeScript](https://www.typescriptlang.org/) + [SIWE](https://login.xyz/) + ConnectKit Example

This is a simple example of how to implement ConnectKit with [Next.js](https://nextjs.org/) and [SIWE](https://docs.family.co/connectkit/authentication) in TypeScript. This example is based on the [SIWE with Next.js documentation](https://docs.family.co/connectkit/auth-with-nextjs) provided by Family.

## Running the example

- Have a look at the [instructions in the main README](https://github.com/family/connectkit/blob/main/README.md#running-examples-locally)
- Please copy the `.env.example` file to `.env.local` and fill in the values
- You'll want to set up an environment variable called `SESSION_SECRET` — a randomly generated, strong password of at least 32 characters
</file>

<file path="examples/nextjs-siwe/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
    },
  },
  plugins: [],
}
</file>

<file path="examples/nextjs-siwe/tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
</file>

<file path="examples/testbench/public/manifest.json">
{
  "name": "ConnectKit Testbench",
  "description": "Testbench for ConnectKit",
  "iconPath": "app.png",
  "providedBy": {
    "name": "Family",
    "url": "https://family.co"
  }
}
</file>

<file path="examples/testbench/src/components/CustomAvatar.tsx">
import { Types } from 'connectkit';

import { motion } from 'framer-motion';

const CustomAvatar = ({
  address,
  ensImage,
  ensName,
  size,
  radius,
}: Types.CustomAvatarProps) => {
  const color = 'red';
  return (
    <motion.div
      style={{
        overflow: 'hidden',
        borderRadius: radius,
        height: size,
        width: size,
        background: color,
      }}
      animate={{
        rotate: [0, 360],
      }}
      transition={{
        duration: 0.5,
        ease: 'linear',
        repeat: Infinity,
      }}
    >
      {ensImage && (
        /* eslint-disable @next/next/no-img-element */
        <img
          src={ensImage}
          alt={ensName ?? address}
          width="100%"
          height="100%"
        />
      )}
    </motion.div>
  );
};

export default CustomAvatar;
</file>

<file path="examples/testbench/src/components/CustomSIWEButton.tsx">
import { useSIWE, useModal } from 'connectkit';
import { SIWESession } from 'connectkit';
import { useAccount } from 'wagmi';

const CustomSIWEButton = () => {
  const { setOpen } = useModal();
  const { data, isReady, isRejected, isLoading, isSignedIn, signOut, signIn } =
    useSIWE({
      onSignIn: (sessionData?: SIWESession) =>
        console.log('onSignIn CustomSIWEButton', sessionData),
      onSignOut: () => console.log('onSignOut CustomSIWEButton'),
    });
  const { isConnected } = useAccount();

  /** Wallet is connected and signed in */
  if (isSignedIn) {
    return (
      <>
        <div>Address: {data?.address}</div>
        <div>ChainId: {data?.chainId}</div>
        <button onClick={signOut}>Sign Out</button>
      </>
    );
  }

  /** Wallet is connected, but not signed in */
  if (isConnected) {
    return (
      <>
        <button onClick={signIn} disabled={isLoading}>
          {isRejected
            ? 'Try Again'
            : isLoading
            ? 'Awaiting request...'
            : 'Sign In'}
        </button>
      </>
    );
  }

  /** A wallet needs to be connected first */
  return (
    <>
      <button onClick={() => setOpen(true)}>Connect Wallet</button>
    </>
  );
};

export default CustomSIWEButton;
</file>

<file path="examples/testbench/src/components/inputs.tsx">
export type SelectProps = { label: string; value: string };

export const Textbox = ({
  label,
  value,
  onChange,
}: {
  label: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
}) => {
  return (
    <label className="textbox">
      <span>{label}</span>
      <input type="text" value={value ?? ''} onChange={onChange} />
    </label>
  );
};

export const Checkbox = ({
  disabled,
  label,
  value,
  checked,
  onChange,
}: {
  disabled?: boolean;
  label: string;
  value: string;
  checked: boolean;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
}) => {
  return (
    <label className="checkbox">
      <input
        disabled={disabled}
        type="checkbox"
        value={value}
        checked={checked}
        onChange={onChange}
      />
      <span>{label}</span>
    </label>
  );
};

export const Select = ({
  label,
  value,
  options,
  onChange,
}: {
  label: string;
  value: string;
  options: SelectProps[];
  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;
}) => {
  return (
    <label
      className="select"
      style={{
        width: '100%',
      }}
    >
      <span>{label}</span>
      <select
        value={value}
        onChange={onChange}
        style={{
          boxShadow: '0 0 0 1px #ccc',
        }}
      >
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
    </label>
  );
};
</file>

<file path="examples/testbench/src/components/Web3Provider.tsx">
import { createElement, createContext, useContext, useState } from 'react';
import { TestBenchProvider } from '../TestbenchProvider';

import { getDefaultConfig, wallets } from 'connectkit';

import { WagmiProvider, createConfig } from 'wagmi';
import { defineChain, type Chain, http } from 'viem';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { mainnet } from 'viem/chains';

const avalanche: Chain = defineChain({
  id: 43_114,
  name: 'Avalanche',
  nativeCurrency: {
    decimals: 18,
    name: 'Avalanche',
    symbol: 'AVAX',
  },
  rpcUrls: {
    default: { http: ['https://api.avax.network/ext/bc/C/rpc'] },
  },
  blockExplorers: {
    default: { name: 'SnowTrace', url: 'https://snowtrace.io' },
    snowtrace: { name: 'SnowTrace', url: 'https://snowtrace.io' },
  },
  testnet: false,
});

export const ckConfig = getDefaultConfig({
  /*
  chains: [
    mainnet,
    //avalanche
  ],
  transports: {
    [mainnet.id]: http(mainnet.rpcUrls.default.http[0]),
    //[avalanche.id]: http(avalanche.rpcUrls.default.http[0]),
  },
  */
  appName: 'ConnectKit testbench',
  appIcon: '/app.png',
  walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID!,
  //enableFamily: false,
});
const customConfig = {
  ...ckConfig,
  connectors: [wallets['rainbow'], ...(ckConfig.connectors ?? [])],
};
const config = createConfig(ckConfig);

const queryClient = new QueryClient();

type ContextValue = {};

const Context = createContext<ContextValue | null>(null);

export const Web3Provider = ({ children }: { children: React.ReactNode }) => {
  return createElement(
    Context.Provider,
    { value: {} },
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <TestBenchProvider
        //customTheme={{ '--ck-font-family': 'monospace' }}
        >
          {children}
        </TestBenchProvider>
      </QueryClientProvider>
    </WagmiProvider>
  );
};

export const useWeb3 = () => {
  const context = useContext(Context);
  if (!context) throw Error('useWeb3 must be inside a Web3Provider.');
  return context;
};
</file>

<file path="examples/testbench/src/pages/api/siwe/[...route].ts">
import { siweServer } from '../../../utils/siweServer';

export default siweServer.apiRouteHandler;
</file>

<file path="examples/testbench/src/pages/siwe/token-gated.tsx">
import type { GetServerSideProps, NextPage } from 'next';
import { siweServer } from '../../utils/siweServer';

type Props =
  | { isCollector: false }
  | {
      isCollector: true;
      address: string;
    };

export const getServerSideProps: GetServerSideProps<Props> = async ({
  req,
  res,
}) => {
  const { address } = await siweServer.getSession(req, res);

  if (!address) {
    return {
      props: { isCollector: false },
    };
  }

  // TODO: check for token

  return {
    props: { isCollector: true, address },
  };
};

const TokenGatedPage: NextPage<Props> = (props) => {
  if (!props.isCollector) {
    return <>You need to be signed in and have our token to see this page.</>;
  }

  return <>You made it! Welcome, collector.</>;
};

export default TokenGatedPage;
</file>

<file path="examples/testbench/src/pages/_app.tsx">
import '../styles/globals.css';
import type { AppProps } from 'next/app';
import Head from 'next/head';

import { ConnectKitProvider, SIWESession } from 'connectkit';
import { siweClient } from '../utils/siweClient';
import { Web3Provider } from '../components/Web3Provider';
import { useTestBench } from '../TestbenchProvider';

function App({ Component, pageProps }: AppProps) {
  const { theme, mode, options, customTheme } = useTestBench();
  const key = JSON.stringify({ customTheme }); // re-render on customTheme change

  return (
    <siweClient.Provider
      onSignIn={(data?: SIWESession) => {
        console.log('onSignIn Provider', data);
      }}
      onSignOut={() => {
        console.log('onSignOut Provider');
      }}
    >
      <ConnectKitProvider
        key={key}
        theme={theme}
        mode={mode}
        options={options}
        customTheme={customTheme}
        onConnect={(data) => {
          console.log('onConnect Provider', data);
        }}
        onDisconnect={() => {
          console.log('onDisconnect Provider');
        }}
        debugMode
      >
        <Component {...pageProps} />
      </ConnectKitProvider>
    </siweClient.Provider>
  );
}
function MyApp(appProps: AppProps) {
  return (
    <>
      <Head>
        <meta charSet="utf-8" />
        <title>ConnectKit Testbench</title>
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1"
        />
      </Head>

      <Web3Provider>
        <App {...appProps} />
      </Web3Provider>
    </>
  );
}

export default MyApp;
</file>

<file path="examples/testbench/src/pages/_document.tsx">
import Document, { Html, Head, Main, NextScript } from 'next/document';
import { ServerStyleSheet } from 'styled-components';

export default class CustomDocument extends Document {
  static async getInitialProps(ctx: any) {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;

    try {
      ctx.renderPage = () =>
        originalRenderPage({
          enhanceApp: (App: any) => (props: any) =>
            sheet.collectStyles(<App {...props} />),
        });

      const initialProps = await Document.getInitialProps(ctx);

      return {
        ...initialProps,
        styles: (
          <>
            {initialProps.styles}
            {sheet.getStyleElement()}
          </>
        ),
      };
    } finally {
      sheet.seal();
    }
  }

  render() {
    return (
      <Html>
        <Head>
          <link rel="icon" href="https://family.co/favicon.png" />
          <link
            href="https://fonts.cdnfonts.com/css/pt-root-ui"
            rel="stylesheet"
          />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}
</file>

<file path="examples/testbench/src/pages/chains.tsx">
import type { NextPage } from 'next';
import Link from 'next/link';

import { useEffect, useState } from 'react';

import { ConnectKitButton, ChainIcon, useChains } from 'connectkit';

import * as wagmiChains from 'wagmi/chains';
import { useAccount } from 'wagmi';
const allChains = Object.keys(wagmiChains).map(
  (key) => wagmiChains[key as keyof typeof wagmiChains]
);

const Home: NextPage = () => {
  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);

  const [randomChainId, setRandomChainId] = useState(1);
  useEffect(() => {
    const interval = setInterval(() => {
      setRandomChainId(
        allChains[Math.floor(Math.random() * allChains.length)].id
      );
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  const chains = useChains();
  const { chain } = useAccount();

  if (!mounted) return null;

  return (
    <>
      <main>
        <div className="panel">
          <h1>Chains</h1>
          <h2>Connected to</h2>
          <ChainIcon id={chain?.id} />
          <h2>Configured/Supported Chains</h2>
          <div style={{ display: 'flex', gap: 8 }}>
            {chains.map((chain) => (
              <ChainIcon key={chain.id} id={chain.id} />
            ))}
          </div>
          <h2>{`<ChainIcon /> Component`}</h2>
          <div style={{ display: 'flex', gap: 8 }}>
            <ChainIcon id={10} size={16} />
            <ChainIcon id={10} size={16} unsupported />
            <ChainIcon id={10} radius={8} size={16} unsupported />
            <ChainIcon id={10} radius={'0'} size={16} unsupported />
          </div>
          <div style={{ display: 'flex', gap: 8 }}>
            <ChainIcon id={42161} />
            <ChainIcon id={42161} unsupported />
            <ChainIcon id={42161} radius={8} unsupported />
            <ChainIcon id={42161} radius={'0'} unsupported />
          </div>
          <div style={{ display: 'flex', gap: 8 }}>
            <ChainIcon id={137} size={'32'} />
            <ChainIcon id={137} size={32} unsupported />
            <ChainIcon id={137} radius={8} size={32} unsupported />
            <ChainIcon id={137} radius={'0'} size={32} unsupported />
          </div>
          <div style={{ display: 'flex', gap: 8 }}>
            <ChainIcon id={43113} size={64} />
            <ChainIcon id={43113} size={64} unsupported />
            <ChainIcon id={43113} radius={8} size={64} unsupported />
            <ChainIcon id={43113} radius={'0'} size={64} unsupported />
          </div>
          <div
            style={{
              aspectRatio: '1/1',
              resize: 'horizontal',
              width: 64,
              overflow: 'auto',
            }}
          >
            <ChainIcon id={randomChainId} size={'100%'} />
          </div>
        </div>
        <div className="panel">
          <h2>All Chains</h2>
          <div
            style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',
              gap: 8,
            }}
          >
            {allChains
              .sort((a, b) => a.id - b.id)
              .map((chain) => (
                <div
                  key={chain.id}
                  style={{ display: 'flex', gap: 8, alignItems: 'center' }}
                >
                  <ChainIcon id={chain.id} size={42} />
                  <span>
                    {chain.name} <code>{chain.id}</code>
                  </span>
                </div>
              ))}
          </div>
        </div>
      </main>
      <aside>
        <Link href="/">&larr; Testbench</Link>
        <ConnectKitButton />
      </aside>
    </>
  );
};

export default Home;
</file>

<file path="examples/testbench/src/pages/demo.tsx">
import type { NextPage } from 'next';

import { ConnectKitModalDemo } from 'connectkit';

const Demo: NextPage = () => {
  return <ConnectKitModalDemo open />;
};

export default Demo;
</file>

<file path="examples/testbench/src/pages/iframe.tsx">
import type { NextPage } from 'next';

const Ledger: NextPage = () => {
  return (
    <>
      <iframe src="/" style={{ width: '100%', height: '100vh' }} />
    </>
  );
};

export default Ledger;
</file>

<file path="examples/testbench/src/pages/index.tsx">
import type { NextPage } from 'next';
import Link from 'next/link';
import { useEffect, useState } from 'react';

import {
  Types,
  ConnectKitButton,
  Avatar,
  SIWEButton,
  ChainIcon,
  SIWESession,
  useChains,
  useModal,
  useSIWE,
} from 'connectkit';

import {
  useAccount,
  useBalance,
  useSendTransaction,
  useSignMessage,
  useSignTypedData,
  useConnect,
  useDisconnect,
} from 'wagmi';
import * as wagmiChains from 'wagmi/chains';

import { useTestBench } from '../TestbenchProvider';
import { Checkbox, Textbox, Select, SelectProps } from '../components/inputs';

import CustomAvatar from '../components/CustomAvatar';
import CustomSIWEButton from '../components/CustomSIWEButton';
import { Address } from 'viem';

const allChains = Object.keys(wagmiChains).map(
  (key) => wagmiChains[key as keyof typeof wagmiChains]
);

/** TODO: import this data from the connectkit module */
const themes: SelectProps[] = [
  { label: 'Auto', value: 'auto' },
  { label: 'Web95', value: 'web95' },
  { label: 'Retro', value: 'retro' },
  { label: 'Soft', value: 'soft' },
  { label: 'Minimal', value: 'minimal' },
  { label: 'Rounded', value: 'rounded' },
  { label: 'Midnight', value: 'midnight' },
  { label: 'Nouns', value: 'nouns' },
];
const modes: SelectProps[] = [
  { label: 'Auto', value: 'auto' },
  { label: 'Light', value: 'light' },
  { label: 'Dark', value: 'dark' },
];
const languages: SelectProps[] = [
  { label: 'English (US)', value: 'en-US' },
  { label: 'Arabic', value: 'ar-AE' },
  { label: 'Catalan', value: 'ca-AD' },
  { label: 'Chinese', value: 'zh-CN' },
  { label: 'Estonian', value: 'ee-EE' },
  { label: 'French', value: 'fr-FR' },
  { label: 'Japanese', value: 'ja-JP' },
  { label: 'Persian', value: 'fa-IR' },
  { label: 'Portuguese', value: 'pt-BR' },
  { label: 'Russian', value: 'ru-RU' },
  { label: 'Spanish', value: 'es-ES' },
  { label: 'Turkish', value: 'tr-TR' },
  { label: 'Vietnamese', value: 'vi-VN' },
];

const AccountInfo = () => {
  const {
    address,
    connector,
    isConnected,
    isConnecting,
    isDisconnected,
    isReconnecting,
  } = useAccount();
  const { data: balanceData } = useBalance({ address });
  const { chain } = useAccount();
  const chains = useChains();

  const { isSignedIn, signOut } = useSIWE({
    onSignIn: (data?: SIWESession) => {
      console.log('onSignIn', data);
    },
    onSignOut: () => {
      console.log('onSignOut');
    },
  });

  return (
    <div className="panel">
      <h2>Wallet Info</h2>
      {isConnecting && <p>Connecting...</p>}
      {isReconnecting && <p>Reconnecting...</p>}
      {isDisconnected && <p>Disconnected</p>}
      {isConnected && (
        <table>
          <tbody>
            <tr>
              <td>Chain ID</td>
              <td>{chain?.id}</td>
            </tr>
            <tr>
              <td>Chain Name</td>
              <td>{chain?.name}</td>
            </tr>
            <tr>
              <td>Chain Supported</td>
              <td>{chains.some((x) => x.id === chain?.id) ? 'Yes' : 'No'}</td>
            </tr>
            <tr>
              <td>Address</td>
              <td>{address}</td>
            </tr>
            <tr>
              <td>Balance</td>
              <td>{balanceData?.formatted}</td>
            </tr>
            <tr>
              <td>Connector</td>
              <td>{connector?.id}</td>
            </tr>
            <tr>
              <td>SIWE session</td>
              <td>
                {isSignedIn ? 'yes' : 'no'}{' '}
                {isSignedIn && <button onClick={signOut}>sign out</button>}
              </td>
            </tr>
          </tbody>
        </table>
      )}
    </div>
  );
};

const Actions = () => {
  const { isConnected, address } = useAccount();

  const {
    signMessage,
    isPending: signMessageIsLoading,
    isError: signMessageIsError,
  } = useSignMessage();
  const {
    signTypedData,
    isPending: signTypedDataIsLoading,
    isError: signTypedDataIsError,
  } = useSignTypedData();
  const {
    sendTransaction,
    isPending: sendTransactionIsLoading,
    isError: sendTransactionIsError,
  } = useSendTransaction();

  const testSignMessage = () => {
    signMessage({
      message: 'fam token wen',
    });
  };
  const testSignTypedData = () => {
    signTypedData({
      // All properties on a domain are optional
      domain: {
        name: 'Ether Mail',
        version: '1',
        chainId: 1,
        verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
      },
      // The named list of all type definitions
      types: {
        Person: [
          { name: 'name', type: 'string' },
          { name: 'wallet', type: 'address' },
        ],
        Mail: [
          { name: 'from', type: 'Person' },
          { name: 'to', type: 'Person' },
          { name: 'contents', type: 'string' },
        ],
      },
      primaryType: 'Mail',
      message: {
        from: {
          name: 'Cow',
          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
        },
        to: {
          name: 'Bob',
          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
        },
        contents: 'Hello, Bob!',
      },
    });
  };
  const testSendTransaction = () => {
    sendTransaction({
      to: (address as Address) ?? '',
      value: 0n,
    });
  };

  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        gap: 8,
        flexWrap: 'wrap',
      }}
    >
      <h2>Actions {!isConnected && `(connect to test)`}</h2>
      <button disabled={!isConnected} onClick={testSignMessage}>
        {signMessageIsError
          ? 'Error. Check console'
          : signMessageIsLoading
          ? 'Waiting...'
          : 'Sign message'}
      </button>
      <button disabled={!isConnected} onClick={testSignTypedData}>
        {signTypedDataIsError
          ? 'Error. Check console'
          : signTypedDataIsLoading
          ? 'Waiting...'
          : 'Sign typed data'}
      </button>
      <button disabled={!isConnected} onClick={testSendTransaction}>
        {sendTransactionIsError
          ? 'Error. Check console'
          : sendTransactionIsLoading
          ? 'Waiting...'
          : 'Send transaction'}
      </button>
    </div>
  );
};

const Home: NextPage = () => {
  const {
    theme,
    setTheme,
    customTheme,
    setCustomTheme,
    mode,
    setMode,
    options,
    setOptions,
    label,
    setLabel,
    hideAvatar,
    setHideAvatar,
    hideBalance,
    setHideBalance,
  } = useTestBench();

  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);

  const { open, setOpen, openSIWE, openAbout } = useModal({
    onConnect: () => {
      console.log('onConnect Hook');
    },
    onDisconnect: () => {
      console.log('onDisconnect Hook');
    },
  });

  const { reset } = useConnect();
  const { isConnected, isConnecting, chain } = useAccount();
  const { disconnect } = useDisconnect();
  const chains = useChains();

  const handleDisconnect = () => {
    disconnect();
    reset();
  };

  if (!mounted) return null;

  return (
    <>
      <main>
        <div className="panel">
          <h2>Connect Button</h2>
          <ConnectKitButton label={label} />
          {isConnected && (
            <button onClick={handleDisconnect}>Disconnect</button>
          )}
        </div>

        <div className="panel">
          <h2>Sign In With Ethereum</h2>
          <SIWEButton
            showSignOutButton
            onSignIn={(data?: SIWESession) => {
              console.log('onSignIn SIWEButton', data);
            }}
            onSignOut={() => {
              console.log('onSignOut SIWEButton');
            }}
          />
          <CustomSIWEButton />
          <Link href="/siwe/token-gated">Token-gated page &rarr;</Link>
        </div>

        <div className="panel">
          <h2>useModal Hook</h2>
          <p>open: {open.toString()}</p>
          <button onClick={() => setOpen(true)}>Open modal</button>
          <button onClick={() => openAbout()}>Open to About</button>
          <button onClick={() => openSIWE(true)}>Open to SIWE</button>
        </div>

        <AccountInfo />

        <div className="panel">
          <h2>Chains</h2>
          <div style={{ display: 'flex', gap: 8 }}>
            <ChainIcon id={chain?.id} />
            <ChainIcon id={1} size={64} radius={6} />
            <ChainIcon id={1337} size={32} radius={0} />
            <ChainIcon id={2} unsupported />
          </div>
          <h2>dApps configured chains</h2>
          <div style={{ display: 'flex', gap: 8 }}>
            {chains.map((chain) => (
              <ChainIcon key={chain.id} id={chain.id} />
            ))}
          </div>
          <Link href="/chains">Chains Testbench &rarr;</Link>
        </div>

        <div className="panel">
          <h2>Avatars</h2>
          <div style={{ display: 'flex', gap: 8 }}>
            <Avatar name="lochie.eth" />
            <Avatar name="pugson.eth" size={64} radius={6} />
            <Avatar name="benjitaylor.eth" size={32} radius={0} />
            <Avatar
              address="0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
              size={12}
            />
          </div>
        </div>
      </main>
      <aside>
        <ConnectKitButton.Custom>
          {({ isConnected, isConnecting, show, address, ensName, chain }) => {
            return (
              <button onClick={show}>
                {isConnected ? (
                  <div
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: 8,
                    }}
                  >
                    {chain?.name}
                    <ChainIcon id={chain?.id} />
                    <Avatar address={address} size={12} />
                    {ensName ?? address}
                  </div>
                ) : (
                  <div>
                    Custom Connect {isConnecting ? 'connecting...' : ''}
                  </div>
                )}
              </button>
            );
          }}
        </ConnectKitButton.Custom>

        <p>isConnecting: {isConnecting.toString()}</p>

        <Actions />
        <h2>ConnectKitButton props</h2>
        <Textbox
          label="ConnectKitButton Label"
          value={label}
          onChange={(e: any) => {
            setLabel(e.target.value);
          }}
        />
        <Checkbox
          label="hideAvatar"
          value="hideAvatar"
          checked={hideAvatar}
          onChange={() => setHideAvatar(!hideAvatar)}
        />
        <Checkbox
          label="hideBalance"
          value="hideBalance"
          checked={hideBalance}
          onChange={() => setHideBalance(!hideBalance)}
        />
        <h2>ConnectKitProvider props</h2>
        <Select
          label="Theme"
          value={theme ?? themes[0].value}
          options={themes}
          onChange={(e) => setTheme(e.target.value as Types.Theme)}
        />
        <Select
          label="Mode"
          value={mode ?? modes[0].value}
          options={modes}
          onChange={(e) => setMode(e.target.value as Types.Mode)}
        />
        <Select
          label="Language"
          value={options.language ?? languages[0].value}
          options={languages}
          onChange={(e) =>
            setOptions({
              ...options,
              language: e.target.value as Types.Languages,
            })
          }
        />
        <h3>options</h3>
        <Textbox
          label="disclaimer"
          value={options.disclaimer as string}
          onChange={(e: any) => {
            setOptions({ ...options, disclaimer: e.target.value });
          }}
        />
        <Textbox
          label="walletConnectName"
          value={options.walletConnectName as string}
          onChange={(e: any) => {
            setOptions({ ...options, walletConnectName: e.target.value });
          }}
        />
        <Checkbox
          label="customAvatar"
          value="customAvatar"
          checked={options.customAvatar !== undefined}
          onChange={() =>
            setOptions({
              ...options,
              customAvatar: options.customAvatar ? undefined : CustomAvatar,
            })
          }
        />
        <Checkbox
          label="Custom Font"
          value="customFont"
          checked={customTheme['--ck-font-family'] !== undefined}
          onChange={() => {
            const name = '--ck-font-family';
            if (customTheme[name] !== undefined) {
              const { [name]: _, ...rest } = customTheme;
              setCustomTheme(rest);
            } else {
              setCustomTheme({
                ...customTheme,
                [name]: 'monospace',
              });
            }
          }}
        />
        <Select
          label={'Custom Accent'}
          value={customTheme['--ck-accent-color'] ?? ''}
          onChange={(e) => {
            const name = '--ck-accent-color';
            setCustomTheme({
              ...customTheme,
              [name]: e.target.value,
            });
          }}
          options={[
            { label: 'none', value: '' },
            { label: 'red', value: 'red' },
            { label: 'blue', value: 'blue' },
            { label: 'green', value: 'green' },
            { label: 'yellow', value: 'yellow' },
            { label: 'purple', value: 'purple' },
            { label: 'orange', value: 'orange' },
          ]}
        />
        <Checkbox
          label="reduceMotion"
          value="reduceMotion"
          checked={options.reducedMotion as boolean}
          onChange={() =>
            setOptions({ ...options, reducedMotion: !options.reducedMotion })
          }
        />
        <Checkbox
          label="truncateLongENSAddress"
          value="truncateLongENSAddress"
          checked={options.truncateLongENSAddress as boolean}
          onChange={() =>
            setOptions({
              ...options,
              truncateLongENSAddress: !options.truncateLongENSAddress,
            })
          }
        />
        <Checkbox
          label="hideBalance"
          value="hideBalance"
          checked={options.hideBalance as boolean}
          onChange={() =>
            setOptions({
              ...options,
              hideBalance: !options.hideBalance,
            })
          }
        />
        <Checkbox
          label="hideTooltips"
          value="hideTooltips"
          checked={options.hideTooltips as boolean}
          onChange={() =>
            setOptions({ ...options, hideTooltips: !options.hideTooltips })
          }
        />
        <Checkbox
          label="hideQuestionMarkCTA"
          value="hideQuestionMarkCTA"
          checked={options.hideQuestionMarkCTA as boolean}
          onChange={() =>
            setOptions({
              ...options,
              hideQuestionMarkCTA: !options.hideQuestionMarkCTA,
            })
          }
        />
        <Checkbox
          label="hideNoWalletCTA"
          value="hideNoWalletCTA"
          checked={options.hideNoWalletCTA as boolean}
          onChange={() =>
            setOptions({
              ...options,
              hideNoWalletCTA: !options.hideNoWalletCTA,
            })
          }
        />
        <Checkbox
          label="avoidLayoutShift"
          value="avoidLayoutShift"
          checked={options.avoidLayoutShift as boolean}
          onChange={() =>
            setOptions({
              ...options,
              avoidLayoutShift: !options.avoidLayoutShift,
            })
          }
        />
        <Checkbox
          label="disableSiweRedirect"
          value="disableSiweRedirect"
          checked={options.disableSiweRedirect as boolean}
          onChange={() =>
            setOptions({
              ...options,
              disableSiweRedirect: !options.disableSiweRedirect,
            })
          }
        />
        <Checkbox
          disabled
          label="embedGoogleFonts"
          value="embedGoogleFonts"
          checked={options.embedGoogleFonts as boolean}
          onChange={() =>
            setOptions({
              ...options,
              embedGoogleFonts: !options.embedGoogleFonts,
            })
          }
        />
        <Checkbox
          disabled
          label="bufferPolyfill"
          value="bufferPolyfill"
          checked={options.bufferPolyfill as boolean}
          onChange={() =>
            setOptions({
              ...options,
              bufferPolyfill: !options.bufferPolyfill,
            })
          }
        />
        <Select
          label="walletConnectCTA"
          value={options.walletConnectCTA as string}
          options={[
            { label: 'modal', value: 'modal' },
            { label: 'link', value: 'link' },
            { label: 'both', value: 'both' },
          ]}
          onChange={(e) =>
            setOptions({
              ...options,
              walletConnectCTA: e.target.value as any,
            })
          }
        />
        <label htmlFor="overlayBlur">
          overlayBlur <code>{options.overlayBlur}</code>
        </label>
        <input
          id="overlayBlur"
          type="range"
          min="0"
          max="50"
          value={options.overlayBlur}
          onChange={(e) => {
            setOptions({
              ...options,
              overlayBlur: parseInt(e.target.value),
            });
          }}
        />
      </aside>
    </>
  );
};

export default Home;
</file>

<file path="examples/testbench/src/styles/globals.css">
* {
  outline: 0;
  padding: 0;
  margin: 0;
  border: 0;
  box-sizing: border-box;
}
body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 12px;
}
aside label {
  display: flex;
  width: auto;
  padding: 0 0 8px;
}
aside label.checkbox {
  align-items: center;
  gap: 4px;
}

aside label.textbox,
aside label.select {
  flex-direction: column;
  gap: 2px;
}

main button {
  display: inline-block;
  width: fit-content;
  padding: 8px 16px;
  border-radius: 4px;
  border: 1px solid rgba(0, 0, 0, 0.08);
  background: #fff;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
}

main .panel {
  display: flex;
  flex-direction: column;
  gap: 16px;
  padding: 24px;
  background: #fff;
  box-shadow: 0 2px 4px rgb(0 0 0 / 4%);
  border: 1px solid rgba(0, 0, 0, 0.08);
  border-radius: 24px;
}
main table tr:nth-child(odd) {
  background: rgba(0, 0, 0, 0.05);
}
main table td {
  padding: 4px 8px;
}
main table td:first-child {
  font-weight: bold;
}

main {
  padding: 32px;
  padding-left: 352px;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(512px, 1fr));
  grid-gap: 32px;
}
@media screen and (max-width: 768px) {
  main {
    display: flex;
    flex-direction: column;
  }
}
aside {
  z-index: 2147483647;
  position: fixed;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 8px;
  overflow-x: hidden;
  overflow-y: scroll;
  top: 0;
  left: 0;
  bottom: 0;
  width: 256px;
  padding: 32px;
  background: #fff;
}

code {
  padding: 2px 4px;
  border-radius: 4px;
  color: gray;
  background: #f5f5f5;
  font-size: 12px;
  font-weight: bold;
  font-family: 'Courier New', Courier, monospace;
}

@media screen and (max-width: 768px) {
  main {
    padding: 32px;
  }
  aside {
    z-index: 1;
    position: relative;
    width: auto;
  }
}
</file>

<file path="examples/testbench/src/utils/siweClient.ts">
import { configureClientSIWE } from 'connectkit-next-siwe';

export const siweClient = configureClientSIWE({
  apiRoutePrefix: '/api/siwe',
  statement: 'fam token wen',
});
</file>

<file path="examples/testbench/src/utils/siweServer.ts">
import { configureServerSideSIWE } from 'connectkit-next-siwe';
import { ckConfig } from '../components/Web3Provider';

export const siweServer = configureServerSideSIWE({
  config: {
    chains: ckConfig.chains,
    transports: ckConfig.transports,
  },
  options: {
    afterLogout: async () => console.log('afterLogout'),
    afterNonce: async () => console.log('afterNonce'),
    afterSession: async () => console.log('afterSession'),
    afterVerify: async () => console.log('afterVerify'),
  },
});
</file>

<file path="examples/testbench/src/TestbenchProvider.tsx">
import React, {
  createContext,
  createElement,
  useEffect,
  useState,
} from 'react';
import { Types } from 'connectkit';

type ContextValue = {
  theme: Types.Theme;
  setTheme: React.Dispatch<React.SetStateAction<Types.Theme>>;
  customTheme: Types.CustomTheme;
  setCustomTheme: React.Dispatch<React.SetStateAction<Types.CustomTheme>>;
  mode: Types.Mode;
  setMode: React.Dispatch<React.SetStateAction<Types.Mode>>;
  options: Types.ConnectKitOptions;
  setOptions: React.Dispatch<React.SetStateAction<Types.ConnectKitOptions>>;
  hideBalance: boolean;
  setHideBalance: React.Dispatch<React.SetStateAction<boolean>>;
  hideAvatar: boolean;
  setHideAvatar: React.Dispatch<React.SetStateAction<boolean>>;
  label: string;
  setLabel: React.Dispatch<React.SetStateAction<string>>;
};

const Context = createContext<ContextValue | null>(null);

type TestBenchProviderProps = {
  children?: React.ReactNode;
  theme?: Types.Theme;
  customTheme?: Types.CustomTheme;
  mode?: Types.Mode;
  options?: Types.ConnectKitOptions;
};

export const TestBenchProvider: React.FC<TestBenchProviderProps> = ({
  children,
  theme = 'auto',
  customTheme = {},
  mode = 'light',
  options = {
    overlayBlur: 0,
    language: 'en-US',
    hideTooltips: false,
    hideQuestionMarkCTA: false,
    hideNoWalletCTA: false,
    avoidLayoutShift: true,
    embedGoogleFonts: true,
    truncateLongENSAddress: true,
    reducedMotion: false,
    disclaimer: null,
    bufferPolyfill: true,
    walletConnectCTA: 'link',
    //enforceSupportedChains: false,
    //initialChainId: 0,
  },
}) => {
  const [ckCustomTheme, setCustomTheme] = useState<Types.Theme>(customTheme);
  const [ckTheme, setTheme] = useState<Types.CustomTheme>(theme);
  const [ckMode, setMode] = useState<Types.Mode>(mode);
  const [ckOptions, setOptions] = useState<Types.ConnectKitOptions>(options);
  const [hideBalance, setHideBalance] = useState<boolean>(false);
  const [hideAvatar, setHideAvatar] = useState<boolean>(false);
  const [label, setLabel] = useState<string | undefined>();

  useEffect(() => setTheme(theme), [theme]);

  const value: any = {
    theme: ckTheme,
    setTheme,
    customTheme: ckCustomTheme,
    setCustomTheme,
    mode: ckMode,
    setMode,
    options: ckOptions,
    setOptions,
    hideBalance,
    setHideBalance,
    hideAvatar,
    setHideAvatar,
    label,
    setLabel,
  };

  return createElement(Context.Provider, { value }, <>{children}</>);
};

export const useTestBench = () => {
  const context = React.useContext(Context);
  if (!context) throw Error('TestBenchProvider must be inside a Provider.');
  return context;
};
</file>

<file path="examples/testbench/.env.example">
NEXT_PUBLIC_ALCHEMY_ID=
NEXT_PUBLIC_INFURA_ID=
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=
SESSION_SECRET=
</file>

<file path="examples/testbench/.eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path="examples/testbench/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="examples/testbench/next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig
</file>

<file path="examples/testbench/package.json">
{
  "name": "testbench",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev & local-ssl-proxy --source 3001 --target 3000",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.17.10",
    "connectkit": "workspace:packages/connectkit",
    "connectkit-next-siwe": "workspace:packages/connectkit-next-siwe",
    "local-ssl-proxy": "^1.3.0",
    "next": "14.1.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "viem": "^2.23.2",
    "wagmi": "^2.14.11"
  },
  "devDependencies": {
    "@types/node": "18.7.18",
    "@types/react": "^18.0.6",
    "@types/react-dom": "^18.0.2",
    "eslint": "8.23.1",
    "eslint-config-next": "14.1.0",
    "typescript": "^5.0.4"
  }
}
</file>

<file path="examples/testbench/README.md">
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
</file>

<file path="examples/testbench/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
</file>

<file path="examples/vite/src/components/Web3Provider.tsx">
import React from 'react';

import { WagmiProvider, createConfig } from 'wagmi';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ConnectKitProvider, getDefaultConfig } from 'connectkit';

const config = createConfig(
  getDefaultConfig({
    appName: 'ConnectKit Vite demo',
    walletConnectProjectId: import.meta.env.VITE_WALLETCONNECT_PROJECT_ID!,
  })
);

const queryClient = new QueryClient();

export const Web3Provider = ({ children }: { children: React.ReactNode }) => {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <ConnectKitProvider debugMode>{children}</ConnectKitProvider>
      </QueryClientProvider>
    </WagmiProvider>
  );
};
</file>

<file path="examples/vite/src/App.tsx">
import { ConnectKitButton } from 'connectkit';

function App() {
  return (
    <div
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
      }}
    >
      <ConnectKitButton />
    </div>
  );
}

export default App;
</file>

<file path="examples/vite/src/index.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
</file>

<file path="examples/vite/src/main.tsx">
import './polyfills';

import React from 'react';
import ReactDOM from 'react-dom/client';

import './index.css';
import App from './App';

import { Web3Provider } from './components/Web3Provider';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <Web3Provider>
      <App />
    </Web3Provider>
  </React.StrictMode>
);
</file>

<file path="examples/vite/src/polyfills.ts">
// Vite bundler needs Node polyfills

window.global = window.global ?? window;
window.process = window.process ?? { env: {} };

export {};
</file>

<file path="examples/vite/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="examples/vite/.env.example">
VITE_ALCHEMY_ID=
VITE_INFURA_ID=
VITE_WALLETCONNECT_PROJECT_ID=
SESSION_SECRET=
</file>

<file path="examples/vite/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="examples/vite/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1"
    />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="ConnectKit Vite Example" />
    <title>ConnectKit Vite Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="examples/vite/package.json">
{
  "name": "vite",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.17.10",
    "connectkit": "workspace:packages/connectkit",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "viem": "^2.23.2",
    "wagmi": "^2.14.11"
  },
  "devDependencies": {
    "@types/react": "^18.0.17",
    "@types/react-dom": "^18.0.6",
    "@vitejs/plugin-react": "^2.1.0",
    "typescript": "^5.0.4",
    "vite": "^3.1.0"
  }
}
</file>

<file path="examples/vite/README.md">
# [Vite](https://vitejs.dev/) + [TypeScript](https://www.typescriptlang.org/) + ConnectKit Example

This is a simple example of how to implement ConnectKit with [Vite](https://vitejs.dev/) in TypeScript.

- If you'd like to look at an example online, try this [CodeSandbox](https://codesandbox.io/s/4jtssh?file=/README.md)
- Or you want to run the example locally have a look at the [instructions in the main README](https://github.com/family/connectkit/blob/main/README.md#running-examples-locally)
</file>

<file path="examples/vite/tsconfig.json">
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
</file>

<file path="examples/vite/tsconfig.node.json">
{
  "compilerOptions": {
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="examples/vite/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  build: {
    target: 'es2020'
  },
  plugins: [react()]
})
</file>

<file path="packages/connectkit/src/components/BalanceButton/index.tsx">
import React, { useEffect, useState } from 'react';
import { All } from './../../types';
import { useQueryClient } from '@tanstack/react-query';

import styled from './../../styles/styled';
import { keyframes } from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';

import { useAccount, useBalance, useBlockNumber } from 'wagmi';
import useIsMounted from '../../hooks/useIsMounted';

import Chain from '../Common/Chain';
import { chainConfigs } from '../../constants/chainConfigs';
import ThemedButton from '../Common/ThemedButton';
import { nFormatter } from '../../utils';
import { useChains } from '../../hooks/useChains';
import { useChainIsSupported } from '../../hooks/useChainIsSupported';

const Container = styled(motion.div)`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
`;
const PlaceholderKeyframes = keyframes`
  0%,100%{ opacity: 0.1; transform: scale(0.75); }
  50%{ opacity: 0.75; transform: scale(1.2) }
`;
const PulseContainer = styled.div`
  pointer-events: none;
  user-select: none;
  padding: 0 5px;
  span {
    display: inline-block;
    vertical-align: middle;
    margin: 0 2px;
    width: 3px;
    height: 3px;
    border-radius: 4px;
    background: currentColor;
    animation: ${PlaceholderKeyframes} 1000ms ease infinite both;
  }
`;

type BalanceProps = {
  hideIcon?: boolean;
  hideSymbol?: boolean;
};

export const Balance: React.FC<BalanceProps> = ({ hideIcon, hideSymbol }) => {
  const isMounted = useIsMounted();
  const [isInitial, setIsInitial] = useState(true);

  const { address, chain } = useAccount();
  const chains = useChains();
  const isChainSupported = useChainIsSupported(chain?.id);

  const queryClient = useQueryClient();
  const { data: blockNumber } = useBlockNumber({ watch: true });
  const { data: balance, queryKey } = useBalance({
    address,
    chainId: chain?.id,
  });

  useEffect(() => {
    if (blockNumber ?? 0 % 5 === 0) queryClient.invalidateQueries({ queryKey });
  }, [blockNumber, queryKey]);

  const currentChain = chainConfigs.find((c) => c.id === chain?.id);
  const state = `${
    !isMounted || balance?.formatted === undefined
      ? `balance-loading`
      : `balance-${currentChain?.id}-${balance?.formatted}`
  }`;

  useEffect(() => {
    setIsInitial(false);
  }, []);

  return (
    <div style={{ position: 'relative' }}>
      <AnimatePresence initial={false}>
        <motion.div
          key={state}
          initial={
            balance?.formatted !== undefined && isInitial
              ? {
                  opacity: 1,
                }
              : { opacity: 0, position: 'absolute', top: 0, left: 0, bottom: 0 }
          }
          animate={{ opacity: 1, position: 'relative' }}
          exit={{
            opacity: 0,
            position: 'absolute',
            top: 0,
            left: 0,
            bottom: 0,
          }}
          transition={{
            duration: 0.4,
            ease: [0.25, 1, 0.5, 1],
            delay: 0.4,
          }}
        >
          {!address || !isMounted || balance?.formatted === undefined ? (
            <Container>
              {!hideIcon && <Chain id={chain?.id} />}
              <span style={{ minWidth: 32 }}>
                <PulseContainer>
                  <span style={{ animationDelay: '0ms' }} />
                  <span style={{ animationDelay: '50ms' }} />
                  <span style={{ animationDelay: '100ms' }} />
                </PulseContainer>
              </span>
            </Container>
          ) : !isChainSupported ? (
            <Container>
              {!hideIcon && <Chain id={chain?.id} />}
              <span style={{ minWidth: 32 }}>???</span>
            </Container>
          ) : (
            <Container>
              {!hideIcon && <Chain id={chain?.id} />}
              <span style={{ minWidth: 32 }}>
                {nFormatter(Number(balance?.formatted))}
              </span>
              {!hideSymbol && ` ${balance?.symbol}`}
            </Container>
          )}
        </motion.div>
      </AnimatePresence>
      {/* <Container
        style={{
          position: 'absolute',
          x: 'calc(-50% - 12px)',
          y: '-50%',
          left: '50%',
          top: '50%',
        }}
        initial={{
          opacity: 0,
        }}
        animate={{
          opacity: balance?.formatted !== undefined ? 1 : 0,
        }}
        transition={{
          duration: balance && isInitial ? 0 : 0.4,
          ease: [0.25, 1, 0.5, 1],
        }}
      >
        {!hideIcon && <Chain id={chain?.id} />}
        {nFormatter(Number(balance?.formatted))}
        {!hideSymbol && ` ${balance?.symbol}`}
      </Container> */}
    </div>
  );
};

const BalanceButton: React.FC<All & BalanceProps> = ({
  theme,
  mode,
  customTheme,
  hideIcon,
  hideSymbol,
}) => {
  return (
    <ThemedButton
      duration={0.4}
      variant={'secondary'}
      theme={theme}
      mode={mode}
      customTheme={customTheme}
    >
      <Balance hideIcon={hideIcon} hideSymbol={hideSymbol} />
    </ThemedButton>
  );
};
export default BalanceButton;
</file>

<file path="packages/connectkit/src/components/Common/Alert/index.tsx">
import { AlertProps } from './types';
import { AlertContainer, IconContainer } from './styles';

const Alert = ({ children, error, icon }: AlertProps) => {
  return (
    <AlertContainer $error={error}>
      {icon && <IconContainer>{icon}</IconContainer>}
      <div>{children}</div>
    </AlertContainer>
  );
};
Alert.displayName = 'Alert';

export default Alert;
</file>

<file path="packages/connectkit/src/components/Common/Alert/styles.ts">
import styled from './../../../styles/styled';
import { motion } from 'framer-motion';
import defaultTheme from '../../../constants/defaultTheme';
import { css } from 'styled-components';

export const AlertContainer = styled(motion.div)<{ $error?: boolean }>`
  display: flex;
  gap: 8px;
  position: relative;
  border-radius: 9px;
  margin: 0 auto;
  padding: 10px;
  text-align: left;
  font-size: 14px;
  line-height: 17px;
  font-weight: 400;
  max-width: 260px;
  min-width: 100%;

  border-radius: var(--ck-alert-border-radius, 12px);
  color: var(--ck-alert-color, var(--ck-body-color-muted));
  background: var(--ck-alert-background, var(--ck-body-background-secondary));
  box-shadow: var(--ck-alert-box-shadow, var(--ck-body-box-shadow));

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    padding: 16px;
    font-size: 16px;
    line-height: 21px;
    border-radius: 24px;
    text-align: center;
  }

  ${($error) => {
    if ($error)
      return css`
        color: #fff;
        background: var(--ck-body-color-danger, red);
      `;
  }}
`;

export const IconContainer = styled(motion.div)`
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  svg {
    display: block;
    width: 100%;
    height: auto;
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/Alert/types.ts">
export type AlertProps = {
  children?: React.ReactNode;
  icon?: React.ReactNode;
  error?: boolean;
};
</file>

<file path="packages/connectkit/src/components/Common/Avatar/index.tsx">
import React, { useState, useEffect, useRef } from 'react';

import { EnsAvatar, ImageContainer } from './styles';

import { useEnsName, useEnsAvatar, useEnsAddress } from 'wagmi';
import { normalize } from 'viem/ens';
import { ResetContainer } from '../../../styles';
import { useContext } from '../../ConnectKit';
import useIsMounted from '../../../hooks/useIsMounted';
import { useEnsFallbackConfig } from '../../../hooks/useEnsFallbackConfig';

type Hash = `0x${string}`;

export type CustomAvatarProps = {
  address?: Hash | undefined;
  ensName?: string | undefined;
  ensImage?: string;
  size: number;
  radius: number;
};

const Avatar: React.FC<{
  address?: Hash | undefined;
  name?: string | undefined;
  size?: number;
  radius?: number;
}> = ({ address, name, size = 96, radius = 96 }) => {
  const isMounted = useIsMounted();
  const context = useContext();

  const imageRef = useRef<any>(null);
  const [loaded, setLoaded] = useState(true);

  const ensFallbackConfig = useEnsFallbackConfig();
  const { data: ensAddress } = useEnsAddress({
    chainId: 1,
    name: name,
    config: ensFallbackConfig,
  });
  const { data: ensName } = useEnsName({
    chainId: 1,
    address: address ?? ensAddress ?? undefined,
    config: ensFallbackConfig,
  });
  const { data: ensAvatar } = useEnsAvatar({
    chainId: 1,
    name: normalize(ensName ?? ''),
    config: ensFallbackConfig,
  });

  const ens = {
    address: ensAddress ?? address,
    name: ensName ?? name,
    avatar: ensAvatar ?? undefined,
  };

  useEffect(() => {
    if (
      !(
        imageRef.current &&
        imageRef.current.complete &&
        imageRef.current.naturalHeight !== 0
      )
    ) {
      setLoaded(false);
    }
  }, [ensAvatar]);

  if (!isMounted)
    return <div style={{ width: size, height: size, borderRadius: radius }} />;

  if (context.options?.customAvatar)
    return (
      <div
        style={{
          width: size,
          height: size,
          borderRadius: radius,
          overflow: 'hidden',
        }}
      >
        {context.options?.customAvatar({
          address: address ?? ens?.address,
          ensName: name ?? ens?.name,
          ensImage: ens?.avatar,
          size,
          radius,
        })}
      </div>
    );

  if (!ens.name || !ens.avatar)
    return (
      <ResetContainer style={{ pointerEvents: 'none' }}>
        <EnsAvatar $size={size} $seed={ens.address} $radius={radius} />
      </ResetContainer>
    );
  return (
    <ResetContainer style={{ pointerEvents: 'none' }}>
      <EnsAvatar $size={size} $seed={ens.address} $radius={radius}>
        <ImageContainer
          ref={imageRef}
          src={ens.avatar}
          alt={ens.name}
          onLoad={() => setLoaded(true)}
          $loaded={loaded}
        />
      </EnsAvatar>
    </ResetContainer>
  );
};

export default Avatar;
</file>

<file path="packages/connectkit/src/components/Common/Avatar/styles.ts">
import styled from './../../../styles/styled';
import { css } from 'styled-components';
import { motion } from 'framer-motion';

function addressToNumber(address: string) {
  return (
    (address
      .split('')
      .map((l) => l.charCodeAt(0))
      .reduce((a, b) => a + b) %
      100) /
    100
  );
}

export const EnsAvatar = styled(motion.div)<{
  $seed?: string;
  $size?: number;
  $radius?: number;
}>`
  will-change: transform; // Needed for Safari
  pointer-events: none;
  user-select: none;
  position: relative;
  overflow: hidden;
  margin: 0;
  border-radius: ${(props) => `${props.$radius}px`};
  width: ${(props) => `${props.$size}px`};
  height: ${(props) => `${props.$size}px`};
  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.08);
  &:before {
    content: '';
    z-index: 1;
    position: absolute;
    inset: 0;
    border-radius: inherit;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.02);
  }
  ${(props) => {
    if (props.$seed) {
      const id = Math.ceil(addressToNumber(props.$seed) * 8);
      const ensColor = `0${id === 0 ? 1 : id}`; // No zero ID in ENS color list.. 🤷‍♀️
      return css`
        background: var(--ck-ens-${ensColor}-start);
        background: linear-gradient(
          180deg,
          var(--ck-ens-${ensColor}-start) 0%,
          var(--ck-ens-${ensColor}-stop) 100%
        );
      `;
    }
  }}
`;

export const ImageContainer = styled(motion.img)<{ $loaded: boolean }>`
  display: block;
  position: relative;
  width: 100%;
  height: 100%;
  opacity: ${(props) => (props.$loaded ? 1 : 0)};
  will-change: opacity; // Needed for Safari
  transition: opacity 500ms ease;
  transform: scale(1.01); // fixes background color bleeding
`;
</file>

<file path="packages/connectkit/src/components/Common/BrowserIcon/index.tsx">
import React from 'react';

import { BrowserIconProps } from './types';
import { BrowserIconContainer } from './styles';

import { detectBrowser } from '../../../utils';
import browsers from '../../../assets/browsers';

const BrowserIcon = React.forwardRef(
  ({ browser }: BrowserIconProps, ref: React.Ref<HTMLElement>) => {
    const currentBrowser = browser ?? detectBrowser();

    let icon;
    switch (currentBrowser) {
      case 'chrome':
        icon = browsers.Chrome;
        break;
      case 'firefox':
        icon = browsers.FireFox;
        break;
      case 'edge':
        icon = browsers.Edge;
        break;
      case 'brave':
        //   icon = browsers.Brave;
        break;
    }
    if (!icon) return <></>;
    return <BrowserIconContainer>{icon}</BrowserIconContainer>;
  }
);
BrowserIcon.displayName = 'BrowserIcon';

export default BrowserIcon;
</file>

<file path="packages/connectkit/src/components/Common/BrowserIcon/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';

export const BrowserIconContainer = styled(motion.div)`
  display: flex;
  align-items: center;
  justify-content: center;
  max-width: 32px;
  max-height: 32px;
  width: 100%;
  height: 100%;
  svg {
    display: block;
    width: 100%;
    height: 100%;
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/BrowserIcon/types.ts">
export type BrowserIconProps = {
  browser?: string; // empty string will display current browser
};
</file>

<file path="packages/connectkit/src/components/Common/Button/index.tsx">
import React from 'react';
import { ButtonProps } from './types';
import {
  ButtonContainer,
  InnerContainer,
  IconContainer,
  Arrow,
  ArrowLine,
  ArrowChevron,
  DownloadArrow,
  DownloadArrowInner,
  ButtonContainerInner,
  SpinnerContainer,
} from './styles';
import { AnimatePresence } from 'framer-motion';
import { flattenChildren } from '../../../utils';
import FitText from '../FitText';
import { Spinner } from '../Spinner';

const transition = {
  duration: 0.4,
  ease: [0.175, 0.885, 0.32, 0.98],
};

const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'secondary', // unique aspect to how we're handling buttons
  disabled,
  icon,
  iconPosition = 'left',
  roundedIcon,
  waiting,
  arrow,
  download,
  href,
  style,
  onClick,
}) => {
  const key =
    typeof children === 'string'
      ? children
      : flattenChildren(children).join(''); // Need to generate a string for the key so we can automatically animate between content

  const hrefUrl =
    href && (typeof href === 'string' ? href : flattenChildren(href).join('')); // Need to have a flat string for the href

  return (
    <ButtonContainer
      as={href ? 'a' : undefined}
      onClick={(event: any) => {
        if (!disabled && onClick) onClick(event);
      }}
      href={hrefUrl}
      target={href && '_blank'}
      rel={href && 'noopener noreferrer'}
      disabled={disabled}
      $variant={variant}
      style={style}
    >
      <AnimatePresence initial={false}>
        <ButtonContainerInner
          key={key}
          initial={{ opacity: 0, y: -10 }}
          animate={{
            opacity: 1,
            y: -1,
          }}
          exit={{
            position: 'absolute',
            opacity: 0,
            y: 10,
            transition: {
              ...transition,
            },
          }}
          transition={{
            ...transition,
            delay: 0.2,
          }}
        >
          {icon && iconPosition === 'left' && (
            <IconContainer $rounded={roundedIcon}>{icon}</IconContainer>
          )}
          {download && (
            <DownloadArrow>
              <DownloadArrowInner>
                <Arrow
                  width="13"
                  height="12"
                  viewBox="0 0 13 12"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <ArrowLine
                    stroke="currentColor"
                    x1="1"
                    y1="6"
                    x2="12"
                    y2="6"
                    strokeWidth="var(--stroke-width)"
                    strokeLinecap="round"
                  />
                  <ArrowChevron
                    stroke="currentColor"
                    d="M7.51431 1.5L11.757 5.74264M7.5 10.4858L11.7426 6.24314"
                    strokeWidth="var(--stroke-width)"
                    strokeLinecap="round"
                  />
                </Arrow>
              </DownloadArrowInner>
            </DownloadArrow>
          )}
          <InnerContainer style={{ paddingLeft: arrow ? 6 : 0 }}>
            <FitText>{children}</FitText>
          </InnerContainer>
          {icon && iconPosition === 'right' && (
            <IconContainer $rounded={roundedIcon}>{icon}</IconContainer>
          )}
          {arrow && (
            <Arrow
              width="13"
              height="12"
              viewBox="0 0 13 12"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <ArrowLine
                stroke="currentColor"
                x1="1"
                y1="6"
                x2="12"
                y2="6"
                strokeWidth="2"
                strokeLinecap="round"
              />
              <ArrowChevron
                stroke="currentColor"
                d="M7.51431 1.5L11.757 5.74264M7.5 10.4858L11.7426 6.24314"
                strokeWidth="2"
                strokeLinecap="round"
              />
            </Arrow>
          )}
        </ButtonContainerInner>
        {waiting && (
          <SpinnerContainer>
            <Spinner />
          </SpinnerContainer>
        )}
      </AnimatePresence>
    </ButtonContainer>
  );
};
export default Button;
</file>

<file path="packages/connectkit/src/components/Common/Button/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';
import { css } from 'styled-components';
import defaultTheme from '../../../constants/defaultTheme';

export const SpinnerContainer = styled(motion.div)`
  position: absolute;
  right: 16px;
  top: 0;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: center;
`;

export const Arrow = styled.svg`
  --x: -3px;
  --stroke-width: 2;
  position: relative;
  top: 1px;
  left: -0.5px;
  display: inline-block;
  vertical-align: middle;
  margin-left: 9px;
  margin-right: 1px;
  transition: all 100ms ease;
  transform: translateX(var(--x, -3px));
  color: currentColor;
  opacity: 0.4;
`;
export const ArrowChevron = styled.path``;
export const ArrowLine = styled.line`
  transition: inherit;
  transition-property: transform;
  transform-origin: 90% 50%;
  transform: scaleX(0.1);
`;
export const DownloadArrow = styled.div`
  display: inline-block;
  vertical-align: middle;
  position: relative;
  margin-right: 6px;
  color: currentColor;
`;
export const DownloadArrowInner = styled.div`
  transform: rotate(90deg);
  ${Arrow} {
    margin: 0 auto;
  }
`;

export const ButtonContainerInner = styled(motion.div)`
  display: flex;
  align-items: center;
  justify-content: center;
  inset: 0;
  height: 100%;
`;
export const ButtonContainer = styled.button<{
  disabled?: boolean;
  $variant?: 'primary' | 'secondary' | 'tertiary';
}>`

  ${({ disabled }) =>
    disabled &&
    css`
      cursor: not-allowed;
      pointer-events: none;
      ${InnerContainer} {
        opacity: 0.4;
      }
    `}

  ${({ $variant }) => {
    if ($variant === 'primary') {
      return css`
        --color: var(--ck-primary-button-color, var(--ck-body-color));
        --background: var(
          --ck-primary-button-background,
          var(--ck-body-background-primary)
        );
        --box-shadow: var(--ck-primary-button-box-shadow);
        --border-radius: var(--ck-primary-button-border-radius);
        --font-weight: var(--ck-primary-button-font-weight, 500);

        --hover-color: var(--ck-button-primary-hover-color, var(--color));
        --hover-background: var(
          --ck-primary-button-hover-background,
          var(--background)
        );
        --hover-box-shadow: var(
          --ck-primary-button-hover-box-shadow,
          var(--box-shadow)
        );
        --hover-border-radius: var(
          --ck-primary-button-hover-border-radius,
          var(--border-radius)
        );
        --hover-font-weight: var(
          --ck-primary-button-font-weight,
          var(--font-weight)
        );
      `;
    } else if ($variant === 'secondary') {
      return css`
        --color: var(--ck-secondary-button-color, var(--ck-body-color));
        --background: var(
          --ck-secondary-button-background,
          var(--ck-body-background-secondary)
        );
        --box-shadow: var(--ck-secondary-button-box-shadow);
        --border-radius: var(--ck-secondary-button-border-radius);
        --font-weight: var(--ck-secondary-button-font-weight, 500);

        --hover-color: var(--ck-secondary-button-hover-color, var(--color));
        --hover-background: var(
          --ck-secondary-button-hover-background,
          var(--background)
        );
        --hover-box-shadow: var(
          --ck-secondary-button-hover-box-shadow,
          var(--box-shadow)
        );
        --hover-border-radius: var(
          --ck-secondary-button-hover-border-radius,
          var(--border-radius)
        );
        --hover-font-weight: var(
          --ck-secondary-button-font-weight,
          var(--font-weight)
        );
      `;
    } else if ($variant === 'tertiary') {
      return css`
        --color: var(
          --ck-tertiary-button-color,
          var(--ck-secondary-button-color)
        );
        --background: var(
          --ck-tertiary-button-background,
          var(--ck-secondary-button-background)
        );
        --box-shadow: var(
          --ck-tertiary-button-box-shadow,
          var(--ck-secondary-button-box-shadow)
        );
        --border-radius: var(
          --ck-tertiary-button-border-radius,
          var(--ck-secondary-button-border-radius)
        );
        --font-weight: var(
          --ck-tertiary-button-font-weight,
          var(--ck-secondary-button-font-weight)
        );

        --hover-color: var(
          --button-tertiary-hover-color,
          var(--ck-tertiary-button-color)
        );
        --hover-background: var(
          --ck-tertiary-button-hover-background,
          var(--ck-tertiary-button-background)
        );
        --hover-box-shadow: var(
          --ck-tertiary-button-hover-box-shadow,
          var(--ck-tertiary-button-box-shadow)
        );
        --hover-border-radius: var(
          --ck-tertiary-button-hover-border-radius,
          var(--ck-tertiary-button-border-radius, var(--border-radius))
        );
        --hover-font-weight: var(
          --ck-tertiary-button-font-weight,
          var(--ck-secondary-button-font-weight)
        );
      `;
    }
  }}

  appearance: none;
  cursor: pointer;
  user-select: none;
  min-width: fit-content;
  width: 100%;
  display:block;
  text-align: center;
  height: 48px;
  margin: 12px 0 0;
  line-height: 48px;
  padding: 0 4px;
  font-size: 16px;
  font-weight: var(--font-weight,500);
  text-decoration: none;
  white-space: nowrap;
  transition: 100ms ease;
  transition-property: box-shadow, background-color;
  color: var(--color);
  background: var(--background);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  will-change: transform, box-shadow, background-color, color;

  ${DownloadArrow} {
    ${Arrow} {
      transform: translateX(0);
      ${ArrowLine} {
        transform: none;
      }
      ${ArrowChevron} {
      }
    }
  }
}

  @media only screen and (min-width: ${defaultTheme.mobileWidth + 1}px) {
    &:hover,
    &:focus-visible {
      color: var(--ck-accent-text-color, var(--hover-color));
      background: var(--ck-accent-color, var(--hover-background));
      border-radius: var(--hover-border-radius);
      box-shadow: var(--hover-box-shadow);

      ${Arrow} {
        transform: translateX(0);
        ${ArrowLine} {
          transform: none;
        }
        ${ArrowChevron} {
        }
      }
      ${DownloadArrow} {
        ${Arrow} {
          transform: translateX(var(--x));
          ${ArrowLine} {
            transform: scaleX(0.1);
          }
          ${ArrowChevron} {
          }
        }
      }
    }
    &:active {
      box-shadow: var(--ck-secondary-button-active-box-shadow, var(--hover-box-shadow));
    }
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    transition: transform 100ms ease;
    transform: scale(1);
    font-size: 17px;
    &:active {
    }
  }
`;

export const InnerContainer = styled.div`
  transform: translateZ(0); // Shifting fix
  position: relative;
  display: inline-block;
  vertical-align: middle;
  max-width: calc(100% - 42px);
  transition: opacity 300ms ease;
  /*
  overflow: hidden;
  text-overflow: ellipsis;
  */
`;

export const IconContainer = styled(motion.div)<{ $rounded?: boolean }>`
  position: relative;
  display: inline-block;
  vertical-align: middle;
  max-width: 20px;
  max-height: 20px;
  margin: 0 10px;
  &:first-child {
    margin-left: 0;
  }
  &:last-child {
    margin-right: 0;
  }
  ${(props) => {
    return (
      props.$rounded &&
      css`
        overflow: hidden;
        border-radius: 5px;
      `
    );
  }}
  svg {
    display: block;
    position: relative;
    max-width: 100%;
    height: auto;
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/Button/types.ts">
import React from 'react';

export type ButtonProps = {
  children?: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'tertiary';
  disabled?: boolean;
  icon?: React.ReactNode;
  iconPosition?: 'left' | 'right';
  roundedIcon?: boolean;
  waiting?: boolean;
  arrow?: boolean;
  download?: boolean;
  href?: string;
  style?: React.CSSProperties;
  onClick?: (e: any) => void;
};
</file>

<file path="packages/connectkit/src/components/Common/Chain/index.tsx">
import React from 'react';

import {
  ChainContainer,
  LoadingContainer,
  LogoContainer,
  Unsupported,
} from './styles';
import { AnimatePresence } from 'framer-motion';
import { chainConfigs } from '../../../constants/chainConfigs';
import Chains from '../../../assets/chains';
import useIsMounted from '../../../hooks/useIsMounted';
import { useChainIsSupported } from '../../../hooks/useChainIsSupported';

const Spinner = (
  <svg
    aria-hidden="true"
    width="36"
    height="36"
    viewBox="0 0 36 36"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M11.3592 30.1654C10.0472 29.4491 8.85718 28.524 7.83713 27.424C6.81708 26.324 5.98425 25.0677 5.36889 23.7054C5.20157 23.335 5.05033 22.9567 4.91578 22.5717C4.51465 21.4237 4.26735 20.2308 4.17794 19.0239C4.16599 18.8626 4.13894 18.7041 4.09809 18.5507C3.85023 17.6197 3.09399 16.8738 2.11531 16.7999C0.975331 16.7138 -0.0310983 17.5702 0.0141657 18.7125C0.0223289 18.9185 0.0340286 19.1243 0.049253 19.3298C0.165374 20.8971 0.486545 22.4464 1.00749 23.9373C1.10424 24.2142 1.20764 24.4884 1.31755 24.7596C2.13617 26.7799 3.31595 28.6371 4.80146 30.239C6.28696 31.841 8.04998 33.1573 10.0029 34.1258C10.2651 34.2558 10.5307 34.3796 10.7995 34.4969C12.247 35.1287 13.7676 35.5656 15.3217 35.7995C15.5255 35.8301 15.7298 35.8573 15.9346 35.881C17.0703 36.0122 18.0001 35.0731 18.0001 33.9299C18.0001 32.9484 17.3133 32.1381 16.4036 31.8208C16.2537 31.7685 16.0977 31.7296 15.9377 31.7056C14.7411 31.5255 13.5702 31.1891 12.4556 30.7026C12.0818 30.5394 11.716 30.3601 11.3592 30.1654Z"
      fill="url(#paint0_linear_1288_1870)"
    />

    <defs>
      <linearGradient
        id="paint0_linear_1288_1870"
        x1="2"
        y1="19.4884"
        x2="16.8752"
        y2="33.7485"
        gradientUnits="userSpaceOnUse"
      >
        <stop
          stopColor="var(--ck-connectbutton-balance-color,currentColor)"
          stopOpacity="0.7"
        />
        <stop
          offset="1"
          stopColor="var(--ck-connectbutton-balance-color,currentColor)"
          stopOpacity="0"
        />
      </linearGradient>
    </defs>
  </svg>
);

const Chain: React.FC<{
  id?: number;
  unsupported?: boolean;
  radius?: number | string;
  size?: number | string;
}> = ({
  id,
  unsupported: controlledUnsupported,
  radius = '50%',
  size = 24,
}) => {
  const isChainSupported = useChainIsSupported(id);
  const unsupported = controlledUnsupported ?? !isChainSupported;

  const chain = chainConfigs.find((c) => c.id === id);
  const isMounted = useIsMounted();
  if (!isMounted)
    return (
      <div
        style={{
          width: size,
          height: size,
        }}
      />
    );

  return (
    <ChainContainer size={size} radius={radius}>
      <AnimatePresence initial={false}>
        {unsupported && (
          <Unsupported
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <svg
              width="13"
              height="12"
              viewBox="0 0 13 12"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M2.61317 11.2501H9.46246C10.6009 11.2501 11.3256 10.3506 11.3256 9.3549C11.3256 9.05145 11.255 8.73244 11.0881 8.43303L7.65903 2.14708C7.659 2.14702 7.65897 2.14696 7.65893 2.1469C7.65889 2.14682 7.65884 2.14673 7.65879 2.14664C7.31045 1.50746 6.6741 1.17871 6.04 1.17871C5.41478 1.17871 4.763 1.50043 4.41518 2.14968L0.993416 8.43476C0.828865 8.72426 0.75 9.04297 0.75 9.3549C0.75 10.3506 1.47471 11.2501 2.61317 11.2501Z"
                fill="currentColor"
                stroke="var(--ck-body-background, #fff)"
                strokeWidth="1.5"
              />
              <path
                d="M6.03258 7.43916C5.77502 7.43916 5.63096 7.29153 5.62223 7.02311L5.55675 4.96973C5.54802 4.69684 5.74446 4.5 6.02821 4.5C6.3076 4.5 6.51277 4.70131 6.50404 4.9742L6.43856 7.01864C6.42546 7.29153 6.2814 7.43916 6.03258 7.43916ZM6.03258 9.11676C5.7401 9.11676 5.5 8.9065 5.5 8.60677C5.5 8.30704 5.7401 8.09678 6.03258 8.09678C6.32506 8.09678 6.56515 8.30256 6.56515 8.60677C6.56515 8.91097 6.32069 9.11676 6.03258 9.11676Z"
                fill="white"
              />
            </svg>
          </Unsupported>
        )}
        {id ? (
          <LogoContainer
            key={`${chain?.id}-${chain?.name}-${id}`}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            {chain?.logo ?? <Chains.UnknownChain />}
          </LogoContainer>
        ) : (
          <LoadingContainer
            key="loading"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            {Spinner}
          </LoadingContainer>
        )}
      </AnimatePresence>
    </ChainContainer>
  );
};

export default Chain;
</file>

<file path="packages/connectkit/src/components/Common/Chain/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';
import { css, keyframes } from 'styled-components';

type ChainContainerProps = {
  size?: number | string;
  radius?: number | string;
};

export const ChainContainer = styled.div<ChainContainerProps>`
  --bg: transparent;
  --color: #333;
  ${(props) =>
    typeof props.size === 'string'
      ? css`
          --width: ${props.size};
          --height: ${props.size};
        `
      : css`
          --width: ${props.size >= 0 ? `${props.size}px` : '24px'};
          --height: ${props.size >= 0 ? `${props.size}px` : '24px'};
        `};
  ${(props) =>
    typeof props.radius === 'string'
      ? css`
          --radius: ${props.radius};
        `
      : css`
          --radius: ${props.radius >= 0 ? `${props.radius}px` : '24px'};
        `};
  display: block;
  position: relative;
  width: var(--width);
  height: var(--height);
  min-width: var(--width);
  min-height: var(--height);
  border-radius: var(--radius);
  background: var(--ck-body-background-secondary);
  pointer-events: none;
  user-select: none;
  svg {
    display: block;
    width: 100%;
    height: auto;
  }
  > div {
    display: flex;
    align-items: center;
    justify-content: center;
  }
`;

export const LogoContainer = styled(motion.div)`
  display: block;
  position: absolute;
  inset: 0;
  overflow: hidden;
  border-radius: inherit;
  user-select: none;
  display: flex;
  align-items: center;
  justify-content: center;
  svg {
    display: block;
    width: 100%;
    height: auto;
  }
`;

const Spin = keyframes`
  0%{ transform: rotate(0deg); }
  100%{ transform: rotate(360deg); }
`;
export const LoadingContainer = styled(motion.div)`
  position: absolute;
  inset: 0;
  animation: ${Spin} 1s linear infinite;
  svg {
    display: block;
    position: absolute;
    inset: 0;
  }
`;

export const Unsupported = styled(motion.div)`
  z-index: 2;
  position: absolute;
  top: 0;
  right: 0;
  width: 40%;
  height: 40%;
  min-width: 13px;
  min-height: 13px;
  color: var(--ck-body-color-danger, red);
  svg {
    display: block;
    position: relative;
    top: -30%;
    right: -30%;
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/ChainSelect/index.tsx">
import React, { useEffect, useState } from 'react';
import { routes, useContext } from './../../ConnectKit';

import { flattenChildren, isMobile } from './../../../utils';

import defaultTheme from './../../../constants/defaultTheme';

import styled from './../../../styles/styled';
import { css } from 'styled-components';
import { motion } from 'framer-motion';

import Tooltip from '../Tooltip';
import ChainSelectDropdown from '../ChainSelectDropdown';
import Chain from '../Chain';
import useLocales from '../../../hooks/useLocales';

import { useAccount, useSwitchChain } from 'wagmi';

const Container = styled(motion.div)``;

const SwitchChainButton = styled(motion.button)`
  --color: var(
    --ck-dropdown-button-color,
    var(--ck-button-primary-color, var(--ck-body-color))
  );
  --background: var(
    --ck-dropdown-button-background,
    var(--ck-secondary-button-background, var(--ck-body-background-secondary))
  );
  --box-shadow: var(
    --ck-dropdown-button-box-shadow,
    var(
      --ck-secondary-button-box-shadow,
      var(--ck-button-primary-box-shadow),
      none
    )
  );

  --hover-color: var(--ck-dropdown-button-hover-color, var(--color));
  --hover-background: var(
    --ck-dropdown-button-hover-background,
    var(--background)
  );
  --hover-box-shadow: var(
    --ck-dropdown-button-hover-box-shadow,
    var(--box-shadow)
  );

  --active-color: var(--ck-dropdown-button-active-color, var(--hover-color));
  --active-background: var(
    --ck-dropdown-button-active-background,
    var(--hover-background)
  );
  --active-box-shadow: var(
    --ck-dropdown-button-active-box-shadow,
    var(--hover-box-shadow)
  );

  appearance: none;
  user-select: none;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-radius: 15px;
  width: 52px;
  height: 30px;
  padding: 2px 6px 2px 3px;
  font-size: 16px;
  line-height: 19px;
  font-weight: 500;
  text-decoration: none;
  white-space: nowrap;
  transform: translateZ(0px);

  transition: 100ms ease;
  transition-property: transform, background-color, box-shadow, color;

  color: var(--color);
  background: var(--background);
  box-shadow: var(--box-shadow);

  svg {
    position: relative;
    display: block;
  }

  ${(props) =>
    props.disabled
      ? css`
          width: auto;
          padding: 3px;
          position: relative;
          left: -22px;
        `
      : css`
          cursor: pointer;

          @media only screen and (min-width: ${defaultTheme.mobileWidth +
            1}px) {
            &:hover,
            &:focus-visible {
              color: var(--hover-color);
              background: var(--hover-background);
              box-shadow: var(--hover-box-shadow);
            }
            &:active {
              color: var(--active-color);
              background: var(--active-background);
              box-shadow: var(--active-box-shadow);
            }
          }
        `}
`;

const ChevronDown = ({ ...props }) => (
  <svg
    aria-hidden="true"
    width="11"
    height="6"
    viewBox="0 0 11 6"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      d="M1.5 1L5.5 5L9.5 1"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);

const ChainSelector: React.FC = () => {
  const context = useContext();
  const [isOpen, setIsOpen] = useState(false);
  const { chain } = useAccount();
  const { chains } = useSwitchChain();

  const locales = useLocales({
    CHAIN: chain?.name,
  });

  const mobile = isMobile() || window?.innerWidth < defaultTheme.mobileWidth;

  useEffect(() => {
    if (!context.open) setIsOpen(false);
  }, [context.open]);

  const disabled = chains.length <= 1;

  return (
    <>
      <Container>
        <ChainSelectDropdown
          offsetX={-12}
          open={!mobile && isOpen}
          onClose={() => setIsOpen(false)}
        >
          <SwitchChainButton
            aria-label={flattenChildren(locales.switchNetworks).toString()}
            disabled={disabled}
            onClick={() => {
              if (mobile) {
                context.setRoute(routes.SWITCHNETWORKS);
              } else {
                setIsOpen(!isOpen);
              }
            }}
          >
            {disabled ? (
              <Tooltip message={locales.chainNetwork} xOffset={-6} delay={0.01}>
                <Chain id={chain?.id} />
              </Tooltip>
            ) : (
              <Chain id={chain?.id} />
            )}
            {!disabled && <ChevronDown style={{ top: 1, left: -3 }} />}
          </SwitchChainButton>
        </ChainSelectDropdown>
      </Container>
    </>
  );
};

export default ChainSelector;
</file>

<file path="packages/connectkit/src/components/Common/ChainSelectDropdown/index.tsx">
import React, {
  useCallback,
  useEffect,
  useLayoutEffect,
  useRef,
  useState,
} from 'react';
import { useContext } from './../../ConnectKit';

import useMeasure from 'react-use-measure';

import ChainSelectList from './../ChainSelectList';

import Portal from './../Portal';
import { ResetContainer } from './../../../styles';
import {
  DropdownWindow,
  DropdownOverlay,
  DropdownContainer,
  DropdownHeading,
} from './styles';

import { AnimatePresence } from 'framer-motion';
import { useThemeContext } from './../../ConnectKitThemeProvider/ConnectKitThemeProvider';
import FocusTrap from './../../../hooks/useFocusTrap';
import useLockBodyScroll from './../../../hooks/useLockBodyScroll';
import useLocales from '../../../hooks/useLocales';

const ChainSelectDropdown: React.FC<{
  children?: React.ReactNode;
  open: boolean;
  onClose: () => void;
  offsetX?: number;
  offsetY?: number;
}> = ({ children, open, onClose, offsetX = 0, offsetY = 8 }) => {
  const context = useContext();
  const themeContext = useThemeContext();

  const locales = useLocales();

  const [offset, setOffset] = useState({ x: 0, y: 0 });

  useLockBodyScroll(open);

  const contentRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    const listener = (e: KeyboardEvent) => {
      if (!open) return;
      if (e.key === 'Escape') onClose();

      if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
        if (!contentRef.current) return;
        e.preventDefault();

        const focusableEls: any = contentRef.current?.querySelectorAll(`
            a[href]:not(:disabled),
            button:not(:disabled),
            textarea:not(:disabled),
            input[type="text"]:not(:disabled),
            input[type="radio"]:not(:disabled),
            input[type="checkbox"]:not(:disabled),
            select:not(:disabled)
          `),
          firstFocusableEl: any = focusableEls[0],
          lastFocusableEl: any = focusableEls[focusableEls.length - 1];

        if (e.key === 'ArrowUp') {
          if (document.activeElement === firstFocusableEl) {
            lastFocusableEl.focus();
          } else {
            let focusItem: any = document?.activeElement?.previousSibling;
            if (!focusItem) focusItem = lastFocusableEl;
            while (focusItem.disabled) focusItem = focusItem.previousSibling;
            focusItem.focus();
          }
        } else {
          if (document.activeElement === lastFocusableEl) {
            firstFocusableEl.focus();
          } else {
            let focusItem: any = document?.activeElement?.nextSibling;
            if (!focusItem) focusItem = firstFocusableEl;
            while (focusItem.disabled) focusItem = focusItem.nextSibling;
            focusItem.focus();
          }
        }
      }
    };
    document.addEventListener('keydown', listener);
    return () => {
      document.removeEventListener('keydown', listener);
    };
  }, [open]);

  const targetRef = useRef<any>(null);
  const innerRef = useCallback(
    (node: any) => {
      if (!node) return;
      targetRef.current = node;
      refresh();
    },
    [open]
  );
  const [ref, bounds] = useMeasure({
    debounce: 120, // waits until modal transition has finished before measuring
    offsetSize: true,
    scroll: true,
  });

  const refresh = () => {
    if (
      !targetRef.current ||
      bounds.top +
        bounds.bottom +
        bounds.left +
        bounds.right +
        bounds.height +
        bounds.width ===
        0
    ) {
      return;
    }

    let x = bounds.left + offsetX;
    let y = bounds.top + bounds.height + offsetY;

    targetRef.current.style.left = `${x}px`;
    targetRef.current.style.top = `${y}px`;

    /*
    const contentRect = targetRef.current.getBoundingClientRect();

    const w = contentRect.width;
    const h = contentRect.height;

    if (x + w > window.innerWidth) {
      x = bounds.left + bounds.width - contentRect.width - offsetX;
    }
    if (y + h > window.innerHeight - 24) {
      y = bounds.top - contentRect.height - offsetY;
    }

    setOffset({
      x: x,
      y: y,
    });
    */
  };

  const useIsomorphicLayoutEffect =
    typeof window !== 'undefined' ? useLayoutEffect : useEffect;
  useIsomorphicLayoutEffect(refresh, [targetRef.current, bounds, open]);

  useEffect(refresh, [open, targetRef.current]);

  const onScroll = onClose;
  const onResize = onClose;
  useEffect(() => {
    refresh();
    window.addEventListener('scroll', onScroll);
    window.addEventListener('resize', onResize);
    return () => {
      window.removeEventListener('scroll', onScroll);
      window.removeEventListener('resize', onResize);
    };
  }, []);

  return (
    <>
      <div ref={ref}>{children}</div>
      <AnimatePresence>
        {open && (
          <Portal>
            <ResetContainer
              $useTheme={themeContext.theme ?? context.theme}
              $useMode={themeContext.mode ?? context.mode}
              $customTheme={themeContext.customTheme ?? context.customTheme}
            >
              <FocusTrap>
                <DropdownWindow ref={contentRef}>
                  <DropdownOverlay onClick={onClose} />
                  <DropdownContainer
                    ref={innerRef}
                    style={{
                      left: offset.x,
                      top: offset.y,
                    }}
                    initial={'collapsed'}
                    animate={'open'}
                    exit={'collapsed'}
                    variants={{
                      collapsed: {
                        transformOrigin: '0 0',
                        opacity: 0,
                        scale: 0.96,
                        z: 0.01,
                        y: -4,
                        x: 0,
                        transition: {
                          duration: 0.1,
                        },
                      },
                      open: {
                        transformOrigin: '0 0',
                        willChange: 'opacity,transform',
                        opacity: 1,
                        scale: 1,
                        z: 0.01,
                        y: 0,
                        x: 0,
                        transition: {
                          ease: [0.76, 0, 0.24, 1],
                          duration: 0.15,
                        },
                      },
                    }}
                  >
                    <DropdownHeading>{locales.switchNetworks}</DropdownHeading>
                    <ChainSelectList />
                  </DropdownContainer>
                </DropdownWindow>
              </FocusTrap>
            </ResetContainer>
          </Portal>
        )}
      </AnimatePresence>
    </>
  );
};

export default ChainSelectDropdown;
</file>

<file path="packages/connectkit/src/components/Common/ChainSelectDropdown/styles.ts">
import styled from './../../../styles/styled';
import { motion } from 'framer-motion';

export const DropdownWindow = styled(motion.div)`
  z-index: 2147483647;
  position: fixed;
  inset: 0;
`;
export const DropdownOverlay = styled(motion.div)`
  position: absolute;
  inset: 0;
`;
export const DropdownContainer = styled(motion.div)`
  --shadow: 0px 2px 15px rgba(0, 0, 0, 0.15);
  --background: var(--ck-dropdown-background, var(--ck-tooltip-background));
  --border-radius: var(
    --ck-dropdown-border-radius,
    var(--ck-tooltip-border-radius, 12px)
  );

  pointer-events: auto;
  z-index: 2147483647;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  max-width: fit-content;
  padding: 14px 16px 16px;
  color: var(--ck-dropdown-color, var(--ck-tooltip-color));
  background: var(--background);
  box-shadow: var(
    --ck-dropdown-box-shadow,
    var(--ck-tooltip-shadow, var(--shadow))
  );
  border-radius: var(--border-radius);
`;
export const DropdownHeading = styled(motion.div)`
  padding: 0 0 6px;
  font-size: 14px;
  line-height: 20px;
  font-weight: 400;
  user-select: none;
  color: var(--ck-dropdown-color, var(--ck-tooltip-color));
`;
</file>

<file path="packages/connectkit/src/components/Common/ChainSelectList/index.tsx">
import { useState } from 'react';
import { useAccount, useSwitchChain } from 'wagmi';
import { chainConfigs } from '../../../constants/chainConfigs';

import {
  SwitchNetworksContainer,
  ChainButton,
  ChainButtonContainer,
  ChainButtonBg,
  ChainButtonStatus,
  ChainButtons,
  ChainIcon,
  ChainLogoContainer,
  ChainLogoSpinner,
} from './styles';
import Alert from '../Alert';

import { AnimatePresence, motion } from 'framer-motion';
import { isCoinbaseWalletConnector, isMobile } from '../../../utils';

import ChainIcons from '../../../assets/chains';
import useLocales from '../../../hooks/useLocales';
import { useContext } from '../../ConnectKit';

const Spinner = (
  <svg
    aria-hidden="true"
    width="36"
    height="36"
    viewBox="0 0 36 36"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M2 16.75C2.69036 16.75 3.25 17.3096 3.25 18V19C3.25 26.5939 9.40609 32.75 17 32.75V35.25C8.02537 35.25 0.75 27.9746 0.75 19V18C0.75 17.3096 1.30964 16.75 2 16.75Z"
      fill="url(#paint0_linear_1288_18701)"
    />
    <defs>
      <linearGradient
        id="paint0_linear_1288_18701"
        x1="2"
        y1="19.4884"
        x2="16.8752"
        y2="33.7485"
        gradientUnits="userSpaceOnUse"
      >
        <stop stopColor="var(--ck-spinner-color)" />
        <stop offset="1" stopColor="var(--ck-spinner-color)" stopOpacity="0" />
      </linearGradient>
    </defs>
  </svg>
);

const ChainSelectList = ({
  variant,
}: {
  variant?: 'primary' | 'secondary';
}) => {
  const { connector, chain } = useAccount();
  const { chains, isPending, switchChain, error } = useSwitchChain();
  const [pendingChainId, setPendingChainId] = useState<number | undefined>(
    undefined
  );

  const locales = useLocales({});
  const mobile = isMobile();

  const isError = error?.['code'] === 4902; // Wallet cannot switch networks
  const disabled = isError || !switchChain;

  const handleSwitchNetwork = (chainId: number) => {
    if (switchChain) {
      setPendingChainId(chainId);
      switchChain({ chainId });
    }
  };

  const { triggerResize } = useContext();

  return (
    <SwitchNetworksContainer
      style={{ marginBottom: switchChain !== undefined ? -8 : 0 }}
    >
      <ChainButtonContainer>
        <ChainButtons>
          {chains.map((x) => {
            const c = chainConfigs.find((ch) => ch.id === x.id);
            const ch = { ...c, ...x };
            return (
              <ChainButton
                key={`${ch?.id}-${ch?.name}`}
                $variant={variant}
                disabled={
                  disabled ||
                  ch.id === chain?.id ||
                  (isPending && pendingChainId === ch.id)
                }
                onClick={() => handleSwitchNetwork?.(ch.id)}
                style={{
                  opacity: disabled && ch.id !== chain?.id ? 0.4 : undefined,
                }}
              >
                <span
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'flex-start',
                    gap: 12,
                    color:
                      ch.id === chain?.id
                        ? 'var(--ck-dropdown-active-color, inherit)'
                        : 'inherit',
                  }}
                >
                  <ChainLogoContainer>
                    <ChainLogoSpinner
                      initial={{ opacity: 0 }}
                      animate={{
                        opacity: isPending && pendingChainId === ch.id ? 1 : 0,
                      }}
                      transition={{
                        ease: [0.76, 0, 0.24, 1],
                        duration: 0.15,
                        delay: 0.1,
                      }}
                    >
                      <motion.div
                        key={`${ch?.id}-${ch?.name}`}
                        animate={
                          // UI fix for Coinbase Wallet on mobile does not remove isPending on rejection event
                          mobile &&
                          isCoinbaseWalletConnector(connector?.id) &&
                          isPending &&
                          pendingChainId === ch.id
                            ? {
                                opacity: [1, 0],

                                transition: { delay: 4, duration: 3 },
                              }
                            : { opacity: 1 }
                        }
                      >
                        {Spinner}
                      </motion.div>
                    </ChainLogoSpinner>
                    <ChainIcon>
                      {ch.logo ?? <ChainIcons.UnknownChain />}
                    </ChainIcon>
                  </ChainLogoContainer>
                  {ch.name}
                </span>
                {variant !== 'secondary' && (
                  <ChainButtonStatus>
                    <AnimatePresence initial={false} exitBeforeEnter>
                      {ch.id === chain?.id && (
                        <motion.span
                          key={'connectedText'}
                          style={{
                            color:
                              'var(--ck-dropdown-active-color, var(--ck-focus-color))',
                            display: 'block',
                            position: 'relative',
                          }}
                          initial={{ opacity: 0, x: -4 }}
                          animate={{ opacity: 1, x: 0 }}
                          exit={{
                            opacity: 0,
                            x: 4,
                            transition: { duration: 0.1, delay: 0 },
                          }}
                          transition={{
                            ease: [0.76, 0, 0.24, 1],
                            duration: 0.3,
                            delay: 0.2,
                          }}
                        >
                          {locales.connected}
                        </motion.span>
                      )}
                      {isPending && pendingChainId === ch.id && (
                        <motion.span
                          key={'approveText'}
                          style={{
                            color: 'var(--ck-dropdown-pending-color, inherit)',
                            display: 'block',
                            position: 'relative',
                          }}
                          initial={{
                            opacity: 0,
                            x: -4,
                          }}
                          animate={{ opacity: 1, x: 0 }}
                          exit={{ opacity: 0, x: 4 }}
                          transition={{
                            ease: [0.76, 0, 0.24, 1],
                            duration: 0.3,
                            delay: 0.1,
                          }}
                        >
                          <motion.span
                            animate={
                              // UI fix for Coinbase Wallet on mobile does not remove isLoading on rejection event
                              mobile &&
                              isCoinbaseWalletConnector(connector?.id) && {
                                opacity: [1, 0],
                                transition: { delay: 4, duration: 4 },
                              }
                            }
                          >
                            {locales.approveInWallet}
                          </motion.span>
                        </motion.span>
                      )}
                    </AnimatePresence>
                  </ChainButtonStatus>
                )}
                {variant === 'secondary' ? (
                  <ChainButtonBg
                    initial={false}
                    animate={{
                      opacity: ch.id === chain?.id ? 1 : 0,
                    }}
                    transition={{
                      duration: 0.3,
                      ease: 'easeOut',
                    }}
                  />
                ) : (
                  //hover === ch.name && (
                  ch.id === chain?.id && (
                    <ChainButtonBg
                      layoutId="activeChain"
                      layout="position"
                      transition={{
                        duration: 0.3,
                        ease: 'easeOut',
                      }}
                    />
                  )
                )}
              </ChainButton>
            );
          })}
        </ChainButtons>
      </ChainButtonContainer>
      <AnimatePresence>
        {isError && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{
              ease: [0.76, 0, 0.24, 1],
              duration: 0.3,
            }}
            onAnimationStart={triggerResize}
            onAnimationComplete={triggerResize}
          >
            <div style={{ paddingTop: 10, paddingBottom: 8 }}>
              <Alert>
                {locales.warnings_walletSwitchingUnsupported}{' '}
                {locales.warnings_walletSwitchingUnsupportedResolve}
              </Alert>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </SwitchNetworksContainer>
  );
};

export default ChainSelectList;
</file>

<file path="packages/connectkit/src/components/Common/ChainSelectList/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';
import { css } from 'styled-components';

import defaultTheme from '../../../constants/defaultTheme';

export const SwitchNetworksContainer = styled.div`
  display: flex;
  flex-direction: column;

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    flex-direction: column-reverse;
  }
`;

export const ChainIcon = styled(motion.div)<{ $empty?: boolean }>`
  display: block;
  position: relative;
  border-radius: 12px;
  overflow: hidden;
  width: 24px;
  height: 24px;
  min-width: 24px;
  min-height: 24px;
  background: var(--ck-body-background);
  svg {
    border-radius: inherit;
    display: block;
    position: relative;
    transform: translate3d(0, 0, 0);
    width: 100%;
    height: auto;
  }
  ${(props) =>
    props.$empty &&
    css`
      display: flex;
      align-items: center;
      justify-content: center;
      &:before {
        content: '?';
        color: var(--ck-body-color-muted);
        font-weight: bold;
        font-family: var(--ck-font-family);
      }
    `}
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    border-radius: 16px;
    width: 32px;
    height: 32px;
  }
`;
export const ChainLogoContainer = styled(motion.div)`
  position: relative;
`;
export const ChainLogoSpinner = styled(motion.div)`
  position: absolute;
  inset: -6px;
  animation: rotateSpinner 1200ms linear infinite;
  pointer-events: none;
  svg {
    display: block;
    position: relative;
    transform: translate3d(0, 0, 0);
    width: 100%;
    height: auto;
  }
  @keyframes rotateSpinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
`;
export const ChainButtonContainer = styled.div`
  position: relative;
  margin: -8px -8px;
  &:after {
    border-radius: var(--border-radius, 0);
    z-index: 2;
    content: '';
    pointer-events: none;
    position: absolute;
    inset: 0 2px;
    box-shadow: inset 0 16px 8px -12px var(--background, var(--ck-body-background)),
      inset 0 -16px 8px -12px var(--background, var(--ck-body-background));
  }
`;
export const ChainButtons = styled(motion.div)`
  padding: 8px;
  overflow-x: hidden;
  overflow-y: auto;
  max-height: 242px;

  -ms-overflow-style: none; /* Internet Explorer 10+ */
  scrollbar-width: none; /* Firefox */
  &::-webkit-scrollbar {
    display: none; /* Safari and Chrome */
  }

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    padding: 8px 14px;
    margin: 2px -2px 0;
    max-height: 60vh;
  }
`;
export const ChainButton = styled(motion.button)<{
  $variant?: 'primary' | 'secondary';
}>`
  appearance: none;
  cursor: pointer;
  user-select: none;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  border-radius: 11px;
  margin: 0 0 1px;
  padding: 8px 0;
  padding-right: 154px;
  font-size: 15px;
  line-height: 18px;
  font-weight: 500;
  text-decoration: none;
  color: var(--ck-body-color);
  background: none;
  white-space: nowrap;
  transition: transform 100ms ease, background-color 100ms ease;
  transform: translateZ(0px);
  &:before {
    content: '';
    background: currentColor;
    position: absolute;
    z-index: -1;
    inset: 0 var(--ck-dropdown-active-inset, -8px);
    border-radius: var(--ck-dropdown-active-border-radius, 12px);
    opacity: 0;
    transition: opacity 180ms ease;
  }
  &:after {
    content: '';
    position: absolute;
    z-index: -1;
    inset: 0 var(--ck-dropdown-active-inset, -8px);
    border-radius: 12px;
    opacity: 0;
    transition: opacity 180ms ease;
    outline: 2px solid var(--ck-focus-color);
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    font-size: 17px;
    padding: 8px 0;
  }
  @media only screen and (min-width: ${defaultTheme.mobileWidth}px) {
    &:hover {
      &:before {
        transition-duration: 80ms;
        opacity: 0.05;
      }
    }
  }
  &:active {
    transform: scale(0.99) translateZ(0px);
  }
  &:disabled {
    //opacity: 0.4;
    pointer-events: none;
  }
  &:focus-visible {
    outline: none !important;
    &:after {
      opacity: 1;
    }
  }
  ${(props) =>
    props.$variant === 'secondary' &&
    css`
      padding: 12px 4px;
      margin: 0 0 8px;
      &:last-child {
        margin-bottom: 0;
      }
      &:before {
        opacity: 0.05;
      }
      &:hover:before {
        opacity: 0.1;
      }
    `}
`;
export const ChainButtonStatus = styled(motion.div)`
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  display: flex;
  align-items: center;
  justify-content: center;

  color: var(--ck-body-color-muted);
  font-size: 15px;
  line-height: 18px;
  font-weight: 500;
  padding-right: 4px;
  span {
    display: block;
    position: relative;
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    font-size: 17px;
    padding: 0;
  }
`;
export const ChainButtonBg = styled(motion.div)`
  position: absolute;
  z-index: -1;
  inset: 0 var(--ck-dropdown-active-inset, -8px);
  background: var(--ck-dropdown-active-background, rgba(26, 136, 248, 0.1));
  box-shadow var(--ck-dropdown-active-box-shadow);
  border-radius: var(--ck-dropdown-active-border-radius, 12px);
  
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    inset: 0 var(--ck-dropdown-active-inset, -8px);
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/ConnectorList/index.tsx">
import { useContext, routes } from '../../ConnectKit';

import {
  ConnectorsContainer,
  ConnectorButton,
  ConnectorLabel,
  ConnectorIcon,
  RecentlyUsedTag,
} from './styles';

import { useWeb3 } from '../../contexts/web3';

import useIsMobile from '../../../hooks/useIsMobile';
import { ScrollArea } from '../../Common/ScrollArea';
import Alert from '../Alert';

import { WalletProps, useWallets } from '../../../wallets/useWallets';
import {
  detectBrowser,
  isCoinbaseWalletConnector,
  isWalletConnectConnector,
} from '../../../utils';
import { useLastConnector } from '../../../hooks/useLastConnector';
import { useConnect } from '../../../hooks/useConnect';
import {
  useFamilyAccountsConnector,
  useFamilyConnector,
} from '../../../hooks/useConnectors';
import { isFamily } from '../../../utils/wallets';

const ConnectorList = () => {
  const context = useContext();
  const isMobile = useIsMobile();

  const wallets = useWallets();
  const { lastConnectorId } = useLastConnector();
  const familyConnector = useFamilyConnector();
  const familyAccountsConnector = useFamilyAccountsConnector();

  let filteredWallets = wallets.filter(
    (wallet) => wallet.id !== familyAccountsConnector?.id
  );
  if (familyConnector && isFamily()) {
    filteredWallets = filteredWallets.filter(
      (wallet) => wallet.id !== familyConnector?.id
    );
  }

  const walletsToDisplay =
    context.options?.hideRecentBadge || lastConnectorId === 'walletConnect' // do not hoist walletconnect to top of list
      ? filteredWallets
      : [
          // move last used wallet to top of list
          // using .filter and spread to avoid mutating original array order with .sort
          ...filteredWallets.filter(
            (wallet) => lastConnectorId === wallet.connector.id
          ),
          ...filteredWallets.filter(
            (wallet) => lastConnectorId !== wallet.connector.id
          ),
        ];

  return (
    <ScrollArea mobileDirection={'horizontal'}>
      {walletsToDisplay.length === 0 && (
        <Alert error>No connectors found in ConnectKit config.</Alert>
      )}
      {walletsToDisplay.length > 0 && (
        <ConnectorsContainer
          $mobile={isMobile}
          $totalResults={walletsToDisplay.length}
        >
          {walletsToDisplay.map((wallet) => (
            <ConnectorItem
              key={wallet.id}
              wallet={wallet}
              isRecent={wallet.id === lastConnectorId}
            />
          ))}
        </ConnectorsContainer>
      )}
    </ScrollArea>
  );
};

export default ConnectorList;

const ConnectorItem = ({
  wallet,
  isRecent,
}: {
  wallet: WalletProps;
  isRecent?: boolean;
}) => {
  const {
    connect: { getUri },
  } = useWeb3();
  const uri = getUri();
  const isMobile = useIsMobile();
  const context = useContext();

  const { connect } = useConnect();

  /*
  const [ready, setReady] = useState(false);
  useEffect(() => {
    (async () => {
      const provider = await wallet.connector.getProvider();
      setReady(!!provider);
    })();
  }, [wallet, setReady]);
  */

  let deeplink =
    (!wallet.isInstalled && isMobile) ||
    (wallet.shouldDeeplinkDesktop && !isMobile)
      ? wallet.getWalletConnectDeeplink?.(uri ?? '')
      : undefined;

  const redirectToMoreWallets = isMobile && isWalletConnectConnector(wallet.id);
  // Safari requires opening popup on user gesture, so we connect immediately here
  const shouldConnectImmediately =
    (detectBrowser() === 'safari' || detectBrowser() === 'ios') &&
    isCoinbaseWalletConnector(wallet.connector.id);

  if (redirectToMoreWallets || shouldConnectImmediately) deeplink = undefined; // mobile redirects to more wallets page

  return (
    <ConnectorButton
      type="button"
      as={deeplink ? 'a' : undefined}
      href={deeplink ? deeplink : undefined}
      disabled={context.route !== routes.CONNECTORS}
      onClick={
        deeplink
          ? undefined
          : () => {
              if (redirectToMoreWallets) {
                context.setRoute(routes.MOBILECONNECTORS);
              } else {
                if (shouldConnectImmediately) {
                  connect({ connector: wallet?.connector });
                }
                context.setRoute(routes.CONNECT);
                context.setConnector({ id: wallet.id });
              }
            }
      }
    >
      <ConnectorIcon
        data-small={wallet.iconShouldShrink}
        data-shape={wallet.iconShape}
        data-background={redirectToMoreWallets}
      >
        {wallet.iconConnector ?? wallet.icon}
      </ConnectorIcon>
      <ConnectorLabel>
        {isMobile ? wallet.shortName ?? wallet.name : wallet.name}
        {!context.options?.hideRecentBadge && isRecent && (
          <RecentlyUsedTag>
            <span>Recent</span>
          </RecentlyUsedTag>
        )}
      </ConnectorLabel>
    </ConnectorButton>
  );
};
</file>

<file path="packages/connectkit/src/components/Common/ConnectorList/styles.ts">
import styled from '../../../styles/styled';
import { css, keyframes } from 'styled-components';

import { motion } from 'framer-motion';

const Shimmer = keyframes`
  0%{ transform: translate(-100%) rotate(-45deg); }
  100%{ transform: translate(100%) rotate(-80deg); }
`;

export const ConnectorButton = styled(motion.button)`
  display: block;
  text-decoration: none;
`;
export const ConnectorLabel = styled(motion.span)``;
export const ConnectorIcon = styled(motion.div)``;

// This is a bit of a hack to not share styles between mobile and desktop
const styles = {
  desktop: {
    ConnectorButton: css`
      cursor: pointer;
      user-select: none;
      position: relative;
      display: flex;
      align-items: center;
      padding: 0 20px;
      width: 100%;
      height: 64px;
      font-size: 17px;
      font-weight: var(--ck-primary-button-font-weight, 500);
      line-height: 20px;
      text-align: var(--ck-body-button-text-align, left);
      transition: 180ms ease;
      transition-property: background, color, box-shadow, transform, opacity;
      will-change: transform, box-shadow, background-color, color, opacity;

      --fallback-color: var(--ck-primary-button-color);
      --fallback-background: var(--ck-primary-button-background);
      --fallback-box-shadow: var(--ck-primary-button-box-shadow);
      --fallback-border-radius: var(--ck-primary-button-border-radius);

      --color: var(--ck-primary-button-color, var(--fallback-color));
      --background: var(
        --ck-primary-button-background,
        var(--fallback-background)
      );
      --box-shadow: var(
        --ck-primary-button-box-shadow,
        var(--fallback-box-shadow)
      );
      --border-radius: var(
        --ck-primary-button-border-radius,
        var(--fallback-border-radius)
      );

      --hover-color: var(--ck-primary-button-hover-color, var(--color));
      --hover-background: var(
        --ck-primary-button-hover-background,
        var(--background)
      );
      --hover-box-shadow: var(
        --ck-primary-button-hover-box-shadow,
        var(--box-shadow)
      );
      --hover-border-radius: var(
        --ck-primary-button-hover-border-radius,
        var(--border-radius)
      );

      --active-color: var(--ck-primary-button-active-color, var(--hover-color));
      --active-background: var(
        --ck-primary-button-active-background,
        var(--hover-background)
      );
      --active-box-shadow: var(
        --ck-primary-button-active-box-shadow,
        var(--hover-box-shadow)
      );
      --active-border-radius: var(
        --ck-primary-button-active-border-radius,
        var(--hover-border-radius)
      );

      color: var(--color);
      background: var(--background);
      box-shadow: var(--box-shadow);
      border-radius: var(--border-radius);

      &:disabled {
        transition: 180ms ease;
        opacity: 0.4;
      }

      --bg: var(--background);
      &:not(:disabled) {
        &:hover {
          color: var(--hover-color);
          background: var(--hover-background);
          box-shadow: var(--hover-box-shadow);
          border-radius: var(--hover-border-radius);
          --bg: var(--hover-background, var(--background));
        }
        &:focus-visible {
          transition-duration: 100ms;
          color: var(--hover-color);
          background: var(--hover-background);
          box-shadow: var(--hover-box-shadow);
          border-radius: var(--hover-border-radius);
          --bg: var(--hover-background, var(--background));
        }
        &:active {
          color: var(--active-color);
          background: var(--active-background);
          box-shadow: var(--active-box-shadow);
          border-radius: var(--active-border-radius);
          --bg: var(--active-background, var(--background));
        }
      }
    `,
    ConnectorLabel: css`
      display: flex;
      align-items: center;
      gap: 9px;
      width: 100%;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
      padding: 2px 0;
      padding-right: 38px;
    `,
    ConnectorIcon: css`
      position: absolute;
      right: 20px;
      width: 32px;
      height: 32px;
      overflow: hidden;
      svg,
      img {
        display: block;
        position: relative;
        pointer-events: none;
        overflow: hidden;
        width: 100%;
        height: 100%;
      }

      &[data-shape='squircle'] {
        border-radius: 22.5%;
      }
      &[data-shape='circle'] {
        border-radius: 100%;
      }
      &[data-shape='square'] {
        border-radius: 0;
      }
    `,
  },
  mobile: {
    ConnectorButton: css`
      text-align: center;
      background: none;
      max-width: 100%;
      overflow: hidden;
    `,
    ConnectorLabel: css`
      display: block;
      text-overflow: ellipsis;
      max-width: 100%;
      overflow: hidden;
      padding: 10px 0 0;
      color: var(--ck-body-color);
      font-size: 13px;
      line-height: 15px;
      font-weight: 500;
      opacity: 0.75;
    `,
    ConnectorIcon: css`
      position: relative;
      margin: 0 auto;
      width: 60px;
      height: 60px;
      overflow: hidden;
      svg,
      img {
        display: block;
        position: relative;
        width: 100%;
        height: auto;
      }
      &[data-small='true'] {
        svg,
        img {
          transform: scale(0.8);
        }
      }

      &[data-shape='squircle'] {
        border-radius: 22.5%;
        &:before {
          content: '';
          z-index: -1;
          position: absolute;
          inset: 0;
          border-radius: inherit;
          box-shadow: inset 0 0 0 1px var(--ck-body-background-tertiary);
        }
      }
      &[data-shape='circle'] {
        border-radius: 100%;
      }
      &[data-shape='square'] {
        border-radius: 0;
      }

      &[data-background='true'] {
        border-radius: 22.5%;
        background: var(--ck-body-background-tertiary);
        padding: 8%;
      }
    `,
  },
};

export const RecentlyUsedTag = styled(motion.span)`
  position: relative;
  top: var(--ck-recent-badge-top-offset, 0.5px);
  display: inline-block;
  padding: 10px 7px;
  line-height: 0;
  font-size: 13px;
  font-weight: 400;
  border-radius: var(--ck-recent-badge-border-radius, var(--border-radius));
  color: var(
    --ck-recent-badge-color,
    var(--ck-accent-color, var(--ck-body-color-muted, currentColor))
  );
  background: var(--ck-recent-badge-background, transparent);
  overflow: hidden;
  span {
    display: inline-block;
    position: relative;
  }
  &:before {
    z-index: 1;
    content: '';
    position: absolute;
    inset: 0;
    opacity: 0.4;
    box-shadow: var(--ck-recent-badge-box-shadow, inset 0 0 0 1px currentColor);
    border-radius: inherit;
  }
  &:after {
    z-index: 2;
    content: '';
    position: absolute;
    inset: -10%;
    top: -110%;
    aspect-ratio: 1/1;
    opacity: 0.7;
    background: linear-gradient(
      170deg,
      transparent 10%,
      var(--ck-recent-badge-background, var(--bg)) 50%,
      transparent 90%
    );
    animation: ${Shimmer} 2s linear infinite;
  }
`;

export const ConnectorsContainer = styled.div<{
  $mobile?: boolean;
  $disabled?: boolean;
  $totalResults?: number;
}>`
  transition: opacity 300ms ease;
  min-width: fit-content;

  ${(props) =>
    props.$disabled &&
    css`
      pointer-events: none;
      opacity: 0.4;
    `}

  ${(props) =>
    !props.$mobile
      ? css`
          display: flex;
          flex-direction: column;
          gap: 12px;

          ${ConnectorButton} {
            ${styles.desktop.ConnectorButton}
            ${ConnectorLabel} {
              ${styles.desktop.ConnectorLabel}
            }
            ${ConnectorIcon} {
              ${styles.desktop.ConnectorIcon}
            }
          }
        `
      : css`
          display: flex;
          align-items: flex-start;
          justify-content: space-around;
          gap: 22px 6px;
          //margin: 0px -10px -20px;
          padding: 14px 0px 28px;

          ${ConnectorButton} {
            flex-shrink: 0;
            width: 80px;
            ${styles.mobile.ConnectorButton}
            ${ConnectorLabel} {
              ${styles.mobile.ConnectorLabel}
              ${RecentlyUsedTag} {
                display: none;
                width: fit-content;
                margin: 0 auto;
              }
            }
            ${ConnectorIcon} {
              ${styles.mobile.ConnectorIcon}
            }
          }
        `}
`;
</file>

<file path="packages/connectkit/src/components/Common/CopyToClipboard/CopyToClipboardIcon.tsx">
import { css } from 'styled-components';
import styled from './../../../styles/styled';
import { motion } from 'framer-motion';

import { CopyToClipboardIcon as Icon } from '../../../assets/icons';

const IconContainer = styled(motion.div)<{ $clipboard?: boolean }>`
  transition: all 220ms cubic-bezier(0.175, 0.885, 0.32, 1.1);
  display: flex;
  align-items: center;
  justify-content: center;
  width: 16px;
  svg {
    display: block;
  }
  svg,
  svg path,
  svg rect {
    transition: inherit;
  }
  svg path:first-child {
    transform-origin: 50% 50%;
    fill: var(--bg);
    stroke: var(--color);
  }
  svg rect {
    transform-origin: 53% 63%;
    fill: var(--bg);
    stroke: var(--color);
  }
  svg path:last-child {
    opacity: 0;
    stroke: var(--bg);
    transform: translate(11.75px, 10px) rotate(90deg) scale(0.6);
  }
  ${(props) =>
    props.$clipboard
      ? css`
          --color: var(--ck-focus-color) !important;
          --bg: var(--ck-body-background);
          svg {
            transition-delay: 0ms;
            path:first-child {
              opacity: 0;
              transform: rotate(-90deg) scale(0.2);
            }
            rect {
              rx: 10px;
              fill: var(--color);
              transform: rotate(-90deg) scale(1.45);
            }
            path:last-child {
              transition-delay: 100ms;
              opacity: 1;
              transform: translate(7.75px, 9.5px);
            }
          }
        `
      : css`
          &:hover {
          }
          &:hover:active {
          }
        `}
`;

const CopyToClipboardIcon = ({
  copied,
  small,
}: {
  copied?: boolean;
  small?: boolean;
}) => (
  <IconContainer $clipboard={copied}>
    <Icon
      style={{
        transform: small ? 'scale(1)' : 'translateX(3px) scale(1.5)',
        opacity: small || copied ? 1 : 0.3,
      }}
    />
  </IconContainer>
);
export default CopyToClipboardIcon;
</file>

<file path="packages/connectkit/src/components/Common/CopyToClipboard/index.tsx">
import React, { useState } from 'react';
import styled from './../../../styles/styled';
import { css } from 'styled-components';

import CopyToClipboardIcon from './CopyToClipboardIcon';
import Button from '../Button';

const Container = styled.div<{ $disabled?: boolean }>`
  --color: var(--ck-copytoclipboard-stroke);
  --bg: var(--ck-body-background);
  transition: all 220ms cubic-bezier(0.175, 0.885, 0.32, 1.1);

  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;

  ${(props) =>
    props.$disabled
      ? css`
          cursor: not-allowed;
          opacity: 0.4;
        `
      : css`
          &:hover {
            --color: var(--ck-body-color-muted);
          }
        `}
`;
const OffsetContainer = styled.div`
  display: block;
  position: relative;
  transition: inherit;
  svg {
    position: absolute;
    left: 100%;
    display: block;
    top: -1px;
    margin: 0;
    margin-left: 4px;
  }
`;

const CopyToClipboard: React.FC<{
  string?: string;
  children?: React.ReactNode;
  variant?: 'button';
}> = ({ string, children, variant }) => {
  const [clipboard, setClipboard] = useState(false);

  let timeout: any;
  const onCopy = () => {
    if (!string) return;
    const str = string.trim();
    if (navigator.clipboard) {
      navigator.clipboard.writeText(str);
    } else {
      // Fallback copy to clipboard if necessary
      /*
      const el = document.createElement('textarea');
      el.value = str;
      document.body.appendChild(el);
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el);
      */
    }
    setClipboard(true);
    clearTimeout(timeout);
    timeout = setTimeout(() => setClipboard(false), 1000);
  };

  if (variant === 'button')
    return (
      <Button
        disabled={!string}
        onClick={onCopy}
        icon={<CopyToClipboardIcon copied={clipboard} />}
      >
        {children}
      </Button>
    );

  return (
    <Container onClick={onCopy} $disabled={!string}>
      <OffsetContainer>
        {children}
        <CopyToClipboardIcon copied={clipboard} small />
      </OffsetContainer>
    </Container>
  );
};

export default CopyToClipboard;
</file>

<file path="packages/connectkit/src/components/Common/CustomQRCode/index.tsx">
import { CustomQRCodeProps } from './types';
import {
  QRCodeContainer,
  LogoContainer,
  LogoIcon,
  QRPlaceholder,
  QRCodeContent,
} from './styles';

import Tooltip from '../Tooltip';
import { AnimatePresence, motion } from 'framer-motion';

import { QRCode } from './QRCode';
import useWindowSize from '../../../hooks/useWindowSize';

function CustomQRCode({
  value,
  image,
  imageBackground,
  imagePosition = 'center',
  tooltipMessage,
}: CustomQRCodeProps) {
  const windowSize = useWindowSize();

  const Logo =
    windowSize.width > 920 && tooltipMessage ? (
      <Tooltip xOffset={139} yOffset={5} delay={0.1} message={tooltipMessage}>
        {image}
      </Tooltip>
    ) : (
      image
    );

  return (
    <QRCodeContainer>
      <QRCodeContent>
        {image && (
          <LogoContainer>
            <LogoIcon
              $wcLogo={imagePosition !== 'center'}
              style={{
                background:
                  imagePosition === 'center' ? imageBackground : undefined,
              }}
            >
              {Logo}
            </LogoIcon>
          </LogoContainer>
        )}

        <AnimatePresence initial={false}>
          {value ? (
            <motion.div
              key={value}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0, position: 'absolute', inset: [0, 0] }}
              transition={{
                duration: 0.2,
              }}
            >
              <QRCode
                uri={value}
                size={288}
                ecl="M"
                clearArea={!!(imagePosition === 'center' && image)}
              />
            </motion.div>
          ) : (
            <QRPlaceholder
              initial={{ opacity: 0.1 }}
              animate={{ opacity: 0.1 }}
              exit={{ opacity: 0, position: 'absolute', inset: [0, 0] }}
              transition={{
                duration: 0.2,
              }}
            >
              <span />
              <span />
              <span />
              <div />
            </QRPlaceholder>
          )}
        </AnimatePresence>
      </QRCodeContent>
    </QRCodeContainer>
  );
}
CustomQRCode.displayName = 'CustomQRCode';

export default CustomQRCode;
</file>

<file path="packages/connectkit/src/components/Common/CustomQRCode/QRCode.tsx">
import QRCodeUtil from 'qrcode';
import React, { ReactElement, useMemo } from 'react';

const generateMatrix = (
  value: string,
  errorCorrectionLevel: QRCodeUtil.QRCodeErrorCorrectionLevel
) => {
  const arr = Array.prototype.slice.call(
    QRCodeUtil.create(value, { errorCorrectionLevel }).modules.data,
    0
  );
  const sqrt = Math.sqrt(arr.length);
  return arr.reduce(
    (rows, key, index) =>
      (index % sqrt === 0
        ? rows.push([key])
        : rows[rows.length - 1].push(key)) && rows,
    []
  );
};

type Props = {
  ecl?: QRCodeUtil.QRCodeErrorCorrectionLevel;
  size?: number;
  uri: string;
  clearArea?: boolean;
  image?: React.ReactNode;
  imageBackground?: string;
};

export function QRCode({
  ecl = 'M',
  size: sizeProp = 200,
  uri,
  clearArea = false,
  image,
  imageBackground = 'transparent',
}: Props) {
  const logoSize = clearArea ? 76 : 0;
  const size = sizeProp - 10 * 2;

  const dots = useMemo(() => {
    const dots: ReactElement[] = [];
    const matrix = generateMatrix(uri, ecl);
    const cellSize = size / matrix.length;
    let qrList = [
      { x: 0, y: 0 },
      { x: 1, y: 0 },
      { x: 0, y: 1 },
    ];

    qrList.forEach(({ x, y }) => {
      const x1 = (matrix.length - 7) * cellSize * x;
      const y1 = (matrix.length - 7) * cellSize * y;
      for (let i = 0; i < 3; i++) {
        dots.push(
          <rect
            key={`${i}-${x}-${y}`}
            fill={
              i % 2 !== 0
                ? 'var(--ck-qr-background, var(--ck-body-background))'
                : 'var(--ck-qr-dot-color)'
            }
            rx={(i - 2) * -5 + (i === 0 ? 2 : 3)}
            ry={(i - 2) * -5 + (i === 0 ? 2 : 3)}
            width={cellSize * (7 - i * 2)}
            height={cellSize * (7 - i * 2)}
            x={x1 + cellSize * i}
            y={y1 + cellSize * i}
          />
        );
      }
    });

    if (image) {
      const x1 = (matrix.length - 7) * cellSize * 1;
      const y1 = (matrix.length - 7) * cellSize * 1;
      dots.push(
        <>
          <rect
            fill={imageBackground}
            rx={(0 - 2) * -5 + 2}
            ry={(0 - 2) * -5 + 2}
            width={cellSize * (7 - 0 * 2)}
            height={cellSize * (7 - 0 * 2)}
            x={x1 + cellSize * 0}
            y={y1 + cellSize * 0}
          />
          <foreignObject
            width={cellSize * (7 - 0 * 2)}
            height={cellSize * (7 - 0 * 2)}
            x={x1 + cellSize * 0}
            y={y1 + cellSize * 0}
          >
            <div style={{ borderRadius: (0 - 2) * -5 + 2, overflow: 'hidden' }}>
              {image}
            </div>
          </foreignObject>
        </>
      );
    }

    const clearArenaSize = Math.floor((logoSize + 25) / cellSize);
    const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;
    const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;

    matrix.forEach((row: QRCodeUtil.QRCode[], i: number) => {
      row.forEach((_: any, j: number) => {
        if (matrix[i][j]) {
          // Do not render dots under position squares
          if (
            !(
              (i < 7 && j < 7) ||
              (i > matrix.length - 8 && j < 7) ||
              (i < 7 && j > matrix.length - 8)
            )
          ) {
            //if (image && i > matrix.length - 9 && j > matrix.length - 9) return;
            if (
              image ||
              !(
                i > matrixMiddleStart &&
                i < matrixMiddleEnd &&
                j > matrixMiddleStart &&
                j < matrixMiddleEnd
              )
            ) {
              dots.push(
                <circle
                  key={`circle-${i}-${j}`}
                  cx={i * cellSize + cellSize / 2}
                  cy={j * cellSize + cellSize / 2}
                  fill="var(--ck-qr-dot-color)"
                  r={cellSize / 3}
                />
              );
            }
          }
        }
      });
    });

    return dots;
  }, [ecl, size, uri]);

  return (
    <svg
      height={size}
      width={size}
      viewBox={`0 0 ${size} ${size}`}
      style={{
        width: size,
        height: size,
      }}
    >
      <rect fill="transparent" height={size} width={size} />
      {dots}
    </svg>
  );
}
</file>

<file path="packages/connectkit/src/components/Common/CustomQRCode/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';
import { css, keyframes } from 'styled-components';

export const QRCodeContainer = styled(motion.div)`
  z-index: 3;
  position: relative;
  overflow: hidden;
  height: 0;
  padding-bottom: 100% !important;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 1px 0 2px;
  border-radius: var(--ck-qr-border-radius, 24px);
  background: var(--ck-qr-background, transparent);
  box-shadow: 0 0 0 1px var(--ck-qr-border-color);
  backface-visibility: hidden;
  svg {
    display: block;
    max-width: 100%;
    width: 100%;
    height: auto;
  }
`;
export const QRCodeContent = styled(motion.div)`
  position: absolute;
  inset: 13px;
  svg {
    width: 100% !important;
    height: auto !important;
  }
`;
export const PlaceholderKeyframes = keyframes`
  0%{ background-position: 100% 0; }
  100%{ background-position: -100% 0; }
`;
export const QRPlaceholder = styled(motion.div)`
  --color: var(--ck-qr-dot-color);
  --bg: var(--ck-qr-background, var(--ck-body-background));

  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  > div {
    z-index: 4;
    position: relative;
    width: 28%;
    height: 28%;
    border-radius: 20px;
    background: var(--bg);
    box-shadow: 0 0 0 7px var(--bg);
  }
  > span {
    z-index: 4;
    position: absolute;
    background: var(--color);
    border-radius: 12px;
    width: 13.25%;
    height: 13.25%;
    box-shadow: 0 0 0 4px var(--bg);
    &:before {
      content: '';
      position: absolute;
      inset: 9px;
      border-radius: 3px;
      box-shadow: 0 0 0 4px var(--bg);
    }
    &:nth-child(1) {
      top: 0;
      left: 0;
    }
    &:nth-child(2) {
      top: 0;
      right: 0;
    }
    &:nth-child(3) {
      bottom: 0;
      left: 0;
    }
  }
  &:before {
    z-index: 3;
    content: '';
    position: absolute;
    inset: 0;
    background: repeat;
    background-size: 1.888% 1.888%;
    background-image: radial-gradient(var(--color) 41%, transparent 41%);
  }
  &:after {
    z-index: 5;
    content: '';
    position: absolute;
    inset: 0;
    transform: scale(1.5) rotate(45deg);
    background-image: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0) 50%,
      rgba(255, 255, 255, 1),
      rgba(255, 255, 255, 0)
    );
    background-size: 200% 100%;
    animation: ${PlaceholderKeyframes} 1000ms linear infinite both;
  }
`;

export const LogoContainer = styled(motion.div)`
  z-index: 6;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform: translateY(50%) scale(0.9999); // Shifting fix
`;
export const LogoIcon = styled(motion.div)<{ $wcLogo?: boolean }>`
  z-index: 6;
  position: absolute;
  left: 50%;
  overflow: hidden;

  transform: translate(-50%, -50%) scale(0.9999); // Shifting fix

  svg {
    display: block;
    position: relative;
    width: 100%;
    height: 100%;
  }

  ${(props) =>
    props.$wcLogo
      ? css`
          width: 29%;
          height: 20.5%;
        `
      : css`
          width: 28%;
          height: 28%;
          border-radius: 17px;
          &:before {
            pointer-events: none;
            z-index: 2;
            content: '';
            position: absolute;
            inset: 0;
            border-radius: inherit;
            box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.02);
          }
        `}
`;
</file>

<file path="packages/connectkit/src/components/Common/CustomQRCode/types.ts">
import React from 'react';

export type CustomQRCodeProps = {
  value?: string;
  image?: React.ReactNode;
  imageBackground?: string;
  imagePosition?: 'center' | 'bottom right';
  tooltipMessage?: React.ReactNode | string;
};
</file>

<file path="packages/connectkit/src/components/Common/DynamicContainer/index.tsx">
import React from 'react';
import { motion } from 'framer-motion';

type DynamicContainerProps = { id: string; children?: React.ReactNode };

const DynamicContainer: React.FC<DynamicContainerProps> = ({
  id,
  children,
}) => {
  return (
    <div style={{ position: 'relative' }}>
      <motion.div
        key={id}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0, position: 'absolute', top: 0, left: 0 }}
        transition={{ duration: 0.3 }}
      >
        {children}
      </motion.div>
    </div>
  );
};
export default DynamicContainer;
</file>

<file path="packages/connectkit/src/components/Common/FamilyAccountsButton/index.tsx">
import {
  ButtonContainer,
  InnerContainer,
  IconContainer,
  ButtonContainerInner,
} from './styles';
import FitText from '../FitText';
import useLocales from '../../../hooks/useLocales';

const FamilyLogo = () => (
  <svg
    width="20"
    height="20"
    viewBox="0 0 20 20"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M19.0204 1.00451C19.6474 1.63141 19.9997 2.4816 20 3.36818C20.0008 4.14967 19.726 4.90643 19.2239 5.50535C18.7218 6.10427 18.0246 6.50698 17.2549 6.64267V6.70894C18.019 6.85794 18.7076 7.26796 19.2026 7.86877C19.6976 8.46958 19.9683 9.2238 19.9683 10.0022C19.9683 10.7807 19.6976 11.5349 19.2026 12.1357C18.7076 12.7365 18.019 13.1465 17.2549 13.2955V13.3613C18.0719 13.5195 18.8007 13.9762 19.2994 14.6424C19.798 15.3086 20.0308 16.1365 19.9523 16.9649C19.8738 17.7933 19.4896 18.5628 18.8747 19.1234C18.2598 19.6841 17.4581 19.9958 16.626 19.9977C15.0203 19.9977 13.6632 18.8411 13.3487 17.3187H13.266C13.1161 18.0763 12.707 18.7581 12.1091 19.247C11.5112 19.7358 10.7617 20.0013 9.98928 19.9977C8.38358 19.9977 7.02654 18.8411 6.71207 17.3187H6.62934C6.5085 17.9135 6.22824 18.4642 5.81854 18.912C5.40885 19.3597 4.88513 19.6877 4.3034 19.8609C3.72166 20.034 3.1038 20.0458 2.5159 19.8949C1.92799 19.7441 1.39216 19.4362 0.965705 19.0044C0.539251 18.5726 0.238219 18.0329 0.0948058 17.4432C-0.0486071 16.8535 -0.0290062 16.2359 0.151512 15.6565C0.332031 15.0771 0.666676 14.5576 1.11966 14.1537C1.57264 13.7497 2.12691 13.4765 2.7232 13.3632V13.2974C1.95907 13.1484 1.27053 12.7384 0.775518 12.1376C0.280502 11.5368 0.0098111 10.7826 0.0098111 10.0041C0.0098111 9.22568 0.280502 8.47147 0.775518 7.87065C1.27053 7.26984 1.95907 6.85982 2.7232 6.71082V6.64455C2.12752 6.52895 1.57437 6.2539 1.12271 5.84872C0.671047 5.44354 0.337805 4.92342 0.158498 4.34378C-0.0208088 3.76414 -0.0394594 3.14672 0.104534 2.55732C0.248527 1.96792 0.549768 1.42863 0.976148 0.996935C1.40253 0.565238 1.93807 0.257312 2.52569 0.105976C3.11331 -0.0453591 3.73098 -0.0344317 4.31288 0.137594C4.89478 0.309619 5.41909 0.636296 5.82993 1.0828C6.24077 1.52931 6.52274 2.07892 6.64579 2.67304H6.72852C6.8865 1.9201 7.29921 1.24463 7.89713 0.760429C8.49504 0.276232 9.2416 0.0129149 10.011 0.0148468C10.7804 0.0167787 11.5257 0.283841 12.1211 0.771035C12.7166 1.25823 13.1259 1.93577 13.2801 2.68949H13.3629C13.6952 1.16716 15.0348 0.00860963 16.6565 0.0250597C17.5432 0.0253088 18.3935 0.377609 19.0204 1.00451ZM5.93783 5.07571C5.33116 5.0757 4.84252 5.57305 4.85166 6.17966C4.86836 7.28867 4.89073 9.01161 4.89073 10.2871C4.89073 11.5614 4.8684 13.2824 4.8517 14.3916C4.84255 14.9997 5.3327 15.4985 5.94094 15.4985H14.2263C14.8345 15.4985 15.3247 14.9997 15.3155 14.3916C15.2988 13.2824 15.2765 11.5614 15.2765 10.2871C15.2765 9.01161 15.2988 7.28867 15.3155 6.17966C15.3247 5.57305 14.8367 5.0757 14.23 5.07571L9.99998 5.07576L5.93783 5.07571Z"
      fill="currentColor"
    />
  </svg>
);

export const FamilyAccountsButton = ({ onClick }: { onClick: () => void }) => {
  const locales = useLocales();
  return (
    <ButtonContainer onClick={onClick}>
      <ButtonContainerInner>
        <IconContainer>
          <FamilyLogo />
        </IconContainer>
        <InnerContainer>
          <FitText>{locales.continueWithFamily}</FitText>
        </InnerContainer>
      </ButtonContainerInner>
    </ButtonContainer>
  );
};
</file>

<file path="packages/connectkit/src/components/Common/FamilyAccountsButton/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';

export const ButtonContainerInner = styled(motion.div)`
  display: flex;
  align-items: center;
  justify-content: center;
  inset: 0;
  height: 100%;
`;
export const ButtonContainer = styled.button`
  --color: #ffffff;
  --background: var(--ck-family-accounts-brand);
  --box-shadow: var(--ck-primary-button-box-shadow);
  --border-radius: var(--ck-primary-button-border-radius);
  --font-weight: var(--ck-primary-button-font-weight, 500);

  --hover-color: var(--ck-button-primary-hover-color, var(--color));
  --hover-background: var(
    --ck-primary-button-hover-background,
    var(--background)
  );
  --hover-box-shadow: var(
    --ck-primary-button-hover-box-shadow,
    var(--box-shadow)
  );
  --hover-border-radius: var(
    --ck-primary-button-hover-border-radius,
    var(--border-radius)
  );
  --hover-font-weight: var(--ck-primary-button-font-weight, var(--font-weight));

  appearance: none;
  cursor: pointer;
  user-select: none;
  min-width: fit-content;
  width: 100%;
  display: block;
  text-align: center;
  height: 48px;
  margin: 18px 0 2px;
  line-height: 48px;
  padding: 0 4px;
  font-size: 16px;
  font-weight: var(--font-weight, 500);
  text-decoration: none;
  white-space: nowrap;
  transition: 100ms ease;
  transition-property: box-shadow, background-color;
  color: var(--color);
  background: var(--background);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  will-change: transform, box-shadow, background-color, color;
`;

export const InnerContainer = styled.div`
  transform: translateZ(0); // Shifting fix
  position: relative;
  display: inline-block;
  vertical-align: middle;
  max-width: calc(100% - 42px);
  transition: opacity 300ms ease;
`;

export const IconContainer = styled.div`
  position: relative;
  display: inline-block;
  vertical-align: middle;
  max-width: 20px;
  max-height: 20px;
  margin: 0 12px 0 0;
  svg {
    display: block;
    position: relative;
    max-width: 100%;
    height: auto;
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/FitText/index.tsx">
import React from 'react';
import useFitText from '../../../hooks/useFitText';

const FitText = ({ children }: { children: React.ReactNode }) => {
  const [ready, setReady] = React.useState(false);
  const { fontSize, ref: textRef } = useFitText({
    logLevel: 'none',
    maxFontSize: 100,
    minFontSize: 70,
    onStart: () => setReady(true),
    onFinish: () => setReady(true),
  });
  return (
    <div
      ref={textRef}
      style={{
        visibility: ready ? 'visible' : 'hidden',
        fontSize: `${fontSize}%`,
        maxHeight: '100%',
        maxWidth: '100%',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
      }}
    >
      {children}
    </div>
  );
};
FitText.displayName = 'FitText';

export default FitText;
</file>

<file path="packages/connectkit/src/components/Common/LazyImage/index.tsx">
import React, { useEffect, useRef, useState } from 'react';

const LazyImage: React.FC<{
  src: string;
  alt?: string;
  width?: number;
  height?: number;
}> = ({ src, alt, width, height }) => {
  const imageRef = useRef<any>(null);
  const [loaded, setLoaded] = useState(true);

  useEffect(() => {
    if (
      !(
        imageRef.current &&
        imageRef.current.complete &&
        imageRef.current.naturalHeight !== 0
      )
    ) {
      setLoaded(false);
    }
  }, [src]);

  return (
    <div
      style={{
        width,
        height,
        background: 'rgba(0,0,0,0.02)',
        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,0.02)',
      }}
    >
      <img
        ref={imageRef}
        src={src}
        alt={alt}
        width={width}
        height={height}
        onLoad={() => setLoaded(true)}
        style={{ transition: 'opacity 0.2s ease', opacity: loaded ? 1 : 0 }}
      />
    </div>
  );
};

export default LazyImage;
</file>

<file path="packages/connectkit/src/components/Common/Logo/index.tsx">
import React from 'react';

import { LogoContainer, Image, Squircle } from './styles';

const Logo: React.FC<{
  src: React.ReactNode;
  background?: string;
  width?: number;
  height?: number;
}> = ({ src, background, width, height }) => {
  return (
    <LogoContainer $width={width} $height={height}>
      <Image>{src}</Image>
      <Squircle
        width="60"
        height="60"
        viewBox="0 0 60 60"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M0 25.6C0 16.6392 0 12.1587 1.7439 8.73615C3.27787 5.72556 5.72556 3.27787 8.73615 1.7439C12.1587 0 16.6392 0 25.6 0H34.4C43.3608 0 47.8413 0 51.2638 1.7439C54.2744 3.27787 56.7221 5.72556 58.2561 8.73615C60 12.1587 60 16.6392 60 25.6V34.4C60 43.3608 60 47.8413 58.2561 51.2638C56.7221 54.2744 54.2744 56.7221 51.2638 58.2561C47.8413 60 43.3608 60 34.4 60H25.6C16.6392 60 12.1587 60 8.73615 58.2561C5.72556 56.7221 3.27787 54.2744 1.7439 51.2638C0 47.8413 0 43.3608 0 34.4V25.6Z"
          fill={background}
        />
      </Squircle>
    </LogoContainer>
  );
};

export default Logo;
</file>

<file path="packages/connectkit/src/components/Common/Logo/styles.ts">
import styled from './../../../styles/styled';

export const LogoContainer = styled.div<{ $width?: number; $height?: number }>`
  position: relative;
  width: ${({ $width }) => $width + 'px' || '100%'};
  height: ${({ $height }) => $height + 'px' || '100%'};
`;
export const Squircle = styled.svg`
  z-index: 1;
  position: relative;
  display: block;
`;
export const Image = styled.div`
  z-index: 2;
  position: absolute;
  inset: 0;
  display: block;
  overflow: hidden;
  svg,
  img {
    display: block;
    position: relative;
    width: 100%;
    height: 100%;
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/Modal/index.tsx">
import React, { useCallback, useEffect, useRef, useState } from 'react';

import { AnimatePresence, motion, Variants } from 'framer-motion';

import { ResetContainer } from '../../../styles';
import Portal from '../Portal';

import {
  flattenChildren,
  isWalletConnectConnector,
  isMobile,
} from '../../../utils';

import {
  Container,
  BoxContainer,
  ModalContainer,
  PageContainer,
  PageContents,
  ControllerContainer,
  InnerContainer,
  BackgroundOverlay,
  CloseButton,
  BackButton,
  InfoButton,
  ModalHeading,
  TextWithHr,
  ErrorMessage,
  DisclaimerBackground,
  Disclaimer,
  SiweButton,
  SignInTooltip,
} from './styles';

import { routes, useContext } from '../../ConnectKit';
import useLockBodyScroll from '../../../hooks/useLockBodyScroll';

import { useTransition } from 'react-transition-state';
import FocusTrap from '../../../hooks/useFocusTrap';
import usePrevious from '../../../hooks/usePrevious';
import { CustomTheme } from '../../../types';
import { useThemeContext } from '../../ConnectKitThemeProvider/ConnectKitThemeProvider';
import { useAccount, useSwitchChain } from 'wagmi';
import { AuthIcon } from '../../../assets/icons';
import { useSIWE } from '../../../siwe';
import useLocales from '../../../hooks/useLocales';
import FitText from '../FitText';
import { useWallet } from '../../../wallets/useWallets';

const ProfileIcon = ({ isSignedIn }: { isSignedIn?: boolean }) => (
  <div style={{ position: 'relative' }}>
    {isSignedIn ? (
      <AuthIcon
        style={{
          bottom: -1,
          right: -1,
        }}
      />
    ) : (
      <div
        style={{
          zIndex: 2,
          position: 'absolute',
          top: -2,
          right: -2,
          background: '#1A88F8',
          borderRadius: 8,
          boxShadow: '0 0 0 2px var(--ck-body-background)',
          width: 8,
          height: 8,
        }}
      />
    )}
    <svg
      aria-hidden="true"
      width="20"
      height="20"
      viewBox="0 0 20 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      style={{ overflow: 'visible' }}
    >
      <circle cx="10" cy="10" r="9" stroke="currentColor" strokeWidth="2" />
      <path
        d="M16.5 16.775C14.8618 15.0649 12.5552 14 10 14C7.44477 14 5.13825 15.0649 3.5 16.775"
        stroke="currentColor"
        strokeWidth="2"
      />
      <circle cx="10" cy="8" r="3" stroke="currentColor" strokeWidth="2" />
    </svg>
  </div>
);
const InfoIcon = ({ ...props }) => (
  <svg
    aria-hidden="true"
    width="22"
    height="22"
    viewBox="0 0 22 22"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M20 11C20 15.9706 15.9706 20 11 20C6.02944 20 2 15.9706 2 11C2 6.02944 6.02944 2 11 2C15.9706 2 20 6.02944 20 11ZM22 11C22 17.0751 17.0751 22 11 22C4.92487 22 0 17.0751 0 11C0 4.92487 4.92487 0 11 0C17.0751 0 22 4.92487 22 11ZM11.6445 12.7051C11.6445 13.1348 11.3223 13.4678 10.7744 13.4678C10.2266 13.4678 9.92578 13.1885 9.92578 12.6191V12.4795C9.92578 11.4268 10.4951 10.8574 11.2686 10.3203C12.2031 9.67578 12.665 9.32129 12.665 8.59082C12.665 7.76367 12.0205 7.21582 11.043 7.21582C10.3232 7.21582 9.80762 7.57031 9.45312 8.16113C9.38282 8.24242 9.32286 8.32101 9.2667 8.39461C9.04826 8.68087 8.88747 8.8916 8.40039 8.8916C8.0459 8.8916 7.66992 8.62305 7.66992 8.15039C7.66992 7.96777 7.70215 7.7959 7.75586 7.61328C8.05664 6.625 9.27051 5.75488 11.1182 5.75488C12.9336 5.75488 14.5234 6.71094 14.5234 8.50488C14.5234 9.7832 13.7822 10.417 12.7402 11.1045C11.999 11.5986 11.6445 11.9746 11.6445 12.5762V12.7051ZM11.9131 15.5625C11.9131 16.1855 11.376 16.6797 10.7529 16.6797C10.1299 16.6797 9.59277 16.1748 9.59277 15.5625C9.59277 14.9395 10.1191 14.4453 10.7529 14.4453C11.3867 14.4453 11.9131 14.9287 11.9131 15.5625Z"
      fill="currentColor"
    />
  </svg>
);
const CloseIcon = ({ ...props }) => (
  <motion.svg
    width={14}
    height={14}
    viewBox="0 0 14 14"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      d="M1 13L13 1M1 1L13 13"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
    />
  </motion.svg>
);
const BackIcon = ({ ...props }) => (
  <motion.svg
    width={9}
    height={16}
    viewBox="0 0 9 16"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      d="M8 1L1 8L8 15"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </motion.svg>
);

const contentTransitionDuration = 0.22;

export const contentVariants: Variants = {
  initial: {
    //willChange: 'transform,opacity',
    zIndex: 2,
    opacity: 0,
  },
  animate: {
    opacity: 1,
    scale: 1,
    transition: {
      duration: contentTransitionDuration * 0.75,
      delay: contentTransitionDuration * 0.25,
      ease: [0.26, 0.08, 0.25, 1],
    },
  },
  exit: {
    zIndex: 1,
    opacity: 0,
    pointerEvents: 'none',
    position: 'absolute',
    left: ['50%', '50%'],
    x: ['-50%', '-50%'],
    transition: {
      duration: contentTransitionDuration,
      ease: [0.26, 0.08, 0.25, 1],
    },
  },
};

type ModalProps = {
  open?: boolean;
  pages: any;
  pageId: string;
  positionInside?: boolean;
  inline?: boolean;
  onClose?: () => void;
  onBack?: () => void;
  onInfo?: () => void;

  demo?: {
    theme: string;
    mode?: string;
    customTheme: CustomTheme;
  };
};
const Modal: React.FC<ModalProps> = ({
  open,
  pages,
  pageId,
  positionInside,
  inline,
  demo,
  onClose,
  onBack,
  onInfo,
}) => {
  const context = useContext();
  const themeContext = useThemeContext();
  const mobile = isMobile();
  const { isSignedIn, reset } = useSIWE();

  const wallet = useWallet(context.connector?.id);

  const walletInfo = {
    name: wallet?.name,
    shortName: wallet?.shortName ?? wallet?.name,
    icon: wallet?.iconConnector ?? wallet?.icon,
    iconShape: wallet?.iconShape ?? 'circle',
    iconShouldShrink: wallet?.iconShouldShrink,
  };

  const locales = useLocales({
    CONNECTORNAME: walletInfo?.name,
  });

  const [state, setOpen] = useTransition({
    timeout: mobile ? 160 : 160, // different animations, 10ms extra to avoid final-frame drops
    preEnter: true,
    mountOnEnter: true,
    unmountOnExit: true,
  });
  const mounted = !(state === 'exited' || state === 'unmounted');
  const rendered = state === 'preEnter' || state !== 'exiting';
  const currentDepth =
    context.route === routes.CONNECTORS
      ? 0
      : context.route === routes.DOWNLOAD
      ? 2
      : 1;
  const prevDepth = usePrevious(currentDepth, currentDepth);
  if (!positionInside) useLockBodyScroll(mounted);

  const prevPage = usePrevious(pageId, pageId);

  useEffect(() => {
    setOpen(open);
    if (open) setInTransition(undefined);
  }, [open]);

  const [dimensions, setDimensions] = useState<{
    width: string | undefined;
    height: string | undefined;
  }>({
    width: undefined,
    height: undefined,
  });
  const [inTransition, setInTransition] = useState<boolean | undefined>(
    undefined
  );

  // Calculate new content bounds
  const updateBounds = (node: any) => {
    const bounds = {
      width: node?.offsetWidth,
      height: node?.offsetHeight,
    };
    setDimensions({
      width: `${bounds?.width}px`,
      height: `${bounds?.height}px`,
    });
  };

  let blockTimeout: ReturnType<typeof setTimeout>;
  const contentRef = useCallback(
    (node: any) => {
      if (!node) return;
      ref.current = node;

      // Avoid transition mixups
      setInTransition(inTransition === undefined ? false : true);
      clearTimeout(blockTimeout);
      blockTimeout = setTimeout(() => setInTransition(false), 360);

      // Calculate new content bounds
      updateBounds(node);
    },
    [open, inTransition]
  );

  // Update layout on chain/network switch to avoid clipping
  const { chain } = useAccount();
  const { switchChain } = useSwitchChain();

  const ref = useRef<any>(null);
  useEffect(() => {
    if (ref.current) updateBounds(ref.current);
  }, [chain, switchChain, mobile, isSignedIn, context.options, context.resize]);

  useEffect(() => {
    if (!mounted) {
      setDimensions({
        width: undefined,
        height: undefined,
      });
      return;
    }

    const listener = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && onClose) onClose();
    };
    document.addEventListener('keydown', listener);
    return () => {
      document.removeEventListener('keydown', listener);
    };
  }, [mounted, onClose]);

  const dimensionsCSS = {
    '--height': dimensions.height,
    '--width': dimensions.width,
  } as React.CSSProperties;

  function shouldUseQrcode() {
    if (!wallet) return false; // Fail states are shown in the injector flow

    const useInjector = !wallet.getWalletConnectDeeplink || wallet.isInstalled;
    return !useInjector;
  }

  function getHeading() {
    switch (context.route) {
      case routes.ABOUT:
        return locales.aboutScreen_heading;
      case routes.CONNECT:
        if (shouldUseQrcode()) {
          return isWalletConnectConnector(wallet?.connector?.id)
            ? locales.scanScreen_heading
            : locales.scanScreen_heading_withConnector;
        } else {
          return walletInfo?.name;
        }
      case routes.CONNECTORS:
        return locales.connectorsScreen_heading;
      case routes.MOBILECONNECTORS:
        return locales.mobileConnectorsScreen_heading;
      case routes.DOWNLOAD:
        return locales.downloadAppScreen_heading;
      case routes.ONBOARDING:
        return locales.onboardingScreen_heading;
      case routes.PROFILE:
        return locales.profileScreen_heading;
      case routes.SWITCHNETWORKS:
        return locales.switchNetworkScreen_heading;
      case routes.SIGNINWITHETHEREUM:
        return isSignedIn
          ? locales.signInWithEthereumScreen_signedIn_heading
          : locales.signInWithEthereumScreen_signedOut_heading;
      default:
        return '';
    }
  }

  const Content = (
    <ResetContainer
      $useTheme={demo?.theme ?? themeContext.theme}
      $useMode={demo?.mode ?? themeContext.mode}
      $customTheme={demo?.customTheme ?? themeContext.customTheme}
    >
      <ModalContainer
        role="dialog"
        style={{
          pointerEvents: rendered ? 'auto' : 'none',
          position: positionInside ? 'absolute' : undefined,
        }}
      >
        {!inline && (
          <BackgroundOverlay
            $active={rendered}
            onClick={onClose}
            $blur={context.options?.overlayBlur}
          />
        )}
        <Container
          style={dimensionsCSS}
          initial={false}
          // transition={{
          //   ease: [0.2555, 0.1111, 0.2555, 1.0001],
          //   duration: !positionInside && state !== 'entered' ? 0 : 0.24,
          // }}
        >
          <div
            style={{
              pointerEvents: inTransition ? 'all' : 'none', // Block interaction while transitioning
              position: 'absolute',
              top: 0,
              bottom: 0,
              left: '50%',
              transform: 'translateX(-50%)',
              width: 'var(--width)',
              zIndex: 9,
              transition: 'width 200ms ease',
            }}
          />
          <BoxContainer className={`${rendered && 'active'}`}>
            <AnimatePresence initial={false}>
              {context.options?.disclaimer &&
                context.route === routes.CONNECTORS && (
                  <DisclaimerBackground
                    initial={{
                      opacity: 0,
                    }}
                    animate={{
                      opacity: 1,
                    }}
                    exit={{ opacity: 0 }}
                    transition={{
                      delay: 0,
                      duration: 0.2,
                      ease: [0.25, 0.1, 0.25, 1.0],
                    }}
                  >
                    <Disclaimer>
                      <div>{context.options?.disclaimer}</div>
                    </Disclaimer>
                  </DisclaimerBackground>
                )}
            </AnimatePresence>
            <AnimatePresence initial={false}>
              {context.errorMessage && (
                <ErrorMessage
                  initial={{ y: '10%', x: '-50%' }}
                  animate={{ y: '-100%' }}
                  exit={{ y: '100%' }}
                  transition={{ duration: 0.2, ease: 'easeInOut' }}
                >
                  <span>{context.errorMessage}</span>
                  <div
                    onClick={() => context.displayError(null)}
                    style={{
                      position: 'absolute',
                      right: 24,
                      top: 24,
                      cursor: 'pointer',
                    }}
                  >
                    <CloseIcon />
                  </div>
                </ErrorMessage>
              )}
            </AnimatePresence>
            <ControllerContainer>
              {onClose && (
                <CloseButton
                  aria-label={flattenChildren(locales.close).toString()}
                  onClick={onClose}
                >
                  <CloseIcon />
                </CloseButton>
              )}
              <div
                style={{
                  position: 'absolute',
                  top: 23,
                  left: 20,
                  width: 32,
                  height: 32,
                }}
              >
                <AnimatePresence>
                  {onBack ? (
                    <BackButton
                      disabled={inTransition}
                      aria-label={flattenChildren(locales.back).toString()}
                      key="backButton"
                      onClick={onBack}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      transition={{
                        duration: mobile ? 0 : 0.1,
                        delay: mobile ? 0.01 : 0,
                      }}
                    >
                      <BackIcon />
                    </BackButton>
                  ) : context.route === routes.PROFILE &&
                    context.signInWithEthereum ? (
                    <>
                      {!isSignedIn && !context.options?.hideTooltips && (
                        <motion.div
                          style={{
                            position: 'absolute',
                            inset: 0,
                            pointerEvents: 'none',
                          }}
                          initial={{ opacity: 0, scale: 0.8 }}
                          animate={{
                            opacity: 1,
                            scale: 1,
                            transition: { delay: 0.5, duration: 0.2 },
                          }}
                          exit={{
                            opacity: 0,
                            scale: 0.6,
                            transition: {
                              delay: 0,
                              duration: mobile ? 0 : 0.1,
                            },
                          }}
                        >
                          <SignInTooltip>
                            {locales.signInWithEthereumScreen_tooltip}
                          </SignInTooltip>
                        </motion.div>
                      )}
                      <SiweButton
                        disabled={inTransition}
                        aria-label={
                          locales.signInWithEthereumScreen_signedOut_heading
                        }
                        key="siweButton"
                        onClick={() => {
                          reset();
                          context.setRoute(routes.SIGNINWITHETHEREUM);
                        }}
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        transition={{
                          duration: mobile ? 0 : 0.1,
                          delay: mobile ? 0.01 : 0,
                        }}
                      >
                        <ProfileIcon isSignedIn={isSignedIn} />
                      </SiweButton>
                    </>
                  ) : (
                    onInfo &&
                    !context.options?.hideQuestionMarkCTA && (
                      <InfoButton
                        disabled={inTransition}
                        aria-label={flattenChildren(
                          locales.moreInformation
                        ).toString()}
                        key="infoButton"
                        onClick={onInfo}
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        transition={{
                          duration: mobile ? 0 : 0.1,
                          delay: mobile ? 0.01 : 0,
                        }}
                      >
                        <InfoIcon />
                      </InfoButton>
                    )
                  )}
                </AnimatePresence>
              </div>
            </ControllerContainer>

            <ModalHeading>
              <AnimatePresence>
                <motion.div
                  style={{
                    position: 'absolute',
                    top: 0,
                    bottom: 0,
                    left: 52,
                    right: 52,
                    display: 'flex',
                    //alignItems: 'center',
                    justifyContent: 'center',
                  }}
                  key={`${context.route}-${isSignedIn ? 'signedIn' : ''}`}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{
                    duration: mobile ? 0 : 0.17,
                    delay: mobile ? 0.01 : 0,
                  }}
                >
                  <FitText>{getHeading()}</FitText>
                </motion.div>
              </AnimatePresence>
            </ModalHeading>

            <InnerContainer>
              {Object.keys(pages).map((key) => {
                const page = pages[key];
                return (
                  // TODO: We may need to use the follow check avoid unnecessary computations, but this causes a bug where the content flashes
                  // (key === pageId || key === prevPage) && (
                  <Page
                    key={key}
                    open={key === pageId}
                    initial={!positionInside && state !== 'entered'}
                    enterAnim={
                      key === pageId
                        ? currentDepth > prevDepth
                          ? 'active-scale-up'
                          : 'active'
                        : ''
                    }
                    exitAnim={
                      key !== pageId
                        ? currentDepth < prevDepth
                          ? 'exit-scale-down'
                          : 'exit'
                        : ''
                    }
                  >
                    <PageContents
                      key={`inner-${key}`}
                      ref={contentRef}
                      style={{
                        pointerEvents:
                          key === pageId && rendered ? 'auto' : 'none',
                      }}
                    >
                      {page}
                    </PageContents>
                  </Page>
                );
              })}
            </InnerContainer>
          </BoxContainer>
        </Container>
      </ModalContainer>
    </ResetContainer>
  );
  return (
    <>
      {mounted && (
        <>
          {positionInside ? (
            Content
          ) : (
            <>
              {
                <Portal>
                  <FocusTrap>{Content}</FocusTrap>
                </Portal>
              }
            </>
          )}
        </>
      )}
    </>
  );
};

type PageProps = {
  children?: React.ReactNode;
  open?: boolean;
  initial: boolean;
  prevDepth?: number;
  currentDepth?: number;
  enterAnim?: string;
  exitAnim?: string;
};

const Page: React.FC<PageProps> = ({
  children,
  open,
  initial,
  prevDepth,
  currentDepth,
  enterAnim,
  exitAnim,
}) => {
  const [state, setOpen] = useTransition({
    timeout: 400,
    preEnter: true,
    initialEntered: open,
    mountOnEnter: true,
    unmountOnExit: true,
  });
  const mounted = !(state === 'exited' || state === 'unmounted');
  const rendered = state === 'preEnter' || state !== 'exiting';

  useEffect(() => {
    setOpen(open);
  }, [open]);

  if (!mounted) return null;

  return (
    <PageContainer
      className={`${rendered ? enterAnim : exitAnim}`}
      style={{
        animationDuration: initial ? '0ms' : undefined,
        animationDelay: initial ? '0ms' : undefined,
      }}
    >
      {children}
    </PageContainer>
  );
};

export const OrDivider = ({
  children,
  hideHr,
}: {
  children?: React.ReactNode;
  hideHr?: boolean;
}) => {
  const locales = useLocales();
  return (
    <TextWithHr $disableHr={hideHr}>
      <span>{children ?? locales.or}</span>
    </TextWithHr>
  );
};

export default Modal;
</file>

<file path="packages/connectkit/src/components/Common/Modal/styles.ts">
import styled from './../../../styles/styled';
import { keyframes } from 'styled-components';
import { motion } from 'framer-motion';
import defaultTheme from '../../../constants/defaultTheme';

export const ErrorMessage = styled(motion.div)`
  z-index: -1;
  pointer-events: auto;
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  width: var(--width);
  top: 64px;
  color: #fff;
  font-size: 14px;
  line-height: 20px;
  font-weight: 500;
  background: var(--ck-body-color-danger);
  border-radius: 20px;
  padding: 24px 46px 82px 24px;
  transition: width var(--duration) var(--ease);
  a {
    font-weight: 700;
    text-decoration: underline;
  }
  code {
    font-size: 0.9em;
    display: inline-block;
    font-family: monospace;
    margin: 1px;
    padding: 0 4px;
    border-radius: 8px;
    font-weight: bold;
    background: rgba(255, 255, 255, 0.1);
  }
`;

const FadeIn = keyframes`
from { opacity: 0; }
  to { opacity: 1; }
`;

const FadeInScaleUp = keyframes`
from { opacity: 0; transform: scale(0.85); }
  to { opacity: 1; transform: scale(1); }
`;

const FadeInScaleDown = keyframes`
from { opacity: 0; transform: scale(1.1); }
  to { opacity: 1; transform: scale(1); }
`;

const FadeOut = keyframes`
from { opacity: 1; }
  to { opacity: 0; }
`;

const FadeOutScaleUp = keyframes`
from { opacity: 1; transform: scale(1); }
  to { opacity: 0; transform: scale(1.1); }
`;

const FadeOutScaleDown = keyframes`
from { opacity: 1; transform: scale(1); }
  to { opacity: 0; transform: scale(0.85); }
`;

export const PageContent = styled(motion.div)`
  max-width: 100%;
  width: 295px;
  padding-top: 48px;
`;

export const TextWithHr = styled(motion.div)<{
  $disableHr?: boolean;
}>`
  user-select: none;
  position: relative;
  display: block;
  text-align: center;
  color: var(--ck-body-color-muted);
  font-size: 15px;
  font-weight: 400;
  line-height: 21px;
  span {
    z-index: 2;
    position: relative;
    display: inline-block;
    user-select: none;
    pointer-events: none;
    padding: 0 14px;
    background: var(--ck-body-background);
    transition: background-color 200ms ease;
  }
  ${(props) =>
    !props.$disableHr &&
    `
  &:before {
    z-index: 2;
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    transform: translateY(-1px);
    background: var(--ck-body-divider);
    box-shadow: var(--ck-body-divider-box-shadow);
  }
    `}
`;
export const ModalHeading = styled(motion.div)`
  z-index: 3;
  pointer-events: none;
  user-select: none;
  position: absolute;
  top: 25px;
  left: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 26px;
  transform: translateX(-50%);
  width: var(--width);
  text-align: center;
  font-size: 17px;
  line-height: 20px;
  font-weight: var(--ck-modal-heading-font-weight, 600);
  color: var(--ck-body-color);
  span {
    display: inline-block;
  }
`;

export const ModalContentContainer = styled(motion.div)`
  position: relative;
  padding: 0;
`;
export const ModalContent = styled(motion.div)`
  left: 0;
  right: 0;
  text-align: center;
  display: flex;
  flex-direction: column;
  gap: 12px;
  padding: 0 0 16px;

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    display: block;
  }
`;
export const ModalH1 = styled(motion.h1)<{
  $error?: boolean;
  $valid?: boolean;
  $small?: boolean;
}>`
  margin: 0;
  padding: 0;
  line-height: ${(props) => (props.$small ? 20 : 22)}px;
  font-size: ${(props) => (props.$small ? 17 : 19)}px;
  font-weight: var(--ck-modal-h1-font-weight, 600);
  color: ${(props) => {
    if (props.$error) return 'var(--ck-body-color-danger)';
    if (props.$valid) return 'var(--ck-body-color-valid)';
    return 'var(--ck-body-color)';
  }};
  > svg {
    position: relative;
    top: -2px;
    display: inline-block;
    vertical-align: middle;
    margin-right: 6px;
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    margin-bottom: 6px;
    font-size: 17px;
  }
`;

export const ModalBody = styled.div`
  font-size: 16px;
  font-weight: 400;
  line-height: 21px;
  color: var(--ck-body-color-muted);
  strong {
    font-weight: 500;
    color: var(--ck-body-color);
  }
`;

export const ModalBodySmall = styled.div`
  padding: 0 12px;
  font-size: 13px;
  font-weight: 400;
  line-height: 16px;
  color: var(--ck-body-color-muted);
  strong {
    font-weight: 500;
    color: var(--ck-body-color);
  }
`;

export const BackgroundOverlay = styled(motion.div)<{
  $active: boolean;
  $blur?: number;
}>`
  z-index: 1;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--ck-overlay-background, rgba(71, 88, 107, 0.24));
  backdrop-filter: ${(props) =>
    props.$blur
      ? `blur(${props.$blur}px)`
      : 'var(--ck-overlay-backdrop-filter, none)'};
  opacity: 0;
  animation: ${(props) => (props.$active ? FadeIn : FadeOut)} 150ms ease-out
    both;
`;

const BoxIn = keyframes`
  from{ opacity: 0; transform: scale(0.97); }
  to{ opacity: 1; transform: scale(1); }
`;
const BoxOut = keyframes`
  from{ opacity: 1; transform: scale(1); }
  to{ opacity: 0; transform: scale(0.97); }
`;

const MobileBoxIn = keyframes`
  from { transform: translate3d(0, 100%, 0); }
  to { transform: translate3d(0, 0%, 0); }
`;

const MobileBoxOut = keyframes`
  from { opacity: 1; }
  to { opacity: 0; }
`;

export const BoxContainer = styled(motion.div)`
  z-index: 2;
  position: relative;
  color: var(--ck-body-color);

  animation: 150ms ease both;
  animation-name: ${BoxOut};
  &.active {
    animation-name: ${BoxIn};
  }

  &:before {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    width: var(--width);
    height: var(--height);
    transform: translateX(-50%);
    backface-visibility: hidden;
    transition: all 200ms ease;
    border-radius: var(--ck-border-radius, 20px);
    background: var(--ck-body-background);
    box-shadow: var(--ck-modal-box-shadow);
  }

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    animation-name: ${MobileBoxOut};
    animation-duration: 130ms;
    animation-timing-function: ease;

    &.active {
      animation-name: ${MobileBoxIn};
      animation-duration: 300ms;
      animation-delay: 32ms;
      animation-timing-function: cubic-bezier(0.15, 1.15, 0.6, 1);
    }

    &:before {
      width: 100%;
      transition: 0ms height cubic-bezier(0.15, 1.15, 0.6, 1);
      will-change: height;
    }
  }
`;
export const ControllerContainer = styled(motion.div)`
  z-index: 3;
  position: absolute;
  top: 0;
  left: 50%;
  height: 64px;
  transform: translateX(-50%);
  backface-visibility: hidden;
  width: var(--width);
  transition: 0.2s ease width;
  pointer-events: auto;
  //border-bottom: 1px solid var(--ck-body-divider);
`;

export const InnerContainer = styled(motion.div)`
  position: relative;
  overflow: hidden;
  height: var(--height);
  transition: 0.2s ease height;
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    transition: 0ms height cubic-bezier(0.15, 1.15, 0.6, 1);
    /* animation-delay: 34ms; */
  }
`;

export const PageContainer = styled(motion.div)`
  z-index: 2;
  position: relative;
  top: 0;
  left: 50%;
  margin-left: calc(var(--width) / -2);
  width: var(--width);
  /* left: 0; */
  /* width: 100%; */
  display: flex;
  justify-content: center;
  align-items: center;
  transform-origin: center center;
  animation: 200ms ease both;

  &.active {
    animation-name: ${FadeInScaleDown};
  }
  &.active-scale-up {
    animation-name: ${FadeInScaleUp};
  }
  &.exit-scale-down {
    z-index: 1;
    pointer-events: none;
    position: absolute;
    /* top: 0; */
    /* left: 0; */
    animation-name: ${FadeOutScaleDown};
  }
  &.exit {
    z-index: 1;
    pointer-events: none;
    position: absolute;
    /* top: 0; */
    /* left: 0; */
    /* left: 50%; */
    /* transform: translateX(-50%); */
    animation-name: ${FadeOutScaleUp};
    animation-delay: 16.6667ms;
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    /* animation: 0ms ease both; */
    /* animation-delay: 35ms; */
    animation: 0ms cubic-bezier(0.15, 1.15, 0.6, 1) both;

    &.active {
      animation-name: ${FadeIn};
    }
    &.active-scale-up {
      animation-name: ${FadeIn};
    }
    &.exit-scale-down {
      z-index: 3;
      animation-name: ${FadeOut};
    }
    &.exit {
      z-index: 3;
      animation-name: ${FadeOut};
      animation-delay: 0ms;
    }
  }
`;
export const PageContents = styled(motion.div)`
  margin: 0 auto;
  width: fit-content;
  padding: 29px 24px 24px;
  backface-visibility: hidden;
`;

export const ModalContainer = styled.div`
  z-index: 2147483646; // z-index set one below max (2147483647) for if we wish to layer things ontop of the modal in a seperate Portal
  position: fixed;
  inset: 0;
`;

export const CloseButton = styled(motion.button)`
  z-index: 3;
  cursor: pointer;
  position: absolute;
  top: 22px;
  right: 17px;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 16px;
  padding: 0;
  margin: 0;
  color: var(--ck-body-action-color);
  background: var(--ck-body-background);
  transition: background-color 200ms ease, transform 100ms ease;
  /* will-change: transform; */
  svg {
    display: block;
  }

  &:hover {
    background: var(--ck-body-background-secondary);
  }
  &:active {
    transform: scale(0.9);
  }
`;

export const SiweButton = styled(motion.button)`
  z-index: 3;
  position: absolute;
  inset: 0;
  width: 100%; // FireFox fix
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 16px;
  padding: 0;
  margin: 0;
  color: var(--ck-body-action-color);
  background: var(--ck-body-background);
  transition: background-color 200ms ease, transform 100ms ease;
  /* will-change: transform; */
  svg {
    display: block;
    position: relative;
  }

  &:enabled {
    cursor: pointer;
    &:hover {
      background: var(--ck-body-background-secondary);
    }
    &:active {
      transform: scale(0.9);
    }
  }
`;

export const BackButton = styled(motion.button)`
  z-index: 3;
  position: absolute;
  inset: 0;
  width: 100%; // FireFox fix
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 16px;
  padding: 0;
  margin: 0;
  color: var(--ck-body-action-color);
  background: var(--ck-body-background);
  transition: background-color 200ms ease, transform 100ms ease;
  /* will-change: transform; */
  svg {
    display: block;
    position: relative;
    left: -1px;
  }

  &:enabled {
    cursor: pointer;
    &:hover {
      background: var(--ck-body-background-secondary);
    }
    &:active {
      transform: scale(0.9);
    }
  }
`;

export const InfoButton = styled(motion.button)`
  z-index: 3;
  position: absolute;
  inset: 0;
  width: 100%; // FireFox fix
  transform: translateX(-1px);
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 16px;
  padding: 0;
  margin: 0;
  color: var(--ck-body-action-color);
  background: var(--ck-body-background);
  transition: background-color 200ms ease, transform 100ms ease;
  /* will-change: transform; */
  svg {
    display: block;
    position: relative;
  }
  &:enabled {
    cursor: pointer;
    &:hover {
      background: var(--ck-body-background-secondary);
    }
    &:active {
      transform: scale(0.9);
    }
  }
`;

export const Container = styled(motion.div)`
  --ease: cubic-bezier(0.25, 0.1, 0.25, 1);
  --duration: 200ms;
  --transition: height var(--duration) var(--ease),
    width var(--duration) var(--ease);
  z-index: 3;
  display: block;
  pointer-events: none;
  position: absolute;
  left: 50%;
  top: 50%;
  width: 100%;
  transform: translate3d(-50%, -50%, 0);
  backface-visibility: hidden;
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    pointer-events: auto;
    left: 0;
    top: auto;
    bottom: -5px;
    transform: none;
    ${BoxContainer} {
      max-width: 448px;
      margin: 0 auto;
      &:before {
        width: 100%;
        border-radius: var(--ck-border-radius, 30px)
          var(--ck-border-radius, 30px) 0 0;
      }
    }
    ${PageContainer} {
      left: 0;
      right: 0;
      margin: 0 auto;
      width: auto;
    }
    ${PageContent} {
      margin: 0 auto;
      width: 100% !important;
    }
    ${ModalHeading} {
      top: 29px;
    }
    ${ModalContent} {
      gap: 12px;
    }
    ${ModalBody} {
      margin: 0 auto;
      max-width: 295px;
    }
    ${PageContents} {
      width: 100%;
      padding: 31px 24px;
    }
    ${ControllerContainer} {
      width: 100%;
      top: 4px;
      border-bottom: 0;
    }
    ${CloseButton} {
      right: 22px;
    }
    ${BackButton} {
      top: -1px;
      left: -3px;
    }
    ${InfoButton} {
      top: -1px;
      left: -3px;
      svg {
        width: 65%;
        height: auto;
      }
    }
    ${CloseButton},
    ${BackButton},
    ${InfoButton} {
      // Quick hack for bigger tappable area on mobile
      transform: scale(1.4) !important;
      background: transparent !important;
      svg {
        transform: scale(0.8) !important;
      }
    }
  }
`;

export const Disclaimer = styled(motion.div)`
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 16px -24px -24px -24px;
  padding: 15px 40px 18px;
  font-size: var(--ck-body-disclaimer-font-size, 13px);
  font-weight: var(--ck-body-disclaimer-font-weight, 400);
  text-align: center;
  line-height: 19px;
  color: var(--ck-body-disclaimer-color, var(--ck-body-color-muted, inherit));

  & a {
    color: var(--ck-body-disclaimer-link-color, inherit);
    font-weight: var(--ck-body-disclaimer-font-weight, 400);
    text-decoration: none;
    transition: color 200ms ease;
    &:hover {
      color: var(--ck-body-disclaimer-link-hover-color, inherit);
    }
  }

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    margin: 24px -24px -26px -24px;
    padding: 20px 42px 22px 42px;
  }
`;

export const DisclaimerBackground = styled(motion.div)`
  pointer-events: all;
  z-index: 9;
  position: absolute;
  bottom: 0;
  left: 50%;
  width: var(--width);
  backface-visibility: hidden;
  transform: translateX(-50%);
  transform-origin: bottom center;

  border-radius: var(--ck-border-radius, 30px);
  border-top-left-radius: 0;
  border-top-right-radius: 0;
  transition: width 200ms ease;

  background: var(
    --ck-body-disclaimer-background,
    var(--ck-body-background-secondary)
  );
  box-shadow: var(--ck-body-disclaimer-box-shadow);

  ${Disclaimer} {
    margin: 0 !important;
    /* visibility: hidden; */
  }

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    border-radius: 0;
  }
`;

export const SignInTooltip = styled(motion.div)`
  z-index: 2;
  position: absolute;
  top: 100%;
  white-space: nowrap;
  padding: 8px 16px;
  color: #fff;
  font-size: 13px;
  line-height: 1.5;
  background: #1a88f8;
  border-radius: calc(var(--ck-border-radius) * 0.75);
  transform: translateY(8px) translateX(-48px);
  box-shadow: var(--ck-modal-box-shadow);
  &:before {
    content: '';
    position: absolute;
    box-shadow: var(--shadow);
    width: 18px;
    height: 18px;
    transform: translate(215%, -75%) rotate(45deg);
    background: inherit;
    border-radius: 3px 0 0 0;
  }

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    transform: translateY(8px) translateX(-16px);
    &:before {
      transform: translate(40%, -75%) rotate(45deg);
    }
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/Portal/index.tsx">
import { useEffect, useState, useRef } from 'react';
import { createPortal } from 'react-dom';
import { CONNECTKIT_VERSION } from '../../..';

const Portal = (props: any) => {
  props = {
    selector: '__CONNECTKIT__',
    ...props,
  };

  const { selector, children } = props;

  const ref = useRef<Element | null>(null);
  const [mounted, setMounted] = useState<boolean>(false);

  useEffect(() => {
    const selectorPrefixed = '#' + selector.replace(/^#/, '');
    ref.current = document.querySelector(selectorPrefixed);

    if (!ref.current) {
      const div = document.createElement('div');
      div.setAttribute('id', selector);
      div.setAttribute('data-connectkit', `${CONNECTKIT_VERSION}`);
      document.body.appendChild(div);
      ref.current = div;
    }

    setMounted(true);
  }, [selector]);

  if (!ref.current) return null;
  return mounted ? createPortal(children, ref.current) : null;
};

export default Portal;
</file>

<file path="packages/connectkit/src/components/Common/ScrollArea/index.tsx">
import React, { useEffect, useRef } from 'react';
import { MoreIndicator, ScrollAreaContainer, ScrollContainer } from './styles';
import useIsMobile from '../../../hooks/useIsMobile';

const ArrowDown = () => (
  <svg
    width="11"
    height="12"
    viewBox="0 0 11 12"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M5.49438 1L5.49438 11M5.49438 11L9.5 7M5.49438 11L1.5 7"
      stroke="currentColor"
      strokeWidth="1.75"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);
export const ScrollArea = ({
  children,
  height,
  backgroundColor,
  mobileDirection,
}: {
  children: React.ReactNode;
  height?: number;
  backgroundColor?: string;
  mobileDirection?: 'horizontal' | 'vertical';
}) => {
  const ref = useRef<HTMLDivElement>(null);
  const moreRef = useRef<HTMLDivElement>(null);

  const isMobile = useIsMobile();

  useEffect(() => {
    const el = ref.current;
    if (!el) return;

    // if ref is not scrollable, hide the more indicator
    if (el.scrollHeight > el.clientHeight) {
      if (moreRef.current) {
        moreRef.current.classList.remove('hide');
      }
    }

    const handleScroll = (e: any) => {
      const {
        scrollTop,
        scrollHeight,
        clientHeight,
        scrollLeft,
        scrollWidth,
        clientWidth,
      } = e.target;

      if (moreRef.current) {
        if (scrollTop > 0) {
          moreRef.current.classList.add('hide');
        }
      }

      if (scrollTop === 0 && scrollLeft === 0) {
        el.classList.add('scroll-start');
      } else {
        el.classList.remove('scroll-start');
      }

      if (
        scrollHeight - scrollTop === clientHeight &&
        scrollWidth - scrollLeft === clientWidth
      ) {
        el.classList.add('scroll-end');
      } else {
        el.classList.remove('scroll-end');
      }
    };

    el.addEventListener('scroll', handleScroll);
    handleScroll({ target: el });

    return () => {
      el.removeEventListener('scroll', handleScroll);
    };
  }, [ref.current]);

  return (
    <ScrollContainer>
      <ScrollAreaContainer
        ref={ref}
        $mobile={isMobile}
        $height={height}
        $backgroundColor={backgroundColor}
        $mobileDirection={mobileDirection}
      >
        {children}
      </ScrollAreaContainer>
      <MoreIndicator
        ref={moreRef}
        className="hide"
        onClick={() => {
          if (ref.current) {
            ref.current.scrollTo({
              top: ref.current.scrollHeight,
              behavior: 'smooth',
            });
          }
        }}
      >
        <span>
          <ArrowDown /> More Available
        </span>
      </MoreIndicator>
    </ScrollContainer>
  );
};
</file>

<file path="packages/connectkit/src/components/Common/ScrollArea/styles.ts">
import { css, keyframes } from 'styled-components';
import styled from '../../../styles/styled';

export const ScrollContainer = styled.div`
  position: relative;
`;
const fadeIn = keyframes`
0%{ opacity:0; }
100%{ opacity:1; }
`;

export const MoreIndicator = styled.div`
  z-index: 9;
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0.75rem;
  display: flex;
  justify-content: center;

  transition: opacity 300ms ease;

  span {
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
    padding: 0.3075rem 0.9375rem 0.375rem;
    border-radius: 6rem;
    background: var(--ck-tooltip-background);
    color: var(--ck-tooltip-color);
    font-weight: 500;
    font-size: 0.8125rem;
    letter-spacing: -0.01rem;
    box-shadow: var(--ck-tooltip-shadow);
    animation: ${fadeIn} 300ms ease 1000ms both;

    transition: transform 100ms ease;

    &:hover {
      transform: scale(1.02);
    }
    &:active {
      transform: scale(0.98);
    }
    svg {
      display: block;
      transform: translateX(-0.1875rem);
    }
  }

  &.hide {
    opacity: 0;
    pointer-events: none;
  }
`;

export const ScrollAreaContainer = styled.div<{
  $mobile?: boolean;
  $height?: number;
  $backgroundColor?: string;
}>`
  --bg: ${({ $backgroundColor }) =>
    $backgroundColor || 'var(--ck-body-background)'};
  --fade-height: 1px;
  position: relative;
  z-index: 1;

  ${({ $mobile, $height, $mobileDirection }) =>
    $mobile && $mobileDirection === 'horizontal'
      ? css`
          overflow-x: scroll;
          margin: 0 -24px;
          padding: 0 24px;

          &:before,
          &:after {
            pointer-events: none;
            z-index: 10;
            content: '';
            display: block;
            position: sticky;
            top: 0;
            bottom: 0;
            width: var(--fade-height);
            background: var(
              --ck-body-divider-secondary,
              var(--ck-body-divider)
            );
            box-shadow: var(--ck-body-divider-box-shadow);
            transition: opacity 300ms ease;
          }
          &:before {
            left: 0;
          }
          &:after {
            right: 0;
          }

          &.scroll-start {
            &:before {
              opacity: 0;
            }
          }

          &.scroll-end {
            &:after {
              opacity: 0;
            }
          }
        `
      : css`
          max-height: ${$height ? `${$height}px` : '310px'};
          overflow-y: scroll;
          padding: 0 10px;
          margin: calc(var(--fade-height) * -1) -16px 0 -10px;

          &:before,
          &:after {
            pointer-events: none;
            z-index: 10;
            content: '';
            display: block;
            position: sticky;
            left: 0;
            right: 0;
            height: var(--fade-height);
            background: var(
              --ck-body-divider-secondary,
              var(--ck-body-divider)
            );
            box-shadow: var(--ck-body-divider-box-shadow);
            transition: opacity 300ms ease;
          }
          &:before {
            top: 0;
          }
          &:after {
            bottom: 0;
          }

          &.scroll-start {
            &:before {
              opacity: 0;
            }
          }

          &.scroll-end {
            &:after {
              opacity: 0;
            }
          }
        `}

  &::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  &::-webkit-scrollbar-track {
    background: transparent;
  }
  &::-webkit-scrollbar-thumb {
    background: rgba(0, 0, 0, 0);
    border-radius: 100px;
  }
  &:hover::-webkit-scrollbar-thumb {
    background: var(--ck-body-color-muted);
  }
  &::-webkit-scrollbar-thumb:hover {
    background: var(--ck-body-color-muted-hover);
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/Spinner/index.tsx">
import { SpinnerContainer } from './styles';

const transition = {
  duration: 0.4,
  ease: [0.175, 0.885, 0.32, 0.98],
};

export const Spinner = () => (
  <SpinnerContainer
    initial={{ opacity: 0, rotate: 180 }}
    animate={{
      opacity: 1,
      rotate: 0,
    }}
    exit={{
      position: 'absolute',
      opacity: 0,
      rotate: -180,
      transition: {
        ...transition,
      },
    }}
    transition={{
      ...transition,
      delay: 0.2,
    }}
  >
    <svg
      width="18"
      height="18"
      viewBox="0 0 18 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle
        cx="9"
        cy="9"
        r="7"
        stroke="currentColor"
        strokeOpacity="0.1"
        strokeWidth="2.5"
      />
      <path
        d="M16 9C16 5.13401 12.866 2 9 2"
        stroke="currentColor"
        strokeWidth="2.5"
        strokeLinecap="round"
      />
    </svg>
  </SpinnerContainer>
);
</file>

<file path="packages/connectkit/src/components/Common/Spinner/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';
import { keyframes } from 'styled-components';

const Spin = keyframes`
  0%{ transform: rotate(0deg); }
  100%{ transform: rotate(360deg); }
`;
export const SpinnerContainer = styled(motion.div)`
  display: flex;
  align-items: center;
  justify-content: center;
  animation: ${Spin} 1s linear infinite;
  svg {
    display: block;
    position: relative;
    animation: ${Spin} 1s ease-in-out infinite;
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/ThemedButton/index.tsx">
import React from 'react';

import { ThemeContainer, Container } from './styles';

import { All } from './../../../types';
import useMeasure from 'react-use-measure';

type ThemedButtonProps = {
  children?: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'tertiary';
  autoSize?: boolean;
  duration?: number;
  style?: React.CSSProperties;
  onClick?: () => void;
};

export const PlaceholderButton = () => {
  return <div style={{ height: 40 }} />;
};

const ThemedButton: React.FC<ThemedButtonProps & All> = ({
  children,
  variant = 'primary',
  autoSize = true,
  duration = 0.3,
  style,
}) => {
  const [contentRef, bounds] = useMeasure();
  return (
    <Container
      className={variant}
      initial={false}
      animate={
        autoSize
          ? {
              width: bounds.width > 10 ? bounds.width : 'auto',
            }
          : undefined
      }
      transition={{
        duration: duration,
        ease: [0.25, 1, 0.5, 1],
        delay: 0.01,
      }}
      style={style}
    >
      <div
        ref={contentRef}
        style={{
          whiteSpace: 'nowrap',
          width: 'fit-content',
          position: 'relative',
          padding: '0 12px',
        }}
      >
        {children}
      </div>
    </Container>
  );
};
export default ThemedButton;
export { ThemeContainer };
</file>

<file path="packages/connectkit/src/components/Common/ThemedButton/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';

export const Container = styled(motion.div)<{
  $variant?: string;
}>`
  display: flex;
  align-items: center;
  justify-content: flex-start;
  position: relative;
  height: 40px;
  padding: 0;
  line-height: 0;
  letter-spacing: -0.2px;
  font-size: var(--ck-connectbutton-font-size, 16px);
  font-weight: var(--ck-connectbutton-font-weight, 500);
  text-align: center;
  transition: 100ms ease;
  transition-property: color, background, box-shadow, border-radius;

  color: var(--color);
  background: var(--background);
  box-shadow: var(--box-shadow);
  border-radius: var(--border-radius);

  &.primary {
    --color: var(--ck-connectbutton-color);
    --background: var(--ck-connectbutton-background);
    --box-shadow: var(--ck-connectbutton-box-shadow);
    --border-radius: var(--ck-connectbutton-border-radius, 12px);

    --hover-color: var(--ck-connectbutton-hover-color, var(--color));
    --hover-background: var(
      --ck-connectbutton-hover-background,
      var(--background)
    );
    --hover-box-shadow: var(
      --ck-connectbutton-hover-box-shadow,
      var(--box-shadow)
    );
    --hover-border-radius: var(
      --ck-connectbutton-hover-border-radius,
      var(--border-radius)
    );

    --active-color: var(--ck-connectbutton-active-color, var(--hover-color));
    --active-background: var(
      --ck-connectbutton-active-background,
      var(--hover-background)
    );
    --active-box-shadow: var(
      --ck-connectbutton-active-box-shadow,
      var(--hover-box-shadow)
    );
    --active-border-radius: var(
      --ck-connectbutton-active-border-radius,
      var(--hover-border-radius)
    );
  }
  &.secondary {
    --color: var(--ck-connectbutton-balance-color);
    --background: var(--ck-connectbutton-balance-background);
    --box-shadow: var(--ck-connectbutton-balance-box-shadow);
    --border-radius: var(
      --ck-connectbutton-balance-border-radius,
      var(--ck-connectbutton-border-radius, 12px)
    );

    --hover-color: var(--ck-connectbutton-balance-hover-color, var(--color));
    --hover-background: var(
      --ck-connectbutton-balance-hover-background,
      var(--background)
    );
    --hover-box-shadow: var(
      --ck-connectbutton-balance-hover-box-shadow,
      var(--box-shadow)
    );
    --hover-border-radius: var(
      --ck-connectbutton-balance-hover-border-radius,
      var(--border-radius)
    );

    --active-color: var(
      --ck-connectbutton-balance-active-color,
      var(--hover-color)
    );
    --active-background: var(
      --ck-connectbutton-balance-active-background,
      var(--hover-background)
    );
    --active-box-shadow: var(
      --ck-connectbutton-balance-active-box-shadow,
      var(--hover-box-shadow)
    );
    --active-border-radius: var(
      --ck-connectbutton-balance-active-border-radius,
      var(--hover-border-radius)
    );
  }
`;

export const ThemeContainer = styled.button`
  all: initial;
  appearance: none;
  user-select: none;
  position: relative;
  padding: 0;
  margin: 0;
  background: none;
  border-radius: var(--ck-border-radius);

  &:disabled {
    pointer-events: none;
    opacity: 0.3;
  }

  display: flex;
  flex-wrap: nowrap;
  background: none;
  cursor: pointer;
  * {
    cursor: pointer;
  }
  &:hover {
    ${Container} {
      color: var(--hover-color, var(--color));
      background: var(--hover-background, var(--background));
      box-shadow: var(--hover-box-shadow, var(--box-shadow));
      border-radius: var(--hover-border-radius, var(--border-radius));
    }
  }
  &:active {
    ${Container} {
      color: var(--active-color, var(--hover-color, var(--color)));
      background: var(
        --active-background,
        var(--hover-background, var(--background))
      );
      box-shadow: var(
        --active-box-shadow,
        var(--hover-box-shadow, var(--box-shadow))
      );
      border-radius: var(
        --active-border-radius,
        var(--hover-border-radius, var(--border-radius))
      );
    }
  }
  &:focus-visible {
    outline: 2px solid var(--ck-family-brand);
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/Tooltip/index.tsx">
import React, { useEffect, useLayoutEffect, useRef, useState } from 'react';
import { useContext } from '../../ConnectKit';
import useMeasure from 'react-use-measure';

import { TooltipProps, TooltipSizeProps } from './types';
import { TooltipWindow, TooltipContainer, TooltipTail } from './styles';

import { AnimatePresence, motion } from 'framer-motion';
import { ResetContainer } from '../../../styles';
import Portal from '../Portal';
import { useThemeContext } from '../../ConnectKitThemeProvider/ConnectKitThemeProvider';

const Tooltip: React.FC<TooltipProps> = ({
  children,
  message,
  open,
  xOffset = 0,
  yOffset = 0,
  delay,
}) => {
  const context = useContext();
  const themeContext = useThemeContext();

  if (context.options?.hideTooltips) return <>{children}</>;

  const [isOpen, setIsOpen] = useState(false);
  const [outOfBounds, setOutOfBounds] = useState(false);
  const [size, setSize] = useState<TooltipSizeProps>('small');

  const [ready, setReady] = useState(false);

  const [currentRoute] = useState(context.route);

  const targetRef = useRef<any>(null);
  const [ref, bounds] = useMeasure({
    debounce: !ready ? 220 : 0, // fix alignment initial state
    offsetSize: true,
    scroll: true,
  });

  const checkBounds = () => {
    let flag = false;
    const x = xOffset + bounds.left + bounds.width;
    const y = yOffset + bounds.top + bounds.height * 0.5;
    if (x > window.innerWidth || x < 0 || y > window.innerHeight || y < 0) {
      flag = true;
    }
    return flag;
  };

  const useIsomorphicLayoutEffect =
    typeof window !== 'undefined' ? useLayoutEffect : useEffect;

  const refreshLayout = () => {
    if (
      !targetRef.current ||
      bounds.top +
        bounds.bottom +
        bounds.left +
        bounds.right +
        bounds.height +
        bounds.width ===
        0
    )
      return;
    const x = xOffset + bounds.left + bounds.width;
    const y = yOffset + bounds.top + bounds.height * 0.5;
    if (!ready && x !== 0 && y !== 0) setReady(true);
    targetRef.current.style.left = `${x}px`;
    targetRef.current.style.top = `${y}px`;
    setSize(targetRef.current.offsetHeight <= 40 ? 'small' : 'large');
    setOutOfBounds(checkBounds());
  };
  useIsomorphicLayoutEffect(refreshLayout, [bounds, open, isOpen]);

  useEffect(() => {
    if (!context.open) setIsOpen(false);
  }, [context.open]);

  useEffect(() => {
    setIsOpen(!!open);
  }, [open]);

  return (
    <>
      <motion.div
        ref={ref}
        style={
          open === undefined
            ? {
                cursor: 'help',
              }
            : {}
        }
        onHoverStart={() => setIsOpen(true)}
        onHoverEnd={() => setIsOpen(false)}
        onClick={() => setIsOpen(false)}
      >
        {children}
      </motion.div>
      <Portal>
        <AnimatePresence>
          {currentRoute === context.route && !outOfBounds && isOpen && (
            <ResetContainer
              $useTheme={themeContext.theme}
              $useMode={themeContext.mode}
              $customTheme={themeContext.customTheme}
            >
              <TooltipWindow>
                <TooltipContainer
                  role="tooltip"
                  $size={size}
                  ref={targetRef}
                  initial={'collapsed'}
                  animate={ready ? 'open' : {}}
                  exit={'collapsed'}
                  variants={{
                    collapsed: {
                      transformOrigin: '20px 50%',
                      opacity: 0,
                      scale: 0.9,
                      z: 0.01,
                      y: '-50%',
                      x: 20,
                      transition: {
                        duration: 0.1,
                      },
                    },
                    open: {
                      willChange: 'opacity,transform',
                      opacity: 1,
                      scale: 1,
                      z: 0.01,
                      y: '-50%',
                      x: 20,
                      transition: {
                        ease: [0.76, 0, 0.24, 1],
                        duration: 0.15,
                        delay: delay ? delay : 0.5,
                      },
                    },
                  }}
                >
                  {message}
                  <TooltipTail $size={size} />
                </TooltipContainer>
              </TooltipWindow>
            </ResetContainer>
          )}
        </AnimatePresence>
      </Portal>
    </>
  );
};
export default Tooltip;
</file>

<file path="packages/connectkit/src/components/Common/Tooltip/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';
import { TooltipSizeProps } from './types';

export const TooltipWindow = styled(motion.div)`
  z-index: 2147483647;
  position: fixed;
  inset: 0;
  pointer-events: none;
`;
export const TooltipContainer = styled(motion.div)<{ $size: TooltipSizeProps }>`
  --shadow: var(--ck-tooltip-shadow);
  z-index: 2147483647;
  position: absolute;
  top: 0;
  left: 0;
  display: flex;
  gap: 8px;
  width: fit-content;
  align-items: center;
  justify-content: center;
  border-radius: var(
    --ck-tooltip-border-radius,
    ${(props) => (props.$size === 'small' ? 11 : 14)}px
  );
  border-radius: ;
  padding: 10px 16px 10px 12px;
  font-size: 14px;
  line-height: 19px;
  font-weight: 500;
  letter-spacing: -0.1px;
  color: var(--ck-tooltip-color);
  background: var(--ck-tooltip-background);
  box-shadow: var(--shadow);
  > span {
    z-index: 3;
    position: relative;
  }
  > div {
    margin: -4px 0; // offset for icon
  }
  strong {
    color: var(--ck-spinner-color);
  }

  .ck-tt-logo {
    display: inline-block;
    vertical-align: text-bottom;
    height: 1em;
    width: 1.25em;
    svg {
      display: block;
      height: 100%;
      transform: translate(0.5px, -1px) scale(1.75);
    }
  }
`;

export const TooltipTail = styled(motion.div)<{ $size: TooltipSizeProps }>`
  z-index: 2;
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  width: ${(props) => (props.$size === 'small' ? 14 : 18)}px;
  right: 100%;
  top: 0;
  bottom: 0;
  overflow: hidden;
  &:before {
    content: '';
    position: absolute;
    box-shadow: var(--shadow);
    width: ${(props) => (props.$size === 'small' ? 14 : 18)}px;
    height: ${(props) => (props.$size === 'small' ? 14 : 18)}px;
    transform: translate(75%, 0) rotate(45deg);
    background: var(--ck-tooltip-background);
    border-radius: ${(props) => (props.$size === 'small' ? 2 : 3)}px 0 0 0;
  }
`;
</file>

<file path="packages/connectkit/src/components/Common/Tooltip/types.ts">
export type TooltipSizeProps = 'small' | 'large';

export type TooltipProps = {
  message?: string | React.ReactNode;
  children?: React.ReactNode;
  open?: boolean;
  xOffset?: number;
  yOffset?: number;
  delay?: number;
};
</file>

<file path="packages/connectkit/src/components/ConnectButton/index.tsx">
import React from 'react';
import { useAccount, useEnsName } from 'wagmi';
import { truncateENSAddress, truncateEthAddress } from './../../utils';
import useIsMounted from '../../hooks/useIsMounted';

import {
  IconContainer,
  TextContainer,
  UnsupportedNetworkContainer,
} from './styles';
import { routes, useContext } from '../ConnectKit';
import { useModal } from '../../hooks/useModal';

import Avatar from '../Common/Avatar';
import { AnimatePresence, Variants, motion } from 'framer-motion';
import { CustomTheme, Mode, Theme } from '../../types';
import { Balance } from '../BalanceButton';
import ThemedButton, { ThemeContainer } from '../Common/ThemedButton';
import { ResetContainer } from '../../styles';
import { AuthIcon } from '../../assets/icons';
import { useSIWE } from '../../siwe';
import useLocales from '../../hooks/useLocales';
import { Chain } from 'viem';
import { useChainIsSupported } from '../../hooks/useChainIsSupported';
import { useEnsFallbackConfig } from '../../hooks/useEnsFallbackConfig';

const contentVariants: Variants = {
  initial: {
    zIndex: 2,
    opacity: 0,
    x: '-100%',
  },
  animate: {
    opacity: 1,
    x: 0.1,
    transition: {
      duration: 0.4,
      ease: [0.25, 1, 0.5, 1],
    },
  },
  exit: {
    zIndex: 1,
    opacity: 0,
    x: '-100%',
    pointerEvents: 'none',
    position: 'absolute',
    transition: {
      duration: 0.4,
      ease: [0.25, 1, 0.5, 1],
    },
  },
};

const addressVariants: Variants = {
  initial: {
    zIndex: 2,
    opacity: 0,
    x: '100%',
  },
  animate: {
    x: 0.2,
    opacity: 1,
    transition: {
      duration: 0.4,
      ease: [0.25, 1, 0.5, 1],
    },
  },
  exit: {
    zIndex: 1,
    x: '100%',
    opacity: 0,
    pointerEvents: 'none',
    position: 'absolute',
    transition: {
      duration: 0.4,
      ease: [0.25, 1, 0.5, 1],
    },
  },
};

const textVariants: Variants = {
  initial: {
    opacity: 0,
  },
  animate: {
    opacity: 1,
    transition: {
      duration: 0.3,
      ease: [0.25, 1, 0.5, 1],
    },
  },
  exit: {
    position: 'absolute',
    opacity: 0,
    transition: {
      duration: 0.3,
      ease: [0.25, 1, 0.5, 1],
    },
  },
};

type Hash = `0x${string}`;

type ConnectButtonRendererProps = {
  children?: (renderProps: {
    show?: () => void;
    hide?: () => void;
    chain?: Chain & {
      unsupported?: boolean;
    };
    unsupported: boolean;
    isConnected: boolean;
    isConnecting: boolean;
    address?: Hash;
    truncatedAddress?: string;
    ensName?: string;
  }) => React.ReactNode;
};

const ConnectButtonRenderer: React.FC<ConnectButtonRendererProps> = ({
  children,
}) => {
  const isMounted = useIsMounted();
  const context = useContext();
  const { open, setOpen } = useModal();

  const { address, isConnected, chain } = useAccount();
  const isChainSupported = useChainIsSupported(chain?.id);

  const ensFallbackConfig = useEnsFallbackConfig();
  const { data: ensName } = useEnsName({
    chainId: 1,
    address: address,
    config: ensFallbackConfig,
  });

  function hide() {
    setOpen(false);
  }

  function show() {
    setOpen(true);
    context.setRoute(isConnected ? routes.PROFILE : routes.CONNECTORS);
  }

  if (!children) return null;
  if (!isMounted) return null;

  return (
    <>
      {children({
        show,
        hide,
        chain: chain,
        unsupported: !isChainSupported,
        isConnected: !!address,
        isConnecting: open, // Using `open` to determine if connecting as wagmi isConnecting only is set to true when an active connector is awaiting connection
        address: address,
        truncatedAddress: address ? truncateEthAddress(address) : undefined,
        ensName: ensName?.toString(),
      })}
    </>
  );
};

ConnectButtonRenderer.displayName = 'ConnectKitButton.Custom';

function ConnectKitButtonInner({
  label,
  showAvatar,
  separator,
}: {
  label?: string;
  showAvatar?: boolean;
  separator?: string;
}) {
  const locales = useLocales({});
  const context = useContext();
  const { isSignedIn } = useSIWE();

  const { address, chain } = useAccount();
  const isChainSupported = useChainIsSupported(chain?.id);

  const ensFallbackConfig = useEnsFallbackConfig();
  const { data: ensName } = useEnsName({
    chainId: 1,
    address: address,
    config: ensFallbackConfig,
  });
  const defaultLabel = locales.connectWallet;

  return (
    <AnimatePresence initial={false}>
      {address ? (
        <TextContainer
          key="connectedText"
          initial={'initial'}
          animate={'animate'}
          exit={'exit'}
          variants={addressVariants}
          style={{
            height: 40,
            //padding: !showAvatar ? '0 5px' : undefined,
          }}
        >
          {showAvatar && (
            <IconContainer>
              <AnimatePresence initial={false}>
                {isSignedIn && (
                  <motion.div
                    style={{
                      zIndex: 2,
                      position: 'absolute',
                      bottom: 0,
                      right: 0,
                    }}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                  >
                    <AuthIcon />
                  </motion.div>
                )}
                {!isChainSupported && (
                  <UnsupportedNetworkContainer
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                  >
                    <svg
                      width="14"
                      height="14"
                      viewBox="0 0 14 14"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M1.68831 13.5H12.0764C13.1026 13.5 13.7647 12.7197 13.7647 11.763C13.7647 11.4781 13.6985 11.1863 13.5462 10.9149L8.34225 1.37526C8.02445 0.791754 7.45505 0.5 6.88566 0.5C6.31627 0.5 5.73364 0.791754 5.42246 1.37526L0.225108 10.9217C0.0728291 11.1863 0 11.4781 0 11.763C0 12.7197 0.662083 13.5 1.68831 13.5ZM6.88566 8.8048C6.49503 8.8048 6.27655 8.5809 6.26331 8.1738L6.16399 5.0595C6.15075 4.64562 6.44869 4.34708 6.87904 4.34708C7.30278 4.34708 7.61396 4.6524 7.60071 5.06628L7.5014 8.16701C7.48154 8.5809 7.26305 8.8048 6.88566 8.8048ZM6.88566 11.3492C6.44207 11.3492 6.07792 11.0303 6.07792 10.5757C6.07792 10.1211 6.44207 9.80219 6.88566 9.80219C7.32926 9.80219 7.69341 10.1143 7.69341 10.5757C7.69341 11.0371 7.32264 11.3492 6.88566 11.3492Z"
                        fill="currentColor"
                      />
                    </svg>
                  </UnsupportedNetworkContainer>
                )}
              </AnimatePresence>
              <Avatar size={24} address={address} />
            </IconContainer>
          )}

          <div
            style={{
              position: 'relative',
              paddingRight: showAvatar ? 1 : 0,
            }}
          >
            <AnimatePresence initial={false}>
              {ensName ? (
                <TextContainer
                  key="ckEnsName"
                  initial={'initial'}
                  animate={'animate'}
                  exit={'exit'}
                  variants={textVariants}
                  style={{
                    position: ensName ? 'relative' : 'absolute',
                  }}
                >
                  {context.options?.truncateLongENSAddress
                    ? truncateENSAddress(ensName, 20)
                    : ensName}
                </TextContainer>
              ) : (
                <TextContainer
                  key="ckTruncatedAddress"
                  initial={'initial'}
                  animate={'animate'}
                  exit={'exit'}
                  variants={textVariants}
                  style={{
                    position: ensName ? 'absolute' : 'relative',
                  }}
                >
                  {truncateEthAddress(address, separator)}{' '}
                </TextContainer>
              )}
            </AnimatePresence>
          </div>
        </TextContainer>
      ) : (
        <TextContainer
          key="connectWalletText"
          initial={'initial'}
          animate={'animate'}
          exit={'exit'}
          variants={contentVariants}
          style={{
            height: 40,
            //padding: '0 5px',
          }}
        >
          {label ? label : defaultLabel}
        </TextContainer>
      )}
    </AnimatePresence>
  );
}

type ConnectKitButtonProps = {
  // Options
  label?: string;
  showBalance?: boolean;
  showAvatar?: boolean;

  // Theming
  theme?: Theme;
  mode?: Mode;
  customTheme?: CustomTheme;

  // Events
  onClick?: (open: () => void) => void;
};

export function ConnectKitButton({
  // Options
  label,
  showBalance = false,
  showAvatar = true,

  // Theming
  theme,
  mode,
  customTheme,

  // Events
  onClick,
}: ConnectKitButtonProps) {
  const isMounted = useIsMounted();

  const context = useContext();

  const { isConnected, address, chain } = useAccount();
  const chainIsSupported = useChainIsSupported(chain?.id);

  function show() {
    context.setOpen(true);
    context.setRoute(isConnected ? routes.PROFILE : routes.CONNECTORS);
  }

  const separator = ['web95', 'rounded', 'minimal'].includes(
    theme ?? context.theme ?? ''
  )
    ? '....'
    : undefined;

  if (!isMounted) return null;

  const shouldShowBalance = showBalance && chainIsSupported;
  const willShowBalance = address && shouldShowBalance;

  return (
    <ResetContainer
      $useTheme={theme ?? context.theme}
      $useMode={mode ?? context.mode}
      $customTheme={customTheme ?? context.customTheme}
    >
      <ThemeContainer
        onClick={() => {
          if (onClick) {
            onClick(show);
          } else {
            show();
          }
        }}
      >
        {shouldShowBalance && (
          <AnimatePresence initial={false}>
            {willShowBalance && (
              <motion.div
                key={'balance'}
                initial={{
                  opacity: 0,
                  x: '100%',
                  width: 0,
                  marginRight: 0,
                }}
                animate={{
                  opacity: 1,
                  x: 0,
                  width: 'auto',
                  marginRight: -24,
                  transition: {
                    duration: 0.4,
                    ease: [0.25, 1, 0.5, 1],
                  },
                }}
                exit={{
                  opacity: 0,
                  x: '100%',
                  width: 0,
                  marginRight: 0,
                  transition: {
                    duration: 0.4,
                    ease: [0.25, 1, 0.5, 1],
                  },
                }}
              >
                <ThemedButton
                  variant={'secondary'}
                  theme={theme ?? context.theme}
                  mode={mode ?? context.mode}
                  customTheme={customTheme ?? context.customTheme}
                  style={{ overflow: 'hidden' }}
                >
                  <motion.div style={{ paddingRight: 24 }}>
                    <Balance hideSymbol />
                  </motion.div>
                </ThemedButton>
              </motion.div>
            )}
          </AnimatePresence>
        )}
        <ThemedButton
          theme={theme ?? context.theme}
          mode={mode ?? context.mode}
          customTheme={customTheme ?? context.customTheme}
          style={
            shouldShowBalance &&
            showBalance &&
            address &&
            (theme === 'retro' || context.theme === 'retro')
              ? {
                  /** Special fix for the retro theme... not happy about this one */
                  boxShadow:
                    'var(--ck-connectbutton-balance-connectbutton-box-shadow)',
                  borderRadius:
                    'var(--ck-connectbutton-balance-connectbutton-border-radius)',
                  overflow: 'hidden',
                }
              : {
                  overflow: 'hidden',
                }
          }
        >
          <ConnectKitButtonInner
            separator={separator}
            showAvatar={showAvatar}
            label={label}
          />
        </ThemedButton>
      </ThemeContainer>
    </ResetContainer>
  );
}

ConnectKitButton.Custom = ConnectButtonRenderer;
</file>

<file path="packages/connectkit/src/components/ConnectButton/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../styles/styled';

export const TextContainer = styled(motion.div)`
  top: 0;
  bottom: 0;
  left: 0;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
`;

export const ChainContainer = styled(motion.div)`
  position: relative;
  width: 24px;
  height: 24px;
  border-radius: 12px;
  overflow: hidden;
  svg {
    display: block;
  }
`;
export const IconContainer = styled(motion.div)`
  pointer-events: none;
  user-select: none;
  position: relative;
  width: 24px;
  height: 24px;
  margin-right: 8px;
`;

export const UnsupportedNetworkContainer = styled(motion.div)`
  z-index: 1;
  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 100%;
  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.02);
  background: var(--ck-body-color-danger, red);
  color: #fff;
  svg {
    display: block;
    position: relative;
    top: -1px;
  }
`;
</file>

<file path="packages/connectkit/src/components/ConnectKitThemeProvider/ConnectKitThemeProvider.tsx">
import React, { createContext, createElement } from 'react';
import { CustomTheme, Mode, Theme } from './../../types';

type ContextValue = {
  theme?: Theme;
  mode?: Mode;
  customTheme?: CustomTheme;
};

const Context = createContext<ContextValue | null>(null);

type ConnectKitThemeProviderProps = {
  children?: React.ReactNode;
  theme?: Theme;
  mode?: Mode;
  customTheme?: CustomTheme;
};

export const ConnectKitThemeProvider: React.FC<
  ConnectKitThemeProviderProps
> = ({ children, theme = 'auto', mode = 'auto', customTheme }) => {
  const value = {
    theme,
    mode,
    customTheme,
  };

  return createElement(Context.Provider, { value }, <>{children}</>);
};

export const useThemeContext = () => {
  const context = React.useContext(Context);
  if (!context)
    throw Error('ConnectKitThemeProvider must be inside a Provider.');
  return context;
};
</file>

<file path="packages/connectkit/src/components/ConnectModal/ConnectWithInjector/CircleSpinner/index.tsx">
import {
  LogoContainer,
  Logo,
  Spinner,
  SpinnerContainer,
  ExpiringSpinner,
} from './styles';

import { AnimatePresence } from 'framer-motion';
import React from 'react';

const CircleSpinner = ({
  logo,
  smallLogo,
  connecting = true,
  unavailable = false,
  countdown = false,
}: {
  logo?: React.ReactNode;
  smallLogo?: boolean;
  connecting?: boolean;
  unavailable?: boolean;
  countdown?: boolean;
}) => {
  return (
    <LogoContainer
      transition={{ duration: 0.5, ease: [0.175, 0.885, 0.32, 0.98] }}
    >
      <Logo
        $small={!unavailable && smallLogo}
        style={unavailable ? { borderRadius: 0 } : undefined}
      >
        {logo}
      </Logo>
      <SpinnerContainer>
        <AnimatePresence>
          {connecting && (
            <Spinner
              key="Spinner"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{
                opacity: 0,
                transition: {
                  duration: countdown ? 1 : 0,
                },
              }}
            >
              <svg
                aria-hidden="true"
                width="102"
                height="102"
                viewBox="0 0 102 102"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M52 100C24.3858 100 2 77.6142 2 50"
                  stroke="url(#paint0_linear_1943_4139)"
                  strokeWidth="3.5"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <defs>
                  <linearGradient
                    id="paint0_linear_1943_4139"
                    x1="2"
                    y1="48.5"
                    x2="53"
                    y2="100"
                    gradientUnits="userSpaceOnUse"
                  >
                    <stop stopColor="var(--ck-spinner-color)" />
                    <stop
                      offset="1"
                      stopColor="var(--ck-spinner-color)"
                      stopOpacity="0"
                    />
                  </linearGradient>
                </defs>
              </svg>
            </Spinner>
          )}
          {countdown && (
            <ExpiringSpinner
              key="ExpiringSpinner"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.25 }}
            >
              <div />
              <div />
            </ExpiringSpinner>
          )}
        </AnimatePresence>
      </SpinnerContainer>
    </LogoContainer>
  );
};

export default CircleSpinner;
</file>

<file path="packages/connectkit/src/components/ConnectModal/ConnectWithInjector/CircleSpinner/styles.ts">
import styled from './../../../../styles/styled';
import { css } from 'styled-components';
import { motion } from 'framer-motion';

export const LogoContainer = styled(motion.div)`
  z-index: 4;
  position: relative;
  width: 100px;
  height: 100px;
  svg {
    z-index: 3;
    position: relative;
    display: block;
  }
`;
export const Logo = styled(motion.div)<{ $small?: boolean }>`
  z-index: 2;
  position: absolute;
  overflow: hidden;
  inset: 6px;
  border-radius: 50px;
  background: var(--ck-body-background);
  display: flex;
  align-items: center;
  justify-content: center;
  svg,
  img {
    pointer-events: none;
    display: block;
    margin: 0 auto;
    width: 100%;
    height: 100%;
    ${(props) =>
      props.$small &&
      css`
        width: 85%;
        height: 85%;
      `}
  }
`;

export const SpinnerContainer = styled(motion.div)`
  position: absolute;
  inset: -5px;
`;
export const ExpiringSpinner = styled(motion.div)`
  pointer-events: none;
  user-select: none;
  z-index: 1;
  position: absolute;
  inset: -25%;
  background: var(--ck-body-background);
  div:first-child {
    position: absolute;
    left: 50%;
    right: 0;
    top: 0;
    bottom: 0;
    overflow: hidden;
    &:before {
      position: absolute;
      content: '';
      inset: 0;
      background: var(--ck-spinner-color);
      transform-origin: 0% 50%;
      animation: rotateExpiringSpinner 5000ms ease-in both;
    }
  }
  div:last-child {
    position: absolute;
    left: 0;
    right: 50%;
    top: 0;
    bottom: 0;
    overflow: hidden;
    &:before {
      position: absolute;
      content: '';
      inset: 0;
      background: var(--ck-spinner-color);
      transform-origin: 100% 50%;
      animation: rotateExpiringSpinner 5000ms ease-out 5000ms both;
    }
  }
  @keyframes rotateExpiringSpinner {
    0% {
      transform: rotate(-180deg);
    }
    100% {
      transform: rotate(0deg);
    }
  }
`;
export const Spinner = styled(motion.div)`
  pointer-events: none;
  user-select: none;
  z-index: 1;
  position: absolute;
  inset: 0;
  svg {
    display: block;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    animation: rotateSpinner 1200ms linear infinite;
  }
  @keyframes rotateSpinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
`;
</file>

<file path="packages/connectkit/src/components/ConnectModal/ConnectWithInjector/SquircleSpinner/index.tsx">
import { LogoContainer, Logo, Spinner, SpinnerContainer } from './styles';
import { AnimatePresence } from 'framer-motion';

const SquircleSpinner = ({
  logo,
  connecting = true,
}: {
  logo?: React.ReactNode;
  connecting?: boolean;
}) => {
  return (
    <LogoContainer
      transition={{ duration: 0.5, ease: [0.175, 0.885, 0.32, 0.98] }}
    >
      <Logo>{logo}</Logo>
      <SpinnerContainer>
        <AnimatePresence>
          {connecting && (
            <Spinner
              key="Spinner"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{
                opacity: 0,
                transition: {
                  duration: 0,
                },
              }}
            />
          )}
        </AnimatePresence>
      </SpinnerContainer>
      <svg
        aria-hidden="true"
        width="102"
        height="102"
        viewBox="0 0 102 102"
        fill="none"
      >
        <rect
          x="7.57895"
          y="7.57895"
          width="86.8421"
          height="86.8421"
          rx="19.2211"
          stroke="black"
          strokeOpacity="0.02"
          strokeWidth="1.15789"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M0 0H102V102H0V0ZM7 38.284C7 27.5684 7 22.2106 9.01905 18.0892C10.9522 14.1431 14.1431 10.9522 18.0892 9.01905C22.2106 7 27.5684 7 38.284 7H63.716C74.4316 7 79.7894 7 83.9108 9.01905C87.8569 10.9522 91.0478 14.1431 92.9809 18.0892C95 22.2106 95 27.5684 95 38.284V63.716C95 74.4316 95 79.7894 92.9809 83.9108C91.0478 87.8569 87.8569 91.0478 83.9108 92.9809C79.7894 95 74.4316 95 63.716 95H38.284C27.5684 95 22.2106 95 18.0892 92.9809C14.1431 91.0478 10.9522 87.8569 9.01905 83.9108C7 79.7894 7 74.4316 7 63.716V38.284ZM41.5 0.5H41.4325C34.7246 0.499996 29.6023 0.499994 25.5104 0.823325C21.388 1.14906 18.1839 1.80986 15.3416 3.20227C10.0602 5.78959 5.78959 10.0602 3.20227 15.3416C1.80986 18.1839 1.14906 21.388 0.823325 25.5104C0.499994 29.6023 0.499996 34.7246 0.5 41.4325V41.5V55.5938C0.5 55.6808 0.507407 55.766 0.521624 55.849C0.507407 55.9319 0.5 56.0172 0.5 56.1042V60.5V60.5675C0.499996 67.2754 0.499994 72.3977 0.823325 76.4896C1.14906 80.612 1.80986 83.8161 3.20227 86.6584C5.78959 91.9398 10.0602 96.2104 15.3416 98.7977C18.1839 100.19 21.388 100.851 25.5104 101.177C29.6022 101.5 34.7244 101.5 41.432 101.5H41.4324H41.5H43.4227H60.5H60.5675H60.568C67.2756 101.5 72.3977 101.5 76.4896 101.177C80.612 100.851 83.8161 100.19 86.6584 98.7977C91.9398 96.2104 96.2104 91.9398 98.7977 86.6584C100.19 83.8161 100.851 80.612 101.177 76.4896C101.5 72.3978 101.5 67.2756 101.5 60.568V60.5676V60.5V41.5V41.4324V41.432C101.5 34.7244 101.5 29.6022 101.177 25.5104C100.851 21.388 100.19 18.1839 98.7977 15.3416C96.2104 10.0602 91.9398 5.78959 86.6584 3.20227C83.8161 1.80986 80.612 1.14906 76.4896 0.823325C72.3977 0.499994 67.2754 0.499996 60.5675 0.5H60.5H41.5ZM3.5 56.1042C3.5 56.0172 3.49259 55.9319 3.47838 55.849C3.49259 55.766 3.5 55.6808 3.5 55.5938V41.5C3.5 34.7112 3.50109 29.7068 3.814 25.7467C4.1256 21.8032 4.73946 19.0229 5.89635 16.6614C8.19077 11.9779 11.9779 8.19077 16.6614 5.89635C19.0229 4.73946 21.8032 4.1256 25.7467 3.814C29.7068 3.50109 34.7112 3.5 41.5 3.5H60.5C67.2888 3.5 72.2932 3.50109 76.2533 3.814C80.1968 4.1256 82.977 4.73946 85.3386 5.89635C90.022 8.19077 93.8092 11.9779 96.1036 16.6614C97.2605 19.0229 97.8744 21.8032 98.186 25.7467C98.4989 29.7068 98.5 34.7112 98.5 41.5V60.5C98.5 67.2888 98.4989 72.2932 98.186 76.2533C97.8744 80.1968 97.2605 82.9771 96.1036 85.3386C93.8092 90.022 90.022 93.8092 85.3386 96.1036C82.977 97.2605 80.1968 97.8744 76.2533 98.186C72.2932 98.4989 67.2888 98.5 60.5 98.5H43.4227H41.5C34.7112 98.5 29.7068 98.4989 25.7467 98.186C21.8032 97.8744 19.0229 97.2605 16.6614 96.1036C11.9779 93.8092 8.19077 90.022 5.89635 85.3386C4.73946 82.9771 4.1256 80.1968 3.814 76.2533C3.50109 72.2932 3.5 67.2888 3.5 60.5V56.1042Z"
          fill="var(--ck-body-background)"
        />
      </svg>
    </LogoContainer>
  );
};

export default SquircleSpinner;
</file>

<file path="packages/connectkit/src/components/ConnectModal/ConnectWithInjector/SquircleSpinner/styles.ts">
import styled from './../../../../styles/styled';
import { motion } from 'framer-motion';

export const LogoContainer = styled(motion.div)`
  z-index: 4;
  position: relative;
  overflow: hidden;
  svg {
    z-index: 3;
    position: relative;
    display: block;
  }
`;
export const Logo = styled(motion.div)`
  z-index: 2;
  position: absolute;
  overflow: hidden;
  inset: 6px;
  border-radius: 24px;
  background: var(--ck-body-background);
  svg,
  img {
    pointer-events: none;
    display: block;
    width: 100%;
    height: 100%;
  }
`;

export const SpinnerContainer = styled(motion.div)`
  position: absolute;
  inset: 1px;
  overflow: hidden;
`;
export const Spinner = styled(motion.div)`
  pointer-events: none;
  user-select: none;
  z-index: 1;
  position: absolute;
  inset: -25%;
  &:before {
    content: '';
    position: absolute;
    inset: 0;
    background: conic-gradient(
      from -90deg,
      transparent,
      transparent,
      transparent,
      transparent,
      transparent,
      var(--ck-spinner-color)
    );
    animation: rotateSpinner 1200ms linear infinite;
  }
  @keyframes rotateSpinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
`;
</file>

<file path="packages/connectkit/src/components/ConnectModal/ConnectWithInjector/index.tsx">
import React, { useEffect, useState } from 'react';
import { AnimatePresence, Variants } from 'framer-motion';
import {
  Container,
  ConnectingContainer,
  ConnectingAnimation,
  RetryButton,
  RetryIconContainer,
  Content,
} from './styles';

import {
  PageContent,
  ModalHeading,
  ModalBody,
  ModalH1,
  ModalContentContainer,
  ModalContent,
} from '../../Common/Modal/styles';
import { OrDivider } from '../../Common/Modal';
import Button from '../../Common/Button';
import Tooltip from '../../Common/Tooltip';
import Alert from '../../Common/Alert';

import SquircleSpinner from './SquircleSpinner';

import { RetryIconCircle, Scan } from '../../../assets/icons';
import BrowserIcon from '../../Common/BrowserIcon';
import { AlertIcon, TickIcon } from '../../../assets/icons';
import {
  detectBrowser,
  isFamilyAccountsConnector,
  isWalletConnectConnector,
} from '../../../utils';
import useLocales from '../../../hooks/useLocales';
import { useConnect } from '../../../hooks/useConnect';
import { useContext } from '../../ConnectKit';
import { useWallet } from '../../../wallets/useWallets';
import CircleSpinner from './CircleSpinner';

export const states = {
  CONNECTED: 'connected',
  CONNECTING: 'connecting',
  EXPIRING: 'expiring',
  FAILED: 'failed',
  REJECTED: 'rejected',
  NOTCONNECTED: 'notconnected',
  UNAVAILABLE: 'unavailable',
};

const contentVariants: Variants = {
  initial: {
    willChange: 'transform,opacity',
    position: 'relative',
    opacity: 0,
    scale: 0.95,
  },
  animate: {
    position: 'relative',
    opacity: 1,
    scale: 1,
    transition: {
      ease: [0.16, 1, 0.3, 1],
      duration: 0.4,
      delay: 0.05,
      position: { delay: 0 },
    },
  },
  exit: {
    position: 'absolute',
    opacity: 0,
    scale: 0.95,
    transition: {
      ease: [0.16, 1, 0.3, 1],
      duration: 0.3,
    },
  },
};

const ConnectWithInjector: React.FC<{
  switchConnectMethod: (id?: string) => void;
  forceState?: typeof states;
}> = ({ switchConnectMethod, forceState }) => {
  const { connect } = useConnect({
    mutation: {
      onMutate: (connector?: any) => {
        if (connector.connector) {
          setStatus(states.CONNECTING);
        } else {
          setStatus(states.UNAVAILABLE);
        }
      },
      onError(err?: any) {
        console.error(err);
      },
      onSettled(data?: any, error?: any) {
        if (error) {
          setShowTryAgainTooltip(true);
          setTimeout(() => setShowTryAgainTooltip(false), 3500);
          if (error.code) {
            // https://github.com/MetaMask/eth-rpc-errors/blob/main/src/error-constants.ts
            switch (error.code) {
              case -32002:
                setStatus(states.NOTCONNECTED);
                break;
              case 4001:
                setStatus(states.REJECTED);
                break;
              default:
                setStatus(states.FAILED);
                break;
            }
          } else {
            // Sometimes the error doesn't respond with a code
            if (error.message) {
              switch (error.message) {
                case 'User rejected request':
                  setStatus(states.REJECTED);
                  break;
                default:
                  setStatus(states.FAILED);
                  break;
              }
            }
          }
        } else if (data) {
        }
        setTimeout(triggerResize, 100);
      },
    },
  });

  const { triggerResize, connector: c } = useContext();
  const id = c.id;
  const wallet = useWallet(id);

  const walletInfo = {
    name: wallet?.name,
    shortName: wallet?.shortName ?? wallet?.name,
    icon: wallet?.iconConnector ?? wallet?.icon,
    iconShape: wallet?.iconShape ?? 'circle',
    iconShouldShrink: wallet?.iconShouldShrink,
  };

  const [showTryAgainTooltip, setShowTryAgainTooltip] = useState(false);

  const expiryDefault = 9; // Starting at 10 causes layout shifting, better to start at 9
  const [expiryTimer, setExpiryTimer] = useState<number>(expiryDefault);

  const browser = detectBrowser();

  const extensionUrl = wallet?.downloadUrls?.[browser];

  const suggestedExtension = wallet?.downloadUrls
    ? {
        name: Object.keys(wallet?.downloadUrls)[0],
        label:
          Object.keys(wallet?.downloadUrls)[0]?.charAt(0).toUpperCase() +
          Object.keys(wallet?.downloadUrls)[0]?.slice(1), // Capitalise first letter, but this might be better suited as a lookup table
        url: wallet?.downloadUrls[Object.keys(wallet?.downloadUrls)[0]],
      }
    : undefined;

  const [status, setStatus] = useState(
    forceState
      ? forceState
      : !wallet?.isInstalled
      ? states.UNAVAILABLE
      : states.CONNECTING
  );

  const locales = useLocales({
    CONNECTORNAME: walletInfo.name,
    CONNECTORSHORTNAME: walletInfo.shortName ?? walletInfo.name,
    SUGGESTEDEXTENSIONBROWSER: suggestedExtension?.label ?? 'your browser',
  });

  const runConnect = async () => {
    if (wallet?.isInstalled && wallet?.connector) {
      connect({ connector: wallet?.connector });
    } else {
      setStatus(states.UNAVAILABLE);
    }
  };

  let connectTimeout: any;
  useEffect(() => {
    if (status === states.UNAVAILABLE) return;

    // UX: Give user time to see the UI before opening the extension
    connectTimeout = setTimeout(runConnect, 600);
    return () => {
      clearTimeout(connectTimeout);
    };
  }, []);

  /** Timeout functionality if necessary
  let expiryTimeout: any;
  useEffect(() => {
    if (status === states.EXPIRING) {
      expiryTimeout = setTimeout(
        () => {
          if (expiryTimer <= 0) {
            setStatus(states.FAILED);
            setExpiryTimer(expiryDefault);
          } else {
            setExpiryTimer(expiryTimer - 1);
          }
        },
        expiryTimer === 9 ? 1500 : 1000 // Google: Chronostasis
      );
    }
    return () => {
      clearTimeout(expiryTimeout);
    };
  }, [status, expiryTimer]);
  */

  if (!wallet) {
    return (
      <PageContent>
        <Container>
          <ModalHeading>Invalid State</ModalHeading>
          <ModalContent>
            <Alert>
              No connectors match the id given. This state should never happen.
            </Alert>
          </ModalContent>
        </Container>
      </PageContent>
    );
  }

  // TODO: Make this more generic
  if (isWalletConnectConnector(wallet?.connector.id)) {
    return (
      <PageContent>
        <Container>
          <ModalHeading>Invalid State</ModalHeading>
          <ModalContent>
            <Alert>
              WalletConnect does not have an injection flow. This state should
              never happen.
            </Alert>
          </ModalContent>
        </Container>
      </PageContent>
    );
  }

  return (
    <PageContent>
      <Container>
        <ConnectingContainer>
          <ConnectingAnimation
            $shake={status === states.FAILED || status === states.REJECTED}
            $circle={walletInfo.iconShape === 'circle'}
          >
            <AnimatePresence>
              {(status === states.FAILED || status === states.REJECTED) && (
                <RetryButton
                  aria-label="Retry"
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.8 }}
                  whileTap={{ scale: 0.9 }}
                  transition={{ duration: 0.1 }}
                  onClick={runConnect}
                >
                  <RetryIconContainer>
                    <Tooltip
                      open={
                        showTryAgainTooltip &&
                        (status === states.FAILED || status === states.REJECTED)
                      }
                      message={locales.tryAgainQuestion}
                      xOffset={-6}
                    >
                      <RetryIconCircle />
                    </Tooltip>
                  </RetryIconContainer>
                </RetryButton>
              )}
            </AnimatePresence>
            {walletInfo.iconShape === 'circle' ? (
              <CircleSpinner
                logo={
                  status === states.UNAVAILABLE ? (
                    <div
                      style={{
                        transform: 'scale(1.14)',
                        position: 'relative',
                        width: '100%',
                      }}
                    >
                      {walletInfo.icon}
                    </div>
                  ) : (
                    <>{walletInfo.icon}</>
                  )
                }
                smallLogo={walletInfo.iconShouldShrink}
                connecting={status === states.CONNECTING}
                unavailable={status === states.UNAVAILABLE}
              />
            ) : (
              <SquircleSpinner
                logo={
                  status === states.UNAVAILABLE ? (
                    <div
                      style={{
                        transform: 'scale(1.14)',
                        position: 'relative',
                        width: '100%',
                      }}
                    >
                      {walletInfo.icon}
                    </div>
                  ) : (
                    <>{walletInfo.icon}</>
                  )
                }
                connecting={status === states.CONNECTING}
                //unavailable={status === states.UNAVAILABLE}
              />
            )}
            {/* </Tooltip> */}
          </ConnectingAnimation>
        </ConnectingContainer>
        <ModalContentContainer>
          <AnimatePresence initial={false}>
            {status === states.FAILED && (
              <Content
                key={states.FAILED}
                initial={'initial'}
                animate={'animate'}
                exit={'exit'}
                variants={contentVariants}
              >
                <ModalContent>
                  <ModalH1 $error>
                    <AlertIcon />
                    {locales.injectionScreen_failed_h1}
                  </ModalH1>
                  <ModalBody>{locales.injectionScreen_failed_p}</ModalBody>
                </ModalContent>

                {isFamilyAccountsConnector(wallet.id) && (
                  <>
                    <OrDivider />
                    <Button onClick={() => switchConnectMethod(id)}>
                      {locales.connectWithFamilyIOS}
                    </Button>
                  </>
                )}

                {/* Reason: Coinbase Wallet does not expose a QRURI when extension is installed */}
                {/* 
                {wallet?.getWalletConnectDeeplink &&
                  wallet.id !== 'coinbaseWalletSDK' && (
                    <>
                      <OrDivider />
                      <Button
                        icon={<Scan />}
                        onClick={() => switchConnectMethod(id)}
                      >
                        {locales.scanTheQRCode}
                      </Button>
                    </>
                  )}
                   */}
              </Content>
            )}
            {status === states.REJECTED && (
              <Content
                key={states.REJECTED}
                initial={'initial'}
                animate={'animate'}
                exit={'exit'}
                variants={contentVariants}
              >
                <ModalContent
                  style={
                    isFamilyAccountsConnector(wallet.connector.id)
                      ? { paddingBottom: 12 }
                      : {
                          paddingBottom: 28,
                        }
                  }
                >
                  <ModalH1>{locales.injectionScreen_rejected_h1}</ModalH1>
                  <ModalBody>{locales.injectionScreen_rejected_p}</ModalBody>
                </ModalContent>

                {isFamilyAccountsConnector(wallet.id) && (
                  <>
                    <OrDivider />
                    <Button onClick={() => switchConnectMethod(id)}>
                      {locales.connectWithFamilyIOS}
                    </Button>
                  </>
                )}

                {/* Reason: Coinbase Wallet does not expose a QRURI when extension is installed */}
                {/* 
                {wallet?.getWalletConnectDeeplink &&
                  wallet.id !== 'coinbaseWalletSDK' && (
                    <>
                      <OrDivider />
                      <Button
                        icon={<Scan />}
                        onClick={() => switchConnectMethod(id)}
                      >
                        {locales.scanTheQRCode}
                      </Button>
                    </>
                  )}
                   */}
              </Content>
            )}
            {(status === states.CONNECTING || status === states.EXPIRING) && (
              <Content
                key={states.CONNECTING}
                initial={'initial'}
                animate={'animate'}
                exit={'exit'}
                variants={contentVariants}
              >
                <ModalContent
                  style={{
                    paddingBottom: 28,
                  }}
                >
                  <ModalH1>
                    {wallet.connector.id === 'injected'
                      ? locales.injectionScreen_connecting_injected_h1
                      : locales.injectionScreen_connecting_h1}
                  </ModalH1>
                  <ModalBody>
                    {wallet.connector.id === 'injected'
                      ? locales.injectionScreen_connecting_injected_p
                      : locales.injectionScreen_connecting_p}
                  </ModalBody>
                </ModalContent>
              </Content>
            )}
            {status === states.CONNECTED && (
              <Content
                key={states.CONNECTED}
                initial={'initial'}
                animate={'animate'}
                exit={'exit'}
                variants={contentVariants}
              >
                <ModalContent>
                  <ModalH1 $valid>
                    <TickIcon /> {locales.injectionScreen_connected_h1}
                  </ModalH1>
                  <ModalBody>{locales.injectionScreen_connected_p}</ModalBody>
                </ModalContent>
              </Content>
            )}
            {status === states.NOTCONNECTED && (
              <Content
                key={states.NOTCONNECTED}
                initial={'initial'}
                animate={'animate'}
                exit={'exit'}
                variants={contentVariants}
              >
                <ModalContent>
                  <ModalH1>{locales.injectionScreen_notconnected_h1}</ModalH1>
                  <ModalBody>
                    {locales.injectionScreen_notconnected_p}
                  </ModalBody>
                </ModalContent>
              </Content>
            )}
            {status === states.UNAVAILABLE && (
              <Content
                key={states.UNAVAILABLE}
                initial={'initial'}
                animate={'animate'}
                exit={'exit'}
                variants={contentVariants}
              >
                {!extensionUrl ? (
                  <>
                    <ModalContent style={{ paddingBottom: 12 }}>
                      <ModalH1>
                        {locales.injectionScreen_unavailable_h1}
                      </ModalH1>
                      <ModalBody>
                        {locales.injectionScreen_unavailable_p}
                      </ModalBody>
                    </ModalContent>

                    {!wallet.isInstalled && suggestedExtension && (
                      <Button
                        href={suggestedExtension?.url}
                        icon={
                          <BrowserIcon browser={suggestedExtension?.name} />
                        }
                      >
                        Install on {suggestedExtension?.label}
                      </Button>
                    )}
                  </>
                ) : (
                  <>
                    <ModalContent style={{ paddingBottom: 18 }}>
                      <ModalH1>{locales.injectionScreen_install_h1}</ModalH1>
                      <ModalBody>{locales.injectionScreen_install_p}</ModalBody>
                    </ModalContent>
                    {/**
                    {(wallet.getWalletConnectDeeplink &&
                    (!wallet.isInstalled && extensionUrl)) && <OrDivider />}

                    {wallet.getWalletConnectDeeplink && (
                      <Button icon={<Scan />} onClick={switchConnectMethod}>
                        {locales.scanTheQRCode}
                      </Button>
                    )}
                    */}
                    {!wallet.isInstalled && extensionUrl && (
                      <Button href={extensionUrl} icon={<BrowserIcon />}>
                        {locales.installTheExtension}
                      </Button>
                    )}
                  </>
                )}
              </Content>
            )}
          </AnimatePresence>
        </ModalContentContainer>
      </Container>
    </PageContent>
  );
};

export default ConnectWithInjector;
</file>

<file path="packages/connectkit/src/components/ConnectModal/ConnectWithInjector/styles.ts">
import styled from './../../../styles/styled';
import { css, keyframes } from 'styled-components';
import { motion } from 'framer-motion';

import { ModalContent } from '../../Common/Modal/styles';

export const Content = styled(motion.div)`
  display: flex;
  flex-direction: column;
  gap: 6px;
  position: relative;
  left: 0;
  right: 0;
  ${ModalContent} {
    padding: 0 8px 32px;
    gap: 12px;
  }
`;

const dist = 2;
const shakeKeyframes = keyframes`
  0%{ transform:none; }
  25%{ transform:translateX(${dist}px); }
  50%{ transform:translateX(-${dist}px); }
  75%{ transform:translateX(${dist}px); }
  100%{ transform:none; }
`;
const outlineKeyframes = keyframes`
  0%{ opacity:1; }
  100%{ opacity:0; }
`;
export const Container = styled(motion.div)`
  /*
  background: var(
    --ck-body-background
  ); // To stop the overlay issue during transition for the squircle spinner
  */
`;
export const ConnectingContainer = styled(motion.div)`
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 10px auto 16px;
  height: 120px;
  //transform: scale(1.001); // fixes shifting issue between states
`;
export const ConnectingAnimation = styled(motion.div)<{
  $shake: boolean;
  $circle: boolean;
}>`
  user-select: none;
  position: relative;
  --spinner-error-opacity: 0;
  &:before {
    content: '';
    position: absolute;
    inset: 1px;
    opacity: 0;
    background: var(--ck-body-color-danger);
    ${(props) =>
      props.$circle &&
      css`
        inset: -5px;
        border-radius: 50%;
        background: none;
        box-shadow: inset 0 0 0 3.5px var(--ck-body-color-danger);
      `}
  }
  ${(props) =>
    props.$shake &&
    css`
      animation: ${shakeKeyframes} 220ms ease-out both;
      &:before {
        animation: ${outlineKeyframes} 220ms ease-out 750ms both;
      }
    `}
`;

export const RetryButton = styled(motion.button)`
  z-index: 5;
  appearance: none;
  position: absolute;
  right: 2px;
  bottom: 2px;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  border-radius: 16px;
  cursor: pointer;
  overflow: hidden;
  background: none;

  color: var(--ck-body-background);
  transition: color 200ms ease;
  box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);

  &:before {
    z-index: 3;
    content: '';
    position: absolute;
    inset: 0;
    opacity: 0;
    transition: opacity 200ms ease;
    background: var(--ck-body-color);
  }

  &:hover:before {
    opacity: 0.1;
  }
`;
export const RetryIconContainer = styled(motion.div)`
  position: absolute;
  inset: 0;

  &:before {
    z-index: 1;
    content: '';
    position: absolute;
    inset: 3px;
    border-radius: 16px;
    background: conic-gradient(
      from 90deg,
      currentColor 10%,
      var(--ck-body-color) 80%
    );
  }

  svg {
    z-index: 2;
    display: block;
    position: relative;
    width: 100%;
    height: 100%;
  }
`;
</file>

<file path="packages/connectkit/src/components/ConnectModal/ConnectUsing.tsx">
import { AnimatePresence, motion } from 'framer-motion';
import { useEffect, useState } from 'react';

import { useContext } from '../ConnectKit';
import { useWallet } from '../../wallets/useWallets';

import ConnectWithInjector from './ConnectWithInjector';
import ConnectWithQRCode from './ConnectWithQRCode';

import { contentVariants } from '../Common/Modal';
import Alert from '../Common/Alert';

const states = {
  QRCODE: 'qrcode',
  INJECTOR: 'injector',
};

const ConnectUsing = () => {
  const context = useContext();
  const wallet = useWallet(context.connector.id);

  // If cannot be scanned, display injector flow, which if extension is not installed will show CTA to install it
  const isQrCode = !wallet?.isInstalled && wallet?.getWalletConnectDeeplink;

  const [status, setStatus] = useState(
    isQrCode ? states.QRCODE : states.INJECTOR
  );

  useEffect(() => {
    // if no provider, change to qrcode
    const checkProvider = async () => {
      const res = await wallet?.connector.getProvider();
      if (!res) {
        setStatus(states.QRCODE);
        setTimeout(context.triggerResize, 10); // delay required here for modal to resize
      }
    };
    if (status === states.INJECTOR) checkProvider();
  }, []);

  if (!wallet) return <Alert>Connector not found {context.connector.id}</Alert>;

  return (
    <AnimatePresence>
      {status === states.QRCODE && (
        <motion.div
          key={states.QRCODE}
          initial={'initial'}
          animate={'animate'}
          exit={'exit'}
          variants={contentVariants}
        >
          <ConnectWithQRCode
            switchConnectMethod={(id?: string) => {
              //if (id) setId(id);
              setStatus(states.INJECTOR);
              setTimeout(context.triggerResize, 10); // delay required here for modal to resize
            }}
          />
        </motion.div>
      )}
      {status === states.INJECTOR && (
        <motion.div
          key={states.INJECTOR}
          initial={'initial'}
          animate={'animate'}
          exit={'exit'}
          variants={contentVariants}
        >
          <ConnectWithInjector
            switchConnectMethod={(id?: string) => {
              //if (id) setId(id);
              setStatus(states.QRCODE);
              setTimeout(context.triggerResize, 10); // delay required here for modal to resize
            }}
          />
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ConnectUsing;
</file>

<file path="packages/connectkit/src/components/ConnectModal/ConnectWithQRCode.tsx">
import React from 'react';
import { routes, useContext } from '../ConnectKit';

import { useWalletConnectModal } from '../../hooks/useWalletConnectModal';

import {
  detectBrowser,
  isFamilyAccountsConnector,
  isWalletConnectConnector,
} from '../../utils';

import { PageContent, ModalContent } from '../Common/Modal/styles';
import { OrDivider } from '../Common/Modal';

import CustomQRCode from '../Common/CustomQRCode';
import Button from '../Common/Button';
import ScanIconWithLogos from '../../assets/ScanIconWithLogos';
import { ExternalLinkIcon } from '../../assets/icons';
import CopyToClipboard from '../Common/CopyToClipboard';
import useLocales from '../../hooks/useLocales';

import { useWallet } from '../../wallets/useWallets';
import { useWeb3 } from '../contexts/web3';

const ConnectWithQRCode: React.FC<{
  switchConnectMethod: (id?: string) => void;
}> = ({ switchConnectMethod }) => {
  const context = useContext();

  const id = context.connector.id;

  const wallet = useWallet(context.connector.id);

  const { open: openW3M, isOpen: isOpenW3M } = useWalletConnectModal();
  const {
    connect: { getUri },
  } = useWeb3();

  const wcUri = getUri(id);
  const uri = wcUri
    ? wallet?.getWalletConnectDeeplink?.(wcUri) ?? wcUri
    : undefined;

  const locales = useLocales({
    CONNECTORNAME: wallet?.name,
  });

  if (!wallet) return <>Wallet not found {context.connector.id}</>;

  const downloads = wallet?.downloadUrls;
  const extensions = {
    chrome: downloads?.chrome,
    firefox: downloads?.firefox,
    brave: downloads?.brave,
    edge: downloads?.edge,
    safari: downloads?.safari,
  };

  const browser = detectBrowser();

  const hasApps = downloads && Object.keys(downloads).length !== 0;

  const suggestedExtension = extensions
    ? {
        name: Object.keys(extensions)[0],
        label:
          Object.keys(extensions)[0]?.charAt(0).toUpperCase() +
          Object.keys(extensions)[0]?.slice(1), // Capitalise first letter, but this might be better suited as a lookup table
        url: extensions[Object.keys(extensions)[0]],
      }
    : undefined;

  const showAdditionalOptions = isWalletConnectConnector(id);

  return (
    <PageContent>
      <ModalContent style={{ paddingBottom: 8, gap: 14 }}>
        <CustomQRCode
          value={uri}
          image={wallet?.icon}
          tooltipMessage={
            isWalletConnectConnector(id) ? (
              <>
                <ScanIconWithLogos />
                <span>{locales.scanScreen_tooltip_walletConnect}</span>
              </>
            ) : (
              <>
                <ScanIconWithLogos logo={wallet?.icon} />
                <span>{locales.scanScreen_tooltip_default}</span>
              </>
            )
          }
        />
        {showAdditionalOptions ? (
          <OrDivider />
        ) : (
          hasApps && <OrDivider>{locales.dontHaveTheApp}</OrDivider>
        )}
      </ModalContent>

      {showAdditionalOptions && ( // for walletConnect
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: 14,
          }}
        >
          {context.options?.walletConnectCTA !== 'modal' && (
            <CopyToClipboard variant="button" string={uri}>
              {context.options?.walletConnectCTA === 'link'
                ? locales.copyToClipboard
                : locales.copyCode}
            </CopyToClipboard>
          )}
          {context.options?.walletConnectCTA !== 'link' && (
            <Button
              icon={<ExternalLinkIcon />}
              onClick={openW3M}
              disabled={isOpenW3M}
              waiting={isOpenW3M}
            >
              {context.options?.walletConnectCTA === 'modal'
                ? locales.useWalletConnectModal
                : locales.useModal}
            </Button>
          )}
        </div>
      )}

      {isFamilyAccountsConnector(wallet.id) && (
        <>
          <OrDivider />
          <Button onClick={() => switchConnectMethod(id)}>
            {locales.loginWithEmailOrPhone}
          </Button>
        </>
      )}
      {/*
      {hasExtensionInstalled && ( // Run the extension
        <Button
          icon={connectorInfo?.logos.default}
          roundedIcon
          onClick={() => switchConnectMethod(id)}
        >
          Open {connectorInfo?.name}
        </Button>
      )}

      {!hasExtensionInstalled && extensionUrl && (
        <Button href={extensionUrl} icon={<BrowserIcon />}>
          {locales.installTheExtension}
        </Button>
      )}
      */}

      {hasApps && (
        <>
          <Button
            onClick={() => {
              context.setRoute(routes.DOWNLOAD);
            }}
            /*
            icon={
              <div style={{ background: connectorInfo?.icon }}>
                {connectorInfo?.logos.default}
              </div>
            }
            roundedIcon
            */
            download
          >
            {locales.getWalletName}
          </Button>
        </>
      )}
      {/*
        {suggestedExtension && (
          <Button
            href={suggestedExtension?.url}
            icon={<BrowserIcon browser={suggestedExtension?.name} />}
          >
            Install on {suggestedExtension?.label}
          </Button>
        }
        */}
    </PageContent>
  );
};

export default ConnectWithQRCode;
</file>

<file path="packages/connectkit/src/components/ConnectModal/demo.tsx">
import { useEffect, useRef, useState } from 'react';
import { useAccount } from 'wagmi';
import { routes, useContext } from '../ConnectKit';
import { CustomTheme, Languages, Theme, Mode } from '../../types';
import Modal from '../Common/Modal';

import Onboarding from '../Pages/Onboarding';
import About from '../Pages/About';
import Connectors from '../Pages/Connectors';
import ConnectUsing from './ConnectUsing';
import DownloadApp from '../Pages/DownloadApp';
import Profile from '../Pages/Profile';
import SwitchNetworks from '../Pages/SwitchNetworks';
import MobileConnectors from '../Pages/MobileConnectors';
import SignInWithEthereum from '../Pages/SignInWithEthereum';

import { ConnectKitButton } from '../ConnectButton';
import { getAppName } from '../../defaultConfig';
import { ConnectKitThemeProvider } from '../ConnectKitThemeProvider/ConnectKitThemeProvider';

import styled from './../../styles/styled';
import { keyframes } from 'styled-components';
import { Web3ContextProvider } from '../contexts/web3';
import { useChainIsSupported } from '../../hooks/useChainIsSupported';

const dist = 8;
const shake = keyframes`
  0%{ transform:none; }
  25%{ transform:translateX(${dist}px); }
  50%{ transform:translateX(-${dist}px); }
  75%{ transform:translateX(${dist}px); }
  100%{ transform:none; }
`;

const cursorIn = keyframes`
  0%{ transform:translate(500%,100%); opacity:0; }
  60%{ transform:translate(25%,-20%); opacity:1; }
  70%{ transform:translate(25%,-20%); }
  85%{ transform:translate(25%,-20%) scale(0.9); }
  100%{ transform:translate(25%,-20%) scale(1); opacity:1; }
`;

const Cursor = styled.div`
  z-index: 2;
  position: absolute;
  top: 50%;
  left: 50%;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: rgba(0, 0, 0, 0.5);
  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.4), 0 4px 6px rgba(0, 0, 0, 0.1);
  opacity: 0;
  &.play {
    animation: ${cursorIn} 1300ms 200ms cubic-bezier(0.16, 1, 0.6, 1) both;
  }
`;

const Container = styled.div`
  z-index: 1;
  position: absolute;
  inset: 0;
  &.shake {
    animation: ${shake} 300ms 100ms cubic-bezier(0.16, 1, 0.6, 1) both;
  }
`;
const ButtonContainer = styled.div`
  z-index: 1;
  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  &:before {
    z-index: 9;
    content: '';
    position: absolute;
    inset: 0;
  }
`;

const customThemeDefault: object = {};

const ConnectModal: React.FC<{
  theme?: Theme;
  mode?: Mode;
  customTheme?: CustomTheme;
  lang?: Languages;
  inline?: boolean;
  open?: boolean;
  onClose?: () => void;
}> = ({
  theme = 'auto',
  customTheme = customThemeDefault,
  lang = 'en-US',
  mode = 'auto',
  inline = false,
  open,
  onClose,
}) => {
  const context = useContext();

  const { isConnected, chain } = useAccount();
  const chainIsSupported = useChainIsSupported(chain?.id);

  //if chain is unsupported we enforce a "switch chain" prompt
  const closeable = !(
    context.options?.enforceSupportedChains &&
    isConnected &&
    !chainIsSupported
  );

  const showBackButton =
    closeable &&
    context.route !== routes.CONNECTORS &&
    context.route !== routes.PROFILE;

  const showInfoButton = closeable && context.route !== routes.PROFILE;

  const onBack = () => {
    if (context.route === routes.SIGNINWITHETHEREUM) {
      context.setRoute(routes.PROFILE);
    } else if (context.route === routes.SWITCHNETWORKS) {
      context.setRoute(routes.PROFILE);
    } else if (context.route === routes.DOWNLOAD) {
      context.setRoute(routes.CONNECT);
    } else {
      context.setRoute(routes.CONNECTORS);
    }
  };

  const pages: any = {
    onboarding: <Onboarding />,
    about: <About />,
    download: <DownloadApp />,
    connectors: <Connectors />,
    mobileConnectors: <MobileConnectors />,
    connect: <ConnectUsing />,
    profile: <Profile closeModal={() => setIsOpen(false)} />,
    switchNetworks: <SwitchNetworks />,
    signInWithEthereum: <SignInWithEthereum />,
  };

  const ref = useRef<HTMLDivElement | null>(null);
  const cursorRef = useRef<HTMLDivElement | null>(null);
  const [isOpen, setIsOpen] = useState<boolean>(open ?? false);

  useEffect(() => {
    if (open)
      context.setRoute(isConnected ? routes.PROFILE : routes.CONNECTORS);
    setIsOpen(open ?? false);
  }, [open]);

  useEffect(() => {
    if (isOpen)
      context.setRoute(isConnected ? routes.PROFILE : routes.CONNECTORS);
  }, [isOpen]);

  useEffect(() => {
    if (!isOpen && inline) {
      if (onClose) {
        if (cursorRef.current) {
          cursorRef.current.classList.remove('play');
          void cursorRef.current.offsetWidth;
          cursorRef.current.classList.add('play');
        }
        setTimeout(() => {
          setIsOpen(true);
        }, 1500);
      } else {
        setTimeout(() => {
          setIsOpen(true);
        }, 500);
      }
    }
  }, [isOpen]);
  //useEffect(() => setIsOpen(false), [isConnected]);

  const onModalClose = () => {
    if (onClose) {
      setIsOpen(false);
      onClose();
    } else {
      if (ref.current) {
        // reset animation
        ref.current.classList.remove('shake');
        void ref.current.offsetWidth;
        ref.current.classList.add('shake');
      }
    }
  };

  useEffect(() => {
    if (isConnected) {
      if (
        context.route !== routes.PROFILE ||
        context.route !== routes.SIGNINWITHETHEREUM
      ) {
        if (
          context.signInWithEthereum &&
          !context.options?.disableSiweRedirect
        ) {
          context.setRoute(routes.SIGNINWITHETHEREUM);
        } else {
          onModalClose(); // Hide on connect
        }
      }
    } else {
      onModalClose(); // Hide on connect
    }
  }, [isConnected]);

  /* When pulling data into WalletConnect, it prioritises the og:title tag over the title tag */
  useEffect(() => {
    const appName = getAppName();
    if (!appName || (!open && !inline)) return;

    const title = document.createElement('meta');
    title.setAttribute('property', 'og:title');
    title.setAttribute('content', appName);
    document.head.prepend(title);

    return () => {
      document.head.removeChild(title);
    };
  }, [open, inline]);

  return (
    <Web3ContextProvider enabled={isOpen}>
      <ConnectKitThemeProvider
        theme={theme}
        customTheme={customTheme}
        mode={mode}
      >
        <Container ref={ref}>
          {inline && onClose && (
            <>
              <Cursor ref={cursorRef} />
              <ButtonContainer>
                <ConnectKitButton
                  customTheme={customTheme}
                  theme={theme}
                  mode={mode}
                />
              </ButtonContainer>
            </>
          )}
          <Modal
            demo={{ theme: theme, customTheme: customTheme, mode: mode }}
            onClose={closeable ? onModalClose : undefined}
            positionInside={inline}
            open={isOpen}
            pages={pages}
            pageId={context.route}
            onInfo={
              showInfoButton ? () => context.setRoute(routes.ABOUT) : undefined
            }
            onBack={showBackButton ? onBack : undefined}
          />
        </Container>
      </ConnectKitThemeProvider>
    </Web3ContextProvider>
  );
};

export default ConnectModal;
</file>

<file path="packages/connectkit/src/components/ConnectModal/index.tsx">
import { useEffect } from 'react';
import { useAccount } from 'wagmi';
import { routes, useContext } from '../ConnectKit';
import { CustomTheme, Languages, Mode, Theme } from '../../types';
import Modal from '../Common/Modal';

import Onboarding from '../Pages/Onboarding';
import About from '../Pages/About';
import Connectors from '../Pages/Connectors';
import MobileConnectors from '../Pages/MobileConnectors';
import ConnectUsing from './ConnectUsing';
import DownloadApp from '../Pages/DownloadApp';
import Profile from '../Pages/Profile';
import SwitchNetworks from '../Pages/SwitchNetworks';
import SignInWithEthereum from '../Pages/SignInWithEthereum';

import { getAppIcon, getAppName } from '../../defaultConfig';
import { ConnectKitThemeProvider } from '../ConnectKitThemeProvider/ConnectKitThemeProvider';
import { useChainIsSupported } from '../../hooks/useChainIsSupported';

const customThemeDefault: object = {};

const ConnectModal: React.FC<{
  mode?: Mode;
  theme?: Theme;
  customTheme?: CustomTheme;
  lang?: Languages;
}> = ({
  mode = 'auto',
  theme = 'auto',
  customTheme = customThemeDefault,
  lang = 'en-US',
}) => {
  const context = useContext();
  const { isConnected, chain } = useAccount();
  const chainIsSupported = useChainIsSupported(chain?.id);

  //if chain is unsupported we enforce a "switch chain" prompt
  const closeable = !(
    context.options?.enforceSupportedChains &&
    isConnected &&
    !chainIsSupported
  );

  const showBackButton =
    closeable &&
    context.route !== routes.CONNECTORS &&
    context.route !== routes.PROFILE;

  const showInfoButton = closeable && context.route !== routes.PROFILE;

  const onBack = () => {
    if (context.route === routes.SIGNINWITHETHEREUM) {
      context.setRoute(routes.PROFILE);
    } else if (context.route === routes.SWITCHNETWORKS) {
      context.setRoute(routes.PROFILE);
    } else if (context.route === routes.DOWNLOAD) {
      context.setRoute(routes.CONNECT);
    } else {
      context.setRoute(routes.CONNECTORS);
    }
  };

  const pages: any = {
    onboarding: <Onboarding />,
    about: <About />,
    download: <DownloadApp />,
    connectors: <Connectors />,
    mobileConnectors: <MobileConnectors />,
    connect: <ConnectUsing />,
    profile: <Profile />,
    switchNetworks: <SwitchNetworks />,
    signInWithEthereum: <SignInWithEthereum />,
  };

  function hide() {
    context.setOpen(false);
  }

  useEffect(() => {
    if (isConnected) {
      if (
        context.route !== routes.PROFILE ||
        context.route !== routes.SIGNINWITHETHEREUM
      ) {
        if (
          context.signInWithEthereum &&
          !context.options?.disableSiweRedirect
        ) {
          context.setRoute(routes.SIGNINWITHETHEREUM);
        } else {
          hide(); // Hide on connect
        }
      }
    } else {
      hide(); // Hide on connect
    }
  }, [isConnected]);

  useEffect(() => context.setMode(mode), [mode]);
  useEffect(() => context.setTheme(theme), [theme]);
  useEffect(() => context.setCustomTheme(customTheme), [customTheme]);
  useEffect(() => context.setLang(lang), [lang]);

  /* When pulling data into WalletConnect, it prioritises the og:title tag over the title tag */
  useEffect(() => {
    const appName = getAppName();
    if (!appName || !context.open) return;

    const title = document.createElement('meta');
    title.setAttribute('property', 'og:title');
    title.setAttribute('content', appName);
    document.head.prepend(title);

    /*
    // TODO:  When pulling data into WalletConnect, figure out which icon gets used and replace with appIcon if available 
    const appIcon = getAppIcon();
    const icon = document.createElement('link');
    if (appIcon) {
      icon.setAttribute('rel', 'icon');
      icon.setAttribute('href', appIcon);
      document.head.prepend(icon);
    }*/

    return () => {
      document.head.removeChild(title);
      //if (appIcon) document.head.removeChild(icon);
    };
  }, [context.open]);

  return (
    <ConnectKitThemeProvider
      theme={theme}
      customTheme={customTheme}
      mode={mode}
    >
      <Modal
        open={context.open}
        pages={pages}
        pageId={context.route}
        onClose={closeable ? hide : undefined}
        onInfo={
          showInfoButton ? () => context.setRoute(routes.ABOUT) : undefined
        }
        onBack={showBackButton ? onBack : undefined}
      />
    </ConnectKitThemeProvider>
  );
};

export default ConnectModal;
</file>

<file path="packages/connectkit/src/components/contexts/web3/index.tsx">
/**
 * This provider is responsible for handling reusable web3 logic across the app.
 */

import React from 'react';

import { Address, Chain } from 'viem';
import { useAccount } from 'wagmi';

import { useChains } from '../../../hooks/useChains';
import { useWalletConnectUri } from '../../../hooks/connectors/useWalletConnectUri';
import { useChainIsSupported } from '../../../hooks/useChainIsSupported';

type Web3Context = {
  connect: {
    getUri: (id?: string) => string;
  };
  dapp: {
    chains: Chain[];
  };
  account?: {
    chain: Chain;
    chainIsSupported: boolean;
    address: Address;
  };
};

const Web3Context = React.createContext({
  connect: {
    getUri: () => '',
  },
  dapp: {
    chains: [],
  },
  account: undefined,
} as Web3Context);

export const Web3ContextProvider = ({
  enabled,
  children,
}: {
  enabled?: boolean;
  children: React.ReactNode;
}) => {
  const { uri: walletConnectUri } = useWalletConnectUri({
    enabled,
  });

  const { address: currentAddress, chain } = useAccount();
  const chainIsSupported = useChainIsSupported(chain?.id);
  const chains = useChains();

  const value = {
    connect: {
      getUri: (id?: string) => {
        return walletConnectUri;
      },
    },
    dapp: {
      chains,
    },
    account: currentAddress
      ? {
          chain,
          chainIsSupported,
          address: currentAddress,
        }
      : undefined,
  } as Web3Context;

  return <Web3Context.Provider value={value}>{children}</Web3Context.Provider>;
};

export const useWeb3 = () => React.useContext(Web3Context);
</file>

<file path="packages/connectkit/src/components/NetworkButton/index.tsx">
import React, { useState } from 'react';
import { All } from './../../types';

import { AnimatePresence } from 'framer-motion';

import { useAccount } from 'wagmi';
import useIsMounted from '../../hooks/useIsMounted';

import Chain from '../Common/Chain';
import DynamicContainer from '../Common/DynamicContainer';
import { chainConfigs } from '../../constants/chainConfigs';
import ThemedButton from '../Common/ThemedButton';
import ChainSelectDropdown from '../Common/ChainSelectDropdown';
import { ConnectKitThemeProvider } from '../ConnectKitThemeProvider/ConnectKitThemeProvider';
import { motion } from 'framer-motion';
import styled from './../../styles/styled';
import { useContext } from '../ConnectKit';

const Container = styled(motion.div)`
  position: relative;
`;

const ArrowIcon = (
  <svg
    width="10"
    height="7"
    viewBox="0 0 10 7"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M0.292893 0.792893C0.683417 0.402369 1.31658 0.402369 1.70711 0.792893L5 4.08579L8.29289 0.792893C8.68342 0.402369 9.31658 0.402369 9.70711 0.792893C10.0976 1.18342 10.0976 1.81658 9.70711 2.20711L5.70711 6.20711C5.31658 6.59763 4.68342 6.59763 4.29289 6.20711L0.292893 2.20711C-0.0976311 1.81658 -0.0976311 1.18342 0.292893 0.792893Z"
      fill="currentColor"
    />
  </svg>
);

type NetworkButtonProps = {
  hideIcon?: boolean;
  hideName?: boolean;
};

const NetworkButton: React.FC<NetworkButtonProps & All> = ({
  theme,
  mode,
  customTheme,
  hideIcon,
  hideName,
}) => {
  const context = useContext();
  const isMounted = useIsMounted();

  const [open, setOpen] = useState(false);

  const { isConnected, chain } = useAccount();

  if (!isMounted) return null;

  const currentChain = chainConfigs.find((c) => c.id === chain?.id);
  return (
    <ConnectKitThemeProvider
      theme={theme ?? context.theme}
      mode={mode ?? context.mode}
      customTheme={customTheme ?? context.customTheme}
    >
      <AnimatePresence initial={false}>
        {!(hideIcon && hideName) && (isConnected || chain) && (
          <Container
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2, ease: 'linear' }}
          >
            <ChainSelectDropdown open={open} onClose={() => setOpen(false)}>
              <ThemedButton
                theme={theme}
                mode={mode}
                customTheme={customTheme}
                onClick={() => setOpen(true)}
              >
                <div
                  style={{
                    display: 'flex',
                    gap: 8,
                    alignItems: 'center',
                    justifyContent: 'center',
                  }}
                >
                  {!hideIcon && (
                    <div>
                      <Chain id={chain?.id} />
                    </div>
                  )}
                  <AnimatePresence initial={false}>
                    {!hideName && (
                      <div>
                        <DynamicContainer id={`chain-${chain?.id}`}>
                          {currentChain?.name ?? chain?.name}
                        </DynamicContainer>
                      </div>
                    )}
                  </AnimatePresence>
                  <div style={{ minWidth: 10, transform: 'translateY(1px)' }}>
                    {ArrowIcon}
                  </div>
                </div>
              </ThemedButton>
            </ChainSelectDropdown>
          </Container>
        )}
      </AnimatePresence>
    </ConnectKitThemeProvider>
  );
};
export default NetworkButton;
</file>

<file path="packages/connectkit/src/components/Pages/About/index.tsx">
import React, { useEffect, useRef, useState } from 'react';
import {
  ImageContainer,
  ImageContainerInner,
  MobileImageContainer,
  Slider,
  Slides,
  Slide,
  Dots,
  Dot,
} from './styles';

import {
  PageContent,
  ModalBody,
  ModalContent,
  ModalH1,
} from '../../Common/Modal/styles';

import Button from '../../Common/Button';
import { Easing, SlideOne, SlideThree, SlideTwo } from './graphics';
import { AnimatePresence, MotionConfig } from 'framer-motion';
import { OrDivider } from '../../Common/Modal';
import useLocales from '../../../hooks/useLocales';
import FitText from '../../Common/FitText';
import { useContext } from '../../ConnectKit';

const About: React.FC = () => {
  const locales = useLocales({
    //CONNECTORNAME: connector.name,
  });
  const context = useContext();

  const ctaUrl =
    context.options?.ethereumOnboardingUrl ?? locales.aboutScreen_ctaUrl;

  const [ready, setReady] = useState(true);
  const [slider, setSlider] = useState(0);
  const interacted = useRef(false);
  const scrollPos = useRef(0);

  const animationEase: Easing = [0.16, 1, 0.3, 1];
  const animationDuration = 600;
  const autoplayDelay = 5100;

  let interval: ReturnType<typeof setTimeout>;
  useEffect(() => {
    //interval = setTimeout(nextSlide, autoplayDelay);

    return () => clearInterval(interval);
  }, []);

  const isSwipe = () => {
    if (sliderRef.current) {
      const { overflow } = getComputedStyle(sliderRef.current);
      return overflow !== 'visible';
    }
    return false;
  };

  const gotoSlide = (index: number) => {
    setReady(false);
    if (isSwipe()) {
      scrollToSlide(index);
    } else {
      setSlider(index);
    }
  };

  const nextSlide = () => {
    if (interacted.current) return;

    setSlider((prevSlider) => {
      const index = (prevSlider + 1) % slides.length;
      scrollToSlide(index);
      return index;
    });
    interval = setTimeout(nextSlide, autoplayDelay);
  };

  const scrollToSlide = (index: number) => {
    if (sliderRef.current) {
      const { offsetWidth: width } = sliderRef.current;
      sliderRef.current.scrollLeft = width * index;
      setTimeout(() => setSlider(index), 100);
    }
  };

  // This event should not fire on mobile
  const onScroll = () => {
    if (!sliderRef.current) return;

    const { offsetWidth: width, scrollLeft: x } = sliderRef.current;

    const prevScroll = scrollPos.current;
    scrollPos.current = x;

    // Limit when the slider should be set after swipe
    const threshold = 4;
    if (prevScroll - x > -threshold && prevScroll - x < threshold) {
      const currentSlide = Math.round(x / width);
      setSlider(currentSlide);
    }
  };
  const onTouchMove = () => {
    didInteract();
  };
  const onTouchEnd = () => {
    const { offsetWidth: width, scrollLeft: x } = sliderRef.current;
    const currentSlide = Math.round(x / width);
    setSlider(currentSlide);
  };
  const didInteract = () => {
    interacted.current = true;
    clearTimeout(interval);
  };

  const sliderRef = useRef<any>(null);
  useEffect(() => {
    if (!sliderRef.current) return;
    sliderRef.current.addEventListener('scroll', onScroll);
    sliderRef.current.addEventListener('touchmove', onTouchMove);
    sliderRef.current.addEventListener('touchend', onTouchEnd);
    return () => {
      if (!sliderRef.current) return;
      sliderRef.current.removeEventListener('scroll', onScroll);
      sliderRef.current.removeEventListener('touchmove', onTouchMove);
      sliderRef.current.removeEventListener('touchend', onTouchEnd);
    };
  }, [sliderRef]);

  const graphics: React.ReactNode[] = [
    <SlideOne
      layoutId={'graphicCircle'}
      duration={animationDuration}
      ease={animationEase}
    />,
    <SlideTwo
      layoutId={'graphicCircle'}
      duration={animationDuration}
      ease={animationEase}
    />,
    <SlideThree
      layoutId={'graphicCircle'}
      duration={animationDuration}
      ease={animationEase}
    />,
  ];

  const mobileGraphics: React.ReactNode[] = [
    <SlideOne duration={animationDuration} ease={animationEase} />,
    <SlideTwo duration={animationDuration} ease={animationEase} />,
    <SlideThree duration={animationDuration} ease={animationEase} />,
  ];

  // Adjust height of ModalBody to fit content based on language
  const slideHeight = (() => {
    switch (context.options?.language) {
      case 'en-US':
      case 'zh-CN':
        return 64;
      default:
        return 84;
    }
  })();

  const slides: React.ReactNode[] = [
    <>
      <ModalH1 style={{ height: 24 }} $small>
        <FitText>{locales.aboutScreen_a_h1}</FitText>
      </ModalH1>
      <ModalBody style={{ height: slideHeight }}>
        <FitText>{locales.aboutScreen_a_p}</FitText>
      </ModalBody>
    </>,
    <>
      <ModalH1 style={{ height: 24 }} $small>
        <FitText>{locales.aboutScreen_b_h1}</FitText>
      </ModalH1>
      <ModalBody style={{ height: slideHeight }}>
        <FitText>{locales.aboutScreen_b_p}</FitText>
      </ModalBody>
    </>,
    <>
      <ModalH1 style={{ height: 24 }} $small>
        <FitText>{locales.aboutScreen_c_h1}</FitText>
      </ModalH1>
      <ModalBody style={{ height: slideHeight }}>
        <FitText>{locales.aboutScreen_c_p}</FitText>
      </ModalBody>
    </>,
  ];

  return (
    <PageContent>
      <Slider>
        <ImageContainer>
          <MotionConfig
            transition={{
              duration: animationDuration / 1000,
              ease: animationEase,
            }}
          >
            <AnimatePresence
              initial={false}
              onExitComplete={() => setReady(true)}
            >
              {graphics.map(
                (g, i) =>
                  slider === i && (
                    <ImageContainerInner
                      key={i}
                      style={{ position: 'absolute' }}
                    >
                      {g}
                    </ImageContainerInner>
                  )
              )}
            </AnimatePresence>
          </MotionConfig>
        </ImageContainer>
        <Slides ref={sliderRef}>
          <AnimatePresence>
            {slides.map((s, i) => (
              <Slide key={i} $active={slider === i}>
                <MobileImageContainer>
                  <MotionConfig
                    transition={{
                      duration: 0,
                    }}
                  >
                    <ImageContainerInner>
                      {mobileGraphics[i]}
                    </ImageContainerInner>
                  </MotionConfig>
                </MobileImageContainer>
                <ModalContent style={{ gap: 8, paddingBottom: 0 }}>
                  {s}
                </ModalContent>
              </Slide>
            ))}
          </AnimatePresence>
        </Slides>
      </Slider>
      <OrDivider>
        <Dots>
          {slides.map((s, i) => (
            <Dot
              key={i}
              $active={slider === i}
              onClick={() => {
                didInteract();
                gotoSlide(i);
              }}
            />
          ))}
        </Dots>
      </OrDivider>
      <Button href={ctaUrl} arrow>
        {locales.aboutScreen_ctaText}
      </Button>
    </PageContent>
  );
};

export default About;
</file>

<file path="packages/connectkit/src/components/Pages/About/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';
import { css } from 'styled-components';
import defaultTheme from '../../../constants/defaultTheme';

const imageHeight = 208;

export const ImageContainer = styled.div`
  pointer-events: none;
  user-select: none;
  height: ${imageHeight}px;
  padding: 0 0 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  svg {
    display: block;
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    display: none;
  }
`;
export const ImageContainerInner = styled(motion.div)``;

export const MobileImageContainer = styled.div`
  pointer-events: none;
  user-select: none;
  height: ${imageHeight}px;
  padding: 0 0 12px;
  display: none;
  align-items: center;
  justify-content: center;
  svg {
    display: block;
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    display: flex;
  }
`;

export const Slides = styled.div`
  position: relative;
`;

export const Slide = styled(motion.div)<{ $active?: boolean }>`
  scroll-snap-type: x mandatory;
  position: relative;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  padding: 0 4px 8px;
  /* will-change: transform, opacity; */
  transition: 400ms 50ms cubic-bezier(0.16, 1, 0.3, 1);
  transition-property: transform, opacity;
  ${(props) =>
    !props.$active &&
    css`
      pointer-events: none;
      position: absolute;
      opacity: 0;
      transform: scale(0.95);
      transition-duration: 300ms;
      transition-delay: 0ms;
    `}
`;
export const Slider = styled.div`
  --background: var(--ck-body-background-secondary);
  --background-transparent: var(--ck-body-background-transparent, transparent);
  position: relative;
  padding: 0 0 4px;
  border-radius: 16px;
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    margin: 0 -24px;
    ${Slides} {
      position: relative;
      z-index: 3;
      display: flex;
      overflow: auto;
      scroll-behavior: smooth;
      scroll-snap-type: x mandatory;
      margin-top: -${imageHeight}px;
      padding-top: ${imageHeight}px;
      -ms-overflow-style: none; /* Internet Explorer 10+ */
      scrollbar-width: none; /* Firefox */
      &::-webkit-scrollbar {
        display: none; /* Safari and Chrome */
      }
    }
    ${Slide} {
      position: relative;
      opacity: 1;
      transform: none;
      flex-shrink: 0;
      scroll-snap-align: start;
    }
  }
`;

export const Dots = styled.div`
  position: relative;
  top: -1px;
  display: flex;
  justify-content: center;
  pointer-events: auto;
`;
export const Dot = styled.button<{ $active: boolean }>`
  display: flex;
  align-items: center;
  height: 28px;
  padding: 2px;
  background: none;
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    padding: 4px;
    &:before {
      transform: none !important;
    }
  }
  &:before {
    content: '';
    display: block;
    width: 16px;
    height: 3px;
    opacity: 0.12;
    border-radius: 4px;
    background: var(--ck-accent-color, var(--ck-body-color));
    transition: transform 200ms ease, opacity 180ms ease;
  }
  ${(props) =>
    props.$active
      ? css`
          cursor: default;
          &:before {
            opacity: 1;
          }
        `
      : !props.disabled &&
        css`
          cursor: pointer;
          &:hover:before {
            transform: scaleY(3.5);
          }
          &:active:before {
          }
        `}
`;
</file>

<file path="packages/connectkit/src/components/Pages/Connectors/index.tsx">
import React from 'react';
import { useContext, routes } from '../../ConnectKit';

import {
  LearnMoreContainer,
  LearnMoreButton,
  InfoBox,
  InfoBoxButtons,
  Container,
} from './styles';
import {
  PageContent,
  Disclaimer,
  ModalContent,
  ModalH1,
  ModalBody,
} from '../../Common/Modal/styles';
import WalletIcon from '../../../assets/wallet';

import useLocales from '../../../hooks/useLocales';
import ConnectorList from '../../Common/ConnectorList';
import useIsMobile from '../../../hooks/useIsMobile';
import Button from '../../Common/Button';
import {
  useFamilyAccountsConnector,
  useFamilyConnector,
} from '../../../hooks/useConnectors';
import { OrDivider } from '../../Common/Modal';
import { FamilyAccountsButton } from '../../Common/FamilyAccountsButton';
import { isFamily } from '../../../utils/wallets';

const Wallets: React.FC = () => {
  const context = useContext();
  const locales = useLocales({});

  const isMobile = useIsMobile();
  const familyConnector = useFamilyConnector();
  const familyAccountsConnector = useFamilyAccountsConnector();

  return (
    <PageContent
      style={{
        width: 312,
        paddingTop: familyAccountsConnector ? 32 : undefined,
      }}
    >
      <Container>
        {familyAccountsConnector && (
          <>
            <FamilyAccountsButton
              onClick={() => {
                if (familyConnector && isFamily()) {
                  context.setConnector(familyConnector);
                } else {
                  context.setConnector(familyAccountsConnector);
                }
                context.setRoute(routes.CONNECT);
              }}
            />
            <OrDivider hideHr>{locales.orSelectWallet}</OrDivider>
          </>
        )}
        <div>
          <ConnectorList />
          {isMobile ? (
            <>
              <InfoBox>
                <ModalContent style={{ padding: 0, textAlign: 'left' }}>
                  <ModalH1 $small>{locales.connectorsScreen_h1}</ModalH1>
                  <ModalBody>{locales.connectorsScreen_p}</ModalBody>
                </ModalContent>
                <InfoBoxButtons>
                  {!context.options?.hideQuestionMarkCTA && (
                    <Button
                      variant={'tertiary'}
                      onClick={() => context.setRoute(routes.ABOUT)}
                    >
                      {locales.learnMore}
                    </Button>
                  )}
                  {!context.options?.hideNoWalletCTA && (
                    <Button
                      variant={'tertiary'}
                      onClick={() => context.setRoute(routes.ONBOARDING)}
                    >
                      {locales.getWallet}
                    </Button>
                  )}
                </InfoBoxButtons>
              </InfoBox>
            </>
          ) : (
            <>
              {!context.options?.hideNoWalletCTA && (
                <LearnMoreContainer>
                  <LearnMoreButton
                    onClick={() => context.setRoute(routes.ONBOARDING)}
                  >
                    <WalletIcon /> {locales.connectorsScreen_newcomer}
                  </LearnMoreButton>
                </LearnMoreContainer>
              )}
            </>
          )}
          {context.options?.disclaimer && (
            <Disclaimer style={{ visibility: 'hidden', pointerEvents: 'none' }}>
              <div>{context.options?.disclaimer}</div>
            </Disclaimer>
          )}
        </div>
      </Container>
    </PageContent>
  );
};

export default Wallets;
</file>

<file path="packages/connectkit/src/components/Pages/Connectors/styles.ts">
import styled from './../../../styles/styled';
import { keyframes } from 'styled-components';

import { motion } from 'framer-motion';
import { ModalBody } from '../../Common/Modal/styles';

const Shimmer = keyframes`
  0%{ transform: translate(-100%) rotate(-45deg); }
  100%{ transform: translate(100%) rotate(-80deg); }
`;

export const Container = styled(motion.div)`
  display: flex;
  flex-direction: column;
  gap: 12px;
`;

export const InfoBox = styled.div`
  padding: 24px 24px 28px;
  border-radius: var(--ck-tertiary-border-radius, 24px);
  box-shadow: var(--ck-tertiary-box-shadow, none);
  background: var(--ck-body-background-tertiary);
  ${ModalBody} {
    max-width: none;
  }
`;
export const InfoBoxButtons = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
  margin: 5px -8px -12px;
  button {
  }
`;
export const LearnMoreContainer = styled(motion.div)`
  text-align: center;
  margin-top: 16px;
  margin-bottom: -6px;
`;
export const LearnMoreButton = styled(motion.button)`
  appearance: none;
  user-select: none;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  height: 42px;
  padding: 0 16px;
  border-radius: 6px;
  background: none;
  color: var(--ck-body-color-muted);
  font-size: 15px;
  line-height: 18px;
  font-weight: 500;
  /* will-change: transform; */
  transition: color 200ms ease, transform 100ms ease;
  svg {
    transition: all 100ms ease-out;
    display: block;
    position: relative;
    top: 2px;
    left: 2px;
    transform: translateZ(0px);
    path,
    circle {
      transition: all 100ms ease-out;
    }
    path:last-of-type {
      transform-origin: 0 0;
      transform: scaleX(1.3) skewY(-12deg);
      opacity: 0;
    }
    circle {
      transform: translate(20%, -15%);
    }
  }
  &:hover {
    color: var(--ck-body-color-muted-hover);
    svg {
      path,
      circle {
        opacity: 1;
        transform: none;
      }
    }
  }
  &:active {
    transform: scale(0.96);
  }
`;

export const ConnectorsContainer = styled(motion.div)`
  display: flex;
  flex-direction: column;
  gap: 12px;
  padding: 0 0 16px;
  overflow-y: scroll;
  max-height: 20rem;

  &::-webkit-scrollbar {
    display: none;
  }
`;

export const ConnectorButton = styled(motion.button)`
  cursor: pointer;
  user-select: none;
  position: relative;
  display: flex;
  align-items: center;
  padding: 0 20px;
  width: 100%;
  height: 64px;
  font-size: 17px;
  font-weight: var(--ck-primary-button-font-weight, 500);
  line-height: 20px;
  text-align: var(--ck-body-button-text-align, left);
  transition: 180ms ease;
  transition-property: background, color, box-shadow, transform, opacity;
  will-change: transform, box-shadow, background-color, color, opacity;

  --fallback-color: var(--ck-primary-button-color);
  --fallback-background: var(--ck-primary-button-background);
  --fallback-box-shadow: var(--ck-primary-button-box-shadow);
  --fallback-border-radius: var(--ck-primary-button-border-radius);

  --color: var(--ck-primary-button-color, var(--fallback-color));
  --background: var(--ck-primary-button-background, var(--fallback-background));
  --box-shadow: var(--ck-primary-button-box-shadow, var(--fallback-box-shadow));
  --border-radius: var(
    --ck-primary-button-border-radius,
    var(--fallback-border-radius)
  );

  --hover-color: var(--ck-primary-button-hover-color, var(--color));
  --hover-background: var(
    --ck-primary-button-hover-background,
    var(--background)
  );
  --hover-box-shadow: var(
    --ck-primary-button-hover-box-shadow,
    var(--box-shadow)
  );
  --hover-border-radius: var(
    --ck-primary-button-hover-border-radius,
    var(--border-radius)
  );

  --active-color: var(--ck-primary-button-active-color, var(--hover-color));
  --active-background: var(
    --ck-primary-button-active-background,
    var(--hover-background)
  );
  --active-box-shadow: var(
    --ck-primary-button-active-box-shadow,
    var(--hover-box-shadow)
  );
  --active-border-radius: var(
    --ck-primary-button-active-border-radius,
    var(--hover-border-radius)
  );

  color: var(--color);
  background: var(--background);
  box-shadow: var(--box-shadow);
  border-radius: var(--border-radius);

  &:disabled {
    transition: 180ms ease;
    opacity: 0.4;
  }

  --bg: var(--background);
  &:not(:disabled) {
    &:hover {
      color: var(--hover-color);
      background: var(--hover-background);
      box-shadow: var(--hover-box-shadow);
      border-radius: var(--hover-border-radius);
      --bg: var(--hover-background, var(--background));
    }
    &:focus-visible {
      transition-duration: 100ms;
      color: var(--hover-color);
      background: var(--hover-background);
      box-shadow: var(--hover-box-shadow);
      border-radius: var(--hover-border-radius);
      --bg: var(--hover-background, var(--background));
    }
    &:active {
      color: var(--active-color);
      background: var(--active-background);
      box-shadow: var(--active-box-shadow);
      border-radius: var(--active-border-radius);
      --bg: var(--active-background, var(--background));
    }
  }
`;
export const ConnectorRecentlyUsed = styled(motion.span)`
  position: relative;
  top: var(--ck-recent-badge-top-offset, 0.5px);
  display: inline-block;
  padding: 10px 7px;
  line-height: 0;
  font-size: 13px;
  font-weight: 400;
  border-radius: var(--ck-recent-badge-border-radius, var(--border-radius));
  color: var(
    --ck-recent-badge-color,
    var(--ck-accent-color, var(--ck-body-color-muted, currentColor))
  );
  background: var(--ck-recent-badge-background, transparent);
  overflow: hidden;
  span {
    display: inline-block;
    position: relative;
  }
  &:before {
    z-index: 1;
    content: '';
    position: absolute;
    inset: 0;
    opacity: 0.4;
    box-shadow: var(--ck-recent-badge-box-shadow, inset 0 0 0 1px currentColor);
    border-radius: inherit;
  }
  &:after {
    z-index: 2;
    content: '';
    position: absolute;
    inset: -10%;
    top: -110%;
    aspect-ratio: 1/1;
    opacity: 0.7;
    background: linear-gradient(
      170deg,
      transparent 10%,
      var(--ck-recent-badge-background, var(--bg)) 50%,
      transparent 90%
    );
    animation: ${Shimmer} 2s linear infinite;
  }
`;

export const ConnectorLabel = styled(motion.span)`
  display: flex;
  align-items: center;
  gap: 9px;
  width: 100%;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  padding: 2px 0;
  padding-right: 38px;
`;

export const ConnectorIcon = styled(motion.div)`
  position: absolute;
  right: 20px;
  width: 32px;
  height: 32px;
  overflow: hidden;
  svg,
  img {
    display: block;
    position: relative;
    pointer-events: none;
    overflow: hidden;
    border-radius: 27.5%;
    width: 100%;
    height: 100%;
  }
`;
</file>

<file path="packages/connectkit/src/components/Pages/DownloadApp/index.tsx">
import React from 'react';

import {
  PageContent,
  ModalBody,
  ModalContent,
} from '../../Common/Modal/styles';

import CustomQRCode from '../../Common/CustomQRCode';

import useLocales from '../../../hooks/useLocales';
import { useContext } from '../../ConnectKit';
import { useWallet } from '../../../wallets/useWallets';

const DownloadApp = () => {
  const context = useContext();
  const wallet = useWallet(context.connector.id);

  const locales = useLocales({
    CONNECTORNAME: wallet?.name,
  });

  if (!wallet) return <>Wallet not found</>;

  const downloads = {
    ios: wallet.downloadUrls?.ios,
    android: wallet.downloadUrls?.android,
    redirect: wallet.downloadUrls?.download,
  };

  const bodycopy =
    downloads.ios && downloads.android
      ? locales.downloadAppScreen_iosAndroid
      : downloads.ios
      ? locales.downloadAppScreen_ios
      : locales.downloadAppScreen_android;

  return (
    <PageContent>
      <ModalContent style={{ paddingBottom: 4, gap: 14 }}>
        {downloads.redirect && <CustomQRCode value={downloads.redirect} />}
        {!downloads.redirect && <>No download link available</>}
        <ModalBody
          style={{ fontSize: 15, lineHeight: '20px', padding: '0 12px' }}
        >
          {bodycopy}
        </ModalBody>
      </ModalContent>
    </PageContent>
  );
};

export default DownloadApp;
</file>

<file path="packages/connectkit/src/components/Pages/MobileConnectors/index.tsx">
import React from 'react';
import {
  Container,
  WalletList,
  WalletItem,
  WalletIcon,
  WalletLabel,
} from './styles';

import { PageContent, ModalContent } from '../../Common/Modal/styles';

import { useContext } from '../../ConnectKit';
import { useWalletConnectModal } from '../../../hooks/useWalletConnectModal';
import CopyToClipboard from '../../Common/CopyToClipboard';
import useLocales from '../../../hooks/useLocales';
import { Spinner } from '../../Common/Spinner';
import { ScrollArea } from '../../Common/ScrollArea';
import { useWeb3 } from '../../contexts/web3';
import { useWallets } from '../../../wallets/useWallets';
import {
  WalletConfigProps,
  walletConfigs,
} from '../../../wallets/walletConfigs';

const MoreIcon = (
  <svg
    width="60"
    height="60"
    viewBox="0 0 60 60"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M30 42V19M19 30.5H42"
      stroke="var(--ck-body-color-muted)"
      strokeWidth="3"
      strokeLinecap="round"
    />
  </svg>
);

const MobileConnectors: React.FC = () => {
  const context = useContext();
  const locales = useLocales();

  const {
    connect: { getUri },
  } = useWeb3();
  const wcUri = getUri();

  const { open: openW3M, isOpen: isOpenW3M } = useWalletConnectModal();
  const wallets = useWallets();

  // filter out installed wallets
  const walletsIdsToDisplay =
    Object.keys(walletConfigs).filter((walletId) => {
      const wallet = walletConfigs[walletId];
      if (wallets.find((w) => w.connector.id === walletId)) return false;
      if (!wallet.getWalletConnectDeeplink) return false;
      return true;
    }) ?? [];

  const connectWallet = (wallet: WalletConfigProps) => {
    const uri = wallet.getWalletConnectDeeplink?.(wcUri!);
    if (uri) window.location.href = uri;
    //if (uri) window.open(uri, '_blank');
  };

  return (
    <PageContent style={{ width: 312 }}>
      <Container>
        <ModalContent style={{ paddingBottom: 0 }}>
          <ScrollArea height={340}>
            <WalletList $disabled={!wcUri}>
              {walletsIdsToDisplay
                .sort(
                  // sort by name
                  (a, b) => {
                    const walletA = walletConfigs[a];
                    const walletB = walletConfigs[b];
                    const nameA = walletA.name ?? walletA.shortName ?? a;
                    const nameB = walletB.name ?? walletB.shortName ?? b;
                    return nameA.localeCompare(nameB);
                  }
                )
                .filter(
                  (walletId) =>
                    !(
                      walletId === 'coinbaseWallet' ||
                      walletId === 'com.coinbase.wallet'
                    )
                )
                .map((walletId, i) => {
                  const wallet = walletConfigs[walletId];
                  const { name, shortName, iconConnector, icon } = wallet;
                  return (
                    <WalletItem
                      key={i}
                      onClick={() => connectWallet(wallet)}
                      style={{
                        animationDelay: `${i * 50}ms`,
                      }}
                    >
                      <WalletIcon $outline={true}>
                        {iconConnector ?? icon}
                      </WalletIcon>
                      <WalletLabel>{shortName ?? name}</WalletLabel>
                    </WalletItem>
                  );
                })}
              <WalletItem onClick={openW3M} $waiting={isOpenW3M}>
                <WalletIcon
                  style={{ background: 'var(--ck-body-background-secondary)' }}
                >
                  {isOpenW3M ? (
                    <div
                      style={{
                        position: 'absolute',
                        inset: 0,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                      }}
                    >
                      <div
                        style={{
                          width: '50%',
                        }}
                      >
                        <Spinner />
                      </div>
                    </div>
                  ) : (
                    MoreIcon
                  )}
                </WalletIcon>
                <WalletLabel>{locales.more}</WalletLabel>
              </WalletItem>
            </WalletList>
          </ScrollArea>
        </ModalContent>
        {context.options?.walletConnectCTA !== 'modal' && (
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: 14,
              paddingTop: 8,
            }}
          >
            <CopyToClipboard variant="button" string={wcUri}>
              {locales.copyToClipboard}
            </CopyToClipboard>
          </div>
        )}
      </Container>
    </PageContent>
  );
};

export default MobileConnectors;
</file>

<file path="packages/connectkit/src/components/Pages/MobileConnectors/styles.ts">
import { css, keyframes } from 'styled-components';
import styled from './../../../styles/styled';

export const WalletItem = styled.div<{ $waiting?: boolean }>`
  text-align: center;
  transition: opacity 100ms ease;
  opacity: ${(props) => (props.$waiting ? 0.4 : 1)};
`;
export const WalletIcon = styled.div<{ $outline?: boolean }>`
  z-index: 9;
  position: relative;
  margin: 0 auto 10px;
  border-radius: 16px;
  width: 60px;
  height: 60px;
  overflow: hidden;
  background: rgba(0, 0, 0, 0.04);
  ${(props) =>
    props.$outline &&
    `
  &:before {
    content: '';
    z-index: 2;
    position: absolute;
    inset: 0;
    border-radius: inherit;
    box-shadow: inset 0 0 0 1px var(--ck-body-background-tertiary);
  }`}
  svg {
    display: block;
    position: relative;
    width: 100%;
    height: auto;
  }
`;
export const WalletLabel = styled.div`
  color: var(--ck-body-color);
  font-size: 13px;
  line-height: 15px;
  font-weight: 500;
  opacity: 0.75;
`;

const PulseKeyframes = keyframes`
  0%,100% { opacity:1; }
  50% { opacity:0.5; }
`;

export const WalletList = styled.div<{ $disabled?: boolean }>`
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 22px 8px;
  margin: 0 -10px;
  padding: 4px 0 0;
  transition: opacity 300ms ease;
  ${(props) =>
    props.$disabled &&
    css`
      pointer-events: none;
      opacity: 0.4;
      ${WalletItem} {
        animation: ${PulseKeyframes} 1s infinite ease-in-out;
      }
    `}
`;
export const Container = styled.div``;
</file>

<file path="packages/connectkit/src/components/Pages/Onboarding/index.tsx">
import React from 'react';
import {
  Graphic,
  LogoGroup,
  Logo,
  FloatWrapper,
  LogoPosition,
  LogoInner,
  LogoGraphic,
  GraphicBackground,
  RotateWrapper,
} from './styles';

import {
  PageContent,
  ModalBody,
  ModalContent,
  ModalH1,
} from '../../Common/Modal/styles';
import Logos from '../../../assets/logos';
import wave from '../../../assets/wave';

import Button from '../../Common/Button';
import useLocales from '../../../hooks/useLocales';
import { useContext } from '../../ConnectKit';

const Introduction: React.FC = () => {
  const context = useContext();
  const locales = useLocales({});

  const ctaUrl =
    context.options?.walletOnboardingUrl ?? locales.onboardingScreen_ctaUrl;
  return (
    <PageContent>
      <Graphic>
        <LogoGroup>
          <Logo>
            <LogoPosition>
              <LogoInner>
                <FloatWrapper>
                  <RotateWrapper>
                    <LogoGraphic>
                      <Logos.Coinbase background />
                    </LogoGraphic>
                  </RotateWrapper>
                </FloatWrapper>
              </LogoInner>
            </LogoPosition>
          </Logo>
          <Logo>
            <LogoPosition>
              <LogoInner>
                <FloatWrapper>
                  <RotateWrapper>
                    <LogoGraphic>
                      <Logos.MetaMask background />
                    </LogoGraphic>
                  </RotateWrapper>
                </FloatWrapper>
              </LogoInner>
            </LogoPosition>
          </Logo>
          <Logo>
            <LogoPosition>
              <LogoInner>
                <FloatWrapper>
                  <RotateWrapper>
                    <LogoGraphic>
                      <Logos.Trust />
                    </LogoGraphic>
                  </RotateWrapper>
                </FloatWrapper>
              </LogoInner>
            </LogoPosition>
          </Logo>
          <Logo>
            <LogoPosition>
              <LogoInner>
                <FloatWrapper>
                  <RotateWrapper>
                    <LogoGraphic>
                      <Logos.Argent />
                    </LogoGraphic>
                  </RotateWrapper>
                </FloatWrapper>
              </LogoInner>
            </LogoPosition>
          </Logo>
          <Logo>
            <LogoPosition>
              <LogoInner>
                <FloatWrapper>
                  <RotateWrapper>
                    <LogoGraphic>
                      <Logos.ImToken />
                    </LogoGraphic>
                  </RotateWrapper>
                </FloatWrapper>
              </LogoInner>
            </LogoPosition>
          </Logo>
        </LogoGroup>
        <GraphicBackground>{wave}</GraphicBackground>
      </Graphic>
      <ModalContent style={{ paddingBottom: 18 }}>
        <ModalH1 $small>{locales.onboardingScreen_h1}</ModalH1>
        <ModalBody>{locales.onboardingScreen_p}</ModalBody>
      </ModalContent>
      <Button href={ctaUrl} arrow>
        {locales.onboardingScreen_ctaText}
      </Button>
    </PageContent>
  );
};

export default Introduction;
</file>

<file path="packages/connectkit/src/components/Pages/Onboarding/styles.ts">
import { keyframes } from 'styled-components';
import styled from './../../../styles/styled';
import { motion } from 'framer-motion';
import defaultTheme from '../../../constants/defaultTheme';

export const Graphic = styled(motion.div)`
  position: relative;
  margin: 16px auto 20px;
  height: 190px;
  max-width: 295px;
  pointer-events: none;
  user-select: none;
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    height: 200px;
    max-width: 100%;
    margin-bottom: 32px;
  }
`;
export const LogoGroup = styled(motion.div)`
  position: absolute;
  inset: 0;
  z-index: 2;
`;
const graphicIn = keyframes`
  0%{
    opacity:0;
    transform:scale(0.9);
  }
  100%{
    opacity:1;
    transform:none;
  }
`;
export const GraphicBackground = styled(motion.div)`
  z-index: 1;
  position: absolute;
  inset: 0;
  top: -2px;
  overflow: hidden;
  &:before {
    content: '';
    position: absolute;
    inset: 0;
    background: var(--ck-body-background);
    background: radial-gradient(
      closest-side,
      var(--ck-body-background-transparent, transparent) 18.75%,
      var(--ck-body-background) 100%
    );
    background-size: 100%;
  }
  svg {
    display: block;
    width: 100%;
    height: auto;
  }
  animation: ${graphicIn} 1000ms 100ms ease both;
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    animation: none;
  }
`;

const logoIn = keyframes`
  0%{
    opacity:0;
    transform:scale(0) translateY(40%);
  }
  100%{
    opacity:1;
    transform:none;
  }
`;
export const LogoPosition = styled(motion.div)`
  position: absolute;
  inset: 0;
  animation: cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite both;
  animation-delay: inherit;
`;
export const LogoInner = styled(motion.div)`
  position: absolute;
`;
export const LogoGraphic = styled(motion.div)`
  position: relative;
  overflow: hidden;
  height: 58px;
  width: 58px;
  border-radius: 13.84px;
  box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 2px 20px 0 rgba(0, 0, 0, 0.03);

  svg {
    display: block;
    width: 100%;
    height: 100%;
  }
`;
const float = keyframes`
  0%,100%{ transform:none; }
  50%{ transform: translateY(-10%) }
`;
export const FloatWrapper = styled(motion.div)`
  position: relative;
  animation: cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite both;
  animation-name: ${float};
  animation-duration: 3600ms;
`;
const rotate = keyframes`
  0%,100%{ transform:rotate(-3deg); }
  50%{ transform:rotate(3deg); }
`;
export const RotateWrapper = styled(motion.div)`
  position: relative;
  animation: cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite both;
  animation-name: ${rotate};
  animation-duration: 3200ms;
`;
export const Logo = styled(motion.div)`
  position: absolute;
  inset: 0;

  animation: ${logoIn} 750ms cubic-bezier(0.19, 1, 0.22, 1) both;
  &:nth-child(1){ z-index:2; animation-delay:0ms;  }
  &:nth-child(2){ z-index:1; animation-delay:60ms; }
  &:nth-child(3){ z-index:1; animation-delay:30ms; }
  &:nth-child(4){ z-index:1; animation-delay:90ms; }
  &:nth-child(5){ z-index:1; animation-delay:120ms;}

  &:nth-child(1){ ${RotateWrapper}{ animation-delay:0ms; } }
  &:nth-child(2){ ${RotateWrapper}{ animation-delay:-600ms; } }
  &:nth-child(3){ ${RotateWrapper}{ animation-delay:-1200ms; } }
  &:nth-child(4){ ${RotateWrapper}{ animation-delay:-1800ms; } }
  &:nth-child(5){ ${RotateWrapper}{ animation-delay:-2400ms; } }

  &:nth-child(1){ ${FloatWrapper}{ animation-delay:-200ms; } }
  &:nth-child(2){ ${FloatWrapper}{ animation-delay:-600ms; } }
  &:nth-child(3){ ${FloatWrapper}{ animation-delay:-800ms; } }
  &:nth-child(4){ ${FloatWrapper}{ animation-delay:-300ms; } }
  &:nth-child(5){ ${FloatWrapper}{ animation-delay:-3200ms; } }

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    animation: none !important;
    ${RotateWrapper},${FloatWrapper} {
      animation: none !important;
    }
  }

  ${LogoInner} {
    transform: translate(-50%, -50%);
  }

  &:nth-child(1) ${LogoPosition} {
    transform: translate(50%, 50%);
    ${LogoGraphic} {
      border-radius: 17.2px;
      width: 72px;
      height: 72px;
    }
  }
  &:nth-child(2) ${LogoPosition} {
    transform: translate(21%, 21.5%);
  }
  &:nth-child(3) ${LogoPosition} {
    transform: translate(78%, 14%);
  }
  &:nth-child(4) ${LogoPosition} {
    transform: translate(22.5%, 76%);
  }
  &:nth-child(5) ${LogoPosition} {
    transform: translate(76%, 80%);
  }
`;
</file>

<file path="packages/connectkit/src/components/Pages/Profile/index.tsx">
import React, { useEffect, useState } from 'react';
import { useContext } from '../../ConnectKit';
import {
  isSafeConnector,
  nFormatter,
  truncateEthAddress,
} from '../../../utils';

import {
  useConnect,
  useDisconnect,
  useAccount,
  useEnsName,
  useBalance,
} from 'wagmi';

import {
  AvatarContainer,
  AvatarInner,
  ChainSelectorContainer,
  BalanceContainer,
  LoadingBalance,
  Balance,
} from './styles';

import {
  PageContent,
  ModalBody,
  ModalContent,
  ModalH1,
} from '../../Common/Modal/styles';
import Button from '../../Common/Button';
import Avatar from '../../Common/Avatar';
import ChainSelector from '../../Common/ChainSelect';

import { DisconnectIcon } from '../../../assets/icons';
import CopyToClipboard from '../../Common/CopyToClipboard';
import { AnimatePresence } from 'framer-motion';
import { useThemeContext } from '../../ConnectKitThemeProvider/ConnectKitThemeProvider';
import useLocales from '../../../hooks/useLocales';
import { useEnsFallbackConfig } from '../../../hooks/useEnsFallbackConfig';

const Profile: React.FC<{ closeModal?: () => void }> = ({ closeModal }) => {
  const context = useContext();
  const themeContext = useThemeContext();

  const locales = useLocales();

  const { reset } = useConnect();
  const { disconnect } = useDisconnect();

  const { address, isConnected, connector, chain } = useAccount();
  const ensFallbackConfig = useEnsFallbackConfig();
  const { data: ensName } = useEnsName({
    chainId: 1,
    address: address,
    config: ensFallbackConfig,
  });
  const { data: balance } = useBalance({
    address,
    //watch: true,
  });

  const [shouldDisconnect, setShouldDisconnect] = useState(false);

  useEffect(() => {
    if (!isConnected) context.setOpen(false);
  }, [isConnected]);

  useEffect(() => {
    if (!shouldDisconnect) return;

    // Close before disconnecting to avoid layout shifting while modal is still open
    if (closeModal) {
      closeModal();
    } else {
      context.setOpen(false);
    }
    return () => {
      disconnect();
      reset();
    };
  }, [shouldDisconnect, disconnect, reset]);

  const separator = ['web95', 'rounded', 'minimal'].includes(
    themeContext.theme ?? context.theme ?? ''
  )
    ? '....'
    : undefined;
  return (
    <PageContent>
      <ModalContent style={{ paddingBottom: 22, gap: 6 }}>
        <AvatarContainer>
          <AvatarInner>
            <ChainSelectorContainer>
              <ChainSelector />
            </ChainSelectorContainer>
            <Avatar address={address} />
          </AvatarInner>
        </AvatarContainer>
        <ModalH1>
          <CopyToClipboard string={address}>
            {ensName ?? truncateEthAddress(address, separator)}
          </CopyToClipboard>
        </ModalH1>
        {context?.options?.hideBalance ? null : (
          <ModalBody>
            <BalanceContainer>
              <AnimatePresence exitBeforeEnter initial={false}>
                {balance && (
                  <Balance
                    key={`chain-${chain?.id}`}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    {nFormatter(Number(balance?.formatted))}
                    {` `}
                    {balance?.symbol}
                  </Balance>
                )}
                {!balance && (
                  <LoadingBalance
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    &nbsp;
                  </LoadingBalance>
                )}
              </AnimatePresence>
            </BalanceContainer>
          </ModalBody>
        )}
      </ModalContent>
      {!isSafeConnector(connector?.id) && (
        <Button
          onClick={() => setShouldDisconnect(true)}
          icon={<DisconnectIcon />}
        >
          {locales.disconnect}
        </Button>
      )}
    </PageContent>
  );
};

export default Profile;
</file>

<file path="packages/connectkit/src/components/Pages/Profile/styles.ts">
import { keyframes } from 'styled-components';
import styled from './../../../styles/styled';
import { motion } from 'framer-motion';
import defaultTheme from '../../../constants/defaultTheme';

export const AvatarContainer = styled(motion.div)`
  padding: 18px 0 20px;
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    padding: 16px 0 20px;
  }
`;
export const AvatarInner = styled(motion.div)`
  position: relative;
  display: inline-block;
`;
export const ChainSelectorContainer = styled(motion.div)`
  z-index: 3;
  position: absolute;
  bottom: 0px;
  right: -16px;
`;

export const BalanceContainer = styled(motion.div)`
  position: relative;
`;
export const Balance = styled(motion.div)`
  position: relative;
`;
const PlaceholderKeyframes = keyframes`
  0%{ background-position: 100% 0; }
  100%{ background-position: -100% 0; }
`;
export const LoadingBalance = styled(motion.div)`
  width: 25%;
  margin: 0 auto;
  position: relative;
  overflow: hidden;
  border-radius: 10px;
  background: var(--ck-body-background-secondary);
  inset: 0;
  &:before {
    z-index: 4;
    content: '';
    position: absolute;
    inset: 0;
    background-image: linear-gradient(
      90deg,
      var(--ck-body-background-transparent) 50%,
      var(--ck-body-background),
      var(--ck-body-background-transparent)
    );
    opacity: 0.75;
    background-size: 200% 100%;
    animation: ${PlaceholderKeyframes} 1000ms linear infinite both;
  }
`;
</file>

<file path="packages/connectkit/src/components/Pages/SignInWithEthereum/index.tsx">
import React, { useEffect, useState } from 'react';

import { useContext } from '../../ConnectKit';

import {
  PageContent,
  ModalBody,
  ModalContent,
} from '../../Common/Modal/styles';
import {
  StatusGraphic,
  LogoContainer,
  StatusIcon,
  StatusGraphicBgSvg,
  ContentContainer,
} from './styles';

import { useAccount } from 'wagmi';
import { SIWEButton } from '../../Standard/SIWE';
import { useSIWE } from '../../../siwe';

import { TickIcon } from '../../../assets/icons';
import Chains from '../../../assets/chains';
import Avatar from '../../Common/Avatar';
import { getAppIcon } from '../../../defaultConfig';

import { AnimatePresence, motion } from 'framer-motion';
import LazyImage from '../../Common/LazyImage';
import { isMobile, flattenChildren } from '../../../utils';
import useLocales from '../../../hooks/useLocales';
import FitText from '../../Common/FitText';

const transition = { duration: 0.2, ease: [0.26, 0.08, 0.25, 1] };
const copyTransition = { duration: 0.16, ease: [0.26, 0.08, 0.25, 1] };

const SignInWithEthereum: React.FC = () => {
  const context = useContext();
  const { isSignedIn, reset } = useSIWE();
  const mobile = isMobile();

  const [status, setStatus] = useState<'signedOut' | 'signedIn'>(
    isSignedIn ? 'signedIn' : 'signedOut'
  );

  const locales = useLocales({});
  const copy =
    status === 'signedIn'
      ? {
          heading: locales.signInWithEthereumScreen_signedIn_heading,
          h1: locales.signInWithEthereumScreen_signedIn_h1,
          p: locales.signInWithEthereumScreen_signedIn_p,
          button: locales.signInWithEthereumScreen_signedIn_button,
        }
      : {
          heading: locales.signInWithEthereumScreen_signedOut_heading,
          h1: locales.signInWithEthereumScreen_signedOut_h1,
          p: locales.signInWithEthereumScreen_signedOut_p,
          button: locales.signInWithEthereumScreen_signedOut_button,
        };

  useEffect(() => {
    if (isSignedIn) setStatus('signedIn');
  }, []);

  useEffect(() => {
    if (!isSignedIn) setStatus('signedOut');
  }, [isSignedIn]);

  const { address } = useAccount();

  // We use the favicon for the dApp logo because that's how the connectors do it
  // TODO: Allow for dev customisation
  const getFavicons = () => {
    const favicons: { svg: string | null; default: string | null } = {
      svg: null,
      default: null,
    };
    const nodeList: HTMLCollectionOf<HTMLLinkElement> =
      document.getElementsByTagName('link');
    Array.from(nodeList).forEach((node) => {
      if (
        (node.getAttribute('rel') === 'icon' ||
          node.getAttribute('rel') === 'shortcut icon') &&
        node.getAttribute('href')
      ) {
        if (node.getAttribute('type') === 'image/svg+xml') {
          favicons.svg = node.getAttribute('href');
        } else {
          favicons.default = node.getAttribute('href');
        }
      }
    });
    return favicons;
  };
  const favicons = getFavicons();
  const favicon = getAppIcon() ?? favicons.svg ?? favicons.default;

  return (
    <PageContent style={{ width: 278 }}>
      <ModalContent style={{ padding: 0, marginTop: -10 }}>
        <ContentContainer>
          <AnimatePresence exitBeforeEnter>
            <motion.div
              key={flattenChildren(copy.h1).toString()}
              initial={mobile ? false : { opacity: 0, scale: 0.94 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.94 }}
              transition={copyTransition}
            >
              <ModalBody style={{ height: 42 }}>
                <FitText>{copy.h1}</FitText>
              </ModalBody>
            </motion.div>
          </AnimatePresence>
        </ContentContainer>
        <StatusGraphic $connected={isSignedIn} key="status">
          <div style={{ position: 'absolute', inset: 0 }}>
            <StatusGraphicBgSvg
              width="262"
              height="134"
              viewBox="0 0 262 134"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <motion.rect
                x="0"
                y="0"
                rx="12"
                width="262"
                height="134"
                strokeDasharray="3 3"
                animate={{
                  strokeDashoffset: [0, -6],
                }}
                transition={{
                  duration: 0.4,
                  ease: 'linear',
                  repeat: Infinity,
                }}
              />
            </StatusGraphicBgSvg>
          </div>

          <motion.div
            key="avatarImage"
            initial={
              mobile
                ? false
                : {
                    opacity: 0,
                    x: 50,
                    scale: 0.8,
                  }
            }
            animate={{
              opacity: 1,
              x: 0,
              scale: 1,
            }}
            transition={transition}
          >
            <LogoContainer>
              <Avatar address={address} size={64} />
            </LogoContainer>
          </motion.div>
          <motion.div
            key="tickIcon"
            initial={
              mobile
                ? false
                : {
                    scale: 0.6,
                  }
            }
            animate={{
              scale: 1,
            }}
            transition={{
              ...transition,
            }}
          >
            <StatusIcon>
              <TickIcon />
            </StatusIcon>
          </motion.div>
          <motion.div
            key="appLogo"
            initial={
              mobile
                ? false
                : {
                    opacity: 0,
                    x: -40,
                    scale: 0.8,
                  }
            }
            animate={{
              opacity: 1,
              x: 0,
              scale: 1,
            }}
            transition={{
              ...transition,
            }}
          >
            <LogoContainer>
              {favicon ? (
                <LazyImage src={favicon} alt={'app'} />
              ) : (
                <Chains.UnknownChain />
              )}
            </LogoContainer>
          </motion.div>
        </StatusGraphic>
        <AnimatePresence exitBeforeEnter>
          <motion.div
            key={flattenChildren(copy.p).toString()}
            style={{ paddingBottom: mobile ? 24 : 12 }}
            initial={mobile ? false : { opacity: 0, scale: 0.94 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.94 }}
            transition={copyTransition}
          >
            <ModalBody style={{ height: 42, marginTop: -1, marginBottom: -3 }}>
              <FitText>{copy.p}</FitText>
            </ModalBody>
          </motion.div>
        </AnimatePresence>
        <SIWEButton
          showSignOutButton={status === 'signedIn'}
          onSignIn={() => {
            setTimeout(() => {
              context.setOpen(false);
            }, 1000);
          }}
        />
      </ModalContent>
    </PageContent>
  );
};

export default SignInWithEthereum;
</file>

<file path="packages/connectkit/src/components/Pages/SignInWithEthereum/styles.ts">
import { motion } from 'framer-motion';
import styled from './../../../styles/styled';
import { css, keyframes } from 'styled-components';
import defaultTheme from '../../../constants/defaultTheme';

const spinKeyframes = keyframes`
  from{ transform: rotate(0deg); }
  to{   transform: rotate(360deg); }
`;
const lineKeyframes = keyframes`
  from{ background-position: 0 0; }
  to{ background-position: 100% 0; }
`;

export const ContentContainer = styled.div`
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    margin: 5px auto 24px;
    padding: 16px 16px;
    border-radius: var(--ck-tertiary-border-radius, 24px);
    box-shadow: var(--ck-tertiary-box-shadow, none);
    background: var(--ck-body-background-tertiary);
  }
`;

export const LogoContainer = styled(motion.div)`
  z-index: 2;
  overflow: hidden;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 52px;
  height: 52px;
  border-radius: 100%;
  transition: inherit;
  background: var(--ck-body-background-secondary);
  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.04);
  svg,
  img {
    display: block;
    width: 100%;
    height: 100%;
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    width: 64px;
    height: 64px;
  }
`;

export const StatusIcon = styled(motion.div)`
  z-index: 2;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 52px;
  height: 52px;
  color: currentColor;
  border-radius: 100%;
  transition: inherit;
  svg {
    z-index: 3;
    position: relative;
    transform: scale(0.89);
    transition: inherit;
    opacity: 0.5;
  }
  &:before {
    z-index: 1;
    content: '';
    position: absolute;
    inset: 10px;
    border-radius: inherit;
    border: 1px dashed var(--border-color);
    background: var(--ck-body-background);
    transition: inherit;
    animation: ${spinKeyframes} 10s linear infinite;
  }
  &:after {
    z-index: 2;
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    background: #34c759;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.04);
    transform: scale(0);
    transition: inherit;
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    width: 64px;
    height: 64px;
    svg {
      transform: scale(1.1);
    }
  }
`;

export const StatusGraphicBgSvg = styled(motion.svg)`
  display: block;
  position: relative;
  margin: 0 auto;
  transition: inherit;
  overflow: visible;
  rect {
    stroke: var(--border-color);
    rx: var(--ck-border-radius);
  }
  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    display: none;
  }
`;

export const StatusGraphic = styled(motion.div)<{ $connected?: boolean }>`
  --border-color: var(--ck-siwe-border, var(--ck-body-divider));
  --border-size: 0;
  --border-style: dashed;

  user-select: none;
  pointer-events: none;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 14px;
  width: 100%;
  margin: 12px auto;
  padding: 42px 32px;
  transition: all 320ms cubic-bezier(0.175, 0.885, 0.32, 1.1);
  border: var(--border-size) var(--border-style) var(--border-color);
  border-radius: var(--ck-border-radius);

  @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
    --border-size: 1px;
    margin: 0 auto 20px;
    padding: 38px 0;
    gap: 18px;
    + div {
      // easier than wrapping in another styled component
      padding-bottom: 10px;
    }
  }

  > div {
    z-index: 2;
    position: relative;
    transition: inherit;
  }

  &:before,
  &:after {
    z-index: 1;
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 120px;
    height: 1px;
    margin-left: -60px;
    transition: inherit;
    animation: ${lineKeyframes} 10s linear infinite;
    background: linear-gradient(
      90deg,
      var(--border-color),
      var(--border-color) 50%,
      transparent 50%,
      transparent 100%
    );
    background-size: 6px 1px;
  }

  &:after {
    background: var(--border-color);
    transform: scaleX(0);
  }

  ${({ $connected }) =>
    $connected &&
    css`
      &:before {
        opacity: 0;
      }
      &:after {
        transform: none;
      }
      ${StatusGraphicBgSvg} {
        rect {
          stroke-dasharray: 0 0;
        }
      }
      ${LogoContainer} {
        transform: scale(0.62);
      }
      ${StatusIcon} {
        svg {
          transform: scale(1.5);
          opacity: 1;
          color: #fff;
        }
        &:before {
          transform: scale(0);
        }
        &:after {
          transform: scale(1);
        }
      }
      @media only screen and (max-width: ${defaultTheme.mobileWidth}px) {
        --border-size: 1px;
        --border-style: solid;
        ${StatusIcon} {
          svg {
            transform: scale(1.75);
          }
        }
      }
    `};
`;
</file>

<file path="packages/connectkit/src/components/Pages/SwitchNetworks/index.tsx">
import React from 'react';

import {
  PageContent,
  ModalContent,
  ModalBody,
} from '../../Common/Modal/styles';
import ChainSelectList from '../../Common/ChainSelectList';
import { useAccount, useConnect, useDisconnect } from 'wagmi';

import useLocales from '../../../hooks/useLocales';

import Button from '../../Common/Button';
import { DisconnectIcon } from '../../../assets/icons';
import { isSafeConnector } from '../../../utils';
import { OrDivider } from '../../Common/Modal';
import { useChainIsSupported } from '../../../hooks/useChainIsSupported';

const SwitchNetworks: React.FC = () => {
  const { reset } = useConnect();
  const { disconnect } = useDisconnect();
  const { connector, chain } = useAccount();
  const isChainSupported = useChainIsSupported(chain?.id);

  const locales = useLocales({});

  const onDisconnect = () => {
    disconnect();
    reset();
  };

  return (
    <PageContent style={{ width: 278 }}>
      <ModalContent style={{ padding: 0, marginTop: -10 }}>
        {!isChainSupported && (
          <ModalBody>
            {locales.warnings_chainUnsupported}{' '}
            {locales.warnings_chainUnsupportedResolve}
          </ModalBody>
        )}

        <div style={{ padding: '6px 8px' }}>
          <ChainSelectList variant="secondary" />
        </div>

        {!isChainSupported && !isSafeConnector(connector?.id) && (
          <div style={{ paddingTop: 12 }}>
            <OrDivider />
            <Button
              icon={<DisconnectIcon />}
              variant="secondary"
              onClick={onDisconnect}
            >
              {locales.disconnect}
            </Button>
          </div>
        )}
      </ModalContent>
    </PageContent>
  );
};

export default SwitchNetworks;
</file>

<file path="packages/connectkit/src/components/Standard/SIWE/index.tsx">
import Button from '../../Common/Button';
import { DisconnectIcon, RetryIcon } from '../../../assets/icons';
import { ResetContainer } from '../../../styles';
import { motion } from 'framer-motion';
import useIsMounted from '../../../hooks/useIsMounted';
import useLocales from '../../../hooks/useLocales';
import { SIWESession, useSIWE } from './../../../siwe';
import { useAccount } from 'wagmi';
import { useModal } from '../../../hooks/useModal';

type ButtonProps = {
  showSignOutButton?: boolean;
  onSignIn?: (data?: SIWESession) => void;
  onSignOut?: () => void;
};

export const SIWEButton: React.FC<ButtonProps> = ({
  showSignOutButton,
  onSignIn,
  onSignOut,
}) => {
  const isMounted = useIsMounted();
  const locales = useLocales();
  const { setOpen } = useModal();

  const {
    isSignedIn,
    isReady,
    isLoading,
    isRejected,
    isSuccess,
    isError,
    signIn,
    signOut,
    error,
  } = useSIWE({
    onSignIn: (data) => onSignIn?.(data),
    onSignOut: () => onSignOut?.(),
  });
  const { address: connectedAddress } = useAccount();

  function getButtonLabel() {
    if (isSuccess) return locales.signedIn;
    if (isRejected) return locales.tryAgain;
    if (isLoading) return locales.awaitingConfirmation;
    if (isError) return error ?? 'Unknown Error';
    if (isReady) return locales.signIn;
    return locales.signIn;
  }

  if (!isMounted) {
    return <Button key="loading" style={{ margin: 0 }} disabled />;
  }

  if (showSignOutButton && isSignedIn) {
    return (
      <Button
        key="button"
        style={{ margin: 0 }}
        onClick={signOut}
        icon={<DisconnectIcon />}
      >
        {locales.signOut}
      </Button>
    );
  }

  if (!connectedAddress) {
    // TODO: discuss non-connected wallet developer expectations
    return (
      <Button
        key="button"
        style={{ margin: 0 }}
        onClick={() => setOpen(true)}
        arrow
      >
        {locales.walletNotConnected}
      </Button>
    );
  }

  return (
    <Button
      key="button"
      style={{ margin: 0 }}
      arrow={!isSignedIn ? !isLoading && !isRejected : false}
      onClick={!isLoading && !isSuccess ? signIn : undefined}
      disabled={isLoading}
      waiting={isLoading}
      icon={
        isRejected && (
          <motion.div
            initial={{
              rotate: -270,
            }}
            animate={{
              rotate: 0,
            }}
            transition={{
              duration: 1,
              ease: [0.175, 0.885, 0.32, 0.98],
            }}
          >
            <RetryIcon style={{ opacity: 0.4 }} />
          </motion.div>
        )
      }
    >
      {getButtonLabel()}
    </Button>
  );
};

export const SIWEButtonComponent: React.FC<ButtonProps> = ({ ...props }) => (
  <ResetContainer>
    <SIWEButton {...props} />
  </ResetContainer>
);
export default SIWEButtonComponent;
</file>

<file path="packages/connectkit/src/components/Standard/SIWE/styles.ts">
import { keyframes } from 'styled-components';
import styled from './../../../styles/styled';
import { motion } from 'framer-motion';

const Spin = keyframes`
  0%{ transform: rotate(0deg); }
  100%{ transform: rotate(360deg); }
`;
export const SpinnerContainer = styled(motion.div)`
  position: relative;
  animation: ${Spin} 1s linear infinite;
  svg {
    display: block;
    position: relative;
    animation: ${Spin} 1s ease-in-out infinite;
  }
`;
</file>

<file path="packages/connectkit/src/components/ConnectKit.tsx">
import React, {
  createContext,
  createElement,
  useEffect,
  useState,
  ReactNode,
} from 'react';
import { Buffer } from 'buffer';
import {
  CustomTheme,
  Languages,
  Mode,
  Theme,
  CustomAvatarProps,
} from '../types';

import defaultTheme from '../styles/defaultTheme';

import ConnectKitModal from '../components/ConnectModal';
import { ThemeProvider } from 'styled-components';
import { useThemeFont } from '../hooks/useGoogleFont';
import { SIWEContext } from './../siwe';
import { useChains } from '../hooks/useChains';
import {
  useConnectCallback,
  useConnectCallbackProps,
} from '../hooks/useConnectCallback';
import { isFamily } from '../utils/wallets';
import { useConnector } from '../hooks/useConnectors';
import { WagmiContext, useAccount } from 'wagmi';
import { Web3ContextProvider } from './contexts/web3';
import { useChainIsSupported } from '../hooks/useChainIsSupported';

export const routes = {
  ONBOARDING: 'onboarding',
  ABOUT: 'about',
  CONNECTORS: 'connectors',
  MOBILECONNECTORS: 'mobileConnectors',
  CONNECT: 'connect',
  DOWNLOAD: 'download',
  PROFILE: 'profile',
  SWITCHNETWORKS: 'switchNetworks',
  SIGNINWITHETHEREUM: 'signInWithEthereum',
};

type Connector = {
  id: string;
};
type Error = string | React.ReactNode | null;

type ContextValue = {
  theme: Theme;
  setTheme: React.Dispatch<React.SetStateAction<Theme>>;
  mode: Mode;
  setMode: React.Dispatch<React.SetStateAction<Mode>>;
  customTheme: CustomTheme | undefined;
  setCustomTheme: React.Dispatch<React.SetStateAction<CustomTheme | undefined>>;
  lang: Languages;
  setLang: React.Dispatch<React.SetStateAction<Languages>>;
  open: boolean;
  setOpen: React.Dispatch<React.SetStateAction<boolean>>;
  route: string;
  setRoute: React.Dispatch<React.SetStateAction<string>>;
  connector: Connector;
  setConnector: React.Dispatch<React.SetStateAction<Connector>>;
  errorMessage: Error;
  options?: ConnectKitOptions;
  signInWithEthereum: boolean;
  debugMode?: boolean;
  log: (...props: any) => void;
  displayError: (message: string | React.ReactNode | null, code?: any) => void;
  resize: number;
  triggerResize: () => void;
} & useConnectCallbackProps;

export const Context = createContext<ContextValue | null>(null);

export type ConnectKitOptions = {
  language?: Languages;
  hideBalance?: boolean;
  hideTooltips?: boolean;
  hideQuestionMarkCTA?: boolean;
  hideNoWalletCTA?: boolean;
  hideRecentBadge?: boolean;
  walletConnectCTA?: 'link' | 'modal' | 'both';
  avoidLayoutShift?: boolean; // Avoids layout shift when the ConnectKit modal is open by adding padding to the body
  embedGoogleFonts?: boolean; // Automatically embeds Google Font of the current theme. Does not work with custom themes
  truncateLongENSAddress?: boolean;
  walletConnectName?: string;
  reducedMotion?: boolean;
  disclaimer?: ReactNode | string;
  bufferPolyfill?: boolean;
  customAvatar?: React.FC<CustomAvatarProps>;
  initialChainId?: number;
  enforceSupportedChains?: boolean;
  ethereumOnboardingUrl?: string;
  walletOnboardingUrl?: string;
  disableSiweRedirect?: boolean; // Disable redirect to SIWE page after a wallet is connected
  overlayBlur?: number; // Blur the background when the modal is open
};

type ConnectKitProviderProps = {
  children?: React.ReactNode;
  theme?: Theme;
  mode?: Mode;
  customTheme?: CustomTheme;
  options?: ConnectKitOptions;
  debugMode?: boolean;
} & useConnectCallbackProps;

export const ConnectKitProvider = ({
  children,
  theme = 'auto',
  mode = 'auto',
  customTheme,
  options,
  onConnect,
  onDisconnect,
  debugMode = false,
}: ConnectKitProviderProps) => {
  // ConnectKitProvider must be within a WagmiProvider
  if (!React.useContext(WagmiContext)) {
    throw Error('ConnectKitProvider must be within a WagmiProvider');
  }

  // Only allow for mounting ConnectKitProvider once, so we avoid weird global
  // state collisions.
  if (React.useContext(Context)) {
    throw new Error(
      'Multiple, nested usages of ConnectKitProvider detected. Please use only one.'
    );
  }

  useConnectCallback({
    onConnect,
    onDisconnect,
  });

  const chains = useChains();

  const injectedConnector = useConnector('injected');

  // Default config options
  const defaultOptions: ConnectKitOptions = {
    language: 'en-US',
    hideBalance: false,
    hideTooltips: false,
    hideQuestionMarkCTA: false,
    hideNoWalletCTA: false,
    walletConnectCTA: 'link',
    hideRecentBadge: false,
    avoidLayoutShift: true,
    embedGoogleFonts: false,
    truncateLongENSAddress: true,
    walletConnectName: undefined,
    reducedMotion: false,
    disclaimer: null,
    bufferPolyfill: true,
    customAvatar: undefined,
    initialChainId: chains?.[0]?.id,
    enforceSupportedChains: false,
    ethereumOnboardingUrl: undefined,
    walletOnboardingUrl: undefined,
    disableSiweRedirect: false,
  };

  const opts: ConnectKitOptions = Object.assign({}, defaultOptions, options);

  if (typeof window !== 'undefined') {
    // Buffer Polyfill, needed for bundlers that don't provide Node polyfills (e.g CRA, Vite, etc.)
    if (opts.bufferPolyfill) window.Buffer = window.Buffer ?? Buffer;

    // Some bundlers may need `global` and `process.env` polyfills as well
    // Not implemented here to avoid unexpected behaviors, but leaving example here for future reference
    /*
     * window.global = window.global ?? window;
     * window.process = window.process ?? { env: {} };
     */
  }

  const [ckTheme, setTheme] = useState<Theme>(theme);
  const [ckMode, setMode] = useState<Mode>(mode);
  const [ckCustomTheme, setCustomTheme] = useState<CustomTheme | undefined>(
    customTheme ?? {}
  );
  const [ckLang, setLang] = useState<Languages>('en-US');
  const [open, setOpen] = useState<boolean>(false);
  const [connector, setConnector] = useState<ContextValue['connector']>({
    id: '',
  });
  const [route, setRoute] = useState<string>(routes.CONNECTORS);
  const [errorMessage, setErrorMessage] = useState<Error>('');

  const [resize, onResize] = useState<number>(0);

  // Include Google Font that is needed for a themes
  if (opts.embedGoogleFonts) useThemeFont(theme);

  // Other Configuration
  useEffect(() => setTheme(theme), [theme]);
  useEffect(() => setLang(opts.language || 'en-US'), [opts.language]);
  useEffect(() => setErrorMessage(null), [route, open]);

  // Check if chain is supported, elsewise redirect to switches page
  const { chain, isConnected } = useAccount();
  const isChainSupported = useChainIsSupported(chain?.id);

  useEffect(() => {
    if (isConnected && opts.enforceSupportedChains && !isChainSupported) {
      setOpen(true);
      setRoute(routes.SWITCHNETWORKS);
    }
  }, [isConnected, isChainSupported, chain, route, open]);

  // Autoconnect to Family wallet if available
  useEffect(() => {
    if (isFamily()) {
      injectedConnector?.connect();
    }
  }, [injectedConnector]);

  const log = debugMode ? console.log : () => {};

  const value = {
    theme: ckTheme,
    setTheme,
    mode: ckMode,
    setMode,
    customTheme,
    setCustomTheme,
    lang: ckLang,
    setLang,
    open,
    setOpen,
    route,
    setRoute,
    connector,
    setConnector,
    signInWithEthereum: React.useContext(SIWEContext)?.enabled ?? false,
    onConnect,
    // Other configuration
    options: opts,
    errorMessage,
    debugMode,
    log,
    displayError: (message: string | React.ReactNode | null, code?: any) => {
      setErrorMessage(message);
      console.log('---------CONNECTKIT DEBUG---------');
      console.log(message);
      if (code) console.table(code);
      console.log('---------/CONNECTKIT DEBUG---------');
    },
    resize,
    triggerResize: () => onResize((prev) => prev + 1),
  };

  return createElement(
    Context.Provider,
    { value },
    <>
      <Web3ContextProvider enabled={open}>
        <ThemeProvider theme={defaultTheme}>
          {children}
          <ConnectKitModal
            lang={ckLang}
            theme={ckTheme}
            mode={mode}
            customTheme={ckCustomTheme}
          />
        </ThemeProvider>
      </Web3ContextProvider>
    </>
  );
};

export const useContext = () => {
  const context = React.useContext(Context);
  if (!context) throw Error('ConnectKit Hook must be inside a Provider.');
  return context;
};
</file>

<file path="packages/connectkit/src/constants/chainConfigs.tsx">
import { ReactNode } from 'react';
import Logos from '../assets/chains';

type Chain = {
  id: number;
  name: string;
  logo: ReactNode;
  rpcUrls?: {
    // https://github.com/wevm/viem/tree/1.x.x/src/chains/definitions
    alchemy?: {
      http?: string[];
      webSocket?: string[];
    };
    infura?: {
      http?: string[];
      webSocket?: string[];
    };
  };
};

// Note: these rpcUrls are incomplete, and are subject to change from their respective providers
// More RPC URLs can be found: https://chainid.network/chains.json

export const chainConfigs: Chain[] = [
  {
    id: 1,
    name: 'Ethereum',
    logo: <Logos.Ethereum />,
    rpcUrls: {
      alchemy: {
        http: ['https://eth-mainnet.g.alchemy.com/v2'],
        webSocket: ['wss://eth-mainnet.g.alchemy.com/v2'],
      },
      infura: {
        http: ['https://mainnet.infura.io/v3'],
        webSocket: ['wss://mainnet.infura.io/ws/v3'],
      },
    },
  },
  {
    id: 232,
    name: 'Lens Chain',
    logo: <Logos.LensChain />,
  },
  {
    id: 37111,
    name: 'Lens Chain Testnet',
    logo: <Logos.LensChain testnet />,
  },
  {
    id: 3,
    name: 'Rinkeby',
    logo: <Logos.Ethereum testnet />,
    rpcUrls: {},
  },
  {
    id: 4,
    name: 'Ropsten',
    logo: <Logos.Ethereum testnet />,
  },
  {
    id: 5,
    name: 'Görli',
    logo: <Logos.Ethereum testnet />,
  },
  {
    id: 42,
    name: 'Kovan',
    logo: <Logos.Ethereum testnet />,
  },
  {
    id: 10,
    name: 'Optimism',
    logo: <Logos.Optimism />,
  },
  {
    id: 69, // nice
    name: 'Optimism Kovan',
    logo: <Logos.Optimism testnet />,
  },
  {
    id: 420, // nice
    name: 'Optimism Goerli',
    logo: <Logos.Optimism testnet />,
  },
  {
    id: 11155420,
    name: 'Optimism Sepolia',
    logo: <Logos.Optimism testnet />,
  },
  {
    id: 137,
    name: 'Polygon',
    logo: <Logos.Polygon />,
  },
  {
    id: 80001,
    name: 'Polygon Mumbai',
    logo: <Logos.Polygon testnet />,
  },
  {
    id: 31337,
    name: 'Hardhat',
    logo: <Logos.Ethereum testnet />,
  },
  {
    id: 1337,
    name: 'Localhost',
    logo: <Logos.Ethereum testnet />,
  },
  {
    id: 42161,
    name: 'Arbitrum',
    logo: <Logos.Arbitrum />,
    rpcUrls: {
      alchemy: {
        http: ['https://arb-mainnet.g.alchemy.com/v2'],
        webSocket: ['wss://arb-mainnet.g.alchemy.com/v2'],
      },
      infura: {
        http: ['https://arbitrum-mainnet.infura.io/v3'],
        webSocket: ['wss://arbitrum-mainnet.infura.io/ws/v3'],
      },
    },
  },
  {
    id: 421611,
    name: 'Arbitrum Rinkeby',
    logo: <Logos.Arbitrum testnet />,
  },
  {
    id: 421613,
    name: 'Arbitrum Goerli',
    logo: <Logos.Arbitrum testnet />,
    rpcUrls: {
      alchemy: {
        http: ['https://arb-goerli.g.alchemy.com/v2'],
        webSocket: ['wss://arb-goerli.g.alchemy.com/v2'],
      },
      infura: {
        http: ['https://arbitrum-goerli.infura.io/v3'],
        webSocket: ['wss://arbitrum-goerli.infura.io/ws/v3'],
      },
    },
  },
  {
    id: 40,
    name: 'Telos',
    logo: <Logos.Telos />,
  },
  {
    id: 41,
    name: 'Telos Testnet',
    logo: <Logos.Telos testnet />,
  },
  {
    id: 1313161554,
    name: 'Aurora',
    logo: <Logos.Aurora />,
  },
  {
    id: 1313161555,
    name: 'Aurora Testnet',
    logo: <Logos.Aurora testnet />,
  },
  {
    id: 43_114,
    name: 'Avalanche',
    logo: <Logos.Avalanche />,
  },
  {
    id: 43_113,
    name: 'Avalanche Fuji',
    logo: <Logos.Avalanche testnet />,
  },
  {
    id: 31337,
    name: 'Foundry',
    logo: <Logos.Foundry testnet />,
  },
  {
    id: 100,
    name: 'Gnosis',
    logo: <Logos.Gnosis />,
  },
  {
    id: 9001,
    name: 'Evmos',
    logo: <Logos.Evmos />,
  },
  {
    id: 9000,
    name: 'Evmos Testnet',
    logo: <Logos.Evmos testnet />,
  },
  {
    id: 56,
    name: 'BNB Smart Chain',
    logo: <Logos.BinanceSmartChain />,
  },
  {
    id: 97,
    name: 'Binance Smart Chain Testnet',
    logo: <Logos.BinanceSmartChain testnet />,
  },
  {
    id: 11155111,
    name: 'Sepolia',
    logo: <Logos.Sepolia />,
  },
  {
    id: 841,
    name: 'Taraxa',
    logo: <Logos.Taraxa />,
  },
  {
    id: 842,
    name: 'Taraxa Testnet',
    logo: <Logos.Taraxa testnet />,
  },
  {
    id: 324,
    name: 'zkSync',
    logo: <Logos.zkSync />,
  },
  {
    id: 280,
    name: 'zkSync Testnet',
    logo: <Logos.zkSync testnet />,
  },
  {
    id: 42_220,
    name: 'Celo',
    logo: <Logos.Celo />,
  },
  {
    id: 44_787,
    name: 'Celo Alfajores',
    logo: <Logos.Celo testnet />,
  },
  {
    id: 7_700,
    name: 'Canto',
    logo: <Logos.Canto />,
  },
  {
    id: 250,
    name: 'Fantom',
    logo: <Logos.Fantom />,
  },
  {
    id: 4_002,
    name: 'Fantom Testnet',
    logo: <Logos.Fantom testnet />,
  },
  {
    id: 14,
    name: 'Flare',
    logo: <Logos.Flare />,
  },
  {
    id: 114,
    name: 'Coston2',
    logo: <Logos.Flare />,
  },
  {
    id: 314,
    name: 'Filecoin',
    logo: <Logos.Filecoin />,
  },
  {
    id: 314_1,
    name: 'Filecoin Hyperspace',
    logo: <Logos.Filecoin testnet />,
  },
  {
    id: 314_159,
    name: 'Filecoin Calibration',
    logo: <Logos.Filecoin testnet />,
  },
  {
    id: 1_088,
    name: 'Metis',
    logo: <Logos.Metis />,
  },
  {
    id: 599,
    name: 'Metis Goerli',
    logo: <Logos.Metis testnet />,
  },
  {
    id: 4_689,
    name: 'IoTeX',
    logo: <Logos.IoTeX />,
  },
  {
    id: 4_690,
    name: 'IoTeX Testnet',
    logo: <Logos.IoTeX testnet />,
  },
  {
    id: 8_453,
    name: 'Base',
    logo: <Logos.Base />,
  },
  {
    id: 84_531,
    name: 'Base Goerli',
    logo: <Logos.Base testnet />,
  },
  {
    id: 84_532,
    name: 'Base Sepolia',
    logo: <Logos.Base testnet />,
  },
  {
    id: 7777777,
    name: 'Zora',
    logo: <Logos.Zora />,
  },
  {
    id: 999999999,
    name: 'Zora Sepolia',
    logo: <Logos.Zora testnet />,
  },
  {
    id: 999,
    name: 'Zora Goerli Testnet',
    logo: <Logos.Zora testnet />,
  },
];
</file>

<file path="packages/connectkit/src/constants/defaultTheme.ts">
export default {
  mobileWidth: 560,
};
</file>

<file path="packages/connectkit/src/hooks/connectors/useCoinbaseWalletUri.tsx">
/*
 * DEPRECATED
 *
 * This file is no longer in use and will be removed in the future.
 * Keeping it here for reference purposes only.
 */
/*
import { useState, useEffect } from 'react';

import { Connector, useAccount } from 'wagmi';
import { useConnect } from './../useConnect';
import { useContext } from '../../components/ConnectKit';
import { useCoinbaseWalletConnector } from './../useConnectors';
import { useWallet } from '../../wallets/useWallets';

type Props = {
  enabled?: boolean;
};

export function useCoinbaseWalletUri(
  { enabled }: Props = {
    enabled: true,
  }
) {
  const { log } = useContext();

  const [uri, setUri] = useState<string | undefined>(undefined);

  const connector = useCoinbaseWalletConnector();
  const wallet = useWallet('com.coinbase.wallet');
  const shouldConnect = enabled && !wallet;

  const { isConnected } = useAccount();
  const { connectAsync } = useConnect();

  useEffect(() => {
    if (!shouldConnect) return;

    async function handleMessage(message) {
      const { type } = message;
      log('CBW Message', message);
      if (type === 'connecting') {
        const p: any = await connector.getProvider();
        if (p?.qrUrl) setUri(p.qrUrl);
      }
    }
    async function handleDisconnect() {
      log('CBW Disconnect');

      if (connector) connectWallet(connector);
    }

    async function connectWallet(connector: Connector) {
      const result = await connectAsync({ connector });
      if (result) return result;
      return false;
    }

    async function connectCoinbaseWallet(connector: Connector) {
      try {
        await connectWallet(connector);
      } catch (error: any) {
        log('catch error');
        log(error);
        if (error.code) {
          switch (error.code) {
            case 4001:
              log('error.code - User rejected');
              connectCoinbaseWallet(connector); // Regenerate QR code
              break;
            default:
              log('error.code - Unknown Error');
              break;
          }
        } else {
          // Sometimes the error doesn't respond with a code
          log('Coinbase Wallet cannot connect.', error);
        }
      }
    }

    if (!connector || uri) return;
    if (connector && !isConnected) {
      connectCoinbaseWallet(connector);
      log('add wc listeners');
      connector.emitter.on('message', handleMessage);
      connector.emitter.on('disconnect', handleDisconnect);
      return () => {
        log('remove wc listeners');
        connector.emitter.off('message', handleMessage);
        connector.emitter.off('disconnect', handleDisconnect);
      };
    }
  }, [shouldConnect, connector, isConnected]);

  return {
    uri,
  };
}

*/
</file>

<file path="packages/connectkit/src/hooks/connectors/useWalletConnectUri.ts">
import { useState, useEffect } from 'react';

import { Connector, useAccount } from 'wagmi';
import { useContext } from '../../components/ConnectKit';
import { useConnect } from '../useConnect';
import { useWalletConnectConnector } from './../useConnectors';

type Props = {
  enabled?: boolean;
};

export function useWalletConnectUri(
  { enabled }: Props = {
    enabled: true,
  }
) {
  const { log } = useContext();

  const [uri, setUri] = useState<string | undefined>(undefined);

  const connector = useWalletConnectConnector();

  const { isConnected } = useAccount();
  const { connectAsync } = useConnect();

  useEffect(() => {
    if (!enabled) return;

    async function handleMessage(message) {
      const { type, data } = message;
      log('WC Message', type, data);
      if (type === 'display_uri') {
        setUri(data);
      }
      /*
        // This has the URI as well, but we're probably better off using the one in the display_uri event
        if (type === 'connecting') {
          const p = await connector.getProvider();
          const uri = p.signer.uri; 
          setConnectorUri(uri);
        }
        */
    }
    async function handleDisconnect() {
      log('WC Disconnect');

      if (connector) connectWallet(connector);
    }

    async function connectWallet(connector: Connector) {
      const result = await connectAsync({ connector });
      if (result) return result;
      return false;
    }

    async function connectWalletConnect(connector: Connector) {
      try {
        await connectWallet(connector);
      } catch (error: any) {
        log('catch error');
        log(error);
        if (error.code) {
          switch (error.code) {
            case 4001:
              log('error.code - User rejected');
              connectWalletConnect(connector); // Regenerate QR code
              break;
            default:
              log('error.code - Unknown Error');
              break;
          }
        } else {
          // Sometimes the error doesn't respond with a code
          log('WalletConnect cannot connect.', error);
        }
      }
    }
    if (isConnected) {
      setUri(undefined);
    } else {
      if (!connector || uri) return;
      if (connector && !isConnected) {
        connectWalletConnect(connector);
        log('add wc listeners');
        connector.emitter.on('message', handleMessage);
        connector.emitter.on('disconnect', handleDisconnect);
        return () => {
          log('remove wc listeners');
          connector.emitter.off('message', handleMessage);
          connector.emitter.off('disconnect', handleDisconnect);
        };
      }
    }
  }, [enabled, connector, isConnected]);

  return {
    uri,
  };
}
</file>

<file path="packages/connectkit/src/hooks/useChainIsSupported.ts">
import { useConfig } from 'wagmi';

export function useChainIsSupported(chainId?: number): boolean | null {
  const { chains } = useConfig();
  if (!chainId) return false;
  return chains.some((x) => x.id === chainId);
}
</file>

<file path="packages/connectkit/src/hooks/useChains.ts">
import { Chain } from 'viem';
import { useConfig } from 'wagmi';

export function useChains() {
  const wagmi = useConfig();
  const chains = wagmi?.chains ?? [];
  return chains.map((c) => c) as Chain[];
}
</file>

<file path="packages/connectkit/src/hooks/useConnect.tsx">
/**
 * This is a wrapper around wagmi's useConnect hook that adds some
 * additional functionality.
 */

import {
  type UseConnectParameters,
  useConnect as wagmiUseConnect,
  CreateConnectorFn,
  Connector,
} from 'wagmi';
import { useContext } from '../components/ConnectKit';
import { useLastConnector } from './useLastConnector';

export function useConnect({ ...props }: UseConnectParameters = {}) {
  const context = useContext();

  const { connect, connectAsync, connectors, ...rest } = wagmiUseConnect({
    ...props,
    mutation: {
      ...props.mutation,
      onError(err) {
        if (err.message) {
          if (err.message !== 'User rejected request') {
            context.log(err.message, err);
          }
        } else {
          context.log(`Could not connect.`, err);
        }
      },
    },
  });

  return {
    connect: ({
      connector,
      chainId,
      mutation,
    }: {
      connector: CreateConnectorFn | Connector;
      chainId?: number;
      mutation?: UseConnectParameters['mutation'];
    }) => {
      return connect(
        {
          connector,
          chainId: chainId ?? context.options?.initialChainId,
        },
        mutation
      );
    },
    connectAsync: async ({
      connector,
      chainId,
      mutation,
    }: {
      connector: CreateConnectorFn | Connector;
      chainId?: number;
      mutation?: UseConnectParameters['mutation'];
    }) => {
      return connectAsync(
        {
          connector,
          chainId: chainId ?? context.options?.initialChainId,
        },
        mutation
      );
    },
    connectors,
    ...rest,
  };
}
</file>

<file path="packages/connectkit/src/hooks/useConnectCallback.ts">
import { useAccountEffect } from 'wagmi';

export type useConnectCallbackProps = {
  onConnect?: ({
    address,
    connectorId,
  }: {
    address?: string;
    connectorId?: string;
  }) => void;
  onDisconnect?: () => void;
};

export const useConnectCallback = ({
  onConnect,
  onDisconnect,
}: useConnectCallbackProps) => {
  useAccountEffect({
    onConnect: ({ address, connector, isReconnected }) => {
      if (!isReconnected) {
        onConnect?.({
          address: address,
          connectorId: connector?.id,
        });
      }
    },
    onDisconnect: () => onDisconnect?.(),
  });
};
</file>

<file path="packages/connectkit/src/hooks/useConnectors.ts">
import { type Connector, useConnectors as useWagmiConnectors } from 'wagmi';

export function useConnectors() {
  const connectors = useWagmiConnectors();
  return connectors ?? [];
}

export function useConnector(id: string, uuid?: string) {
  const connectors = useConnectors();
  if (id === 'injected' && uuid) {
    return connectors.find((c) => c.id === id && c.name === uuid) as Connector;
  } else if (id === 'injected') {
    return connectors.find(
      (c) => c.id === id && c.name.includes('Injected')
    ) as Connector;
  }
  return connectors.find((c) => c.id === id);
}

export function useFamilyAccountsConnector() {
  return useConnector('familyAccountsProvider');
}
export function useFamilyConnector() {
  return useConnector('co.family.wallet');
}

export function useInjectedConnector(uuid?: string) {
  /*
  options: {
    shimDisconnect: true,
    name: (
      detectedName: string | string[] // Detects the name of the injected wallet
    ) =>
      `Injected (${
        typeof detectedName === 'string'
          ? detectedName
          : detectedName.join(', ')
      })`,
  }
  */
  return useConnector('injected', uuid);
}
export function useWalletConnectConnector() {
  /*
  options: {
    qrcode: false,
    // or
    showQrModal: false,
  }
  */
  return useConnector('walletConnect');
}
export function useCoinbaseWalletConnector() {
  /*
  options: {
    headlessMode: true,
  }
  */
  return useConnector('coinbaseWalletSDK');
}
export function useMetaMaskConnector() {
  /*
  options: {
    shimDisconnect: true,
    shimChainChangedDisconnect: true,
    UNSTABLE_shimOnConnectSelectAccount: true,
  }
  */
  return useConnector('metaMask');
}
</file>

<file path="packages/connectkit/src/hooks/useEnsFallbackConfig.ts">
import type { Config } from '@wagmi/core';
import { http, createConfig } from 'wagmi';
import { mainnet } from 'wagmi/chains';
import { useChainIsSupported } from '../hooks/useChainIsSupported';

const ensFallbackConfig = createConfig({
  chains: [mainnet],
  transports: {
    [mainnet.id]: http(),
  },
});

export function useEnsFallbackConfig(): Config | undefined {
  return !useChainIsSupported(1) ? ensFallbackConfig : undefined;
}
</file>

<file path="packages/connectkit/src/hooks/useFitText.tsx">
// https://github.com/saltycrane/use-fit-text

import {
  useCallback,
  useEffect,
  useLayoutEffect,
  useRef,
  useState,
} from 'react';
import ResizeObserver from 'resize-observer-polyfill';

export type TLogLevel = 'debug' | 'info' | 'warn' | 'error' | 'none';

export type TOptions = {
  logLevel?: TLogLevel;
  maxFontSize?: number;
  minFontSize?: number;
  onFinish?: (fontSize: number) => void;
  onStart?: () => void;
  resolution?: number;
};

const LOG_LEVEL: Record<TLogLevel, number> = {
  debug: 10,
  info: 20,
  warn: 30,
  error: 40,
  none: 100,
};

// Suppress `useLayoutEffect` warning when rendering on the server
// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
const useIsoLayoutEffect =
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement !== undefined
    ? useLayoutEffect
    : useEffect;

const useFitText = ({
  logLevel: logLevelOption = 'info',
  maxFontSize = 100,
  minFontSize = 20,
  onFinish,
  onStart,
  resolution = 5,
}: TOptions = {}) => {
  const logLevel = LOG_LEVEL[logLevelOption];

  const initState = useCallback(() => {
    return {
      calcKey: 0,
      fontSize: maxFontSize,
      fontSizePrev: minFontSize,
      fontSizeMax: maxFontSize,
      fontSizeMin: minFontSize,
    };
  }, [maxFontSize, minFontSize]);

  const ref = useRef<HTMLDivElement>(null);
  const innerHtmlPrevRef = useRef<string | null>();
  const isCalculatingRef = useRef(false);
  const [state, setState] = useState(initState);
  const { calcKey, fontSize, fontSizeMax, fontSizeMin, fontSizePrev } = state;

  // Montior div size changes and recalculate on resize
  let animationFrameId: number | null = null;
  const [ro] = useState(
    () =>
      new ResizeObserver(() => {
        animationFrameId = window.requestAnimationFrame(() => {
          if (isCalculatingRef.current) {
            return;
          }
          onStart && onStart();
          isCalculatingRef.current = true;
          // `calcKey` is used in the dependencies array of
          // `useIsoLayoutEffect` below. It is incremented so that the font size
          // will be recalculated even if the previous state didn't change (e.g.
          // when the text fit initially).
          setState({
            ...initState(),
            calcKey: calcKey + 1,
          });
        });
      })
  );

  useEffect(() => {
    if (ref.current) {
      ro.observe(ref.current);
    }
    return () => {
      animationFrameId && window.cancelAnimationFrame(animationFrameId);
      ro.disconnect();
    };
  }, [animationFrameId, ro]);

  // Recalculate when the div contents change
  const innerHtml = ref.current && ref.current.innerHTML;
  useEffect(() => {
    if (calcKey === 0 || isCalculatingRef.current) return;

    if (innerHtml !== innerHtmlPrevRef.current) {
      onStart && onStart();
      setState({
        ...initState(),
        calcKey: calcKey + 1,
      });
    }
    innerHtmlPrevRef.current = innerHtml;
  }, [calcKey, initState, innerHtml, onStart]);

  // Check overflow and resize font
  useIsoLayoutEffect(() => {
    // Don't start calculating font size until the `resizeKey` is incremented
    // above in the `ResizeObserver` callback. This avoids an extra resize
    // on initialization.
    if (calcKey === 0) {
      return;
    }

    const isWithinResolution = Math.abs(fontSize - fontSizePrev) <= resolution;
    const isOverflow =
      !!ref.current &&
      (ref.current.scrollHeight > ref.current.offsetHeight ||
        ref.current.scrollWidth > ref.current.offsetWidth);
    const isFailed = isOverflow && fontSize === fontSizePrev;
    const isAsc = fontSize > fontSizePrev;

    // Return if the font size has been adjusted "enough" (change within `resolution`)
    // reduce font size by one increment if it's overflowing.
    if (isWithinResolution) {
      if (isFailed) {
        isCalculatingRef.current = false;
        if (logLevel <= LOG_LEVEL.info) {
          console.info(
            `[use-fit-text] reached \`minFontSize = ${minFontSize}\` without fitting text`
          );
        }
      } else if (isOverflow) {
        setState({
          fontSize: isAsc ? fontSizePrev : fontSizeMin,
          fontSizeMax,
          fontSizeMin,
          fontSizePrev,
          calcKey,
        });
      } else {
        isCalculatingRef.current = false;
        onFinish && onFinish(fontSize);
      }
      return;
    }

    // Binary search to adjust font size
    let delta: number;
    let newMax = fontSizeMax;
    let newMin = fontSizeMin;
    if (isOverflow) {
      delta = isAsc ? fontSizePrev - fontSize : fontSizeMin - fontSize;
      newMax = Math.min(fontSizeMax, fontSize);
    } else {
      delta = isAsc ? fontSizeMax - fontSize : fontSizePrev - fontSize;
      newMin = Math.max(fontSizeMin, fontSize);
    }
    setState({
      calcKey,
      fontSize: fontSize + delta / 2,
      fontSizeMax: newMax,
      fontSizeMin: newMin,
      fontSizePrev: fontSize,
    });
  }, [
    calcKey,
    fontSize,
    fontSizeMax,
    fontSizeMin,
    fontSizePrev,
    onFinish,
    ref,
    resolution,
  ]);

  return { fontSize, ref };
};

export default useFitText;
</file>

<file path="packages/connectkit/src/hooks/useFocusTrap.tsx">
// Based on https://hiddedevries.nl/en/blog/2017-01-29-using-javascript-to-trap-focus-in-an-element

import React, { useRef, useEffect } from 'react';

const KEYCODE_TAB = 9;

function useFocusTrap() {
  const elRef = useRef<any>(null);

  function handleFocus(e: any) {
    if (!elRef.current) return;
    var focusableEls = elRef.current.querySelectorAll(`
        a[href]:not(:disabled),
        button:not(:disabled),
        textarea:not(:disabled),
        input[type="text"]:not(:disabled),
        input[type="radio"]:not(:disabled),
        input[type="checkbox"]:not(:disabled),
        select:not(:disabled)
      `),
      firstFocusableEl = focusableEls[0],
      lastFocusableEl = focusableEls[focusableEls.length - 1];

    var isTabPressed = e.key === 'Tab' || e.keyCode === KEYCODE_TAB;

    if (!isTabPressed) {
      return;
    }

    if (e.shiftKey) {
      /* shift + tab */ if (document.activeElement === firstFocusableEl) {
        lastFocusableEl.focus();
        e.preventDefault();
      }
    } /* tab */ else {
      if (document.activeElement === lastFocusableEl) {
        firstFocusableEl.focus();
        e.preventDefault();
      }
    }
  }

  useEffect(() => {
    if (elRef.current) {
      elRef.current.addEventListener('keydown', handleFocus);
      elRef.current.focus({ preventScroll: true });
    }
    return () => {
      if (elRef.current) {
        elRef.current.removeEventListener('keydown', handleFocus);
      }
    };
  }, []);

  return elRef;
}

export default function FocusTrap(props: any) {
  const elRef = useFocusTrap();

  useEffect(() => {
    if (!elRef.current) return;
    elRef.current.focus({ preventScroll: true });
  }, []);

  return (
    <div ref={elRef} tabIndex={0}>
      {props.children}
    </div>
  );
}
</file>

<file path="packages/connectkit/src/hooks/useGoogleFont.tsx">
import { useEffect } from 'react';
import { Theme } from '../types';

export function useGoogleFont(font: string) {
  useEffect(() => {
    if (!font) return;
    font = font.replace(/ /g, '+');

    const googleapis = document.createElement('link');
    googleapis.href = `https://fonts.googleapis.com`;
    googleapis.rel = 'preconnect';

    const gstatic = document.createElement('link');
    gstatic.href = `https://fonts.gstatic.com`;
    gstatic.rel = 'preconnect';
    gstatic.crossOrigin = 'true';

    const link = document.createElement('link');
    link.href = `https://fonts.googleapis.com/css2?family=${font}:wght@400;500;600&display=swap`;
    link.rel = 'stylesheet';

    document.head.appendChild(googleapis);
    document.head.appendChild(gstatic);
    document.head.appendChild(link);
    return () => {
      document.head.removeChild(googleapis);
      document.head.removeChild(gstatic);
      document.head.removeChild(link);
    };
  }, [font]);
}

// TODO: This could be dynamic if theming wasn't set up as css variables
export function useThemeFont(theme: Theme) {
  const themeFonts: any = {
    web95: 'Lato',
    retro: 'Nunito',
    midnight: 'Inter',
    minimal: 'Inter',
    rounded: 'Nunito',
  };
  const font: string = themeFonts[theme] ?? null;
  useGoogleFont(font ?? '');
}
</file>

<file path="packages/connectkit/src/hooks/useIsMobile.ts">
import { useState, useEffect } from 'react';
import { isMobile } from '../utils';

export default function useIsMobile() {
  const [mobile, setMobile] = useState(isMobile());

  useEffect(() => {
    const handleResize = () => {
      setMobile(isMobile());
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return mobile;
}
</file>

<file path="packages/connectkit/src/hooks/useIsMounted.tsx">
import { useState, useEffect } from 'react';

export default function useIsMounted() {
  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);
  return mounted;
}
</file>

<file path="packages/connectkit/src/hooks/useLastConnector.ts">
import { useEffect, useState } from 'react';
import { useConfig } from 'wagmi';

export const useLastConnector = () => {
  const { storage } = useConfig();
  const [lastConnectorId, setLastConnectorId] = useState<string | null>(null);

  useEffect(() => {
    const init = async () => {
      const id = await storage?.getItem('recentConnectorId');
      setLastConnectorId(id ?? '');
    };
    init();
  }, []);

  const update = (id: string) => {
    storage?.setItem('recentConnectorId', id);
  };

  return {
    lastConnectorId,
    updateLastConnectorId: update,
  };
};
</file>

<file path="packages/connectkit/src/hooks/useLocales.tsx">
import React, { useMemo } from 'react';
import Logos from '../assets/logos';

import { useContext } from '../components/ConnectKit';

import { getLocale } from './../localizations';

export default function useLocales(replacements?: any) {
  const context = useContext();
  const language = context.options?.language ?? 'en-US';

  const translations = useMemo(() => {
    return getLocale(language);
  }, [language]);

  if (!translations) {
    console.error(`Missing translations for: ${language}`);
    return `Missing translations for: ${language}`;
  }

  const translated: any = {};
  Object.keys(translations).map((key) => {
    const string = translations[key];
    return (translated[key] = localize(string, replacements));
  });

  return translated;
}

const localize = (text: string, replacements?: any[string]) => {
  let parsedText: string = text;
  if (replacements) {
    Object.keys(replacements).forEach((key) => {
      // use `replace` instead of `replaceAll` to support Node 14
      parsedText = parsedText.replace(
        new RegExp(`({{ ${key} }})`, 'g'),
        replacements[key as keyof typeof replacements]
      );
    });
  }
  return replaceMarkdown(parsedText);
};

const replaceMarkdown = (markdownText: string) => {
  let text: any = markdownText;
  text = text.split('\n');
  text = text.map((t: string, i: number) => {
    return (
      <React.Fragment key={i}>
        {wrapTags(t)}
        {i < text.length - 1 && <br />}
      </React.Fragment>
    );
  });
  return text;
};

const wrapTags = (text: string) => {
  // Bold markdown handling
  const textArray = text.split(/(\*\*[^\*]*\*\*)/g);
  let result = textArray.map((str, i) => {
    if (/(\*\*.*\*\*)/g.test(str)) {
      // use `replace` instead of `replaceAll` to support Node 14
      return <strong key={i}>{str.replace(/\*\*/g, '')}</strong>;
    }
    return `${str}`;
  });

  // Replace text with logo
  return result.map((r) => {
    if (typeof r === 'string') {
      return r.split(/(\[WALLETCONNECTLOGO\])/g).map((s) => {
        if (s === '[WALLETCONNECTLOGO]') {
          return (
            <span key={s} className="ck-tt-logo">
              <Logos.WalletConnect />
            </span>
          );
        }
        return s;
      });
    }
    return r;
  });
};
</file>

<file path="packages/connectkit/src/hooks/useLocalStorage.ts">
import { useState } from 'react';
import * as LocalStorage from '../utils/localstorage';

export const useLocalStorage = (storageKey: string) => {
  const [data, setData] = useState(LocalStorage.get(storageKey));

  const add = (item: any) => {
    const newItems = LocalStorage.add(storageKey, item);
    setData(newItems);
  };

  const update = (items: any) => {
    const newItems = LocalStorage.save(storageKey, items);
    setData(newItems);
  };

  const remove = (item: any) => {
    const newItems = LocalStorage.remove(storageKey, item);
    setData(newItems);
  };

  const clear = () => {
    const newItems = LocalStorage.save(storageKey, []);
    setData(newItems);
  };

  return { data, add, remove, update, clear };
};
</file>

<file path="packages/connectkit/src/hooks/useLockBodyScroll.ts">
import { useEffect, useState, useLayoutEffect } from 'react';
import { useContext } from '../components/ConnectKit';

const useIsomorphicLayoutEffect =
  typeof window !== 'undefined' ? useLayoutEffect : useEffect;

export default function useLockBodyScroll(initialLocked: boolean) {
  const [locked, setLocked] = useState(initialLocked);

  const context = useContext();

  useIsomorphicLayoutEffect(() => {
    if (!locked) return;

    const original = {
      overflow: document.body.style.overflow,
      position: document.body.style.position,
      touchAction: document.body.style.touchAction,
      paddingRight: document.body.style.paddingRight,
      //htmlOverflow: document.documentElement.style.overflow,
    };

    const style = getComputedStyle(document.body);
    const offsetX =
      parseInt(style.marginRight) +
      parseInt(style.paddingRight) +
      parseInt(style.borderRight) +
      parseInt(style.marginLeft) +
      parseInt(style.paddingLeft) +
      parseInt(style.borderLeft);

    const scrollBarWidth =
      window.innerWidth - document.body.offsetWidth - offsetX;
    document.documentElement.style.setProperty(
      '--ck-scrollbar-width',
      `${scrollBarWidth}px`
    );

    document.body.style.overflow = 'hidden';
    document.body.style.position = 'relative';
    document.body.style.touchAction = 'none';
    //document.documentElement.style.overflow = 'hidden'; // overflow:hidden; on <html> breaks position:sticky;
    if (context.options?.avoidLayoutShift) {
      document.body.style.paddingRight = `${scrollBarWidth}px`;
    }

    return () => {
      document.documentElement.style.removeProperty('--ck-scrollbar-width');

      document.body.style.overflow = original.overflow;
      document.body.style.position = original.position;
      document.body.style.touchAction = original.touchAction;
      //document.documentElement.style.overflow = original.htmlOverflow;
      if (context.options?.avoidLayoutShift) {
        document.body.style.paddingRight = original.paddingRight;
      }
    };
  }, [locked]);

  useEffect(() => {
    if (locked !== initialLocked) setLocked(initialLocked);
  }, [initialLocked]);

  return [locked, setLocked];
}
</file>

<file path="packages/connectkit/src/hooks/useModal.ts">
import { useAccount } from 'wagmi';
import { routes, useContext } from '../components/ConnectKit';
import { useSIWE } from '../siwe';
import {
  useConnectCallback,
  useConnectCallbackProps,
} from './useConnectCallback';

type ModalRoutes = (typeof routes)[keyof typeof routes];

const safeRoutes: {
  connected: ModalRoutes[];
  disconnected: ModalRoutes[];
} = {
  disconnected: [
    routes.CONNECTORS,
    routes.ABOUT,
    routes.ONBOARDING,
    routes.MOBILECONNECTORS,
    routes.ONBOARDING,
  ],
  connected: [routes.PROFILE, routes.SWITCHNETWORKS, routes.SIGNINWITHETHEREUM],
};
const allRoutes: ModalRoutes[] = [
  ...safeRoutes.connected,
  ...safeRoutes.disconnected,
];

type ValidRoutes = ModalRoutes;

type UseModalProps = {} & useConnectCallbackProps;

export const useModal = ({ onConnect, onDisconnect }: UseModalProps = {}) => {
  const context = useContext();

  useConnectCallback({
    onConnect,
    onDisconnect,
  });

  const { isConnected } = useAccount();
  const { signIn } = useSIWE();

  const close = () => {
    context.setOpen(false);
  };
  const open = () => {
    context.setOpen(true);
  };

  const gotoAndOpen = (route: ValidRoutes) => {
    let validRoute: ValidRoutes = route;

    if (!allRoutes.includes(route)) {
      validRoute = isConnected ? routes.PROFILE : routes.CONNECTORS;
      context.log(
        `Route ${route} is not a valid route, navigating to ${validRoute} instead.`
      );
    } else {
      if (isConnected) {
        if (!safeRoutes.connected.includes(route)) {
          validRoute = routes.PROFILE;
          context.log(
            `Route ${route} is not a valid route when connected, navigating to ${validRoute} instead.`
          );
        }
      } else {
        if (!safeRoutes.disconnected.includes(route)) {
          validRoute = routes.CONNECTORS;
          context.log(
            `Route ${route} is not a valid route when disconnected, navigating to ${validRoute} instead.`
          );
        }
      }
    }

    context.setRoute(validRoute);
    open();
  };

  return {
    open: context.open,
    setOpen: (show: boolean) => {
      if (show) {
        gotoAndOpen(isConnected ? routes.PROFILE : routes.CONNECTORS);
      } else {
        close();
      }
    },
    // Disconnected Routes
    openAbout: () => gotoAndOpen(routes.ABOUT),
    openOnboarding: () => gotoAndOpen(routes.ONBOARDING),
    // Connected Routes
    openProfile: () => gotoAndOpen(routes.PROFILE),
    openSwitchNetworks: () => gotoAndOpen(routes.SWITCHNETWORKS),
    openSIWE: (triggerSIWE?: boolean) => {
      gotoAndOpen(routes.SIGNINWITHETHEREUM);
      if (triggerSIWE) signIn();
    },
  };
};
</file>

<file path="packages/connectkit/src/hooks/usePrevious.tsx">
import { useRef, useEffect } from 'react';

export default function usePrevious(value: any, initial?: any) {
  const ref = useRef({ target: value, previous: initial });

  if (ref.current.target !== value) {
    // The value changed.
    ref.current.previous = ref.current.target;
    ref.current.target = value;
  }

  return ref.current.previous;
}
</file>

<file path="packages/connectkit/src/hooks/useWalletConnectModal.tsx">
import { useState } from 'react';
import { Connector, CreateConnectorFn } from 'wagmi';
import { walletConnect } from 'wagmi/connectors';
import { useContext } from '../components/ConnectKit';

import { isWalletConnectConnector } from '../utils';
import { useConnect } from './useConnect';

export function useWalletConnectModal() {
  const { log } = useContext();
  const { connectAsync, connectors } = useConnect();
  const [isOpen, setIsOpen] = useState(false);

  return {
    isOpen,
    open: async () => {
      // add modal styling because wagmi does not let you add styling to the modal
      const w3mcss = document.createElement('style');
      w3mcss.innerHTML = `w3m-modal, wcm-modal{ --wcm-z-index: 2147483647; --w3m-z-index:2147483647; }`;
      document.head.appendChild(w3mcss);

      const clientConnector: Connector | undefined = connectors.find((c) =>
        isWalletConnectConnector(c.id)
      );

      if (clientConnector) {
        try {
          const provider: any = await clientConnector.getProvider();
          const projectId = provider.rpc.projectId;

          const connector: CreateConnectorFn = walletConnect({
            projectId,
            showQrModal: true,
          });

          setIsOpen(true);
          try {
            await connectAsync({ connector: connector });
          } catch (err) {
            log('WalletConnect', err);
          }
          setIsOpen(false);

          // remove modal styling
          document.head.removeChild(w3mcss);
        } catch (err) {
          log('Could not get WalletConnect provider', err);
        }
      } else {
        log('No WalletConnect connector available');
      }
    },
  };
}
</file>

<file path="packages/connectkit/src/hooks/useWindowSize.ts">
import { useState, useEffect } from 'react';

export default function useWindowSize() {
  const [windowSize, setWindowSize] = useState<{
    width: number;
    height: number;
  }>({
    width: 0,
    height: 0,
  });

  useEffect(() => {
    function handleResize() {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    }
    window.addEventListener('resize', handleResize);
    handleResize();
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return windowSize;
}
</file>

<file path="packages/connectkit/src/localizations/locales/ar-AE.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const arAE: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'الاتصال بالمحفظة',
  disconnect: 'قطع الاتصال',
  connected: 'متصل',
  wrongNetwork: 'شبكة خاطئة',
  switchNetworks: 'تغيير الشبكات',
  chainNetwork: 'شبكة {{ CHAIN }}',
  copyToClipboard: 'نسخ إلى الحافظة',
  copyCode: 'نسخ الكود',
  moreInformation: 'مزيد من المعلومات',
  back: 'عودة',
  close: 'إغلاق',
  or: 'أو',
  more: 'المزيد',
  tryAgain: 'حاول مجددًا',
  tryAgainQuestion: 'هل نحاول مرة أخرى؟',
  dontHaveTheApp: 'ليس لديك التطبيق؟',
  scanTheQRCode: 'مسح رمز الاستجابة السريعة',
  useWalletConnectModal: 'استخدم نموذج ولِيت‌كنيكت',
  useModal: 'استخدم النموذج',
  installTheExtension: 'تثبيت الإضافة',
  getWalletName: 'الحصول على {{ CONNECTORNAME }}',
  otherWallets: 'محافظ أخرى',
  learnMore: 'تعرف على المزيد',
  getWallet: 'الحصول على محفظة',
  approveInWallet: 'الموافقة في المحفظة',
  confirmInWallet: 'تأكيد في المحفظة',
  awaitingConfirmation: 'بانتظار التأكيد',
  signIn: 'تسجيل الدخول',
  signOut: 'تسجيل الخروج',
  signedIn: 'تم تسجيل الدخول',
  signedOut: 'تم تسجيل الخروج',
  walletNotConnected: 'المحفظة غير متصلة',

  warnings_walletSwitchingUnsupported: `عذرًا، لا تدعم محفظتك تغيير الشبكات من هذا التطبيق.`,
  warnings_walletSwitchingUnsupportedResolve: `حاول تغيير الشبكات من داخل محفظتك بدلاً من ذلك.`,
  warnings_chainUnsupported: `هذا التطبيق غير متوافق مع الشبكة المتصلة حاليًا.`,
  warnings_chainUnsupportedResolve: `للمتابعة، قم بتغيير الشبكة أو قطع الاتصال.`,

  onboardingScreen_heading: `الحصول على محفظة`,
  onboardingScreen_h1: `ابدأ استكشاف الويب3`,
  onboardingScreen_p: `تعتبر محفظتك بوابتك إلى عوالم إيثريوم، التكنولوجيا السحرية التي تمكن استكشاف الويب3.`,
  onboardingScreen_ctaText: `اختر محفظتك الأولى`,
  onboardingScreen_ctaUrl: `https://ethereum.org/ar/wallets/find-wallet/`,

  aboutScreen_heading: `حول المحافظ`,
  aboutScreen_a_h1: `حافظ على أصولك الرقمية`,
  aboutScreen_a_p: `تمكنك المحافظ من إرسال واستقبال وتخزين والتفاعل مع الأصول الرقمية مثل NFTs ورموز إيثريوم الأخرى.`,
  aboutScreen_b_h1: `وسيلة أفضل لتسجيل الدخول`,
  aboutScreen_b_p: `في تطبيقات العصر الحديث، يمكن استخدام محفظتك كوسيلة سهلة لتسجيل الدخول بدلاً من الحاجة إلى تذكر كلمة مرور.`,
  aboutScreen_c_h1: `استكشاف عالم الويب3`,
  aboutScreen_c_p: `تعتبر محفظتك أداة أساسية تمكنك من استكشاف والمشاركة في عالم الويب3 الذي يتطور بسرعة.`,
  aboutScreen_ctaText: `استزيد من المعرفة`,
  aboutScreen_ctaUrl: `https://ethereum.org/ar/wallets/`,

  connectorsScreen_heading: `الاتصال بالمحفظة`,
  connectorsScreen_newcomer: `ليس لدي محفظة`,
  connectorsScreen_h1: `ما هي المحافظ؟`,
  connectorsScreen_p: `تُستخدم المحافظ لإرسال واستقبال وتخزين الأصول الرقمية. يمكنك الاتصال بمحفظة للتفاعل مع التطبيقات.`,

  mobileConnectorsScreen_heading: `اختر محفظة`,

  scanScreen_heading: `مسح باستخدام الهاتف`,
  scanScreen_heading_withConnector: `مسح باستخدام {{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `افتح محفظة تدعم ولِيت‌كنيكت \n لبدء المسح.`,
  scanScreen_tooltip_default: `افتح {{ CONNECTORNAME }} على هاتفك للمسح`,

  downloadAppScreen_heading: `الحصول على {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `استخدم كاميرا هاتفك للمسح وتنزيله على نظامي iOS أو Android

.`,
  downloadAppScreen_ios: `استخدم كاميرا هاتفك للمسح وتنزيله على نظام iOS.`,
  downloadAppScreen_android: `استخدم كاميرا هاتفك للمسح وتنزيله على نظام Android.`,

  injectionScreen_unavailable_h1: `المتصفح غير مدعوم`,
  injectionScreen_unavailable_p: `لتوصيل محفظتك {{ CONNECTORSHORTNAME }}، قم بتثبيت الإضافة على متصفح {{ SUGGESTEDEXTENSIONBROWSER }}.`,

  injectionScreen_install_h1: `تثبيت {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `لتوصيل محفظتك {{ CONNECTORSHORTNAME }}، قم بتثبيت الإضافة على المتصفح.`,

  injectionScreen_connecting_h1: `طلب الاتصال`,
  injectionScreen_connecting_p: `افتح إضافة المتصفح {{ CONNECTORSHORTNAME }} لتوصيل محفظتك.`,
  injectionScreen_connecting_injected_h1: `طلب الاتصال`,
  injectionScreen_connecting_injected_p: `قبل الطلب من خلال محفظتك للاتصال بتطبيقنا.`,

  injectionScreen_connected_h1: `الاتصال بالفعل`,
  injectionScreen_connected_p: `من الآمن الآن إغلاق هذه النافذة المنبثقة.`,

  injectionScreen_rejected_h1: `تم رفض الطلب`,
  injectionScreen_rejected_p: `لقد قمت برفض الطلب. انقر أعلى للمحاولة مرة أخرى.`,

  injectionScreen_failed_h1: `فشل الاتصال`,
  injectionScreen_failed_p: `عذرًا، حدث خطأ ما. يُرجى المحاولة مرة أخرى للاتصال.`,

  injectionScreen_notconnected_h1: `تسجيل الدخول إلى {{ CONNECTORNAME }}`,
  injectionScreen_notconnected_p: `للمتابعة، يُرجى تسجيل الدخول إلى إضافة {{ CONNECTORNAME }}.`,

  profileScreen_heading: 'متصل',

  switchNetworkScreen_heading: 'تبديل الشبكات',

  signInWithEthereumScreen_tooltip:
    'أنت غير مسجل الدخول حاليًا إلى هذا التطبيق.\n**سجل الدخول باستخدام إثيريوم** للمتابعة.',

  signInWithEthereumScreen_signedOut_heading: 'سجل الدخول باستخدام إثيريوم',
  signInWithEthereumScreen_signedOut_h1:
    'يود هذا التطبيق التحقق منك \n كصاحب لهذه المحفظة.',
  signInWithEthereumScreen_signedOut_p: `يرجى تأكيد طلب الرسالة في محفظتك للمتابعة.`,
  signInWithEthereumScreen_signedOut_button: 'سجل الدخول',

  signInWithEthereumScreen_signedIn_heading: 'تم تسجيل الدخول باستخدام إثيريوم',
  signInWithEthereumScreen_signedIn_h1:
    'لقد قمت بتأكيد نفسك كصاحب لهذه المحفظة بنجاح.',
  signInWithEthereumScreen_signedIn_p: `سيتطلب تسجيل الخروج منك إعادة المصادقة مرة أخرى في المستقبل.`,
  signInWithEthereumScreen_signedIn_button: 'تسجيل الخروج',
};

export default arAE;
</file>

<file path="packages/connectkit/src/localizations/locales/ca-AD.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const caAD: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'Connecta la cartera',
  disconnect: 'Desconnectar',
  connected: 'Connectat',
  wrongNetwork: 'Xarxa incorrecta',
  switchNetworks: 'Canvi de xarxa',
  chainNetwork: 'Xarxa {{ CHAIN }}',
  copyToClipboard: 'Copia al portapapers',
  copyCode: 'Copia codi',
  moreInformation: 'Més informació',
  back: 'Enrere',
  close: 'Tanca',
  or: 'o',
  more: 'Més',
  tryAgain: 'Torna-ho a intentar',
  tryAgainQuestion: 'Tornar a intentar-ho?',
  dontHaveTheApp: "No tens l'aplicació?",
  scanTheQRCode: 'Escaneja el codi QR',
  useWalletConnectModal: 'Utilitza WalletConnect Modal',
  useModal: 'Utilitza Modal',
  installTheExtension: "Instal·la l'extensió",
  getWalletName: 'Obté {{ CONNECTORNAME }}',
  otherWallets: 'Altres carteres',
  learnMore: 'Més informació',
  getWallet: 'Obté una cartera',
  approveInWallet: 'Aprova a la cartera',
  confirmInWallet: 'Confirma a la cartera',
  awaitingConfirmation: 'Esperant confirmació',
  signIn: 'Inicia sessió',
  signOut: 'Tanca sessió',
  signedIn: 'Sessió iniciada',
  signedOut: 'Sessió tancada',
  walletNotConnected: 'Cartera no connectada',

  warnings_walletSwitchingUnsupported: `La teva cartera no permet canviar de xarxa des d'aquesta aplicació.`,
  warnings_walletSwitchingUnsupportedResolve: `Prova a canviar de xarxa des de la teva cartera.`,
  warnings_chainUnsupported: `Aquesta aplicació no és compatible amb la xarxa connectada actualment.`,
  warnings_chainUnsupportedResolve: `Canvia o desconnecta per continuar.`,

  onboardingScreen_heading: `Obté una cartera`,
  onboardingScreen_h1: `Comença a explorar la Web3`,
  onboardingScreen_p: `La teva cartera és el portal d'accés a tot el relacionat amb Ethereum, la tecnologia màgica que permet explorar la Web3.`,
  onboardingScreen_ctaText: `Tria la teva primera cartera`,
  onboardingScreen_ctaUrl: `https://ethereum.org/es/wallets/find-wallet/`,

  aboutScreen_heading: `Sobre les carteres`,
  aboutScreen_a_h1: `Per als teus actius digitals`,
  aboutScreen_a_p: `Les carteres et permeten enviar, rebre, emmagatzemar i interactuar amb actius digitals com els NFT i altres tokens d'Ethereum.`,
  aboutScreen_b_h1: `Una manera millor d'iniciar sessió`,
  aboutScreen_b_p: `Amb les aplicacions modernes, pots utilitzar la teva cartera per iniciar sessió fàcilment, en lloc de haver de recordar una contrasenya.`,
  aboutScreen_c_h1: `Explora el món de la Web3`,
  aboutScreen_c_p: `La teva cartera és una eina essencial que et permet explorar i participar en el món en ràpida evolució de la Web3.`,
  aboutScreen_ctaText: `Més informació`,
  aboutScreen_ctaUrl: `https://ethereum.org/es/wallets/`,

  connectorsScreen_heading: `Connecta una cartera`,
  connectorsScreen_newcomer: `No tinc una cartera`,
  connectorsScreen_h1: `Què és una cartera?`,
  connectorsScreen_p: `Les carteres s'utilitzen per enviar, rebre i emmagatzemar actius digitals. Si connectes una cartera, podràs interactuar amb les aplicacions.`,

  mobileConnectorsScreen_heading: `Tria una cartera`,

  scanScreen_heading: `Escaneja amb el telèfon`,
  scanScreen_heading_withConnector: `Escaneja amb {{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `Obre una cartera compatible amb WalletConnect [WALLETCONNECTLOGO] per escanejar`,
  scanScreen_tooltip_default: `Obre {{ CONNECTORNAME }} en el teu telèfon mòbil per escanejar`,

  downloadAppScreen_heading: `Obté {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `Escaneja amb la càmera del teu telèfon per descarregar-la en iOS o Android.`,
  downloadAppScreen_ios: `Escaneja amb la càmera del teu telèfon per descarregar-la en iOS.`,
  downloadAppScreen_android: `Escaneja amb la càmera del teu telèfon per descarregar-la en Android.`,

  injectionScreen_unavailable_h1: `Navegador no compatible`,
  injectionScreen_unavailable_p: `Per connectar la teva cartera de {{ CONNECTORSHORTNAME }}, instal·la l'extensió en {{ SUGGESTEDEXTENSIONBROWSER }}.`,

  injectionScreen_install_h1: `Instal·la {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `Per connectar la teva cartera de {{ CONNECTORSHORTNAME }}, instal·la l'extensió del navegador.`,

  injectionScreen_connecting_h1: `Sol·licitud de connexió`,
  injectionScreen_connecting_p: `Obre l'extensió del navegador de {{ CONNECTORSHORTNAME }}  per connectar la teva cartera.`,

  injectionScreen_connecting_injected_h1: `Sol·licitud de connexió`,
  injectionScreen_connecting_injected_p: `Accepta la sol·licitud a través de la teva cartera per connectar-te a aquesta aplicació.`,

  injectionScreen_connected_h1: `Ja connectada`,
  injectionScreen_connected_p: `Ja pots tancar aquesta finestra emergent`,

  injectionScreen_rejected_h1: `Sol·licitud cancel·lada`,
  injectionScreen_rejected_p: `Has cancel·lat la sol·licitud. Fes clic a dalt per tornar-ho a intentar.`,

  injectionScreen_failed_h1: `Error de connexió`,
  injectionScreen_failed_p: `Ho sentim, hi ha hagut un problema. Intenta connectar-te de nou.`,

  injectionScreen_notconnected_h1: `Inicia sessió en {{ CONNECTORNAME }}`,
  injectionScreen_notconnected_p: `Per continuar, inicia sessió en la teva extensió de {{ CONNECTORNAME }}.`,

  profileScreen_heading: 'Connectat',

  switchNetworkScreen_heading: 'Canvi de xarxa',

  signInWithEthereumScreen_tooltip:
    'No has iniciat sessió en aquesta aplicació.\n**Inicia sessió amb Ethereum** per continuar.',

  signInWithEthereumScreen_signedOut_heading: 'Inicia sessió amb Ethereum',
  signInWithEthereumScreen_signedOut_h1:
    "Aquesta aplicació vol verificar que ets el propietari d'aquesta cartera.",
  signInWithEthereumScreen_signedOut_p: `Signa la sol·licitud de missatge en la teva cartera per continuar.`,
  signInWithEthereumScreen_signedOut_button: 'Inicia sessió',

  signInWithEthereumScreen_signedIn_heading: 'Sessió iniciada amb Ethereum',
  signInWithEthereumScreen_signedIn_h1:
    "T'has verificat correctament com a propietari d'aquesta cartera.",
  signInWithEthereumScreen_signedIn_p: `Si tanques la sessió, hauràs de tornar a autenticar-te més endavant.`,
  signInWithEthereumScreen_signedIn_button: 'Tanca sessió',
};

export default caAD;
</file>

<file path="packages/connectkit/src/localizations/locales/ee-EE.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const eeEE: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'Ühenda rahakott',
  disconnect: 'Katkesta ühendus',
  connected: 'Ühendatud',
  wrongNetwork: 'Vale võrk',
  switchNetworks: 'Vaheta võrke',
  chainNetwork: '{{ CHAIN }} Võrk',
  copyToClipboard: 'Kopeeri lõikelauale',
  copyCode: 'Kopeeri koodi',
  moreInformation: 'Rohkem infot',
  back: 'Tagasi',
  close: 'Pane kinni',
  or: 'või',
  more: 'Rohkem',
  tryAgain: 'Proovi uuesti',
  tryAgainQuestion: 'Proovi uuesti?',
  dontHaveTheApp: 'Kas teil pole rakendust?',
  scanTheQRCode: 'Skaneeri QR-kood',
  useWalletConnectModal: 'Kasuta WalletConnecti modalit',
  useModal: 'Kasuta Modalit',
  installTheExtension: 'Installi laiendust',
  getWalletName: 'Hanki {{ CONNECTORNAME }}',
  otherWallets: 'Teised rahakotid',
  learnMore: 'Avasta rohkem',
  getWallet: 'Lae alla rahakott',
  approveInWallet: 'Kiita heaks rahakotis',
  confirmInWallet: 'Kinnita rahakotis',
  awaitingConfirmation: 'Kinnituse ootel',
  signIn: 'Logi sisse',
  signOut: 'Logi välja',
  signedIn: 'Sisse logitud',
  signedOut: 'Välja logitud',
  walletNotConnected: 'Raakott pole ühendatud',

  warnings_walletSwitchingUnsupported: `Teie rahakott ei toeta võrgu vahetamist sellest rakendusest.`,
  warnings_walletSwitchingUnsupportedResolve: `Proovige võrgu vahetamist teha oma rahakoti seest.`,
  warnings_chainUnsupported: `See rakendus ei toeta praegu ühendatud võrku.`,
  warnings_chainUnsupportedResolve: `Jätkamiseks vahetage või ühendage lahti.`,

  onboardingScreen_heading: `Hankige rahakott`,
  onboardingScreen_h1: `Alustage Web3 uurimist`,
  onboardingScreen_p: `Teie rahakott on värav kõigele, mis puudutab Ethereumit, maagilist tehnoloogiat, mis võimaldab uurida Web3.`,
  onboardingScreen_ctaText: `Valige oma esimene rahakott`,
  onboardingScreen_ctaUrl: `https://ethereum.org/en/wallets/find-wallet/`,

  aboutScreen_heading: `Rahakottidest`,
  aboutScreen_a_h1: `Teie digitaalsetele varadele`,
  aboutScreen_a_p: `Rahakotid võimaldavad teil saata, vastu võtta, salvestada ja suhelda digitaalsete varadega nagu NFT-d ja teised Ethereumi tokenid.`,
  aboutScreen_b_h1: `Parem viis sisse logimiseks`,
  aboutScreen_b_p: `Kaasaegsete rakendustega saab teie rahakotti kasutada lihtsa sisselogimisviisina, ilma et peaksite meeles pidama parooli.`,
  aboutScreen_c_h1: `Uurige Web3 maailma`,
  aboutScreen_c_p: `Teie rahakott on oluline tööriist, mis võimaldab teil uurida ja osaleda kiiresti arenevas Web3 maailmas.`,
  aboutScreen_ctaText: `Lisateavet saamiseks`,
  aboutScreen_ctaUrl: `https://ethereum.org/en/wallets/`,

  connectorsScreen_heading: `Ühendage rahakott`,
  connectorsScreen_newcomer: `Mul pole rahakotti`,
  connectorsScreen_h1: `Mis on rahakott?`,
  connectorsScreen_p: `Rahakotte kasutatakse digitaalsete varade saatmiseks, vastuvõtmiseks ja salvestamiseks. Rahakoti ühendamine võimaldab teil rakendustega suhelda.`,

  mobileConnectorsScreen_heading: `Valige rahakott`,

  scanScreen_heading: `Skaneerige telefoni abil`,
  scanScreen_heading_withConnector: `Skaneerige koos {{ CONNECTORNAME }}-ga`,
  scanScreen_tooltip_walletConnect: `Ava [WALLETCONNECTLOGO] WalletConnect \ntoetatud rahakott skaneerimiseks`,
  scanScreen_tooltip_default: `Ava {{ CONNECTORNAME }} oma \nmobiiltelefonil skaneerimiseks`,

  downloadAppScreen_heading: `Hankige {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `Skaneerige oma telefoni kaameraga allalaadimiseks iOS-i või Androidi jaoks.`,
  downloadAppScreen_ios: `Skaneerige oma telefoni kaameraga allalaadimiseks iOS-i jaoks.`,
  downloadAppScreen_android: `Skaneerige oma telefoni kaameraga Androidi allalaadimiseks.`,

  injectionScreen_unavailable_h1: `Toetuseta brauser`,
  injectionScreen_unavailable_p: `Teie {{ CONNECTORSHORTNAME }} rahakoti ühendamiseks\ninstallige laiendus {{ SUGGESTEDEXTENSIONBROWSER }}-le.`,

  injectionScreen_install_h1: `Installige {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `Teie {{ CONNECTORSHORTNAME }} rahakoti ühendamiseks\ninstallige brauseri laiendus.`,

  injectionScreen_connecting_h1: `Ühenduse taotlemine`,
  injectionScreen_connecting_p: `Ava {{ CONNECTORSHORTNAME }} brauseri \nlaiendus rahakoti ühendamiseks.`,
  injectionScreen_connecting_injected_h1: `Ühenduse taotlemine`,
  injectionScreen_connecting_injected_p: `Nõustuge rakendusega ühendamiseks oma rahakotis.`,

  injectionScreen_connected_h1: `Juba ühendatud`,
  injectionScreen_connected_p: `Selle popup-i saab nüüd sulgeda`,

  injectionScreen_rejected_h1: `Taotlus tühistatud`,
  injectionScreen_rejected_p: `Tühistasite taotluse.\nKlõpsake ülal, et uuesti proovida.`,

  injectionScreen_failed_h1: `Ühenduse loomine ebaõnnestus`,
  injectionScreen_failed_p: `Vabandame, midagi läks valesti.\nProovige ühendust uuesti luua.`,

  injectionScreen_notconnected_h1: `Logige sisse {{ CONNECTORNAME }}-ga`,
  injectionScreen_notconnected_p: `Jätkamiseks logige sisse oma {{ CONNECTORNAME }} laiendisse.`,

  profileScreen_heading: 'Ühendatud',

  switchNetworkScreen_heading: 'Võrkude vahetamine',

  signInWithEthereumScreen_tooltip:
    'Te pole selle rakendusse sisse logitud.\n**Logi sisse Ethereumiga** jätkamiseks.',

  signInWithEthereumScreen_signedOut_heading: 'Logi sisse Ethereumiga',
  signInWithEthereumScreen_signedOut_h1:
    'See rakendus soovib teid autentida \n selle rahakoti omanikuna.',
  signInWithEthereumScreen_signedOut_p: `Jätkamiseks allkirjastage sõnumipäring \n oma rahakotis.`,
  signInWithEthereumScreen_signedOut_button: 'Logi sisse',

  signInWithEthereumScreen_signedIn_heading: 'Logi välja',
  signInWithEthereumScreen_signedIn_h1:
    'Olete edukalt autentinud end \n selle rahakoti omanikuna.',
  signInWithEthereumScreen_signedIn_p: `Välja logimine nõuab tulevikus \n uuesti autentimist.`,
  signInWithEthereumScreen_signedIn_button: 'Logi välja',
};

export default eeEE;
</file>

<file path="packages/connectkit/src/localizations/locales/en-US.ts">
const enUS = {
  // Family Account
  continueWithFamily: 'Continue with Family',
  orSelectWallet: 'or select a wallet from the list below',
  loginWithEmailOrPhone: 'Login with Email or Phone',
  connectWithFamilyIOS: 'Connect with Family iOS',
  // ConnectKit
  connectWallet: 'Connect Wallet',
  disconnect: 'Disconnect',
  connected: 'Connected',
  wrongNetwork: 'Wrong Network',
  switchNetworks: 'Switch Networks',
  chainNetwork: '{{ CHAIN }} Network',
  copyToClipboard: 'Copy to Clipboard',
  copyCode: 'Copy Code',
  moreInformation: 'More Information',
  back: 'Back',
  close: 'Close',
  or: 'or',
  more: 'More',
  tryAgain: 'Try Again',
  tryAgainQuestion: 'Try Again?',
  dontHaveTheApp: "Don't have the app?",
  scanTheQRCode: 'Scan the QR code',
  useWalletConnectModal: 'Use WalletConnect Modal',
  useModal: 'Use Modal',
  installTheExtension: 'Install the Extension',
  getWalletName: 'Get {{ CONNECTORNAME }}',
  otherWallets: 'Other Wallets',
  learnMore: 'Learn More',
  getWallet: 'Get a Wallet',
  approveInWallet: 'Approve in Wallet',
  confirmInWallet: 'Confirm in Wallet',
  awaitingConfirmation: 'Awaiting Confirmation',
  signIn: 'Sign In',
  signOut: 'Sign Out',
  signedIn: 'Signed In',
  signedOut: 'Signed Out',
  walletNotConnected: 'Wallet Not Connected',

  warnings_walletSwitchingUnsupported: `Your wallet does not support switching networks from this app.`,
  warnings_walletSwitchingUnsupportedResolve: `Try switching networks from within your wallet instead.`,
  warnings_chainUnsupported: `This app does not support the current connected network.`,
  warnings_chainUnsupportedResolve: `Switch or disconnect to continue.`,

  onboardingScreen_heading: `Get a Wallet`,
  onboardingScreen_h1: `Start Exploring Web3`,
  onboardingScreen_p: `Your wallet is the gateway to all things Ethereum, the magical technology that makes it possible to explore web3.`,
  onboardingScreen_ctaText: `Choose Your First Wallet`,
  onboardingScreen_ctaUrl: `https://ethereum.org/en/wallets/find-wallet/`,

  aboutScreen_heading: `About Wallets`,
  aboutScreen_a_h1: `For your digital assets`,
  aboutScreen_a_p: `Wallets let you send, receive, store, and interact with digital assets like NFTs and other Ethereum tokens.`,
  aboutScreen_b_h1: `A better way to login`,
  aboutScreen_b_p: `With modern apps, your wallet can be used as an easy way to login, instead of having to remember a password.`,
  aboutScreen_c_h1: `Explore the world of web3`,
  aboutScreen_c_p: `Your wallet is an essential utility that lets you explore and participate in the fast evolving world of web3.`,
  aboutScreen_ctaText: `Learn More`,
  aboutScreen_ctaUrl: `https://ethereum.org/en/wallets/`,

  connectorsScreen_heading: `Connect Wallet`,
  connectorsScreen_newcomer: `I don’t have a wallet`,
  connectorsScreen_h1: `What is a wallet?`,
  connectorsScreen_p: `Wallets are used to send, receive, and store digital assets. Connecting a wallet lets you interact with apps.`,

  mobileConnectorsScreen_heading: `Choose Wallet`,

  scanScreen_heading: `Scan with Phone`,
  scanScreen_heading_withConnector: `Scan with {{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `Open a [WALLETCONNECTLOGO] WalletConnect \nsupported wallet to scan`,
  scanScreen_tooltip_default: `Open {{ CONNECTORNAME }} on \nyour mobile phone to scan`,

  downloadAppScreen_heading: `Get {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `Scan with your phone camera to download on iOS or Android.`,
  downloadAppScreen_ios: `Scan with your phone camera to download on iOS.`,
  downloadAppScreen_android: `Scan with your phone camera to download on Android.`,

  injectionScreen_unavailable_h1: `Unsupported Browser`,
  injectionScreen_unavailable_p: `To connect your {{ CONNECTORSHORTNAME }} wallet,\ninstall the extension on {{ SUGGESTEDEXTENSIONBROWSER }}.`,

  injectionScreen_install_h1: `Install {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `To connect your {{ CONNECTORSHORTNAME }} wallet,\ninstall the browser extension.`,

  injectionScreen_connecting_h1: `Requesting Connection`,
  injectionScreen_connecting_p: `Open the {{ CONNECTORSHORTNAME }} browser \nextension to connect your wallet.`,
  injectionScreen_connecting_injected_h1: `Requesting Connection`,
  injectionScreen_connecting_injected_p: `Accept the request through your wallet to connect to this app.`,

  injectionScreen_connected_h1: `Already Connected`,
  injectionScreen_connected_p: `It is now okay to close this popup`,

  injectionScreen_rejected_h1: `Request Cancelled`,
  injectionScreen_rejected_p: `You cancelled the request.\nClick above to try again.`,

  injectionScreen_failed_h1: `Connection Failed`,
  injectionScreen_failed_p: `Sorry, something went wrong.\nPlease try connecting again.`,

  injectionScreen_notconnected_h1: `Login to {{ CONNECTORNAME }}`,
  injectionScreen_notconnected_p: `To continue, please login to your {{ CONNECTORNAME }} extension.`,

  profileScreen_heading: 'Connected',

  switchNetworkScreen_heading: 'Switch Networks',

  signInWithEthereumScreen_tooltip:
    'You’re not signed in to this app.\n**Sign In With Ethereum** to continue.',

  signInWithEthereumScreen_signedOut_heading: 'Sign In With Ethereum',
  signInWithEthereumScreen_signedOut_h1:
    'This app would like to verify you \n as the owner of this wallet.',
  signInWithEthereumScreen_signedOut_p: `Please sign the message request \n in your wallet to continue.`,
  signInWithEthereumScreen_signedOut_button: 'Sign In',

  signInWithEthereumScreen_signedIn_heading: 'Signed In With Ethereum',
  signInWithEthereumScreen_signedIn_h1:
    'You successfully verified yourself \n as the owner of this wallet.',
  signInWithEthereumScreen_signedIn_p: `Signing out will require you to \n authenticate again in the future.`,
  signInWithEthereumScreen_signedIn_button: 'Sign Out',
};

export default enUS;
</file>

<file path="packages/connectkit/src/localizations/locales/es-ES.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const esES: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'Conecta una cartera',
  disconnect: 'Desconectar',
  connected: 'Conectado',
  wrongNetwork: 'Red incorrecta',
  switchNetworks: 'Cambio de red',
  chainNetwork: 'Red {{ CHAIN }}',
  copyToClipboard: 'Copiar al portapapeles',
  copyCode: 'Copiar código',
  moreInformation: 'Más información',
  back: 'Atrás',
  close: 'Cerrar',
  or: 'o',
  more: 'Más',
  tryAgain: 'Intentar de nuevo',
  tryAgainQuestion: '¿Intentar de nuevo?',
  dontHaveTheApp: '¿No tienes la aplicación?',
  scanTheQRCode: 'Escanea el código QR',
  useWalletConnectModal: 'Utilizar WalletConnect Modal',
  useModal: 'Utilizar Modal',
  installTheExtension: 'Instalar la extensión',
  getWalletName: 'Obtén {{ CONNECTORNAME }}',
  otherWallets: 'Otras carteras',
  learnMore: 'Más información',
  getWallet: 'Obtén una cartera',
  approveInWallet: 'Aprobar en la cartera',
  confirmInWallet: 'Confirmar en la cartera',
  awaitingConfirmation: 'A la espera de confirmación',
  signIn: 'Iniciar sesión',
  signOut: 'Cerrar sesión',
  signedIn: 'Sesión iniciada',
  signedOut: 'Sesión cerrada',
  walletNotConnected: 'Cartera no conectada',

  warnings_walletSwitchingUnsupported: `Tu cartera no permite cambiar de red desde esta aplicación.`,
  warnings_walletSwitchingUnsupportedResolve: `Prueba a cambiar de red desde tu cartera.`,
  warnings_chainUnsupported: `Esta aplicación no es compatible con la red conectada actualmente.`,
  warnings_chainUnsupportedResolve: `Cambia o desconecta para continuar.`,

  onboardingScreen_heading: `Obtén una cartera`,
  onboardingScreen_h1: `Comienza a explorar la Web3`,
  onboardingScreen_p: `Tu cartera es el portal de acceso a todo lo relacionado con Ethereum, la tecnología mágica que permite explorar la Web3.`,
  onboardingScreen_ctaText: `Elige tu primera cartera`,
  onboardingScreen_ctaUrl: `https://ethereum.org/es/wallets/find-wallet/`,

  aboutScreen_heading: `Acerca de las carteras`,
  aboutScreen_a_h1: `Para tus activos digitales`,
  aboutScreen_a_p: `Las carteras te permiten enviar, recibir, almacenar e interactuar con activos digitales como los NFT y otros tokens de Ethereum.`,
  aboutScreen_b_h1: `Una manera mejor de iniciar sesión`,
  aboutScreen_b_p: `Con las aplicaciones modernas, puedes utilizar tu cartera para iniciar sesión fácilmente, en vez de tener que recordar una contraseña.`,
  aboutScreen_c_h1: `Explora el mundo de la Web3`,
  aboutScreen_c_p: `Tu cartera es una herramienta esencial que te permite explorar y participar en el mundo en rápida evolución de la Web3.`,
  aboutScreen_ctaText: `Más información`,
  aboutScreen_ctaUrl: `https://ethereum.org/es/wallets/`,

  connectorsScreen_heading: `Conecta una cartera`,
  connectorsScreen_newcomer: `No tengo una cartera`,
  connectorsScreen_h1: `¿Qué es una cartera?`,
  connectorsScreen_p: `Las carteras se utilizan para enviar, recibir y almacenar activos digitales. Si conectas una cartera, podrás interactuar con las aplicaciones.`,

  mobileConnectorsScreen_heading: `Elige una cartera`,

  scanScreen_heading: `Escanea con el teléfono`,
  scanScreen_heading_withConnector: `Escanea con {{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `Abre una cartera compatible con WalletConnect [WALLETCONNECTLOGO] para escanear`,
  scanScreen_tooltip_default: `Abre {{ CONNECTORNAME }} en tu teléfono móvil para escanear`,

  downloadAppScreen_heading: `Obtén {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `Escanea con la cámara de tu teléfono para descargarla en iOS o Android.`,
  downloadAppScreen_ios: `Escanea con la cámara de tu teléfono para descargarla en iOS.`,
  downloadAppScreen_android: `Escanea con la cámara de tu teléfono para descargarla en Android.`,

  injectionScreen_unavailable_h1: `Navegador no compatible`,
  injectionScreen_unavailable_p: `Para conectar tu cartera de {{ CONNECTORSHORTNAME }}, instala la extensión en {{ SUGGESTEDEXTENSIONBROWSER }}.`,

  injectionScreen_install_h1: `Instala {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `Para conectar tu cartera de {{ CONNECTORSHORTNAME }}, instala la extensión del navegador.`,

  injectionScreen_connecting_h1: `Solicitud de conexión`,
  injectionScreen_connecting_p: `Abre la extensión del navegador de {{ CONNECTORSHORTNAME }}  para conectar tu cartera.`,
  injectionScreen_connecting_injected_h1: `Solicitud de conexión`,
  injectionScreen_connecting_injected_p: `Acepta la solicitud a través de tu cartera para conectarte a esta aplicación.`,

  injectionScreen_connected_h1: `Ya conectada`,
  injectionScreen_connected_p: `Ya puedes cerrar esta ventana emergente`,

  injectionScreen_rejected_h1: `Solicitud cancelada`,
  injectionScreen_rejected_p: `Has cancelado la solicitud. Haz clic arriba para intentarlo de nuevo.`,

  injectionScreen_failed_h1: `Error de conexión`,
  injectionScreen_failed_p: `Lo sentimos, ha habido un problema. Intenta conectarte de nuevo.`,

  injectionScreen_notconnected_h1: `Inicia sesión en {{ CONNECTORNAME }}`,
  injectionScreen_notconnected_p: `Para continuar, inicia sesión en tu extensión de {{ CONNECTORNAME }}.`,

  profileScreen_heading: 'Conectado',

  switchNetworkScreen_heading: 'Cambio de red',

  signInWithEthereumScreen_tooltip:
    'No has iniciado sesión en esta aplicación.\n**Inicia sesión con Ethereum** para continuar.',
  signInWithEthereumScreen_signedOut_heading: 'Inicia sesión con Ethereum',
  signInWithEthereumScreen_signedOut_h1:
    'Esta aplicación desea verificar que eres el propietario de esta cartera.',
  signInWithEthereumScreen_signedOut_p: `Firma la solicitud de mensaje en tu cartera para continuar.`,
  signInWithEthereumScreen_signedOut_button: 'Iniciar sesión',

  signInWithEthereumScreen_signedIn_heading: 'Sesión iniciada con Ethereum',
  signInWithEthereumScreen_signedIn_h1:
    'Te has verificado correctamente como propietario de esta cartera.',
  signInWithEthereumScreen_signedIn_p: `Si cierras la sesión, tendrás que volver a autenticarte más adelante.`,
  signInWithEthereumScreen_signedIn_button: 'Cerrar sesión',
};

export default esES;
</file>

<file path="packages/connectkit/src/localizations/locales/fa-IR.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const faIR: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'اتصال به کیف پول',
  disconnect: 'قطع ارتباط',
  connected: 'متصل شد',
  wrongNetwork: 'شبکه نادرست',
  switchNetworks: 'تغییر شبکه‌ها',
  chainNetwork: '{{ CHAIN }} شبکه',
  copyToClipboard: 'کپی به کلیپ‌بورد',
  copyCode: 'کپی کد',
  moreInformation: 'اطلاعات بیشتر',
  back: 'بازگشت',
  close: 'بستن',
  or: 'یا',
  more: 'بیشتر',
  tryAgain: 'تلاش دوباره',
  tryAgainQuestion: 'آیا دوباره تلاش کنیم؟',
  dontHaveTheApp: 'اپلیکیشن را ندارید؟',
  scanTheQRCode: 'اسکن کیو‌آر کد',
  useWalletConnectModal: 'استفاده از مودال والت‌‌کانکت',
  useModal: 'استفاده از مودال',
  installTheExtension: 'نصب افزونه',
  getWalletName: 'دریافت {{ CONNECTORNAME }}',
  otherWallets: 'کیف پول‌های دیگر',
  learnMore: 'بیشتر بدانید',
  getWallet: 'یک کیف پول دریافت کنید',
  approveInWallet: 'در کیف پول تأیید کنید',
  confirmInWallet: 'در کیف پول تأیید کنید',
  awaitingConfirmation: 'در انتظار تأیید',
  signIn: 'ورود',
  signOut: 'خروج',
  signedIn: 'وارد شده',
  signedOut: 'خارج شده',
  walletNotConnected: 'کیف پول متصل نیست',

  warnings_walletSwitchingUnsupported: `متاسفانه، کیف پول شما از تغییر شبکه در این برنامه پشتیبانی نمی‌کند.`,
  warnings_walletSwitchingUnsupportedResolve: `بهتر است از داخل کیف پول خود تغییر شبکه دهید.`,
  warnings_chainUnsupported: `این برنامه با شبکه‌ای که در حال حاضر متصل است، سازگاری ندارد.`,
  warnings_chainUnsupportedResolve: `برای ادامه، شبکه را تغییر دهید یا اتصال را قطع کنید.`,

  onboardingScreen_heading: `دریافت کیف پول`,
  onboardingScreen_h1: `آغاز کاوش در وب3`,
  onboardingScreen_p: `کیف پول شما دروازه‌ای است به دنیای اتریوم، فناوری جادویی که ممکن می‌سازد تا وب3 را کاوش کنید.`,
  onboardingScreen_ctaText: `کیف پول نخست خود را انتخاب کنید`,
  onboardingScreen_ctaUrl: `https://ethereum.org/fa/wallets/find-wallet/`,

  aboutScreen_heading: `درباره کیف پول‌ها`,
  aboutScreen_a_h1: `نگهبان دارایی‌های دیجیتالی شما`,
  aboutScreen_a_p: `کیف پول‌ها به شما اجازه می‌دهند دارایی‌های دیجیتالی مانند ان‌اف‌تی و توکن‌های اتریومی دیگر را ارسال، دریافت، ذخیره و تعامل دهید.`,
  aboutScreen_b_h1: `یک روش بهتر برای ورود`,
  aboutScreen_b_p: `در برنامه‌های مدرن، کیف پول شما می‌تواند به عنوان یک راه ورود آسان به جای به یادآوری یک رمز عبور مورد استفاده قرار گیرد.`,
  aboutScreen_c_h1: `جهان وب3 را کاوش کنید`,
  aboutScreen_c_p: `کیف پول شما یک ابزار ضروری است که به شما اجازه می‌دهد جهان در حال تغییر سریع وب3 را کاوش و در آن شرکت کنید.`,
  aboutScreen_ctaText: `دانش بیشتری بیافزایید`,
  aboutScreen_ctaUrl: `https://ethereum.org/fa/wallets/`,

  connectorsScreen_heading: `برقراری ارتباط با کیف پول`,
  connectorsScreen_newcomer: `کیف پول ندارم`,
  connectorsScreen_h1: `چیستی رمزگذاری کیف پول؟`,
  connectorsScreen_p: `کیف پول‌ها برای ارسال، دریافت و نگهداری دارایی‌های دیجیتال استفاده می‌شوند. برقراری ارتباط با یک کیف پول به شما امکان تعامل با برنامه‌ها را می‌دهد.`,

  mobileConnectorsScreen_heading: `انتخاب کیف پول`,

  scanScreen_heading: `اسکن با گوشی`,
  scanScreen_heading_withConnector: `اسکن با {{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `یک کیف پول با پشتیبانی از والت‌‌کانکت را باز کنید تا اسکن را آغاز کنید`,
  scanScreen_tooltip_default: `{{ CONNECTORNAME }} را روی گوشی خود باز کنید تا اسکن شود`,

  downloadAppScreen_heading: `دریافت {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `از دوربین گوشی خود برای اسکن و دریافت نسخه iOS یا Android استفاده کنید.`,
  downloadAppScreen_ios: `از دوربین گوشی خود برای دریافت نسخه iOS استفاده کنید.`,
  downloadAppScreen_android: `از دوربین گوشی خود برای دریافت نسخه Android استفاده کنید.`,

  injectionScreen_unavailable_h1: `مرورگر پشتیبانی نمی‌شود`,
  injectionScreen_unavailable_p: `برای برقراری ارتباط با کیف پول {{ CONNECTORSHORTNAME }}، افزونه مرورگر را در {{ SUGGESTEDEXTENSIONBROWSER }} نصب کنید.`,

  injectionScreen_install_h1: `نصب {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `برای برقراری ارتباط با کیف پول {{ CONNECTORSHORTNAME }}، افزونه مرورگر را نصب کنید.`,

  injectionScreen_connecting_h1: `درخواست اتصال`,
  injectionScreen_connecting_p: `افزونه مرورگر {{ CONNECTORSHORTNAME }} را باز کنید تا ارتباط با کیف پول ایجاد شود.`,
  injectionScreen_connecting_injected_h1: `درخواست اتصال`,
  injectionScreen_connecting_injected_p: `درخواست را از طریق کیف پول خود بپذیرید تا به این برنامه متصل شوید.`,

  injectionScreen_connected_h1: `اتصال از قبل برقرار است`,
  injectionScreen_connected_p: `اکنون می‌توانید این پنجره‌ی بازشو را ببندید.`,

  injectionScreen_rejected_h1: `درخواست لغو شد`,
  injectionScreen_rejected_p: `شما درخواست را لغو کرده‌اید. برای تلاش مجدد، بالا کلیک کنید.`,

  injectionScreen_failed_h1: `ارتباط ناموفق`,
  injectionScreen_failed_p: `متاسفانه، مشکلی بوجود آمد. لطفاً مجدداً اتصال برقرار کنید.`,

  injectionScreen_notconnected_h1: `با ورود به {{ CONNECTORNAME }} وارد شوید`,
  injectionScreen_notconnected_p: `برای ادامه، لطفاً وارد افزونه {{ CONNECTORNAME }} خود شوید.`,

  profileScreen_heading: 'اتصال‌ها',

  switchNetworkScreen_heading: 'تغییر شبکه‌ها',

  signInWithEthereumScreen_tooltip:
    'شما در حال حاضر به این برنامه وارد نشده‌اید.\n**با اتریوم وارد شوید** تا ادامه دهید.',

  signInWithEthereumScreen_signedOut_heading: 'با اتریوم وارد شوید',
  signInWithEthereumScreen_signedOut_h1:
    'این برنامه می‌خواهد هویت شما \n به عنوان صاحب این کیف پول را تأیید کند.',
  signInWithEthereumScreen_signedOut_p: `لطفاً درخواست پیام را در کیف پول خود تأیید کنید تا ادامه دهید.`,
  signInWithEthereumScreen_signedOut_button: 'با اتریوم وارد شوید',

  signInWithEthereumScreen_signedIn_heading: 'با اتریوم وارد شده‌اید',
  signInWithEthereumScreen_signedIn_h1:
    'شما به عنوان صاحب این کیف پول هویت خود را با موفقیت تأیید کرده‌اید.',
  signInWithEthereumScreen_signedIn_p: `خروج از حساب کاربری شما در آینده نیاز به تأیید دوباره دارد.`,
  signInWithEthereumScreen_signedIn_button: 'خروج',
};

export default faIR;
</file>

<file path="packages/connectkit/src/localizations/locales/fr-FR.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const frFR: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'Connecter le portefeuille',
  disconnect: 'Déconnecter',
  connected: 'Connecté',
  wrongNetwork: 'Réseau incorrect',
  switchNetworks: 'Changer de réseau',
  chainNetwork: 'Réseau {{ CHAIN }}',
  copyToClipboard: 'Copier dans le presse-papiers',
  copyCode: 'Copier le code',
  moreInformation: 'Plus d’informations',
  back: 'Retour',
  close: 'Fermer',
  or: 'ou',
  more: 'Plus',
  tryAgain: 'Réessayer',
  tryAgainQuestion: 'Réessayer ?',
  dontHaveTheApp: 'Vous n’avez pas l’application ?',
  scanTheQRCode: 'Scannez le code QR',
  useWalletConnectModal: 'Utiliser la modale WalletConnect',
  useModal: 'Utiliser la modale',
  installTheExtension: 'Installer l’extension',
  getWalletName: 'Obtenez {{ CONNECTORNAME }}',
  otherWallets: 'Autres portefeuilles',
  learnMore: 'En savoir plus',
  getWallet: 'Obtenir un portefeuille',
  approveInWallet: 'Approuver dans le portefeuille',
  confirmInWallet: 'Confirmer dans le portefeuille',
  awaitingConfirmation: 'En attente de confirmation',
  signIn: 'Se connecter',
  signOut: 'Se déconnecter',
  signedIn: 'Connecté',
  signedOut: 'Déconnecté',
  walletNotConnected: 'Portefeuille non connecté',

  warnings_walletSwitchingUnsupported: `Votre portefeuille ne prend pas en charge le changement de réseau à partir de cette application.`,
  warnings_walletSwitchingUnsupportedResolve: `Essayez plutôt de changer de réseau à partir de votre portefeuille.`,
  warnings_chainUnsupported: `Cette application ne prend pas en charge le réseau connecté actuel.`,
  warnings_chainUnsupportedResolve: `Changez ou déconnectez-vous pour continuer.`,

  onboardingScreen_heading: `Obtenez un portefeuille`,
  onboardingScreen_h1: `Commencez à explorer le Web3`,
  onboardingScreen_p: `Votre portefeuille est la porte d'entrée vers tout ce qui concerne l'Ethereum, la technologie magique qui permet d'explorer le Web3.`,
  onboardingScreen_ctaText: `Choisissez votre premier portefeuille`,
  onboardingScreen_ctaUrl: `https://ethereum.org/fr/wallets/find-wallet/`,

  aboutScreen_heading: `À propos des portefeuilles`,
  aboutScreen_a_h1: `Pour vos actifs numériques`,
  aboutScreen_a_p: `Les portefeuilles vous permettent d'envoyer, de recevoir, de stocker et d'interagir avec des actifs numériques tels que des NFT et d'autres jetons Ethereum.`,
  aboutScreen_b_h1: `Une meilleure façon de se connecter`,
  aboutScreen_b_p: `Avec les applications modernes, votre portefeuille peut s'utiliser pour vous connecter facilement, au lieu d'avoir à mémoriser un mot de passe.`,
  aboutScreen_c_h1: `Explorez le monde du Web3`,
  aboutScreen_c_p: `Votre portefeuille est un utilitaire essentiel qui vous permet d'explorer et de participer au monde en évolution rapide du Web3.`,
  aboutScreen_ctaText: `En savoir plus`,
  aboutScreen_ctaUrl: `https://ethereum.org/fr/wallets/`,

  connectorsScreen_heading: `Connectez le portefeuille`,
  connectorsScreen_newcomer: `Je n’ai pas de portefeuille`,
  connectorsScreen_h1: `Qu’est-ce qu’un portefeuille ?`,
  connectorsScreen_p: `Les portefeuilles s'utilisent pour envoyer, recevoir et stocker des actifs numériques. La connexion d'un portefeuille vous permet d'interagir avec les applications.`,

  mobileConnectorsScreen_heading: `Choisissez le portefeuille`,

  scanScreen_heading: `Scannez avec le téléphone`,
  scanScreen_heading_withConnector: `Scannez avec {{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `Ouvrez un portefeuille pris en charge par WalletConnect [WALLETCONNECTLOGO] pour scanner`,
  scanScreen_tooltip_default: `Ouvrez {{ CONNECTORNAME }} sur votre téléphone mobile pour scanner`,

  downloadAppScreen_heading: `Obtenez {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `Scannez avec l'appareil photo de votre téléphone pour le télécharger sur iOS ou Android.`,
  downloadAppScreen_ios: `Scannez avec l'appareil photo de votre téléphone pour le télécharger sur iOS.`,
  downloadAppScreen_android: `Scannez avec l'appareil photo de votre téléphone pour le télécharger sur Android.`,

  injectionScreen_unavailable_h1: `Navigateur non pris en charge`,
  injectionScreen_unavailable_p: `Pour connecter votre portefeuille {{ CONNECTORSHORTNAME }}, installez l’extension sur {{ SUGGESTEDEXTENSIONBROWSER }}.`,

  injectionScreen_install_h1: `Installez {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `Pour connecter votre portefeuille {{ CONNECTORSHORTNAME }}, installez l’extension de navigateur.`,

  injectionScreen_connecting_h1: `Demande de connexion`,
  injectionScreen_connecting_p: `Ouvrez l’extension de navigateur {{ CONNECTORSHORTNAME }} pour connecter votre portefeuille.`,
  injectionScreen_connecting_injected_h1: `Demande de connexion`,
  injectionScreen_connecting_injected_p: `Acceptez la demande via votre portefeuille pour vous connecter à cette application.`,

  injectionScreen_connected_h1: `Déjà connecté`,
  injectionScreen_connected_p: `Vous pouvez maintenant fermer ce pop-up`,

  injectionScreen_rejected_h1: `Demande annulée`,
  injectionScreen_rejected_p: `Vous avez annulé la demande. Cliquez ci-dessus pour réessayer.`,

  injectionScreen_failed_h1: `Échec de la connexion`,
  injectionScreen_failed_p: `Malheureusement, un problème est survenu. Veuillez réessayer de vous connecter.`,

  injectionScreen_notconnected_h1: `Connectez-vous à {{ CONNECTORNAME }}`,
  injectionScreen_notconnected_p: `Pour continuer, veuillez vous connecter à votre extension {{ CONNECTORNAME }} .`,

  profileScreen_heading: 'Connecté',

  switchNetworkScreen_heading: 'Changer de réseau',

  signInWithEthereumScreen_tooltip:
    'Vous n’êtes pas connecté à cette application.\n**Connectez-vous avec Ethereum** pour continuer.',
  signInWithEthereumScreen_signedOut_heading: 'Connectez-vous avec Ethereum',
  signInWithEthereumScreen_signedOut_h1:
    'Cette application souhaite vérifier que vous êtes bien le propriétaire de ce portefeuille.',
  signInWithEthereumScreen_signedOut_p: `Veuillez signer la demande de message dans votre portefeuille pour continuer.`,
  signInWithEthereumScreen_signedOut_button: 'Se connecter',

  signInWithEthereumScreen_signedIn_heading: 'Connecté avec Ethereum',
  signInWithEthereumScreen_signedIn_h1:
    'Vous avez réussi à vous identifier en tant que propriétaire de ce portefeuille.',
  signInWithEthereumScreen_signedIn_p: `La déconnexion vous obligera à vous authentifier à nouveau à l'avenir.`,
  signInWithEthereumScreen_signedIn_button: 'Se déconnecter',
};

export default frFR;
</file>

<file path="packages/connectkit/src/localizations/locales/index.ts">
import enUS from './en-US';

// Use English as the default locale to avoid missing translations
export type LocaleProps = typeof enUS;
</file>

<file path="packages/connectkit/src/localizations/locales/ja-JP.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const jaJP: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'ウォレットの接続',
  disconnect: '切断',
  connected: '接続されました',
  wrongNetwork: '間違ったネットワーク',
  switchNetworks: 'ネットワークの切り替え',
  chainNetwork: '{{ CHAIN }} ネットワーク',
  copyToClipboard: 'クリップボードにコピー',
  copyCode: 'コードをコピー',
  moreInformation: '詳細情報',
  back: '戻る',
  close: '閉じる',
  or: 'または',
  more: 'その他',
  tryAgain: '再試行',
  tryAgainQuestion: 'もう一度試しますか？',
  dontHaveTheApp: 'アプリをお持ちではありませんか？',
  scanTheQRCode: 'QR コードをスキャン',
  useWalletConnectModal: 'WalletConnect モーダルを使用',
  useModal: 'モーダルを使用',
  installTheExtension: '拡張機能をインストール',
  getWalletName: '{{ CONNECTORNAME }} を取得',
  otherWallets: 'その他のウォレット',
  learnMore: '詳細情報',
  getWallet: 'ウォレットを入手',
  approveInWallet: 'ウォレットで承認',
  confirmInWallet: 'ウォレットで確認',
  awaitingConfirmation: '確認を待っています',
  signIn: 'サインイン',
  signOut: 'サインアウト',
  signedIn: 'サインインしました',
  signedOut: 'サインアウトしました',
  walletNotConnected: 'ウォレットが接続されていません',

  warnings_walletSwitchingUnsupported: `お使いのウォレットは、このアプリからのネットワークの切り替えをサポートしていません。`,
  warnings_walletSwitchingUnsupportedResolve: `代わりにウォレット内からネットワークを切り替えてみてください。`,
  warnings_chainUnsupported: `このアプリは、現在接続されているネットワークをサポートしていません。`,
  warnings_chainUnsupportedResolve: `切り替えるか切断して続行します。`,

  onboardingScreen_heading: `ウォレットを入手`,
  onboardingScreen_h1: `Web3 の探索を開始`,
  onboardingScreen_p: `ウォレットは、web3 の探索を可能にする魔法のテクノロジーであるイーサリアムのすべてへのゲートウェイです。`,
  onboardingScreen_ctaText: `最初のウォレットを選択してください`,
  onboardingScreen_ctaUrl: `https://ethereum.org/ja/wallets/find-wallet/`,

  aboutScreen_heading: `ウォレットについて`,
  aboutScreen_a_h1: `デジタル資産用`,
  aboutScreen_a_p: `ウォレットを使用すると、NFT やその他のイーサリアム トークンなどのデジタル資産を送信、受信、保存、および操作できます。`,
  aboutScreen_b_h1: `より良いログイン方法`,
  aboutScreen_b_p: `最新のアプリでは、パスワードを覚える必要がなく、ウォレットを簡単なログイン方法として使用できます。`,
  aboutScreen_c_h1: `web3 の世界を探索`,
  aboutScreen_c_p: `ウォレットは、急速に進化する web3 の世界を探索し、参加するために不可欠なユーティリティです。`,
  aboutScreen_ctaText: `詳細情報`,
  aboutScreen_ctaUrl: `https://ethereum.org/ja/wallets/`,

  connectorsScreen_heading: `ウォレットの接続`,
  connectorsScreen_newcomer: `ウォレットを持っていません`,
  connectorsScreen_h1: `ウォレットとは何ですか？`,
  connectorsScreen_p: `ウォレットは、デジタル資産の送信、受信、および保存に使用されます。 ウォレットを接続すると、アプリとやり取りできます。`,

  mobileConnectorsScreen_heading: `ウォレットを選択`,

  scanScreen_heading: `電話でスキャンする`,
  scanScreen_heading_withConnector: `{{ CONNECTORNAME }}でスキャンする`,
  scanScreen_tooltip_walletConnect: `[WALLETCONNECTLOGO] WalletConnect 対応の ウォレットを開いてスキャンします`,
  scanScreen_tooltip_default: `携帯電話で {{ CONNECTORNAME }} を 開いてスキャンします`,

  downloadAppScreen_heading: `{{ CONNECTORNAME }} を取得`,
  downloadAppScreen_iosAndroid: `携帯電話のカメラでスキャンして、iOS または Android にダウンロードします。`,
  downloadAppScreen_ios: `携帯電話のカメラでスキャンして、iOS にダウンロードします。`,
  downloadAppScreen_android: `携帯電話のカメラでスキャンして、Android にダウンロードします。`,

  injectionScreen_unavailable_h1: `サポートされていないブラウザ`,
  injectionScreen_unavailable_p: `{{ CONNECTORSHORTNAME }} ウォレットを接続するには、{{ SUGGESTEDEXTENSIONBROWSER }} に拡張機能をインストールします。`,

  injectionScreen_install_h1: `{{ CONNECTORNAME }} をインストール`,
  injectionScreen_install_p: `{{ CONNECTORSHORTNAME }} ウォレットを接続するには、ブラウザ拡張機能をインストールします。`,

  injectionScreen_connecting_h1: `接続を要求`,
  injectionScreen_connecting_p: `{{ CONNECTORSHORTNAME }} ブラウザ拡張機能を 開いて、ウォレットを接続します。`,
  injectionScreen_connecting_injected_h1: `接続を要求`,
  injectionScreen_connecting_injected_p: `このアプリに接続するには、ウォレットを介して要求を受け入れます。`,

  injectionScreen_connected_h1: `すでに接続済み`,
  injectionScreen_connected_p: `このポップアップを閉じてもかまいません`,

  injectionScreen_rejected_h1: `要求がキャンセルされました`,
  injectionScreen_rejected_p: `要求をキャンセルしました。上をクリックしてもう一度お試しください。`,

  injectionScreen_failed_h1: `接続に失敗しました`,
  injectionScreen_failed_p: `申し訳ありませんが、問題が発生しました。もう一度接続してみてください。`,

  injectionScreen_notconnected_h1: `{{ CONNECTORNAME }} にログイン`,
  injectionScreen_notconnected_p: `続行するには、 {{ CONNECTORNAME }} 拡張機能にログインしてください。`,

  profileScreen_heading: '接続されました',

  switchNetworkScreen_heading: 'ネットワークの切り替え',

  signInWithEthereumScreen_tooltip:
    'このアプリにサインインしていません。\n続行するには、**イーサリアムでサインイン**してください。',
  signInWithEthereumScreen_signedOut_heading: 'イーサリアムでサインイン',
  signInWithEthereumScreen_signedOut_h1:
    'このアプリは、あなたがこのウォレットの 所有者であることを確認しようとしています。',
  signInWithEthereumScreen_signedOut_p: `続行するには、ウォレットで メッセージ リクエストに署名してください。`,
  signInWithEthereumScreen_signedOut_button: 'サインイン',

  signInWithEthereumScreen_signedIn_heading: 'イーサリアムでサインインしました',
  signInWithEthereumScreen_signedIn_h1:
    'このウォレットの所有者であることが 正常に確認されました。',
  signInWithEthereumScreen_signedIn_p: `サインアウトすると、今後 再度認証する必要があります。`,
  signInWithEthereumScreen_signedIn_button: 'サインアウト',
};

export default jaJP;
</file>

<file path="packages/connectkit/src/localizations/locales/pt-BR.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const ptBR: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'Conectar carteira',
  disconnect: 'Desconectar',
  connected: 'Conectado',
  wrongNetwork: 'Rede incorreta',
  switchNetworks: 'Alternar rede',
  chainNetwork: 'Rede {{ CHAIN }}',
  copyToClipboard: 'Copiar para a área de transferência',
  copyCode: 'Copiar código',
  moreInformation: 'Mais informações',
  back: 'Voltar',
  close: 'Fechar',
  or: 'ou',
  more: 'Mais',
  tryAgain: 'Tentar novamente',
  tryAgainQuestion: 'Tentar novamente?',
  dontHaveTheApp: 'Não tem o aplicativo?',
  scanTheQRCode: 'Escaneie o código QR',
  useWalletConnectModal: 'Use o modal do WalletConnect',
  useModal: 'Usar modal',
  installTheExtension: 'Instale a extensão',
  getWalletName: 'Obter {{ CONNECTORNAME }}',
  otherWallets: 'Outras carteiras',
  learnMore: 'Saiba mais',
  getWallet: 'Obtenha uma carteira',
  approveInWallet: 'Aprovar na carteira',
  confirmInWallet: 'Confirmar na carteira',
  awaitingConfirmation: 'Aguardando confirmação',
  signIn: 'Entrar',
  signOut: 'Sair',
  signedIn: 'Conectado',
  signedOut: 'Desconectado',
  walletNotConnected: 'Carteira não conectada',

  warnings_walletSwitchingUnsupported: `A sua carteira não permite a troca de rede a partir deste aplicativo.`,
  warnings_walletSwitchingUnsupportedResolve: `Tente trocar de rede de dentro da sua carteira.`,

  warnings_chainUnsupported: `Este aplicativo não é compatível com a rede conectada.`,
  warnings_chainUnsupportedResolve: `Altere a rede ou desconecte para continuar.`,

  onboardingScreen_heading: `Obtenha uma carteira`,
  onboardingScreen_h1: `Comece a explorar a Web3`,
  onboardingScreen_p: `Sua carteira é a porta de entrada para todas as coisas Ethereum, a tecnologia mágica que torna possível explorar a web3.`,
  onboardingScreen_ctaText: `Escolha sua primeira carteira`,
  onboardingScreen_ctaUrl: `https://ethereum.org/pt-br/wallets/find-wallet/`,

  aboutScreen_heading: `Sobre as carteiras`,
  aboutScreen_a_h1: `Para seus ativos digitais`,
  aboutScreen_a_p: `As carteiras permitem que você envie, receba, armazene e interaja com ativos digitais como NFTs e outros tokens Ethereum.`,
  aboutScreen_b_h1: `Uma maneira melhor de fazer login`,
  aboutScreen_b_p: `Com aplicativos modernos, sua carteira pode ser usada como uma maneira fácil de fazer login, em vez de ter que lembrar uma senha.`,
  aboutScreen_c_h1: `Explore o mundo da Web3`,
  aboutScreen_c_p: `Sua carteira é uma utilidade essencial que permite explorar e participar do mundo em rápida evolução da Web3.`,
  aboutScreen_ctaText: `Saiba mais`,
  aboutScreen_ctaUrl: `https://ethereum.org/pt-br/wallets/`,

  connectorsScreen_heading: `Conectar carteira`,
  connectorsScreen_newcomer: `Eu não tenho uma carteira`,
  connectorsScreen_h1: `O que é uma carteira?`,
  connectorsScreen_p: `As carteiras são usadas para enviar, receber e armazenar ativos digitais. A conexão de uma carteira permite que você interaja com aplicativos.`,

  mobileConnectorsScreen_heading: `Escolha uma carteira`,

  scanScreen_heading: `Escanear com o celular`,
  scanScreen_heading_withConnector: `Escanear com o {{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `Abra uma carteira compatível \ncom o WalletConnect [WALLETCONNECTLOGO] para escanear`,
  scanScreen_tooltip_default: `Abra o {{ CONNECTORNAME }} no \nseu celular para escanear`,

  downloadAppScreen_heading: `Obter {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `Escaneie com a câmera do seu celular para baixar no iOS ou Android.`,
  downloadAppScreen_ios: `Escaneie com a câmera do seu celular para baixar no iOS.`,
  downloadAppScreen_android: `Escaneie com a câmera do seu celular para baixar no Android.`,

  injectionScreen_unavailable_h1: `Navegador não compatível`,
  injectionScreen_unavailable_p: `Para conectar sua carteira {{ CONNECTORSHORTNAME }},\ninstale a extensão no {{ SUGGESTEDEXTENSIONBROWSER }}.`,

  injectionScreen_install_h1: `Instalar {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `Para conectar sua carteira {{ CONNECTORSHORTNAME }},\ninstale a extensão do navegador`,

  injectionScreen_connecting_h1: `Solicitando conexão`,
  injectionScreen_connecting_p: `Abra a extensão do navegador do {{ CONNECTORSHORTNAME }} \npara conectar a sua carteira.`,

  injectionScreen_connecting_injected_h1: `Solicitando conexão`,
  injectionScreen_connecting_injected_p: `Aceite a solicitação por meio de sua carteira para se conectar a este aplicativo.`,

  injectionScreen_connected_h1: `Já conectado`,
  injectionScreen_connected_p: `Agora você já pode fechar esta janela`,

  injectionScreen_rejected_h1: `Solicitação cancelada`,
  injectionScreen_rejected_p: `Você cancelou a solicitação.\nClique acima para tentar novamente.`,

  injectionScreen_failed_h1: `A conexão falhou`,
  injectionScreen_failed_p: `Desculpe, ocorreu um erro.\nPor favor, tente conectar novamente.`,

  injectionScreen_notconnected_h1: `Faça login no {{ CONNECTORNAME }}`,
  injectionScreen_notconnected_p: `Para continuar, faça login na sua extensão do {{ CONNECTORNAME }}.`,

  profileScreen_heading: 'Conectado',

  switchNetworkScreen_heading: 'Alternar rede',

  signInWithEthereumScreen_tooltip:
    'Você não está conectado a este aplicativo.\n**Entre com Ethereum** para continuar.',
  signInWithEthereumScreen_signedOut_heading: 'Entrar com Ethereum',
  signInWithEthereumScreen_signedOut_h1:
    'Este aplicativo gostaria de verificar você \n como o proprietário desta carteira.',
  signInWithEthereumScreen_signedOut_p: `Por favor, assine o pedido de mensagem \n em sua carteira para continuar.`,
  signInWithEthereumScreen_signedOut_button: 'Entrar',

  signInWithEthereumScreen_signedIn_heading: 'Conectado com Ethereum',
  signInWithEthereumScreen_signedIn_h1:
    'Você se verificou com sucesso \n como o proprietário desta carteira',
  signInWithEthereumScreen_signedIn_p: `Se sair, será necessário que você \n autentique novamente no futuro.`,
  signInWithEthereumScreen_signedIn_button: 'Sair',
};

export default ptBR;
</file>

<file path="packages/connectkit/src/localizations/locales/ru-RU.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const ruRU: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'Подключить кошелек',
  disconnect: 'Отключить',
  connected: 'Подключена',
  wrongNetwork: 'Неверная сеть',
  switchNetworks: 'Переключение сети',
  chainNetwork: 'Сеть {{ CHAIN }}',
  copyToClipboard: 'Скопировать в буфер обмена',
  copyCode: 'Скопировать код',
  moreInformation: 'Больше информации',
  back: 'Назад',
  close: 'Закрыть',
  or: 'или',
  more: 'Еще',
  tryAgain: 'Попробовать снова',
  tryAgainQuestion: 'Попробовать снова?',
  dontHaveTheApp: 'У вас нет приложения?',
  scanTheQRCode: 'Отсканируйте QR-код',
  useWalletConnectModal: 'Использовать окно WalletConnect',
  useModal: 'Использовать модальное окно',
  installTheExtension: 'Установить расширение',
  getWalletName: 'Скачать {{ CONNECTORNAME }}',
  otherWallets: 'Другие кошельки',
  learnMore: 'Узнать больше',
  getWallet: 'Завести кошелек',
  approveInWallet: 'Подтвердите',
  confirmInWallet: 'Подтвердите',
  awaitingConfirmation: 'Ожидаем подтверждение',
  signIn: 'Войти',
  signOut: 'Выйти',
  signedIn: 'Вошли',
  signedOut: 'Вышли',
  walletNotConnected: 'Кошелек не подключен',

  warnings_walletSwitchingUnsupported: `Ваш кошелек не поддерживает переключение сетей из этого приложения.`,
  warnings_walletSwitchingUnsupportedResolve: `Попробуйте переключиться на другую сеть прямо в вашем кошельке.`,
  warnings_chainUnsupported: `Это приложение не поддерживает текущую подключенную сеть.`,
  warnings_chainUnsupportedResolve: `Для продолжения переключите сеть или отключите кошелек.`,

  onboardingScreen_heading: `Завести кошелек`,
  onboardingScreen_h1: `Начните исследовать веб3`,
  onboardingScreen_p: `Ваш кошелек — это врата в мир Ethereum, волшебной технологии, которая позволяет исследовать веб3.`,
  onboardingScreen_ctaText: `Выбрать свой первый кошелек`,
  onboardingScreen_ctaUrl: `https://ethereum.org/en/wallets/find-wallet/`,

  aboutScreen_heading: `О кошельках`,
  aboutScreen_a_h1: `Для ваших цифровых активов`,
  aboutScreen_a_p: `Кошельки позволяют вам отправлять, получать, хранить и взаимодействовать с цифровыми активами, такими как NFT и другие токены Ethereum.`,
  aboutScreen_b_h1: `Лучший способ входа`,
  aboutScreen_b_p: `В современных приложениях ваш кошелек можно использовать как удобный способ входа без необходимости помнить пароль.`,
  aboutScreen_c_h1: `Исследуйте мир веб3`,
  aboutScreen_c_p: `Ваш кошелек - это неотъемлемый инструмент, который позволяет вам исследовать и участвовать в быстро развивающемся мире веб3.`,
  aboutScreen_ctaText: `Узнать больше`,
  aboutScreen_ctaUrl: `https://ethereum.org/en/wallets/`,

  connectorsScreen_heading: `Подключение кошелька`,
  connectorsScreen_newcomer: `У меня нет кошелька`,
  connectorsScreen_h1: `Что такое кошелек?`,
  connectorsScreen_p: `Кошельки используются для отправки, получения и хранения цифровых активов. Подключение кошелька позволяет вам взаимодействовать с приложениями.`,

  mobileConnectorsScreen_heading: `Выберите кошелек`,

  scanScreen_heading: `Сканирование с телефона`,
  scanScreen_heading_withConnector: `Сканирование с помощью {{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `Откройте [WALLETCONNECTLOGO] поддерживаемый WalletConnect кошелек для сканирования`,
  scanScreen_tooltip_default: `Откройте {{ CONNECTORNAME }} на вашем мобильном телефоне для сканирования`,

  downloadAppScreen_heading: `Скачивание {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `Отсканируйте камерой телефона для загрузки приложения на iOS или Android.`,
  downloadAppScreen_ios: `Отсканируйте камерой телефона для загрузки приложения на iOS.`,
  downloadAppScreen_android: `Сканируйте камерой телефона для загрузки приложения на Android.`,

  injectionScreen_unavailable_h1: `Неподдерживаемый браузер`,
  injectionScreen_unavailable_p: `Для подключения вашего кошелька {{ CONNECTORSHORTNAME }}, установите расширение для браузера {{ SUGGESTEDEXTENSIONBROWSER }}.`,

  injectionScreen_install_h1: `Установите {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `Для подключения вашего кошелька {{ CONNECTORSHORTNAME }}, установите расширение для браузера.`,

  injectionScreen_connecting_h1: `Запрос на подключение`,
  injectionScreen_connecting_p: `Откройте расширение для браузера {{ CONNECTORSHORTNAME }} для подключения вашего кошелька.`,
  injectionScreen_connecting_injected_h1: `Запрос на подключение`,
  injectionScreen_connecting_injected_p: `Примите запрос в вашем кошельке, чтобы подключиться к приложению.`,

  injectionScreen_connected_h1: `Уже подключен`,
  injectionScreen_connected_p: `Можно закрыть это окно`,

  injectionScreen_rejected_h1: `Запрос отменен`,
  injectionScreen_rejected_p: `Вы отменили запрос.\nНажмите выше, чтобы попробовать снова.`,

  injectionScreen_failed_h1: `Сбой подключения`,
  injectionScreen_failed_p: `Извините, что-то пошло не так.\nПожалуйста, попробуйте подключиться снова.`,

  injectionScreen_notconnected_h1: `Войдите в {{ CONNECTORNAME }}`,
  injectionScreen_notconnected_p: `Для продолжения войдите в расширение {{ CONNECTORNAME }}.`,

  profileScreen_heading: 'Кошелек подключен',

  switchNetworkScreen_heading: 'Переключение сетей',

  signInWithEthereumScreen_tooltip:
    'Вы не вошли в это приложение.\n**Войдите с помощью Ethereum**, чтобы продолжить.',

  signInWithEthereumScreen_signedOut_heading: 'Войти с помощью Ethereum',
  signInWithEthereumScreen_signedOut_h1:
    'Это приложение хочет подтвердить вас \n в качестве владельца этого кошелька.',
  signInWithEthereumScreen_signedOut_p: `Пожалуйста, подпишите запрос на сообщение \n в своем кошельке, чтобы продолжить.`,
  signInWithEthereumScreen_signedOut_button: 'Войти',

  signInWithEthereumScreen_signedIn_heading: 'Вошли с помощью Ethereum',
  signInWithEthereumScreen_signedIn_h1:
    'Вы успешно подтвердили себя \n в качестве владельца этого кошелька.',
  signInWithEthereumScreen_signedIn_p: `Выйти потребуется \n повторная аутентификация в будущем.`,
  signInWithEthereumScreen_signedIn_button: 'Выйти',
};

export default ruRU;
</file>

<file path="packages/connectkit/src/localizations/locales/tr-TR.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const trTR: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'Cüzdan Bağla',
  disconnect: 'Bağlantıyı Kes',
  connected: 'Bağlandı',
  wrongNetwork: 'Yanlış Ağ',
  switchNetworks: 'Ağ Değiştir',
  chainNetwork: '{{ CHAIN }} Ağı',
  copyToClipboard: 'Panoya Kopyala',
  copyCode: 'Kodu Kopyala',
  moreInformation: 'Daha Fazla Bilgi',
  back: 'Geri',
  close: 'Kapat',
  or: 'veya',
  more: 'Daha Fazla',
  tryAgain: 'Tekrar Dene',
  tryAgainQuestion: 'Tekrar Dene?',
  dontHaveTheApp: 'Uygulaman yok mu?',
  scanTheQRCode: 'Karekodu tarat',
  useWalletConnectModal: 'WalletConnect Modalini Kullan ',
  useModal: 'Modal Kullan',
  installTheExtension: 'Eklentiyi İndir',
  getWalletName: '{{ CONNECTORNAME }} Alın',
  otherWallets: 'Diğer Cüzdanlar',
  learnMore: 'Daha Fazlasını Öğren',
  getWallet: 'Cüzdan Al',
  approveInWallet: 'Cüzdanda Yetki Ver',
  confirmInWallet: 'Cüzdanda Onayla',
  awaitingConfirmation: 'Doğrulama Bekleniyor',
  signIn: 'Giriş Yap',
  signOut: 'Çıkış Yap',
  signedIn: 'Giriş Yapıldı',
  signedOut: 'Çıkış Yapıldı',
  walletNotConnected: 'Cüzdan Bağlı Değil',

  warnings_walletSwitchingUnsupported: `Bu uygulamada ağ değiştirmeyi cüzdanın desteklemiyor.`,
  warnings_walletSwitchingUnsupportedResolve: `Bunun yerine cüzdanınızdan ağları değiştirmeyi deneyin.`,
  warnings_chainUnsupported: `Bu uygulama kullanmış olduğunuz ağı desteklemiyor.`,
  warnings_chainUnsupportedResolve: `Devam etmek için ağ değiştir veya bağlantıyı kes.`,

  onboardingScreen_heading: `Cüzdan Al`,
  onboardingScreen_h1: `Web3\'ü keşfetmeye başla`,
  onboardingScreen_p: `Cüzdanınız, Web3'ü keşfetmeyi mümkün kılan sihirli teknoloji olan Ethereum'a açılan kapıdır.`,
  onboardingScreen_ctaText: `İlk Cüzdanını Seç`,
  onboardingScreen_ctaUrl: `https://ethereum.org/tr/wallets/find-wallet/`,

  aboutScreen_heading: `Cüzdanlar Hakkında`,
  aboutScreen_a_h1: `Dijital varlıkların için`,
  aboutScreen_a_p: `Cüzdanlar, NFT'ler ve diğer Ethereum varlıkları gibi dijital varlıklar göndermenize, almanıza, saklamanıza ve bunlarla etkileşim kurmanıza olanak tanır.`,
  aboutScreen_b_h1: `Giriş yapmanın daha iyi bir yolu`,
  aboutScreen_b_p: `Modern uygulamalar ile parola hatırlamak yerine cüzdanınız ile kolayca giriş yapabilirsiniz.`,
  aboutScreen_c_h1: `Web3 dünyasını keşfet`,
  aboutScreen_c_p: `Cüzdanınız, hızla gelişen Web3 dünyasını keşfetmenizi ve bu dünyaya katılmanızı sağlayan temel bir yardımcı programdır.`,
  aboutScreen_ctaText: `Daha Fazlasını Öğren`,
  aboutScreen_ctaUrl: `https://ethereum.org/tr/wallets/`,

  connectorsScreen_heading: `Cüzdan Bağla`,
  connectorsScreen_newcomer: `Cüzdanım Yok`,
  connectorsScreen_h1: `Cüzdan nedir?`,
  connectorsScreen_p: `Cüzdanlar, dijital varlıkları göndermek, almak ve depolamak için kullanılır. Bir cüzdanı bağlamak, uygulamalarla etkileşime geçmenizi sağlar.`,

  mobileConnectorsScreen_heading: `Cüzdan Seç`,

  scanScreen_heading: `Telefon ile Tarat`,
  scanScreen_heading_withConnector: `{{ CONNECTORNAME }} ile tarat`,
  scanScreen_tooltip_walletConnect: `Desteklenen bir cüzdan taramak için\n [WALLETCONNECTLOGO] WalletConnect uygulamasını aç`,
  scanScreen_tooltip_default: `Taramak için telefonunda\n {{ CONNECTORNAME }} uygulamasını aç`,

  downloadAppScreen_heading: `{{ CONNECTORNAME }} İndir`,
  downloadAppScreen_iosAndroid: `iOS ve Android'e indirmek için telefon kameran ile tarat.`,
  downloadAppScreen_ios: `iOS'a indirmek için telefon kameran ile tarat.`,
  downloadAppScreen_android: `Android'e indirmek için telefon kameran ile tarat.`,

  injectionScreen_unavailable_h1: `Desteklenmeyen Tarayıcı`,
  injectionScreen_unavailable_p: `{{ CONNECTORSHORTNAME }} cüzdanına bağlanmak için\n{{ SUGGESTEDEXTENSIONBROWSER }} üzerinde indirmen gerekiyor.`,

  injectionScreen_install_h1: `{{ CONNECTORNAME }} İndir`,
  injectionScreen_install_p: `{{ CONNECTORSHORTNAME }} cüzdanına bağlanmak için,\ntarayıcı eklentisini indir.`,

  injectionScreen_connecting_h1: `Bağlantı İsteniyor.`,
  injectionScreen_connecting_p: `Cüzdanını bağlamak için\n tarayıcıdan {{ CONNECTORSHORTNAME }} uzantısını açın.`,
  injectionScreen_connecting_injected_h1: `Bağlantı İsteniyor.`,
  injectionScreen_connecting_injected_p: `Bu uygulamaya bağlanmak için cüzdanına gelen isteği kabul et.`,

  injectionScreen_connected_h1: `Zaten Bağlanmış`,
  injectionScreen_connected_p: `Bu açılır pencereyi artık kapatabilirsin`,

  injectionScreen_rejected_h1: `İstek iptal edildi.`,
  injectionScreen_rejected_p: `İsteği iptal ettin.\nTekrar denemek için yukarıyı tıklayın.`,

  injectionScreen_failed_h1: `Bağlantı Başarısız`,
  injectionScreen_failed_p: `Üzgünüz, bir şeyler ters gitti.\nLütfen daha sonra tekrar deneyin.`,

  injectionScreen_notconnected_h1: `{{ CONNECTORNAME }} ile giriş yap`,
  injectionScreen_notconnected_p: `Devam etmek için, {{ CONNECTORNAME }} eklentisine giriş yapın.`,

  profileScreen_heading: 'Bağlandı',

  switchNetworkScreen_heading: 'Ağ Değiştir',

  signInWithEthereumScreen_tooltip:
    'Bu uygulamada oturum açmadınız.\n Devam etmek için **Ethereum İle Giriş Yap**.',

  signInWithEthereumScreen_signedOut_heading: 'Ethereum İle Giriş Yap',
  signInWithEthereumScreen_signedOut_h1:
    'Bu uygulama seni \n bu cüzdanın sahibi olarak doğrulamak istiyor.',
  signInWithEthereumScreen_signedOut_p: `Devam etmek için \n cüzdanınızdaki isteği onaylayın.`,
  signInWithEthereumScreen_signedOut_button: 'Giriş Yap',

  signInWithEthereumScreen_signedIn_heading: 'Ethereum İle Giriş Yapıldı',
  signInWithEthereumScreen_signedIn_h1:
    'Bu cüzdanın sahibi olduğunu \n başarıyla onayladın.',
  signInWithEthereumScreen_signedIn_p: `Çıkış yaparsan ileride \n tekrar giriş yapman gerekecek. `,
  signInWithEthereumScreen_signedIn_button: 'Çıkış Yap',
};

export default trTR;
</file>

<file path="packages/connectkit/src/localizations/locales/vi-VN.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const viVN: LocaleProps = {
  ...enUS, // fallback
  connectWallet: 'Kết nối ví',
  disconnect: 'Ngắt kết nối',
  connected: 'Đã kết nối',
  wrongNetwork: 'Mạng không hỗ trợ',
  switchNetworks: 'Đổi mạng',
  chainNetwork: 'Mạng {{ CHAIN }}',
  copyToClipboard: 'Sao chép',
  copyCode: 'Sao chép mã',
  moreInformation: 'Thêm thông tin',
  back: 'Quay lại',
  close: 'Đóng',
  or: 'hoặc',
  more: 'Thêm',
  tryAgain: 'Thử lại',
  tryAgainQuestion: 'Thử lại?',
  dontHaveTheApp: 'Không có app?',
  scanTheQRCode: 'Quét mã QR',
  useWalletConnectModal: 'Dùng WalletConnect Modal',
  useModal: 'Dùng Modal',
  installTheExtension: 'Cài tiện ích',
  getWalletName: 'Lấy {{ CONNECTORNAME }}',
  otherWallets: 'Các ví khác',
  learnMore: 'Xem thêm',
  getWallet: 'Tạo một ví',
  approveInWallet: 'Cấp quyền trong ví',
  confirmInWallet: 'Xác nhận trong ví',
  awaitingConfirmation: 'Đang chờ xác nhận',
  signIn: 'Đăng nhập',
  signOut: 'Đăng xuất',
  signedIn: 'Đã đăng nhập',
  signedOut: 'Đã đăng xuất',
  walletNotConnected: 'Chưa kết nối ví',

  warnings_walletSwitchingUnsupported: `Ví của bạn không hỗ trợ đổi mạng từ ứng dụng.`,
  warnings_walletSwitchingUnsupportedResolve: `Hãy thử đổi mạng từ phía ví của bạn.`,
  warnings_chainUnsupported: `Ứng dụng này không hỗ trợ mạng hiện tại.`,
  warnings_chainUnsupportedResolve: `Đổi hoặc ngắt kết nối để tiếp tục.`,

  onboardingScreen_heading: `Tạo một ví`,
  onboardingScreen_h1: `Bắt đầu khám khá Web3`,
  onboardingScreen_p: `Ví của bạn là cổng giao tiếp mọi thứ trên Ethereum, công nghệ tuyệt vời giúp khám phá Web3.`,
  onboardingScreen_ctaText: `Chọn ví đầu tiên của bạn`,
  onboardingScreen_ctaUrl: `https://ethereum.org/en/wallets/find-wallet/`,

  aboutScreen_heading: `Giới thiệu các ví`,
  aboutScreen_a_h1: `Cho tài sản số của bạn`,
  aboutScreen_a_p: `Các ví để bạn gửi, nhận, lưu trữ, và tương tác với các tài sản điện tử như NFTs và các loại tiền Ethereum khác.`,
  aboutScreen_b_h1: `Một cách tốt hơn để đăng nhập`,
  aboutScreen_b_p: `Với các ứng dụng hiện đại, ví của bạn có thể dùng để đăng nhập dễ dàng thay vì phải nhớ tài khoản và mật khẩu.`,
  aboutScreen_c_h1: `Khám phá thế giới Web3`,
  aboutScreen_c_p: `Ví của bạn là một tiện ích thiết yếu cho phép bạn khám phá và tham gia vào thế giới web3 đang phát triển nhanh chóng.`,
  aboutScreen_ctaText: `Tìm hiểu thêm`,
  aboutScreen_ctaUrl: `https://ethereum.org/en/wallets/`,

  connectorsScreen_heading: `Kết nối Ví`,
  connectorsScreen_newcomer: `Tôi chưa có ví`,
  connectorsScreen_h1: `Ví là gì?`,
  connectorsScreen_p: `Ví dùng để gửi, nhận, và lưu trữ các tài sản điện tử. Kết nối với một ví giúp bạn tương tác với các ứng dụng.`,

  mobileConnectorsScreen_heading: `Chọn ví`,

  scanScreen_heading: `Scan bằng điện thoại`,
  scanScreen_heading_withConnector: `Quét với {{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `Mở một [WALLETCONNECTLOGO] mà WalletConnect \n hỗ trợ để quét`,
  scanScreen_tooltip_default: `Mở {{ CONNECTORNAME }} trong \nđiện thoại của bạn để quét`,

  downloadAppScreen_heading: `Lấy {{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `Quét bằng camera trên điện thoại của bạn để tải về cho iOS hoặc Android.`,
  downloadAppScreen_ios: `Quét bằng camera trên điện thoại ủa bạn để tải về cho iOS.`,
  downloadAppScreen_android: `Quét bằng camera trên điện thoại ủa bạn để tải về cho Android.`,

  injectionScreen_unavailable_h1: `Trình duyệt không được hỗ trợ`,
  injectionScreen_unavailable_p: `Để kết nối ví {{ CONNECTORSHORTNAME }} của bạn,\ncài đặt tiện ích trên {{ SUGGESTEDEXTENSIONBROWSER }}.`,

  injectionScreen_install_h1: `Cài {{ CONNECTORNAME }}`,
  injectionScreen_install_p: `Để kết nối ví {{ CONNECTORSHORTNAME }},\ncài đặt tiện ích trên trình duyệt.`,

  injectionScreen_connecting_h1: `Đang yêu cầu kết nối`,
  injectionScreen_connecting_p: `Mở tiện ích {{ CONNECTORSHORTNAME }} \n trên trình duyệt để kết nối.`,
  injectionScreen_connecting_injected_h1: `Đang yêu cầu kết nối`,
  injectionScreen_connecting_injected_p: `Đồng ý yêu cầu từ phía ví của bạn để kết nối ứng dụng này.`,

  injectionScreen_connected_h1: `Đã kết nối`,
  injectionScreen_connected_p: `Đã có thể đóng popup`,

  injectionScreen_rejected_h1: `Đã hủy yêu cầu`,
  injectionScreen_rejected_p: `Bạn vừa hủy yêu cầu.\nNhấn phía trên để thử lại.`,

  injectionScreen_failed_h1: `Kết nối không thành công`,
  injectionScreen_failed_p: `Xin lỗi, có gì đó không đúng.\nVui lòng thử lại.`,

  injectionScreen_notconnected_h1: `Đăng nhập vào {{ CONNECTORNAME }}`,
  injectionScreen_notconnected_p: `Để tiếp tục, vui lòng đăng nhập bằng tiện ích {{ CONNECTORNAME }}.`,

  profileScreen_heading: 'Đã kết nối',

  switchNetworkScreen_heading: 'Đổi mạng',

  signInWithEthereumScreen_tooltip:
    'Bạn chưa đăng nhập vào ứng dụng.\n**Đăng nhập qua Ethereum** để tiếp tục.',

  signInWithEthereumScreen_signedOut_heading: 'Đăng nhập qua Ethereum',
  signInWithEthereumScreen_signedOut_h1:
    'Ứng dụng này muốn xác nhận bạn \n là chủ sở hữu của ví.',
  signInWithEthereumScreen_signedOut_p: `Vui lòng ký tin nhắn yêu cầu \n trên ví của bạn để tiếp tục.`,
  signInWithEthereumScreen_signedOut_button: 'Đăng nhập',

  signInWithEthereumScreen_signedIn_heading: 'Đăng nhập qua Ethereum',
  signInWithEthereumScreen_signedIn_h1: 'Bạn đã xác nhận thành công.',
  signInWithEthereumScreen_signedIn_p: `Sau khi Đăng xuất bạn sẽ cần \n xác nhận lại trong làn tiếp theo.`,
  signInWithEthereumScreen_signedIn_button: 'Đăng xuất',
};

export default viVN;
</file>

<file path="packages/connectkit/src/localizations/locales/zh-CN.ts">
import { LocaleProps } from './';
import enUS from './en-US';

const zhCN: LocaleProps = {
  ...enUS, // fallback
  connectWallet: '绑定钱包',
  disconnect: '解除绑定',
  connected: '已绑定',
  wrongNetwork: '错误网络',
  switchNetworks: '切换网络',
  chainNetwork: '{{ CHAIN }}网络',
  copyToClipboard: '复制到剪贴板',
  copyCode: '复制代码',
  moreInformation: '更多信息',
  back: '返回',
  close: '关闭',
  or: '或',
  more: '更多',
  tryAgain: '重试',
  tryAgainQuestion: '重试？',
  dontHaveTheApp: '没有该应用？',
  scanTheQRCode: '扫描二维码',
  useWalletConnectModal: '使用 WalletConnect 模态窗',
  useModal: '使用模态窗',
  installTheExtension: '安装扩展程序',
  getWalletName: '获取{{ CONNECTORNAME }}',
  otherWallets: '其他钱包',
  learnMore: '了解更多',
  getWallet: '获取钱包',
  approveInWallet: '在钱包中批准',
  confirmInWallet: '在钱包中确认',
  awaitingConfirmation: '等待确认',
  signIn: '登录',
  signOut: '登出',
  signedIn: '已登录',
  signedOut: '已登出',
  walletNotConnected: '钱包未绑定',

  warnings_walletSwitchingUnsupported: `您的钱包不支持从此应用切换网络。`,
  warnings_walletSwitchingUnsupportedResolve: `请尝试从钱包中切换网络。`,
  warnings_chainUnsupported: `此应用不支持当前连接的网络。`,
  warnings_chainUnsupportedResolve: `请切换网络或断开连接以继续。`,

  onboardingScreen_heading: `获取钱包`,
  onboardingScreen_h1: `开始探索 Web3`,
  onboardingScreen_p: `您的钱包是通往以太坊的一扇大门，而以太坊是探索 Web3 的一项神奇技术。`,
  onboardingScreen_ctaText: `选择您的第一钱包`,
  onboardingScreen_ctaUrl: `https://ethereum.org/zh/wallets/find-wallet/`,

  aboutScreen_heading: `关于钱包`,
  aboutScreen_a_h1: `对于您的数字资产`,
  aboutScreen_a_p: `有了钱包，您可以发送、接收、存储数字资产及使用数字资产进行交互，例如 NFT 和其他以太坊通证等。`,
  aboutScreen_b_h1: `更好的登录方式`,
  aboutScreen_b_p: `使用现代应用，您的钱包可以用作简便的登录方法，而不必记住密码。`,
  aboutScreen_c_h1: `探索 Web3 世界`,
  aboutScreen_c_p: `您的钱包是一个重要的工具，可以让您探索并参与到快速发展的 Web3 世界。`,
  aboutScreen_ctaText: `了解更多`,
  aboutScreen_ctaUrl: `https://ethereum.org/zh/wallets/`,

  connectorsScreen_heading: `绑定钱包`,
  connectorsScreen_newcomer: `我没有钱包`,
  connectorsScreen_h1: `什么是钱包？`,
  connectorsScreen_p: `钱包可用于发送、接收和存储数字资产。通过绑定钱包，您可以与应用进行交互。`,

  mobileConnectorsScreen_heading: `选择钱包`,

  scanScreen_heading: `手机扫描`,
  scanScreen_heading_withConnector: `手机扫描{{ CONNECTORNAME }}`,
  scanScreen_tooltip_walletConnect: `打开 [WALLETCONNECTLOGO] WalletConnect 支持的钱包进行扫描`,
  scanScreen_tooltip_default: `打开您手机上的{{ CONNECTORNAME }} 进行扫描`,

  downloadAppScreen_heading: `获取{{ CONNECTORNAME }}`,
  downloadAppScreen_iosAndroid: `使用手机相机扫描以下载 iOS 或 Android 应用。`,
  downloadAppScreen_ios: `使用手机相机扫描以下载 iOS 应用。`,
  downloadAppScreen_android: `使用手机相机扫描以下载 Android 应用。`,

  injectionScreen_unavailable_h1: `不支持的浏览器`,
  injectionScreen_unavailable_p: `要绑定您的{{ CONNECTORSHORTNAME }}钱包，请在{{ SUGGESTEDEXTENSIONBROWSER }}上安装此扩展程序。`,

  injectionScreen_install_h1: `安装{{ CONNECTORNAME }}`,
  injectionScreen_install_p: `要绑定您的{{ CONNECTORSHORTNAME }}钱包，请安装此浏览器扩展程序。`,

  injectionScreen_connecting_h1: `请求绑定`,
  injectionScreen_connecting_p: `打开{{ CONNECTORSHORTNAME }}浏览器 扩展程序以绑定您的钱包。`,
  injectionScreen_connecting_injected_h1: `请求绑定`,
  injectionScreen_connecting_injected_p: `通过您的钱包接受请求，以绑定到此应用。`,

  injectionScreen_connected_h1: `已绑定`,
  injectionScreen_connected_p: `现在可以关闭此弹窗`,

  injectionScreen_rejected_h1: `请求已取消`,
  injectionScreen_rejected_p: `您已取消请求。点击上面可重试。`,

  injectionScreen_failed_h1: `绑定失败`,
  injectionScreen_failed_p: `抱歉，发生错误。请尝试重新绑定。`,

  injectionScreen_notconnected_h1: `登录{{ CONNECTORNAME }}`,
  injectionScreen_notconnected_p: `要继续，请登录到您的{{ CONNECTORNAME }}扩展程序。`,

  profileScreen_heading: '已绑定',

  switchNetworkScreen_heading: '切换网络',

  signInWithEthereumScreen_tooltip:
    '您尚未登录到此应用。\n请选择**使用以太坊登录**以继续。',
  signInWithEthereumScreen_signedOut_heading: '使用以太坊登录',
  signInWithEthereumScreen_signedOut_h1: '此应用希望验证您是 此钱包的所有者。',
  signInWithEthereumScreen_signedOut_p: `请签署钱包中的消息请求 以继续。`,
  signInWithEthereumScreen_signedOut_button: '登录',

  signInWithEthereumScreen_signedIn_heading: '已使用以太坊登录',
  signInWithEthereumScreen_signedIn_h1: '您已成功验证自己 是此钱包的所有者。',
  signInWithEthereumScreen_signedIn_p: `登出后，将来您还需要 再次进行身份验证。`,
  signInWithEthereumScreen_signedIn_button: '登出',
};

export default zhCN;
</file>

<file path="packages/connectkit/src/localizations/index.tsx">
export type Languages =
  | 'ar-AE'
  | 'en-US'
  | 'ee-EE'
  | 'es-ES'
  | 'fa-IR'
  | 'fr-FR'
  | 'ja-JP'
  | 'pt-BR'
  | 'zh-CN'
  | 'ca-AD'
  | 'ru-RU'
  | 'zh-CN'
  | 'tr-TR'
  | 'vi-VN';

import { default as arAE } from './locales/ar-AE';
import { default as enUS } from './locales/en-US';
import { default as eeEE } from './locales/ee-EE';
import { default as esES } from './locales/es-ES';
import { default as faIR } from './locales/fa-IR';
import { default as frFR } from './locales/fr-FR';
import { default as jaJP } from './locales/ja-JP';
import { default as ptBR } from './locales/pt-BR';
import { default as ruRU } from './locales/ru-RU';
import { default as zhCN } from './locales/zh-CN';
import { default as caAD } from './locales/ca-AD';
import { default as trTR } from './locales/tr-TR';
import { default as viVN } from './locales/vi-VN';

// TODO: tree-shaking
export const getLocale = (lang: Languages) => {
  switch (lang) {
    case 'ee-EE':
      return eeEE;
    case 'ar-AE':
      return arAE;
    case 'es-ES':
      return esES;
    case 'fa-IR':
      return faIR;
    case 'fr-FR':
      return frFR;
    case 'ja-JP':
      return jaJP;
    case 'pt-BR':
      return ptBR;
    case 'ru-RU':
      return ruRU;
    case 'zh-CN':
      return zhCN;
    case 'ca-AD':
      return caAD;
    case 'tr-TR':
      return trTR;
    case 'vi-VN':
      return viVN;
    default:
      return enUS;
  }
};

/*
// Could be useful for locale files to use these keys rather than hard-coded into the objects
export const keys = {
  connectorName: '{{ CONNECTORNAME }}',
  connectorShortName: '{{ CONNECTORSHORTNAME }}',
  suggestedExtensionBrowser: '{{ SUGGESTEDEXTENSIONBROWSER }}',
  walletConnectLogo: '{{ WALLETCONNECTLOGO }}',
};
*/
</file>

<file path="packages/connectkit/src/siwe/index.ts">
export { useSIWE } from './useSIWE';
export {
  SIWEProvider,
  SIWE_SESSION_QUERY_KEY,
  SIWE_NONCE_QUERY_KEY,
} from './SIWEProvider';
export { SIWEContext, SIWEConfig, SIWESession } from './SIWEContext';
</file>

<file path="packages/connectkit/src/siwe/SIWEContext.tsx">
import { createContext } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Address } from 'viem';

export enum StatusState {
  READY = 'ready',
  LOADING = 'loading',
  SUCCESS = 'success',
  REJECTED = 'rejected',
  ERROR = 'error',
}

export type SIWESession = {
  address: Address;
  chainId: number;
};

export type SIWEConfig = {
  // Required
  getNonce: () => Promise<string>;
  createMessage: (args: {
    nonce: string;
    address: Address;
    chainId: number;
  }) => Promise<string> | string;
  verifyMessage: (args: {
    message: string;
    signature: string;
  }) => Promise<boolean>;
  getSession: () => Promise<SIWESession | null>;
  signOut: () => Promise<boolean>;

  // Optional, we have default values but they can be overridden
  enabled?: boolean;
  nonceRefetchInterval?: number;
  sessionRefetchInterval?: number;
  signOutOnDisconnect?: boolean;
  signOutOnAccountChange?: boolean;
  signOutOnNetworkChange?: boolean;
};

export type SIWEContextValue = Required<SIWEConfig> & {
  nonce: ReturnType<typeof useQuery<string | null>>;
  session: ReturnType<typeof useQuery<SIWESession | null>>;
  status: StatusState;
  signIn: () => Promise<SIWESession | false>;
  resetStatus: () => void;
};

export const SIWEContext = createContext<SIWEContextValue | null>(null);
</file>

<file path="packages/connectkit/src/siwe/SIWEProvider.tsx">
import { ReactNode, useContext, useEffect, useState } from 'react';
import { useAccount, useAccountEffect, useSignMessage } from 'wagmi';
import { getAddress } from 'viem';
import { useQuery } from '@tanstack/react-query';

import { Context as ConnectKitContext } from './../components/ConnectKit';
import {
  SIWEContext,
  SIWEConfig,
  StatusState,
  SIWESession,
} from './SIWEContext';

type Props = SIWEConfig & {
  children: ReactNode;
  onSignIn?: (data?: SIWESession) => void;
  onSignOut?: () => void;
};

export const SIWE_NONCE_QUERY_KEY = 'ckSiweNonce';
export const SIWE_SESSION_QUERY_KEY = 'ckSiweSession';

export const SIWEProvider = ({
  children,
  enabled = true,
  nonceRefetchInterval = 1000 * 60 * 5,
  sessionRefetchInterval = 1000 * 60 * 5,
  signOutOnDisconnect = true,
  signOutOnAccountChange = true,
  signOutOnNetworkChange = true,
  onSignIn,
  onSignOut,
  ...siweConfig
}: Props) => {
  const [status, setStatus] = useState<StatusState>(StatusState.READY);
  const resetStatus = () => setStatus(StatusState.READY);

  // Only allow for mounting SIWEProvider once, so we avoid weird global state
  // collisions.
  if (useContext(SIWEContext)) {
    throw new Error(
      'Multiple, nested usages of SIWEProvider detected. Please use only one.'
    );
  }
  // SIWEProvider must be wrapped outside of ConnectKitProvider so that the
  // ConnectKitButton and other UI can use SIWE context values.
  if (useContext(ConnectKitContext)) {
    throw new Error('ConnectKitProvider must be mounted inside SIWEProvider.');
  }

  const nonce = useQuery({
    queryKey: [SIWE_NONCE_QUERY_KEY],
    queryFn: () => siweConfig.getNonce(),
    refetchInterval: nonceRefetchInterval,
  });

  const session = useQuery({
    queryKey: [SIWE_SESSION_QUERY_KEY],
    queryFn: () => siweConfig.getSession(),
    refetchInterval: sessionRefetchInterval,
  });

  const sessionData = session.data;

  const signOutAndRefetch = async () => {
    if (!sessionData) return false; // No session to sign out of
    setStatus(StatusState.LOADING);
    if (!(await siweConfig.signOut())) {
      throw new Error('Failed to sign out.');
    }
    await Promise.all([session.refetch(), nonce.refetch()]);
    setStatus(StatusState.READY);
    onSignOut?.();
    return true;
  };

  const { address: connectedAddress } = useAccount();
  useAccountEffect({
    onDisconnect: () => {
      if (signOutOnDisconnect) {
        // For security reasons we sign out the user when a wallet disconnects.
        signOutAndRefetch();
      }
    },
  });

  const { address, chain } = useAccount();
  const { signMessageAsync } = useSignMessage();

  const onError = (error: any) => {
    console.error('signIn error', error, error.message);
    switch (error.code) {
      case -32000: // WalletConnect: user rejected
      case 4001: // MetaMask: user rejected
      case 'ACTION_REJECTED': // MetaMask: user rejected
        setStatus(StatusState.REJECTED);
        break;
      default:
        setStatus(StatusState.ERROR);
    }
  };

  const signIn = async () => {
    try {
      if (!siweConfig) {
        throw new Error('SIWE not configured');
      }

      const chainId = chain?.id;
      if (!address) throw new Error('No address found');
      if (!chainId) throw new Error('No chainId found');

      if (!nonce.data) {
        throw new Error('Could not fetch nonce');
      }

      setStatus(StatusState.LOADING);

      const message = await siweConfig.createMessage({
        address,
        chainId,
        nonce: nonce?.data,
      });

      // Ask user to sign message with their wallet
      const signature = await signMessageAsync({
        message,
      });

      // Verify signature
      if (!(await siweConfig.verifyMessage({ message, signature }))) {
        throw new Error('Error verifying SIWE signature');
      }

      const data = await session.refetch().then((res) => {
        onSignIn?.(res?.data ?? undefined);
        return res?.data;
      });

      setStatus(StatusState.READY);
      return data as SIWESession;
    } catch (error) {
      onError(error);
      return false;
    }
  };

  useEffect(() => {
    // Skip if we're still fetching session state from backend
    if (!sessionData || !sessionData.address || !sessionData.chainId) return;
    // Skip if wallet isn't connected (i.e. initial page load)
    if (!connectedAddress || !chain) return;

    // If SIWE session no longer matches connected account, sign out
    if (
      signOutOnAccountChange &&
      getAddress(sessionData.address) !== getAddress(connectedAddress)
    ) {
      console.warn('Wallet account changed, signing out of SIWE session');
      signOutAndRefetch();
    }
    // The SIWE spec includes a chainId parameter for contract-based accounts,
    // so we're being extra cautious about keeping the SIWE session and the
    // connected account/network in sync. But this can be disabled when
    // configuring the SIWEProvider.
    else if (signOutOnNetworkChange && sessionData.chainId !== chain.id) {
      console.warn('Wallet network changed, signing out of SIWE session');
      signOutAndRefetch();
    }
  }, [sessionData, connectedAddress, chain]);

  return (
    <SIWEContext.Provider
      value={{
        enabled,
        nonceRefetchInterval,
        sessionRefetchInterval,
        signOutOnDisconnect,
        signOutOnAccountChange,
        signOutOnNetworkChange,
        ...siweConfig,
        nonce,
        session,
        signIn,
        signOut: signOutAndRefetch,
        status,
        resetStatus,
      }}
    >
      {children}
    </SIWEContext.Provider>
  );
};
</file>

<file path="packages/connectkit/src/siwe/useSIWE.ts">
import { useContext } from 'react';
import { SIWEContext, StatusState, SIWESession } from './SIWEContext';

type HookProps = {
  isSignedIn: boolean;
  data?: SIWESession;
  status: StatusState;
  error?: Error | any;
  isRejected: boolean;
  isError: boolean;
  isLoading: boolean;
  isSuccess: boolean;
  isReady: boolean;

  reset: () => void;
  signIn: () => Promise<boolean>;
  signOut: () => Promise<boolean>;
};

type UseSIWEConfig = {
  onSignIn?: (data?: SIWESession) => void;
  onSignOut?: () => void;
};

// Consumer-facing hook
export const useSIWE = ({ onSignIn, onSignOut }: UseSIWEConfig = {}):
  | HookProps
  | any => {
  const siweContextValue = useContext(SIWEContext);
  if (!siweContextValue) {
    // If we throw an error here then this will break non-SIWE apps, so best to just respond with not signed in.
    //throw new Error('useSIWE hook must be inside a SIWEProvider.');
    return {
      isSignedIn: false,
      data: undefined,
      status: StatusState.ERROR,
      error: new Error('useSIWE hook must be inside a SIWEProvider.'),
      isRejected: false,
      isError: true,
      isLoading: false,
      isSuccess: false,
      isReady: false,
      reset: () => {},
      signIn: () => Promise.reject(),
      signOut: () => Promise.reject(),
    };
  }

  const { session, nonce, status, signOut, signIn, resetStatus } =
    siweContextValue;
  const { address, chainId } = session.data || {};

  const currentStatus = address
    ? StatusState.SUCCESS
    : session.isLoading || nonce.isLoading
    ? StatusState.LOADING
    : status;

  const isLoading = currentStatus === StatusState.LOADING;
  const isSuccess = currentStatus === StatusState.SUCCESS;
  const isRejected = currentStatus === StatusState.REJECTED;
  const isError = currentStatus === StatusState.ERROR;
  const isReady = !address || nonce.isFetching || isLoading || isSuccess;

  const reset = () => resetStatus();

  const isSignedIn = !!address;

  return {
    isSignedIn,
    data: isSignedIn
      ? {
          address: address as string,
          chainId: chainId as number,
        }
      : undefined,
    status: currentStatus,
    error: session.error || nonce.error,
    isRejected,
    isError,
    isLoading,
    isSuccess,
    isReady,
    signIn: async () => {
      if (!isSignedIn) {
        const data = await signIn();
        if (data) onSignIn?.(data);
      }
    },
    signOut: async () => {
      if (isSignedIn) {
        await signOut();
        onSignOut?.();
      }
    },
    reset,
  };
};
</file>

<file path="packages/connectkit/src/styles/styled/index.ts">
/**
 *
 * IMPORTANT NOTE: This file is a workaround for the following issue:
 *
 * When using rollup with styled-components to build into an ES module, styled components decides to move all of it’s DOM elements into "styled.default" rather than just within "styled"
 *
 * We're unsure as to why this issue occurs, if you have any ideas or a better solution please let us know by opening a discussion on our GitHub repo:
 * https://github.com/family/connectkit/discussions/new
 *
 */

import styled from 'styled-components';
export default typeof styled.div === 'function' ? styled : styled['default'];
</file>

<file path="packages/connectkit/src/styles/themes/base.ts">
export default {
  light: {
    /** Connect Wallet Button */
    '--ck-connectbutton-font-size': '15px',
    '--ck-connectbutton-color': '#373737',
    '--ck-connectbutton-background': '#F6F7F9',
    '--ck-connectbutton-background-secondary': '#FFFFFF',

    '--ck-connectbutton-hover-color': '#373737',
    '--ck-connectbutton-hover-background': '#F0F2F5',

    '--ck-connectbutton-active-color': '#373737',
    '--ck-connectbutton-active-background': '#EAECF1',

    '--ck-connectbutton-balance-color': '#373737',
    '--ck-connectbutton-balance-background': '#fff',
    '--ck-connectbutton-balance-box-shadow':
      'inset 0 0 0 1px var(--ck-connectbutton-background)',

    '--ck-connectbutton-balance-hover-background': '#F6F7F9',
    '--ck-connectbutton-balance-hover-box-shadow':
      'inset 0 0 0 1px var(--ck-connectbutton-hover-background)',

    '--ck-connectbutton-balance-active-background': '#F0F2F5',
    '--ck-connectbutton-balance-active-box-shadow':
      'inset 0 0 0 1px var(--ck-connectbutton-active-background)',

    /** Primary Button */
    '--ck-primary-button-border-radius': '16px',
    '--ck-primary-button-color': '#373737',
    '--ck-primary-button-background': '#F6F7F9',
    //'--ck-primary-button-box-shadow': 'inset 0 0 0 1px #F0F0F0',
    '--ck-primary-button-font-weight': '600',

    '--ck-primary-button-hover-color': '#373737',
    '--ck-primary-button-hover-background': '#F0F2F5',
    //'--ck-primary-button-hover-box-shadow': 'inset 0 0 0 2px var(--ck-focus-color)',

    //'--ck-primary-button-active-background': '#EAECF1',

    /** Secondary Button */
    '--ck-secondary-button-border-radius': '16px',
    '--ck-secondary-button-color': '#373737',
    '--ck-secondary-button-background': '#F6F7F9',
    //'--ck-secondary-button-box-shadow': '',
    //'--ck-secondary-button-font-weight': '',

    /** Tertiary Button */
    '--ck-tertiary-button-background': '#FFFFFF',

    '--ck-secondary-button-hover-background': '#e0e4eb',

    /** Modal */
    '--ck-modal-box-shadow': '0px 2px 4px rgba(0, 0, 0, 0.02)',
    '--ck-overlay-background': 'rgba(71, 88, 107, 0.24)',
    '--ck-body-color': '#373737',
    '--ck-body-color-muted': '#999999',
    '--ck-body-color-muted-hover': '#111111',
    '--ck-body-background': '#ffffff',
    '--ck-body-background-transparent': 'rgba(255,255,255,0)',
    '--ck-body-background-secondary': '#f6f7f9',
    '--ck-body-background-secondary-hover-background': '#e0e4eb',
    '--ck-body-background-secondary-hover-outline': '#4282FF',
    '--ck-body-background-tertiary': '#F3F4F7',
    '--ck-body-action-color': '#999999',
    '--ck-body-divider': '#f7f6f8',
    '--ck-body-divider-secondary': 'rgba(0, 0, 0, 0.06)',
    '--ck-body-color-danger': '#FF4E4E',
    '--ck-body-color-valid': '#32D74B',
    '--ck-siwe-border': '#F0F0F0',

    /** Disclaimer */
    //'--ck-body-disclaimer-background': '#E3D6C9',
    //'--ck-body-disclaimer-box-shadow': 'none',
    '--ck-body-disclaimer-color': '#AAAAAB',
    '--ck-body-disclaimer-link-color': '#838485',
    '--ck-body-disclaimer-link-hover-color': '#000000',

    /** Tooltips */
    '--ck-tooltip-background': '#ffffff',
    '--ck-tooltip-background-secondary': '#ffffff',
    '--ck-tooltip-color': '#999999',
    '--ck-tooltip-shadow': '0px 2px 10px rgba(0, 0, 0, 0.08)',

    /** Network dropdown */
    '--ck-dropdown-button-color': '#999999',
    '--ck-dropdown-button-box-shadow':
      '0 0 0 1px rgba(0,0,0,0.01), 0px 0px 7px rgba(0, 0, 0, 0.05)',
    '--ck-dropdown-button-background': '#fff',

    '--ck-dropdown-button-hover-color': '#8B8B8B',
    '--ck-dropdown-button-hover-background': '#F5F7F9',

    /** QR Code */
    '--ck-qr-dot-color': '#000000',
    '--ck-qr-border-color': '#f7f6f8',

    /** Misc. */
    '--ck-focus-color': '#1A88F8',
    '--ck-spinner-color': 'var(--ck-focus-color)',
    '--ck-copytoclipboard-stroke': '#CCCCCC',
  },
  dark: {
    '--ck-connectbutton-font-size': '15px',
    '--ck-connectbutton-color': '#ffffff',
    '--ck-connectbutton-background': '#383838',
    '--ck-connectbutton-background-secondary': '#282828',

    '--ck-connectbutton-hover-background': '#404040',

    '--ck-connectbutton-active-background': '#4D4D4D',

    '--ck-connectbutton-balance-color': '#fff',
    '--ck-connectbutton-balance-background': '#282828',
    '--ck-connectbutton-balance-box-shadow':
      'inset 0 0 0 1px var(--ck-connectbutton-background)',

    '--ck-connectbutton-balance-hover-background': '#383838',
    '--ck-connectbutton-balance-hover-box-shadow':
      'inset 0 0 0 1px var(--ck-connectbutton-hover-background)',

    '--ck-connectbutton-balance-active-background': '#404040',
    '--ck-connectbutton-balance-active-box-shadow':
      'inset 0 0 0 1px var(--ck-connectbutton-active-background)',

    '--ck-primary-button-color': '#ffffff',
    '--ck-primary-button-background': '#383838',
    //'--ck-primary-button-box-shadow': 'inset 0 0 0 1px #3D3D3D',
    '--ck-primary-button-border-radius': '16px',
    '--ck-primary-button-font-weight': '600',

    '--ck-primary-button-hover-background': '#404040',
    //'--ck-primary-button-hover-box-shadow': 'inset 0 0 0 2px rgba(255, 255, 255, 0.4)',

    //'--ck-primary-button-active-background': '#4D4D4D',

    '--ck-primary-button-active-border-radius': '16px',

    '--ck-secondary-button-color': '#ffffff',
    '--ck-secondary-button-background': '#333333',

    '--ck-secondary-button-hover-background': '#4D4D4D',

    /** Tertiary Button */
    '--ck-tertiary-button-background': '#424242',

    '--ck-focus-color': '#1A88F8',

    '--ck-overlay-background': 'rgba(0,0,0,0.4)',
    '--ck-body-color': '#ffffff',
    '--ck-body-color-muted': 'rgba(255, 255, 255, 0.4)',
    '--ck-body-color-muted-hover': 'rgba(255, 255, 255, 0.8)',
    '--ck-body-background': '#2B2B2B',
    '--ck-body-background-transparent': 'rgba(0,0,0,0)',
    '--ck-body-background-secondary': '#333333',
    '--ck-body-background-secondary-hover-background': '#4D4D4D',
    '--ck-body-background-secondary-hover-outline': '#ffffff',
    '--ck-body-background-tertiary': '#333333',
    '--ck-body-action-color': '#808080',
    '--ck-body-divider': '#383838',
    '--ck-body-color-danger': '#FF4E4E',

    '--ck-body-disclaimer-color': '#858585',
    '--ck-body-disclaimer-link-color': '#ADADAD',
    '--ck-body-disclaimer-link-hover-color': '#FFFFFF',

    '--ck-modal-box-shadow': '0px 2px 4px rgba(0, 0, 0, 0.02)',

    '--ck-copytoclipboard-stroke': '#555555',

    '--ck-tooltip-background': '#2B2B2B',
    '--ck-tooltip-background-secondary': '#333333',
    '--ck-tooltip-color': '#999999',
    '--ck-tooltip-shadow': '0px 2px 10px rgba(0, 0, 0, 0.08)',

    /** Network dropdown */
    '--ck-dropdown-button-color': '#6C7381',

    '--ck-spinner-color': 'var(--ck-focus-color)',

    '--ck-qr-dot-color': '#ffffff',
    '--ck-qr-border-color': '#3d3d3d',
  },
};
</file>

<file path="packages/connectkit/src/styles/themes/index.ts">
import base from './base';
import web95 from './web95';
import retro from './retro';
import soft from './soft';
import midnight from './midnight';
import minimal from './minimal';
import rounded from './rounded';
import nouns from './nouns';

export default { base, web95, retro, soft, midnight, minimal, rounded, nouns };
</file>

<file path="packages/connectkit/src/styles/themes/midnight.ts">
export default {
  '--ck-font-family':
    '"Inter",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,"Apple Color Emoji",Arial,sans-serif,"Segoe UI Emoji","Segoe UI Symbol"',
  '--ck-border-radius': '10px',

  '--ck-connectbutton-font-size': '17px',
  '--ck-connectbutton-border-radius': '8px',
  '--ck-connectbutton-color': '#ffffff',
  '--ck-connectbutton-background': '#313235',
  '--ck-connectbutton-box-shadow': 'inset 0 0 0 1px rgba(255, 255, 255, 0.05)',

  '--ck-connectbutton-hover-background': '#414144',
  '--ck-connectbutton-active-background': '#4C4D4F',

  '--ck-connectbutton-balance-color': '#ffffff',
  '--ck-connectbutton-balance-background': '#1F2023',
  '--ck-connectbutton-balance-box-shadow': 'inset 0 0 0 1px #313235',
  '--ck-connectbutton-balance-hover-background': '#313235',
  '--ck-connectbutton-balance-active-background': '#414144',

  '--ck-primary-button-border-radius': '8px',
  '--ck-primary-button-color': '#ffffff',
  '--ck-primary-button-background': 'rgba(255, 255, 255, 0.08)',
  '--ck-primary-button-box-shadow': 'inset 0 0 0 1px rgba(255, 255, 255, 0.05)',

  '--ck-primary-button-hover-background': 'rgba(255, 255, 255, 0.2)',

  '--ck-secondary-button-border-radius': '8px',
  '--ck-secondary-button-color': '#ffffff',
  '--ck-secondary-button-background': '#363638',
  '--ck-secondary-button-box-shadow':
    'inset 0 0 0 1px rgba(255, 255, 255, 0.05)',

  '--ck-secondary-button-hover-background': '#3c3c3e',

  '--ck-overlay-background': 'rgba(0,0,0,0.4)',
  '--ck-modal-box-shadow': `inset 0 0 0 1px #38393C, 0px 2px 4px rgba(0, 0, 0, 0.02)`,

  '--ck-focus-color': '#1A88F8',
  '--ck-body-color': '#ffffff',
  '--ck-body-color-muted': '#8B8F97',
  '--ck-body-color-muted-hover': '#ffffff',
  '--ck-body-background': '#1F2023',
  '--ck-body-background-transparent': 'rgba(31, 32, 35, 0)',
  '--ck-body-background-secondary': '#313235',
  '--ck-body-background-secondary-hover-background': '#e0e4eb',
  '--ck-body-background-secondary-hover-outline': 'rgba(255, 255, 255, 0.02)',
  '--ck-body-background-tertiary': '#313235',
  '--ck-tertiary-border-radius': '12px',
  '--ck-tertiary-box-shadow': 'inset 0 0 0 1px rgba(255, 255, 255, 0.02)',

  '--ck-body-action-color': '#8B8F97',
  '--ck-body-divider': 'rgba(255,255,255,0.1)',
  '--ck-body-color-danger': '#FF4E4E',
  '--ck-body-color-valid': '#32D74B',

  '--ck-body-disclaimer-background': '#2B2D31',
  '--ck-body-disclaimer-box-shadow': 'none',
  '--ck-body-disclaimer-color': '#808183',
  '--ck-body-disclaimer-link-color': '#AAABAD',
  '--ck-body-disclaimer-link-hover-color': '#ffffff',

  '--ck-copytoclipboard-stroke': '#CCCCCC',

  '--ck-tooltip-background': '#1F2023',
  '--ck-tooltip-background-secondary': '#1F2023',
  '--ck-tooltip-color': '#ffffff',
  '--ck-tooltip-shadow':
    ' 0 0 0 1px rgba(255, 255, 255, 0.1), 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-spinner-color': 'var(--ck-focus-color)',

  '--ck-dropdown-button-color': '#6C7381',
  '--ck-dropdown-button-box-shadow':
    'inset 0 0 0 1px rgba(255, 255, 255, 0.05)',
  '--ck-dropdown-button-background': '#313235',

  '--ck-dropdown-pending-color': '#8B8F97',
  '--ck-dropdown-active-color': '#FFF',
  '--ck-dropdown-active-static-color': '#FFF',
  '--ck-dropdown-active-background': 'rgba(255, 255, 255, 0.07)',
  '--ck-dropdown-color': '#8B8F97',
  '--ck-dropdown-background': '#313235',
  '--ck-dropdown-box-shadow': 'inset 0 0 0 1px rgba(255, 255, 255, 0.03)',
  '--ck-dropdown-border-radius': '8px',

  '--ck-alert-color': '#8B8F97',
  '--ck-alert-background': '#404145',
  '--ck-alert-box-shadow': 'inset 0 0 0 1px rgba(255, 255, 255, 0.02)',

  '--ck-qr-border-radius': '12px',
  '--ck-qr-dot-color': '#ffffff',
  '--ck-qr-border-color': 'rgba(255,255,255,0.1)',

  '--ck-recent-badge-border-radius': '32px',
};
</file>

<file path="packages/connectkit/src/styles/themes/minimal.ts">
export default {
  '--ck-font-family':
    '"Inter",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,"Apple Color Emoji",Arial,sans-serif,"Segoe UI Emoji","Segoe UI Symbol"',
  '--ck-border-radius': '0px',

  '--ck-connectbutton-font-size': '17px',
  '--ck-connectbutton-border-radius': '0px',
  '--ck-connectbutton-color': '#414451',
  '--ck-connectbutton-background': '#ffffff',
  '--ck-connectbutton-box-shadow': 'inset 0 0 0 1px #EBEBEB',

  '--ck-connectbutton-hover-color': '#111',
  '--ck-connectbutton-hover-box-shadow': 'inset 0 0 0 1px #111',

  '--ck-connectbutton-balance-color': '#111111',
  '--ck-connectbutton-balance-background': '#F7F7F7',
  '--ck-connectbutton-balance-box-shadow': 'inset 0 0 0 1px #F7F7F7',

  '--ck-connectbutton-balance-hover-background': '#f1f1f3',
  '--ck-connectbutton-balance-hover-box-shadow': 'inset 0 0 0 1px #111',

  '--ck-primary-button-border-radius': '0px',
  '--ck-primary-button-color': '#111111',
  '--ck-primary-button-background': '#ffffff',
  '--ck-primary-button-box-shadow': 'inset 0 0 0 1px #EBEBEB',

  '--ck-primary-button-hover-box-shadow': 'inset 0 0 0 1px #111111',

  '--ck-secondary-button-border-radius': '0px',
  '--ck-secondary-button-color': '#111111',
  '--ck-secondary-button-background': '#ffffff',
  '--ck-secondary-button-box-shadow': 'inset 0 0 0 1px #EBEBEB',

  '--ck-secondary-button-hover-box-shadow': 'inset 0 0 0 1px #111111',

  '--ck-dropdown-button-color': '#999999',
  '--ck-dropdown-button-box-shadow':
    '0 0 0 1px rgba(0, 0, 0, 0.01), 0px 0px 7px rgba(0, 0, 0, 0.05)',
  '--ck-dropdown-button-background': '#fff',

  '--ck-dropdown-button-hover-color': '#8B8B8B',
  '--ck-dropdown-button-hover-background': '#E7E7E7',

  '--ck-focus-color': '#1A88F8',
  '--ck-modal-box-shadow': `0px 3px 16px rgba(0, 0, 0, 0.08)`,
  '--ck-body-color': '#111111',
  '--ck-body-color-muted': '#A0A0A0',
  '--ck-body-color-muted-hover': '#000000',
  '--ck-body-background': '#ffffff',
  '--ck-body-background-transparent': 'rgba(255,255,255,0)',
  '--ck-body-background-secondary': '#f6f7f9',
  '--ck-body-background-secondary-hover-background': '#e0e4eb',
  '--ck-body-background-secondary-hover-outline': '#4282FF',
  '--ck-body-background-tertiary': '#ffffff',
  '--ck-tertiary-border-radius': '0px',
  '--ck-tertiary-box-shadow': 'inset 0 0 0 1px rgba(0, 0, 0, 0.04)',

  '--ck-body-action-color': '#A0A0A0',
  '--ck-body-divider': '#EBEBEB',
  '--ck-body-color-danger': '#FF4E4E',
  '--ck-body-color-valid': '#32D74B',

  '--ck-body-disclaimer-background': '#FAFAFA',
  '--ck-body-disclaimer-box-shadow': 'inset 0 1px 0 0 #ECECEC',
  '--ck-body-disclaimer-color': '#9D9D9D',
  '--ck-body-disclaimer-link-color': '#6E6E6E',
  '--ck-body-disclaimer-link-hover-color': '#000000',

  '--ck-copytoclipboard-stroke': '#CCCCCC',

  '--ck-tooltip-border-radius': '0px',
  '--ck-tooltip-background': '#ffffff',
  '--ck-tooltip-background-secondary': '#ffffff',
  '--ck-tooltip-color': '#999999',
  '--ck-tooltip-shadow': '0px 2px 10px rgba(0, 0, 0, 0.08)',

  '--ck-spinner-color': 'var(--ck-focus-color)',

  '--ck-dropdown-active-border-radius': '0',
  '--ck-dropdown-box-shadow': '0px 2px 15px rgba(0, 0, 0, 0.15)',
  '--ck-dropdown-border-radius': '0',

  '--ck-alert-color': 'rgba(17, 17, 17, 0.4)',
  '--ck-alert-background': '#fff',
  '--ck-alert-box-shadow': 'inset 0 0 0 1px #EBEBEB',
  '--ck-alert-border-radius': '0',

  '--ck-qr-border-radius': '0px',
  '--ck-qr-dot-color': '#111111',
  '--ck-qr-border-color': '#EBEBEB',

  '--ck-modal-h1-font-weight': '400',
  '--ck-modal-heading-font-weight': '400',
  '--ck-primary-button-font-weight': '400',

  '--ck-recent-badge-top-offset': '0px',

  /** Graphics options for our themes, not to be exposed to devs */
  /**
  '--ck-graphic-primary-color': '#111111',
  '--ck-graphic-primary-background': '#ffffff',
  '--ck-graphic-primary-box-shadow': 'inset 0 0 0 1px #EBEBEB',

  '--ck-graphic-secondary-color': '#DCDDDE',
  '--ck-graphic-secondary-background': '#ffffff',
  '--ck-graphic-secondary-box-shadow': 'inset 0 0 0 1px #EBEBEB',

  '--ck-graphic-compass-color': '#111111',
  '--ck-graphic-compass-background': '#ffffff',
  '--ck-graphic-compass-box-shadow': 'inset 0 0 0 1px #EBEBEB',

  '--ck-graphic-globe-background': '#D9D9D9',
  '--ck-graphic-globe-lines': '#ffffff',
  '--ck-graphic-globe-box-shadow': 'inset 0 0 0 1px #EBEBEB',
  */

  '--ck-siwe-border': '#EBEBEB',
};
</file>

<file path="packages/connectkit/src/styles/themes/nouns.ts">
export default {
  '--ck-font-family':
    '"PT Root UI",ui-rounded,"Nunito",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,"Apple Color Emoji",Arial,sans-serif,"Segoe UI Emoji","Segoe UI Symbol"',

  '--ck-border-radius': '24px',

  '--ck-connectbutton-font-size': '16px',
  '--ck-connectbutton-font-weight': '700',
  '--ck-connectbutton-border-radius': '10px',
  '--ck-connectbutton-color': '#151C3B',
  '--ck-connectbutton-background': '#ffffff',
  '--ck-connectbutton-box-shadow': 'inset 0 0 0 1px #D6D8E1',

  '--ck-connectbutton-hover-background': '#E9EBF3',
  '--ck-connectbutton-hover-box-shadow': 'inset 0 0 0 1px #D4D8E8',

  '--ck-connectbutton-active-background': '#D4D8E8',
  '--ck-connectbutton-active-box-shadow': 'inset 0 0 0 1px #D4D8E8',

  '--ck-connectbutton-balance-color': '#373737',
  '--ck-connectbutton-balance-background': '#F6F7F9',
  '--ck-connectbutton-balance-box-shadow': 'none',

  '--ck-connectbutton-balance-hover-background': '#f1f1f3',

  '--ck-primary-button-border-radius': '16px',
  '--ck-primary-button-color': '#151C3B',
  '--ck-primary-button-background': '#ffffff',
  '--ck-primary-button-font-weight': '700',

  '--ck-primary-button-hover-background': '#DEE1ED',

  '--ck-secondary-button-border-radius': '16px',
  '--ck-secondary-button-color': '#151C3B',
  '--ck-secondary-button-background': '#ffffff',
  '--ck-secondary-button-font-weight': '700',

  '--ck-secondary-button-hover-background': '#DEE1ED',

  '--ck-focus-color': '#1A88F8',
  '--ck-modal-box-shadow': `0px 2px 4px rgba(0, 0, 0, 0.02)`,
  '--ck-overlay-background': 'rgba(213, 215, 225, 0.8)',
  '--ck-overlay-backdrop-filter': 'blur(6px)',
  '--ck-body-color': '#151C3B',
  '--ck-body-color-muted': '#757A8E',
  '--ck-body-color-muted-hover': '#000000',
  '--ck-body-background': '#F4F4F8',
  '--ck-body-background-transparent': 'rgba(255,255,255,0)',
  '--ck-body-background-secondary': '#E9E9F1',
  '--ck-body-background-secondary-hover-background': '#e0e4eb',
  '--ck-body-background-tertiary': '#E9E9F1',
  '--ck-tertiary-border-radius': '24px',

  '--ck-body-action-color': '#79809C',
  '--ck-body-divider': '#D9DBE3',
  '--ck-body-color-danger': '#FF4E4E',
  '--ck-body-color-valid': '#32D74B',

  '--ck-body-disclaimer-background': '#F9FAFA',
  '--ck-body-disclaimer-color': '#AFB1B6',
  '--ck-body-disclaimer-link-color': '#787B84',
  '--ck-body-disclaimer-link-hover-color': '#000000',

  '--ck-copytoclipboard-stroke': '#79809C',

  '--ck-tooltip-background': '#ffffff',
  '--ck-tooltip-background-secondary': '#ffffff',
  '--ck-tooltip-color': '#999999',
  '--ck-tooltip-shadow': '0px 2px 10px rgba(0, 0, 0, 0.08)',

  '--ck-spinner-color': 'var(--ck-focus-color)',

  '--ck-dropdown-button-color': '#999999',
  '--ck-dropdown-button-box-shadow':
    '0 0 0 1px rgba(0, 0, 0, 0.01), 0px 0px 7px rgba(0, 0, 0, 0.05)',
  '--ck-dropdown-button-background': '#fff',

  '--ck-dropdown-button-hover-color': '#8B8B8B',
  '--ck-dropdown-button-hover-background': '#DEE1ED',
  '--ck-dropdown-button-hover-box-shadow': '0px 0px 7px rgba(0, 0, 0, 0.05)',

  '--ck-dropdown-color': '#757A8E',
  '--ck-dropdown-box-shadow':
    '0 0 0 1px rgba(0, 0, 0, 0.01), 0px 0px 7px rgba(0, 0, 0, 0.05)',

  '--ck-alert-color': '#9196A1',
  '--ck-alert-background': '#F6F8FA',
  '--ck-alert-box-shadow': 'inset 0 0 0 1px rgba(0, 0, 0, 0.04)',
  '--ck-alert-border-radius': '8px',

  '--ck-qr-border-radius': '24px',
  '--ck-qr-dot-color': '#000000',
  '--ck-qr-background': '#ffffff',

  '--ck-recent-badge-color': '#79809C',
  '--ck-recent-badge-background': '#F4F4F8',
  '--ck-recent-badge-box-shadow': 'none',

  '--ck-siwe-border': '#DFE4EC',

  '--ck-graphic-primary-background': '#fff',
  '--ck-graphic-compass-background': '#fff',
  '--ck-graphic-primary-box-shadow':
    '0px 2.94737px 14.7368px rgba(0, 0, 0, 0.1)',
  '--ck-graphic-compass-box-shadow': '0px 2px 9px rgba(0, 0, 0, 0.15)',
};
</file>

<file path="packages/connectkit/src/styles/themes/retro.ts">
export default {
  '--ck-font-family':
    '"SF Pro Rounded",ui-rounded,"Nunito",-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,"Apple Color Emoji",Arial,sans-serif,"Segoe UI Emoji","Segoe UI Symbol"',
  '--ck-border-radius': '8px',

  '--ck-connectbutton-font-size': '17px',
  '--ck-connectbutton-color': '#000000',
  '--ck-connectbutton-background': '#ffffff',
  '--ck-connectbutton-box-shadow':
    '-4px 4px 0px #000000, inset 0 0 0 2px #000000',
  '--ck-connectbutton-border-radius': '8px',

  '--ck-connectbutton-hover-background': '#F3EDE8',

  '--ck-connectbutton-active-box-shadow':
    '0 0 0 0 #000000, inset 0 0 0 2px #000000',

  '--ck-connectbutton-balance-color': '#000000',
  '--ck-connectbutton-balance-background': '#F3EDE8',
  '--ck-connectbutton-balance-box-shadow':
    '-4px 4px 0px #000000, inset 0 0 0 2px #000000',
  '--ck-connectbutton-balance-hover-background': '#eee5dd',

  '--ck-connectbutton-balance-connectbutton-box-shadow':
    '-4px 8px 0px -4px #000000, inset 0 0 0 2px #000000',

  '--ck-connectbutton-balance-connectbutton-border-radius': '0px 8px 8px 0',

  '--ck-primary-button-color': '#373737',
  '--ck-primary-button-background': '#ffffff',
  '--ck-primary-button-box-shadow':
    'inset 0 0 0 2px #000000, -4px 4px 0 0 #000000',
  '--ck-primary-button-border-radius': '8px',

  '--ck-primary-button-hover-background': '#F3EDE8',
  '--ck-primary-button-hover-box-shadow':
    'inset 0 0 0 2px #000000, -0px 0px 0 0 #000000',

  '--ck-secondary-button-border-radius': '8px',
  '--ck-secondary-button-color': '#373737',
  '--ck-secondary-button-background': '#ffffff',
  '--ck-secondary-button-box-shadow':
    '-4px 4px 0 0 #000000, inset 0 0 0 2px #000000',

  '--ck-secondary-button-hover-background': '#F3EDE8',
  '--ck-secondary-button-hover-box-shadow':
    '0 0 0 0 #000000, inset 0 0 0 2px #000000',

  '--ck-focus-color': '#3B99FC',

  '--ck-overlay-background': 'rgba(133, 120, 122, 0.8)',
  '--ck-body-color': '#373737',
  '--ck-body-color-muted': 'rgba(0, 0, 0, 0.5)',
  '--ck-body-color-muted-hover': '#000000',
  '--ck-body-background': '#EBE1D8',
  '--ck-body-background-transparent': 'rgba(255,255,255,0)',
  '--ck-body-background-secondary': 'rgba(0,0,0,0.1)',
  '--ck-body-background-secondary-hover-background': '#4D4D4D',
  '--ck-body-background-secondary-hover-outline': '#373737',
  '--ck-body-background-tertiary': '#ffffff',
  '--ck-tertiary-border-radius': '8px',
  '--ck-tertiary-box-shadow': '-4px 4px 0 0 #000000, inset 0 0 0 2px #000000',

  '--ck-body-action-color': '#373737',
  '--ck-body-divider': '#373737',
  '--ck-body-color-danger': '#FF4E4E',

  '--ck-body-disclaimer-background': '#E3D6C9',
  '--ck-body-disclaimer-box-shadow':
    '-4px 4px 0 0 #000000, inset 2px 0 0 0 #000000, inset -2px 0 0 0 #000000, inset 0 -2px 0 0 #000000',
  '--ck-body-disclaimer-font-weight': '500',
  '--ck-body-disclaimer-color': '#888079',
  '--ck-body-disclaimer-link-color': '#5B5650',
  '--ck-body-disclaimer-link-hover-color': '#000000',

  '--ck-modal-box-shadow': '-10px 10px 0px #000000, inset 0 0 0 2px #000000',

  '--ck-copytoclipboard-stroke': '#555555',

  '--ck-tooltip-border-radius': '8px',
  '--ck-tooltip-color': '#373737',
  '--ck-tooltip-background': '#ffffff',
  '--ck-tooltip-background-secondary': '#EBE1D8',
  '--ck-tooltip-shadow': '-6px 6px 0 0 #000000, 0 0 0 2px #000000',

  '--ck-spinner-color': '#1A88F8',

  '--ck-dropdown-button-color': '#000',
  '--ck-dropdown-button-box-shadow':
    '-2px 2px 0 2px #000000,  0 0 0 2px #000000',
  '--ck-dropdown-button-background': '#ffffff',
  '--ck-dropdown-button-hover-background': '#F3EDE8',
  '--ck-dropdown-button-hover-box-shadow':
    '-2px 2px 0 0 #000000,  0 0 0 2px #000000',

  '--ck-dropdown-pending-color': 'rgba(0, 0, 0, 0.5)',
  '--ck-dropdown-active-color': '#FFFFFF',
  '--ck-dropdown-active-static-color': 'rgba(0, 0, 0, 0.5)',
  '--ck-dropdown-active-background': '#3B99FC',
  '--ck-dropdown-active-box-shadow': 'inset 0 0 0 2px #000000',
  '--ck-dropdown-active-border-radius': '8px',

  '--ck-dropdown-color': 'rgba(0, 0, 0, 0.5)',
  '--ck-dropdown-background': '#FFFFFF',
  '--ck-dropdown-box-shadow': '-4px 4px 0 0 #000000, inset 0 0 0 2px #000000',
  '--ck-dropdown-border-radius': '8px',

  '--ck-alert-color': 'rgba(0, 0, 0, 0.5)',
  '--ck-alert-background': ' #F5F5F5',
  '--ck-alert-border-radius': '8px',

  '--ck-qr-border-radius': '8px',
  '--ck-qr-dot-color': '#000000',
  '--ck-qr-border-color': '#000000',
  '--ck-qr-background': '#ffffff',

  '--ck-recent-badge-border-radius': '32px',
  '--ck-recent-badge-box-shadow': 'inset 0 0 0 2px currentColor',

  /** Graphics options for our themes, not to be exposed to devs */

  '--ck-graphic-primary-color': '#000000',
  '--ck-graphic-primary-background': '#ffffff',
  /*
  '--ck-graphic-secondary-color': '#ffffff',
  '--ck-graphic-secondary-background': '#808080',
  '--ck-graphic-secondary-box-shadow':
    '-4px 4px 0 2px #000000, 0 0 0 2px #000000',

  '--ck-graphic-compass-color': '#ffffff',*/
  '--ck-graphic-compass-background': '#FFFFFF',
  /*
  '--ck-graphic-compass-box-shadow':
    '-4px 4px 0 0 #000000, inset 0 0 0 2px #000000',

  '--ck-graphic-globe-background': '#ffffff',
  '--ck-graphic-globe-lines': '#808080',
  '--ck-graphic-globe-box-shadow': '6px -6px 0 2px #000000, 0 0 0 2px #000000',
  */

  '--ck-siwe-border': '#8E8985',
};
</file>

<file path="packages/connectkit/src/styles/themes/rounded.ts">
export default {
  '--ck-font-family':
    '"Nunito",ui-rounded,-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,"Apple Color Emoji",Arial,sans-serif,"Segoe UI Emoji","Segoe UI Symbol"',
  '--ck-border-radius': '24px',

  '--ck-connectbutton-font-size': '17px',
  '--ck-connectbutton-font-weight': '700',
  '--ck-connectbutton-border-radius': '14px',
  '--ck-connectbutton-color': '#000000',
  '--ck-connectbutton-background': '#ffffff',
  '--ck-connectbutton-box-shadow':
    'inset 0 0 0 2px #DFE4EC, 0 2px 0 0 #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-connectbutton-hover-background': '#F9FAFB',

  '--ck-connectbutton-balance-color': '#414451',
  '--ck-connectbutton-balance-background': '#F9FAFB',
  '--ck-connectbutton-balance-box-shadow':
    '0 2px 0 0 #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-connectbutton-balance-hover-background': '#F5F7F9',
  '--ck-connectbutton-balance-hover-box-shadow':
    '0 2px 0 0 #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',
  '--ck-connectbutton-balance-active-box-shadow':
    '0 0 0 0 #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-connectbutton-active-background': '#F5F7F9',
  '--ck-connectbutton-active-box-shadow':
    'inset 0 0 0 2px #CFD7E2, 0 0px 0 0 #CFD7E2, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-primary-button-border-radius': '18px',
  '--ck-primary-button-color': '#000000',
  '--ck-primary-button-background': '#ffffff',
  '--ck-primary-button-box-shadow':
    'inset 0 0 0 2px #DFE4EC, inset  0 -4px 0 0 #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-primary-button-hover-background': '#F5F7F9',
  '--ck-primary-button-hover-box-shadow':
    'inset 0 0 0 2px #DFE4EC, inset  0 -2px 0 0 #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-secondary-button-border-radius': '16px',
  '--ck-secondary-button-color': '#000000',
  '--ck-secondary-button-background': '#ffffff',
  '--ck-secondary-button-box-shadow':
    'inset 0 0 0 2px #DFE4EC, inset  0 -4px 0 0 #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-secondary-button-hover-background': '#F5F7F9',
  '--ck-secondary-button-hover-box-shadow':
    'inset 0 0 0 2px #DFE4EC, inset  0 -2px 0 0 #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-focus-color': '#1A88F8',
  '--ck-modal-box-shadow': `0px 3px 16px rgba(0, 0, 0, 0.08)`,
  '--ck-body-color': '#000000',
  '--ck-body-color-muted': '#93989F',
  '--ck-body-color-muted-hover': '#000000',
  '--ck-body-background': '#ffffff',
  '--ck-body-background-transparent': 'rgba(255,255,255,0)',
  '--ck-body-background-secondary': '#f6f7f9',
  '--ck-body-background-secondary-hover-background': '#e0e4eb',
  '--ck-body-background-secondary-hover-outline': '#4282FF',
  '--ck-body-background-tertiary': '#ffffff',
  '--ck-tertiary-border-radius': '22px',
  '--ck-tertiary-box-shadow':
    'inset 0 0 0 2px #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-body-action-color': '#93989F',
  '--ck-body-divider': '#DFE4EC',
  '--ck-body-color-danger': '#FF4E4E',
  '--ck-body-color-valid': '#32D74B',

  '--ck-body-disclaimer-background': '#F9FAFB',
  '--ck-body-disclaimer-font-size': '14px',
  '--ck-body-disclaimer-font-weight': '700',
  '--ck-body-disclaimer-color': '#959697',
  '--ck-body-disclaimer-link-color': '#646464',
  '--ck-body-disclaimer-link-hover-color': '#000000',

  '--ck-copytoclipboard-stroke': '#CCCCCC',

  '--ck-tooltip-background': '#ffffff',
  '--ck-tooltip-background-secondary': '#ffffff',
  '--ck-tooltip-color': '#999999',
  '--ck-tooltip-shadow': ' 0 0 0 2px #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-spinner-color': 'var(--ck-focus-color)',

  '--ck-dropdown-button-color': '#999999',
  '--ck-dropdown-button-box-shadow':
    '0 0 0 2px #DFE4EC,  0 2px 0 2px #DFE4EC, 0px 2px 4px rgba(0, 0, 0, 0.02)',
  '--ck-dropdown-button-background': '#fff',

  '--ck-dropdown-button-hover-color': '#8B8B8B',
  '--ck-dropdown-button-hover-background': '#F5F7F9',

  '--ck-dropdown-pending-color': '#848D9A',
  '--ck-dropdown-active-color': '#000000',
  '--ck-dropdown-active-static-color': '#848D9A',
  '--ck-dropdown-active-background': '#F5F7F9',
  '--ck-dropdown-color': '#848D9A',
  '--ck-dropdown-background': '#FFFFFF',
  '--ck-dropdown-box-shadow': '0px 2px 15px rgba(0, 0, 0, 0.15)',
  '--ck-dropdown-border-radius': '16px',

  '--ck-alert-color': '#848D9A',
  '--ck-alert-background': '#F5F7F9',

  '--ck-qr-border-radius': '24px',
  '--ck-qr-dot-color': '#111111',
  '--ck-qr-border-color': '#DFE4EC',

  '--ck-modal-h1-font-weight': '700',
  '--ck-modal-heading-font-weight': '700',
  '--ck-primary-button-font-weight': '700',

  '--ck-recent-badge-box-shadow': 'inset 0 0 0 2px currentColor',
  '--ck-recent-badge-top-offset': '0px',

  /** Graphics options for our themes, not to be exposed to devs */
  /*
  '--ck-graphic-primary-color': '#6C7381',
  '--ck-graphic-primary-background': '#ffffff',
  '--ck-graphic-primary-box-shadow': 'inset 0 0 0 2px #DFE4EC',

  '--ck-graphic-secondary-color': '#DFE4EC',
  '--ck-graphic-secondary-background': '#ffffff',
  '--ck-graphic-secondary-box-shadow': 'inset 0 0 0 2px #DFE4EC',

  '--ck-graphic-compass-color': '#ffffff',
  '--ck-graphic-compass-background': '#6C7381',
  '--ck-graphic-compass-box-shadow': 'inset 0 0 0 2px rgba(0,0,0,0.1)',

  '--ck-graphic-globe-background':
    'radial-gradient(84.37% 84.37% at 50% 15.63%, rgba(255, 255, 255, 0.2) 0%, rgba(0, 0, 0, 0) 100%), linear-gradient(180deg, #DFE4EC 0%, #DFE4EC 114.06%), #DFE4EC',
  '--ck-graphic-globe-lines': '#ffffff',
  '--ck-graphic-globe-box-shadow': 'inset 0 0 0 2px #DFE4EC',
  */

  '--ck-siwe-border': '#DFE4EC',
};
</file>

<file path="packages/connectkit/src/styles/themes/soft.ts">
export default {
  '--ck-border-radius': '12px',

  '--ck-connectbutton-font-size': '17px',
  '--ck-connectbutton-border-radius': '12px',
  '--ck-connectbutton-color': '#414451',
  '--ck-connectbutton-background': '#ffffff',
  '--ck-connectbutton-box-shadow':
    'inset 0 0 0 1px #E9EAEC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-connectbutton-hover-background': '#F6F7F9',
  '--ck-connectbutton-hover-box-shadow':
    'inset 0 0 0 1px #E9EAEC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-connectbutton-balance-color': '#373737',
  '--ck-connectbutton-balance-background': '#F6F7F9',
  '--ck-connectbutton-balance-box-shadow': 'none',

  '--ck-connectbutton-balance-hover-background': '#f1f1f3',

  '--ck-primary-button-border-radius': '12px',
  '--ck-primary-button-color': '#414451',
  '--ck-primary-button-background': '#ffffff',
  '--ck-primary-button-box-shadow':
    '0 0 0 1px #E9EAEC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-primary-button-hover-background': '#F6F7F9',
  '--ck-primary-button-hover-box-shadow':
    '0 0 0 1px #D9DBDD, 0px 0 0 rgba(0, 0, 0, 0.02)',

  '--ck-secondary-button-border-radius': '12px',
  '--ck-secondary-button-color': '#414451',
  '--ck-secondary-button-background': '#ffffff',
  '--ck-secondary-button-box-shadow':
    '0 0 0 1px #E9EAEC, 0px 2px 4px rgba(0, 0, 0, 0.02)',

  '--ck-secondary-button-hover-background': '#F6F7F9',
  '--ck-secondary-button-hover-box-shadow':
    '0 0 0 1px #D9DBDD, 0px 0 0 rgba(0, 0, 0, 0.02)',

  '--ck-focus-color': '#1A88F8',
  '--ck-modal-box-shadow': `0px 3px 16px rgba(0, 0, 0, 0.08)`,
  '--ck-body-color': '#414451',
  '--ck-body-color-muted': '#9196A1',
  '--ck-body-color-muted-hover': '#000000',
  '--ck-body-background': '#ffffff',
  '--ck-body-background-transparent': 'rgba(255,255,255,0)',
  '--ck-body-background-secondary': '#f6f7f9',
  '--ck-body-background-secondary-hover-background': '#e0e4eb',
  '--ck-body-background-secondary-hover-outline': '#4282FF',
  '--ck-body-background-tertiary': '#F6F8FA',
  '--ck-tertiary-border-radius': '13px',
  '--ck-tertiary-box-shadow': 'inset 0 0 0 1px rgba(0, 0, 0, 0.04)',

  '--ck-body-action-color': '#999999',
  '--ck-body-divider': '#f7f6f8',
  '--ck-body-color-danger': '#FF4E4E',
  '--ck-body-color-valid': '#32D74B',

  '--ck-body-disclaimer-background': '#F9FAFA',
  '--ck-body-disclaimer-color': '#AFB1B6',
  '--ck-body-disclaimer-link-color': '#787B84',
  '--ck-body-disclaimer-link-hover-color': '#000000',

  '--ck-copytoclipboard-stroke': '#CCCCCC',

  '--ck-tooltip-background': '#ffffff',
  '--ck-tooltip-background-secondary': '#ffffff',
  '--ck-tooltip-color': '#999999',
  '--ck-tooltip-shadow': '0px 2px 10px rgba(0, 0, 0, 0.08)',

  '--ck-spinner-color': 'var(--ck-focus-color)',

  '--ck-dropdown-button-color': '#999999',
  '--ck-dropdown-button-box-shadow':
    '0 0 0 1px rgba(0, 0, 0, 0.01), 0px 0px 7px rgba(0, 0, 0, 0.05)',
  '--ck-dropdown-button-background': '#fff',

  '--ck-dropdown-button-hover-color': '#8B8B8B',
  '--ck-dropdown-button-hover-background': '#E7E7E7',

  '--ck-dropdown-color': 'rgba(55, 55, 55, 0.4)',
  '--ck-dropdown-box-shadow': '0px 2px 15px rgba(0, 0, 0, 0.15)',

  '--ck-alert-color': '#9196A1',
  '--ck-alert-background': '#F6F8FA',
  '--ck-alert-box-shadow': 'inset 0 0 0 1px rgba(0, 0, 0, 0.04)',
  '--ck-alert-border-radius': '8px',

  '--ck-qr-border-radius': '12px',
  '--ck-qr-dot-color': '#2E3138',
  '--ck-qr-border-color': '#E9EAEC',

  '--ck-siwe-border': '#EAEBED',
};
</file>

<file path="packages/connectkit/src/styles/themes/web95.ts">
export default {
  '--ck-font-family': 'Lato',
  '--ck-border-radius': '0px',

  '--ck-connectbutton-color': '#373737',
  '--ck-connectbutton-background':
    'linear-gradient(180deg, #F0F0EA 0%, #FFFFFF 50%, #F0F0EA 100%) 100% 100% / 200% 200%, #F5F5F1',
  '--ck-connectbutton-box-shadow':
    ' 0 0 0 1px #003C74, 2px 2px 0px rgba(255, 255, 255, 0.75), -2px -2px 0px rgba(0, 0, 0, 0.05), inset 0px 0px 0px 0px #97B9EC, inset -1px -2px 2px rgba(0, 0, 0, 0.2)',
  '--ck-connectbutton-border-radius': '4.5px',

  '--ck-connectbutton-hover-color': '#373737',
  '--ck-connectbutton-hover-background':
    'linear-gradient(180deg, #F0F0EA 0%, #FFFFFF 50%, #F0F0EA 100%) 100% 0% / 200% 200%, #F5F5F1',

  '--ck-connectbutton-active-background':
    'linear-gradient(180deg, #F0F0EA 0%, #FFFFFF 50%, #F0F0EA 100%) 100% 100% / 200% 200%, #F5F5F1',

  '--ck-connectbutton-balance-color': '#373737',
  '--ck-connectbutton-balance-background': '#fff',
  '--ck-connectbutton-balance-box-shadow': '0 0 0 1px #E4E7E7',
  '--ck-connectbutton-balance-hover-box-shadow': '0 0 0 1px #d7dbdb',
  '--ck-connectbutton-balance-active-box-shadow': '0 0 0 1px #bbc0c0',

  '--ck-focus-color': '#1A88F8',
  '--ck-overlay-background': 'rgba(0, 127,  128, 0.8)',
  '--ck-body-color': '#373737',
  '--ck-body-color-muted': '#808080',
  '--ck-body-color-muted-hover': '#111111',
  '--ck-body-background': '#F0EDE2',
  '--ck-body-background-transparent': 'rgba(255,255,255,0)',
  '--ck-body-background-secondary-hover-background': '#FAFAFA',
  '--ck-body-background-secondary-hover-outline': '#4282FF',
  '--ck-body-action-color': '#373737',
  '--ck-body-color-danger': '#FC6464',
  '--ck-body-color-valid': '#32D74B',

  '--ck-body-divider': '#919B9C',
  '--ck-body-divider-box-shadow': '0px 1px 0px #FBFBF8',

  // Primary button
  '--ck-primary-button-background':
    'linear-gradient(180deg, #FFFFFF 0%, #F0F0EA 100%), #F5F5F1',
  '--ck-primary-button-box-shadow':
    'inset 0 0 0 1px #003C74, 1px 1px 0px rgba(255, 255, 255, 0.75), -1px -1px 0px rgba(0, 0, 0, 0.05), inset 0px 0px 0px 0px #97B9EC, inset -1px -2px 2px rgba(0, 0, 0, 0.2)',
  '--ck-primary-button-border-radius': '6px',

  // Primary button hover
  '--ck-primary-button-hover-box-shadow':
    'inset 0 0 0 1px #003C74, 1px 1px 0px rgba(255, 255, 255, 0.75), -1px -1px 0px rgba(0, 0, 0, 0.05), inset 0px 0px 0px 5px #97B9EC, inset -1px -2px 2px rgba(0, 0, 0, 0.2)',
  '--ck-primary-button-hover-border-radius': '6px',

  // Modal
  '--ck-modal-heading-font-weight': 400,
  '--ck-modal-box-shadow': `
    inset 0px -3px 0px #0F37A9,
    inset -2px 0px 0px #0F37A9,
    inset 0px -4px 0px #0D5DDF,
    inset -4px 0px 0px #0D5DDF,
    inset 2px 0px 0px #0453DD,
    inset 0px 2px 0px #044FD1,
    inset 4px 0px 0px #4283EB,
    inset 0px 4px 0px #4283EB
  `,
  '--ck-modal-h1-font-weight': 400,

  // Secondary button
  '--ck-secondary-button-color': '#373737',
  '--ck-secondary-button-border-radius': '6px',
  '--ck-secondary-button-box-shadow':
    'inset 0 0 0 1px #003C74, 1px 1px 0px rgba(255, 255, 255, 0.75), -1px -1px 0px rgba(0, 0, 0, 0.05), inset 0px 0px 0px 0px #97B9EC, inset -1px -2px 2px rgba(0, 0, 0, 0.2)',
  '--ck-secondary-button-background':
    'linear-gradient(180deg, #FFFFFF 0%, #F0F0EA 100%), #F5F5F1',

  // Secondary button hover
  '--ck-secondary-button-hover-box-shadow':
    'inset 0 0 0 1px #003C74, 1px 1px 0px rgba(255, 255, 255, 0.75), -1px -1px 0px rgba(0, 0, 0, 0.05), inset 0px 0px 0px 4px #97B9EC, inset -1px -2px 2px rgba(0, 0, 0, 0.2)',

  '--ck-body-background-secondary': 'rgba(0, 0, 0, 0.1)',
  '--ck-body-background-tertiary':
    'linear-gradient(180deg, #FBFBFB 0%, #EFEFEE 100%)',
  '--ck-tertiary-border-radius': '0px',
  '--ck-tertiary-box-shadow':
    'inset 0 0 0 1px #919B9C, 1px 1px 2px rgba(0, 0, 0, 0.15), inset -2px -2px 0px #FFFFFF',
  '--ck-body-button-text-align': 'left',
  '--ck-body-button-box-shadow': '0 2px 4px rgba(0, 0, 0, 0.05 )',

  '--ck-body-disclaimer-background':
    'linear-gradient(180deg, #FBFBFB 0%, #EFEFEE 100%)',
  '--ck-body-disclaimer-box-shadow': `
    inset 0px -3px 0px #0F37A9,
    inset -2px 0px 0px #0F37A9,
    inset 0px -4px 0px #0D5DDF,
    inset -4px 0px 0px #0D5DDF,
    inset 2px 0px 0px #0453DD,
    inset 4px 0px 0px #4283EB,
    inset 0 1px 0 0 #919B9C`,
  '--ck-body-disclaimer-font-size': '14px',
  '--ck-body-disclaimer-color': '#959594',
  '--ck-body-disclaimer-link-color': '#626262',
  '--ck-body-disclaimer-link-hover-color': '#000000',

  '--ck-qr-dot-color': '#000000',
  '--ck-qr-border-color': '#919B9C',
  '--ck-qr-border-radius': '0',
  '--ck-qr-background': '#FFFFFF',

  '--ck-copytoclipboard-stroke': 'rgba(55, 55, 55, 0.4)',

  '--ck-tooltip-background':
    'linear-gradient(270deg, #F7F3E6 7.69%, #F5F7DA 100%)',
  '--ck-tooltip-background-secondary': '#f6f7f9',
  '--ck-tooltip-color': '#000000',
  '--ck-tooltip-shadow':
    ' 0 0 0 1.5px #2b2622, 0px 2px 10px rgba(0, 0, 0, 0.08)',

  '--ck-spinner-color': 'var(--ck-focus-color)',

  '--ck-dropdown-button-color': '#999999',
  '--ck-dropdown-button-box-shadow':
    '0 0 0 1px #A0A0A0, 1px 1px 0px rgba(255, 255, 255, 0.75), -1px -1px 0px rgba(0, 0, 0, 0.05), inset -1px -2px 2px rgba(0, 0, 0, 0.2)',
  '--ck-dropdown-button-background':
    'linear-gradient(180deg, #FFFFFF 0%, #F0F0EA 100%), #F5F5F1',
  '--ck-dropdown-button-hover-background':
    'linear-gradient(0deg, #FFFFFF 0%, #F0F0EA 100%), #F5F5F1',

  '--ck-dropdown-pending-color': '#ACA899',
  '--ck-dropdown-active-color': '#FFFFFF',
  '--ck-dropdown-active-static-color': '#ACA899',
  '--ck-dropdown-active-background': '#3F69BF',
  '--ck-dropdown-active-border-radius': '0',
  '--ck-dropdown-active-inset': '-12px',
  '--ck-dropdown-color': '#ACA899',
  '--ck-dropdown-background': '#FFFFFF',
  '--ck-dropdown-box-shadow':
    'inset 0 0 0 1px #ACA899, 2px 2px 7px rgba(0, 0, 0, 0.15)',
  '--ck-dropdown-border-radius': '0',

  '--ck-alert-color': '#ACA899',
  '--ck-alert-background': 'linear-gradient(180deg, #FBFBFB 0%, #EFEFEE 100%)',
  '--ck-alert-box-shadow':
    'inset 0 0 0 1px #919B9C, 1px 1px 2px rgba(0, 0, 0, 0.15), inset -2px -2px 0px #FFFFFF',
  '--ck-alert-border-radius': '0',

  '--ck-recent-badge-border-radius': '32px',
  '--ck-recent-badge-top-offset': '0px',

  /** Graphics options for our themes, not to be exposed to devs */

  '--ck-graphic-primary-color': '#333333',
  '--ck-graphic-primary-background': '#FFFFFF',
  /*
  '--ck-graphic-secondary-color': '#7D7D7D',
  '--ck-graphic-secondary-background':
    'linear-gradient(180deg, #FFFFFF 0%, #F0F0EA 100%), #F5F5F1',
  '--ck-graphic-secondary-box-shadow':
    'inset 0 0 0 1px #003C74, 1px 1px 0px rgba(255, 255, 255, 0.75), -1px -1px 0px rgba(0, 0, 0, 0.05), inset 0px 0px 0px 0px #97B9EC, inset -1px -2px 2px rgba(0, 0, 0, 0.2)',

  '--ck-graphic-compass-color': '#7D7D7D',
  */
  '--ck-graphic-compass-background': '#FFFFFF',
  /*
  '--ck-graphic-compass-box-shadow':
    'inset 0 0 0 1px #003C74, 1px 1px 0px rgba(255, 255, 255, 0.75), -1px -1px 0px rgba(0, 0, 0, 0.05), inset 0px 0px 0px 0px #97B9EC, inset -1px -2px 2px rgba(0, 0, 0, 0.2)',

  '--ck-graphic-globe-background': '#ffffff',
  '--ck-graphic-globe-lines': '#808080',
  '--ck-graphic-globe-box-shadow':
    ' 0 0 0 1px #999A9E, 1px 1px 0px rgba(255, 255, 255, 0.75), -1px -1px 0px rgba(0, 0, 0, 0.05), inset 0px 0px 0px 0px #97B9EC',
    */

  '--ck-siwe-border': '#919B9C',
};
</file>

<file path="packages/connectkit/src/styles/defaultTheme.ts">
import { Theme, ThemeMode, CustomTheme } from './types';

const defaultLightTheme: Theme = {
  font: {
    family: `-apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, 'Apple Color Emoji', Arial, sans-serif, 'Segoe UI Emoji'`,
  },
  text: {
    primary: {
      color: '#373737',
    },
    secondary: {
      color: '#999999',
      hover: {
        color: '#111111',
      },
    },
    error: '#FC6464',
    valid: '#32D74B',
  },
  buttons: {
    primary: {
      borderRadius: 16,
      color: '#000373737000',
      background: '#FFFFFF',
      border: '#F0F0F0',
      hover: {
        color: '#000000',
        border: '#1A88F8',
      },
    },
    secondary: {
      borderRadius: 16,
      background: '#F6F7F9',
      color: '#000000',
    },
  },
  navigation: {
    color: '#999999',
  },
  modal: {
    background: '#ffffff', // need to generate an rgba transparent version of this for Safari
    divider: '#f7f6f8',
  },
  tooltips: {
    color: '#999999',
    background: '#ffffff',
    hover: {
      background: '#f6f7f9',
    },
  },
  overlay: {
    background: 'rgba(0, 0, 0, 0.06)',
  },
  qrCode: {
    accentColor: '#F7F6F8',
  },
};

// parse into css variables so we can use p3 colors
const parseTheme = (theme: Theme) => {
  return theme;
};

const userPrefersDarkMode = () => {
  if (typeof window === 'undefined') return false;
  return (
    window.matchMedia &&
    window.matchMedia('(prefers-color-scheme: dark)').matches
  );
  /*
  window
    .matchMedia('(prefers-color-scheme: dark)')
    .addEventListener('change', (event) => {
      userPrefersDarkMode = event.matches;
    });
    */
};
let darkMode = userPrefersDarkMode();

if (darkMode) {
}

const defaultTheme: CustomTheme = {
  connectKit: {
    options: {
      iconStyle: 'light',
    },
    //theme: parseTheme(defaultLightTheme),
    theme: {
      preferred: 'dark',
      light: parseTheme(defaultLightTheme),
      dark: parseTheme(defaultLightTheme),
    },
  },
};
export default defaultTheme;
</file>

<file path="packages/connectkit/src/styles/index.ts">
import styled from './styled';
import { css } from 'styled-components';
import { motion } from 'framer-motion';
import { CustomTheme } from '../types';
import { hexToP3 } from '../utils/p3';

import predefinedThemes from './themes';

/**
 * Theme variables for the modal
 */
const themeGlobals = {
  default: {
    '--ck-font-family': `-apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica,
    'Apple Color Emoji', Arial, sans-serif, 'Segoe UI Emoji',
    'Segoe UI Symbol'`,
    '--ck-border-radius': '20px',
    '--ck-secondary-button-border-radius': '16px',
  },
  graphics: {
    light: {
      '--ck-graphic-wave-stop-01': '#E8F17D',
      '--ck-graphic-wave-stop-02': '#A8ECDE',
      '--ck-graphic-wave-stop-03': '#7AA1F2',
      '--ck-graphic-wave-stop-04': '#DEA1E8',
      '--ck-graphic-wave-stop-05': '#F46D98',

      '--ck-graphic-scaniconwithlogos-01': '#4E4E4E',
      '--ck-graphic-scaniconwithlogos-02': '#272727',
      '--ck-graphic-scaniconwithlogos-03': '#F8D74A',
      '--ck-graphic-scaniconwithlogos-04': '#F6F7F9',

      '--ck-chain-ethereum-01': '#25292E',
      '--ck-chain-ethereum-02': '#ffffff',
      '--ck-chain-ethereum-03': '#DFE0E0',
    },
    dark: {
      '--ck-graphic-wave-stop-01': '#E8F17D',
      '--ck-graphic-wave-stop-02': '#A8ECDE',
      '--ck-graphic-wave-stop-03': '#7AA1F2',
      '--ck-graphic-wave-stop-04': '#DEA1E8',
      '--ck-graphic-wave-stop-05': '#F46D98',

      '--ck-graphic-scaniconwithlogos-01': '#AFAFAF',
      '--ck-graphic-scaniconwithlogos-02': '#696969',
      '--ck-graphic-scaniconwithlogos-03': '#F8D74A',
      '--ck-graphic-scaniconwithlogos-04': '#3D3D3D',

      //'--ck-chain-ethereum-01': '#fff',
      //'--ck-chain-ethereum-02': '#000',
      //'--ck-chain-ethereum-03': '#000',
    },
  },
  ens: {
    light: {
      '--ck-ens-01-start': '#FF3B30',
      '--ck-ens-01-stop': '#FF9500',
      '--ck-ens-02-start': '#FF9500',
      '--ck-ens-02-stop': '#FFCC00',
      '--ck-ens-03-start': '#FFCC00',
      '--ck-ens-03-stop': '#34C759',
      '--ck-ens-04-start': '#5856D6',
      '--ck-ens-04-stop': '#AF52DE',
      '--ck-ens-05-start': '#5AC8FA',
      '--ck-ens-05-stop': '#007AFF',
      '--ck-ens-06-start': '#007AFF',
      '--ck-ens-06-stop': '#5856D6',
      '--ck-ens-07-start': '#5856D6',
      '--ck-ens-07-stop': '#AF52DE',
      '--ck-ens-08-start': '#AF52DE',
      '--ck-ens-08-stop': '#FF2D55',
    },
    dark: {
      '--ck-ens-01-start': '#FF453A',
      '--ck-ens-01-stop': '#FF9F0A',
      '--ck-ens-02-start': '#FF9F0A',
      '--ck-ens-02-stop': '#FFD60A',
      '--ck-ens-03-start': '#FFD60A',
      '--ck-ens-03-stop': '#32D74B',
      '--ck-ens-04-start': '#32D74B',
      '--ck-ens-04-stop': '#64D2FF',
      '--ck-ens-05-start': '#64D2FF',
      '--ck-ens-05-stop': '#0A84FF',
      '--ck-ens-06-start': '#0A84FF',
      '--ck-ens-06-stop': '#5E5CE6',
      '--ck-ens-07-start': '#5E5CE6',
      '--ck-ens-07-stop': '#BF5AF2',
      '--ck-ens-08-start': '#BF5AF2',
      '--ck-ens-08-stop': '#FF2D55',
    },
  },
  brand: {
    '--ck-family-accounts-brand': '#0FCCCC',
    '--ck-family-brand': '#1A88F8',
    '--ck-brand-walletConnect': '#3B99FC',
    '--ck-brand-coinbaseWallet': '#0052FF',
    '--ck-brand-metamask': '#f6851b',
    '--ck-brand-metamask-01': '#F6851B',
    '--ck-brand-metamask-02': '#E2761B',
    '--ck-brand-metamask-03': '#CD6116',
    '--ck-brand-metamask-04': '#161616',
    '--ck-brand-metamask-05': '#763D16',
    '--ck-brand-metamask-06': '#D7C1B3',
    '--ck-brand-metamask-07': '#C0AD9E',
    '--ck-brand-metamask-08': '#E4761B',
    '--ck-brand-metamask-09': '#233447',
    '--ck-brand-metamask-10': '#E4751F',
    '--ck-brand-metamask-11': '#FEF5E7',
    '--ck-brand-metamask-12': '#E3C8AB',
    '--ck-brand-trust-01': '#3375BB',
    '--ck-brand-trust-02': '#ffffff',
    '--ck-brand-trust-01b': '#ffffff', // dark Theme
    '--ck-brand-trust-02b': '#3375BB', // dark Theme
    '--ck-brand-argent': '#f36a3d',
    '--ck-brand-imtoken-01': '#11C4D1',
    '--ck-brand-imtoken-02': '#0062AD',
    '--ck-brand-safe': '#12FF80',
    '--ck-brand-dawn': '#000000',
  },
};
const themeColors = {
  light: predefinedThemes.base.light,
  dark: predefinedThemes.base.dark,
  web95: predefinedThemes.web95,
  retro: predefinedThemes.retro,
  soft: predefinedThemes.soft,
  midnight: predefinedThemes.midnight,
  minimal: predefinedThemes.minimal,
  rounded: predefinedThemes.rounded,
  nouns: predefinedThemes.nouns,
};

/**
 *  Automatically use p3 if available
 */
//  TODO: Don't use :any type
const createCssVars = (scheme: any, important?: boolean) => {
  return css`
    ${Object.keys(scheme).map((key) => {
      const value = scheme[key];
      return value && `${key}:${value};`;
    })}
  `;
};
const createCssColors = (scheme: any, override?: boolean) => {
  const important = override ? ' !important' : '';
  return css`
    ${Object.keys(scheme).map((key) => {
      const value = scheme[key];
      return value && `${key}:${value}${important};`;
    })}
    @supports (color: color(display-p3 1 1 1)) {
      ${Object.keys(scheme).map((key) => {
        const value = scheme[key];
        return `${key}:${hexToP3(value)}${important};`;
      })}
    }
  `;
};

const themes = {
  default: createCssVars(themeGlobals.default),
  light: createCssColors(themeColors.light),
  dark: createCssColors(themeColors.dark),
  web95: createCssColors(themeColors.web95),
  retro: createCssColors(themeColors.retro),
  soft: createCssColors(themeColors.soft),
  midnight: createCssColors(themeColors.midnight),
  minimal: createCssColors(themeColors.minimal),
  rounded: createCssColors(themeColors.rounded),
  nouns: createCssColors(themeColors.nouns),
};
const globals = {
  brand: createCssColors(themeGlobals.brand),
  ensLight: createCssColors(themeGlobals.ens.light),
  ensDark: createCssColors(themeGlobals.ens.dark),
  graphicsLight: createCssColors(themeGlobals.graphics.light),
  graphicsDark: createCssColors(themeGlobals.graphics.dark),
};

const globalsLight = css`
  ${globals.brand}
  ${globals.ensLight}
  ${globals.graphicsLight}
`;
const globalsDark = css`
  ${globals.brand}
  ${globals.ensDark}
  ${globals.graphicsDark}
`;

/*
 *  Reset stylings to avoid conflicting with the parent websites styling
 * Automatically apply theme based on system theme
 */
// TODO: Think more about how to reset our components as to not be affected by external stylings
// TODO: Merge theme objects instead of overriding

let mode = 'auto';
export const ResetContainer = styled(motion.div)<{
  $useTheme?: string;
  $useMode?: string;
  $customTheme?: CustomTheme;
}>`
  ${themes.default}

  ${(props) => {
    switch (props.$useTheme) {
      case 'web95':
        mode = 'light';
        return themes.web95;
      case 'retro':
        mode = 'light';
        return themes.retro;
      case 'soft':
        mode = 'light';
        return themes.soft;
      case 'midnight':
        mode = 'dark';
        return themes.midnight;
      case 'minimal':
        mode = 'light';
        return themes.minimal;
      case 'rounded':
        mode = 'light';
        return themes.rounded;
      case 'nouns':
        mode = 'light';
        return themes.nouns;
      default:
        if (props.$useMode === 'light') {
          mode = 'light';
          return themes.light;
        } else if (props.$useMode === 'dark') {
          mode = 'dark';
          return themes.dark;
        } else {
          return css`
            @media (prefers-color-scheme: light) {
              ${themes.light}
            }
            @media (prefers-color-scheme: dark) {
              ${themes.dark}
            }
          `;
        }
    }
  }}

  ${(props) => {
    switch (mode) {
      case 'light':
        return globalsLight;
      case 'dark':
        return globalsDark;
      default:
        return css`
          ${globalsLight}
          @media (prefers-color-scheme: dark) {
            ${globalsDark}
          }
        `;
    }
  }}

  ${(props) => {
    if (
      props.$customTheme &&
      props.$customTheme['--ck-accent-color'] &&
      ['light', 'dark', 'auto', '', undefined].includes(props.$useTheme)
    ) {
      const accentColor = props.$customTheme['--ck-accent-color'];
      const accentTextColor =
        props.$customTheme['--ck-accent-text-color'] ?? '#ffffff';
      return {
        '--ck-accent-color': accentColor,
        '--ck-accent-text-color': accentTextColor,
        // '--ck-connectbutton-color': accentTextColor,
        // '--ck-connectbutton-background': accentColor,
        // '--ck-connectbutton-background-hover': accentColor,
        // '--ck-connectbutton-background-active': LightenDarkenColor(
        // accentColor,
        // 20
        // ),
        '--ck-secondary-button-background': accentColor,
        '--ck-secondary-button-hover-background': accentColor,
        '--ck-secondary-button-color': accentTextColor,
        '--ck-button-primary-color': accentTextColor,
        '--ck-focus-color': accentColor,
      };
    }
    if (props.$customTheme) {
      return createCssColors(props.$customTheme, true);
    }
  }}

  all: initial;
  text-align: left;
  text-direction: ltr;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-text-stroke: 0.001px transparent;
  text-size-adjust: none;
  font-size: 16px;

  button {
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -webkit-text-stroke: 0.001px transparent;
  }

  &,
  * {
    font-family: var(--ck-font-family);
    box-sizing: border-box;
    outline: none;
    border: none;
  }
  /*
  @media (prefers-reduced-motion) {
    * {
      animation-duration: 60ms !important;
      transition-duration: 60ms !important;
    }
  }
  */
  img,
  svg {
    max-width: 100%;
  }
  strong {
    font-weight: 600;
  }
  a:focus-visible,
  button:focus-visible {
    outline: 2px solid var(--ck-focus-color);
  }
`;
</file>

<file path="packages/connectkit/src/styles/types.ts">
type RGB = `rgb(${number}, ${number}, ${number})`;
type RGBA = `rgba(${number}, ${number}, ${number}, ${number})`;
type HEX = `#${string}`;
type Color = RGB | RGBA | HEX;

type BorderRadius = number | string;
type Font = {
  family?: string;
};

interface Button {
  font?: Font;
  color?: Color;
  background?: Color;
  border?: Color;
  borderRadius?: BorderRadius;
  hover?: this;
}

interface Text {
  color?: Color;
  font?: Font;
  hover?: this;
}

export type Theme = {
  font?: Font;
  primary?: {
    color?: Color;
    colorSelected?: Color;
  };
  error?: {
    color?: Color;
  };
  text?: {
    primary?: Text;
    secondary?: Text;
    error?: Color;
    valid?: Color;
  };
  navigation?: {
    color?: Color;
  };
  buttons?: {
    primary?: Button;
    secondary?: Button;
  };
  modal?: {
    divider: Color;
    background?: Color;
    boxShadow?: string;
    borderRadius?: BorderRadius;
  };
  overlay?: {
    background?: Color;
    backdropFilter?: string;
  };
  tooltips?: {
    color?: Color;
    background?: Color;
    hover?: {
      color?: Color;
      background?: Color;
    };
  };
  qrCode?: {
    background?: Color;
    accentColor?: Color;
  };
};

export type ThemeMode = {
  preferred: 'light' | 'dark';
  light: Theme;
  dark: Theme;
};
export type CustomTheme = {
  connectKit: {
    options?: {
      iconStyle?: 'light' | 'regular' | 'heavy';
    };
    theme?: Theme | ThemeMode;
  };
};
</file>

<file path="packages/connectkit/src/utils/index.ts">
import React from 'react';
import { detect } from 'detect-browser';

const truncateRegex = /^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/;

const truncateEthAddress = (address?: string, separator: string = '••••') => {
  if (!address) return '';
  const match = address.match(truncateRegex);
  if (!match) return address;
  return `${match[1]}${separator}${match[2]}`;
};

const truncateENSAddress = (ensName: string, maxLength: number) => {
  if (ensName.length > maxLength) {
    return ensName.replace('.eth', '').slice(0, maxLength) + '...';
  } else {
    return ensName;
  }
};

const nFormatter = (num: number, digits: number = 2) => {
  if (num < 10000) return num.toFixed(2);
  const lookup = [
    { value: 1, symbol: '' },
    { value: 1e3, symbol: 'k' },
    { value: 1e6, symbol: 'm' },
    { value: 1e9, symbol: 'g' },
    { value: 1e12, symbol: 't' },
    { value: 1e15, symbol: 'p' },
    { value: 1e18, symbol: 'e' },
  ];

  const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
  var item = lookup
    .slice()
    .reverse()
    .find(function (item) {
      return num >= item.value;
    });
  return item
    ? (num / item.value).toFixed(digits).replace(rx, '$1') + item.symbol
    : '0';
};

const detectBrowser = () => {
  const browser = detect();
  return browser?.name ?? '';
};
const detectOS = () => {
  const browser = detect();
  return browser?.os ?? '';
};

const isIOS = () => {
  const os = detectOS();
  return os.toLowerCase().includes('ios');
};
const isAndroid = () => {
  const os = detectOS();
  return os.toLowerCase().includes('android');
};
const isMobile = () => {
  return isAndroid() || isIOS();
};

type ReactChildArray = ReturnType<typeof React.Children.toArray>;
function flattenChildren(children: React.ReactNode): ReactChildArray {
  const childrenArray = React.Children.toArray(children);
  return childrenArray.reduce((flatChildren: ReactChildArray, child) => {
    if ((child as React.ReactElement<any>).type === React.Fragment) {
      return flatChildren.concat(
        flattenChildren((child as React.ReactElement<any>).props.children)
      );
    }
    flatChildren.push(child);
    return flatChildren;
  }, []);
}

export const isWalletConnectConnector = (connectorId?: string) =>
  connectorId === 'walletConnect';

export const isFamilyAccountsConnector = (connectorId?: string) =>
  connectorId === 'familyAccountsProvider';

export const isFamilyConnector = (connectorId?: string) =>
  connectorId === 'co.family.wallet';

export const isMetaMaskConnector = (connectorId?: string) =>
  connectorId === 'metaMaskSDK';

export const isCoinbaseWalletConnector = (connectorId?: string) =>
  connectorId === 'coinbaseWalletSDK';

export const isLedgerConnector = (connectorId?: string) =>
  connectorId === 'ledger';

export const isSafeConnector = (connectorId?: string) => connectorId === 'safe';

export const isInjectedConnector = (connectorId?: string) =>
  connectorId === 'injected';

export {
  nFormatter,
  truncateEthAddress,
  truncateENSAddress,
  isMobile,
  isAndroid,
  detectBrowser,
  detectOS,
  flattenChildren,
};
</file>

<file path="packages/connectkit/src/utils/localstorage.ts">
/**
 * LocalStorage helper functions to save and retrieve data on a per-app basis
 * e.g recently connected wallets, transactions, etc.
 */

//import { randomUUID as randomID } from 'crypto';
const randomID = () => {
  // TODO: use randomUUID when it's supported in all browsers
  // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID
  // Until then, use this fallback
  return (
    Date.now().toString(36) +
    Math.random().toString(36).substring(2, 15) +
    Math.random().toString(36).substring(2, 15)
  );
};

export const save = (storageKey: string, data: any[]) => {
  try {
    localStorage.setItem(storageKey, JSON.stringify(data));
    return get(storageKey);
  } catch (e) {
    return [];
  }
};

export const get = (storageKey: string) => {
  try {
    const data = localStorage.getItem(storageKey);
    if (data) return JSON.parse(data);
    return [];
  } catch (e) {
    // error parsing data, reset
    save(storageKey, []);
    return [];
  }
};

export const add = (storageKey: string, item: any) => {
  const data = get(storageKey);
  const newData = [
    {
      ...item,
      ckStoreKey: randomID(), // unique key to identify the item so we can remove it later
      timestamp: new Date(),
    },
    ...data,
  ];
  save(storageKey, newData);
  return get(storageKey);
};

export const remove = (storageKey: string, item: any) => {
  const data = get(storageKey);
  const newData = data.filter((i: any) => i.ckStoreKey !== item.ckStoreKey);
  save(storageKey, newData);
  return get(storageKey);
};

export const clear = (storageKey: string) => {
  save(storageKey, []);
  return get(storageKey);
};
</file>

<file path="packages/connectkit/src/utils/p3.ts">
import { css } from 'styled-components';

export const hexToP3 = (hex: string) => {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  if (result == null) return hex;
  const values = {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16),
  };
  return `color(display-p3 ${values.r / 255} ${values.g / 255} ${
    values.b / 255
  })`;
};

export const p3Hex = (hex: string, property: string) => {
  const isSafari = true;
  const p3 = hexToP3(hex);
  if (!p3 || !isSafari) {
    return css`
      ${property}: ${hex};
    `;
  } else {
    return css`
      ${property}: ${hex};
      ${property}: ${p3};
    `;
  }
};
</file>

<file path="packages/connectkit/src/utils/wallets.ts">
declare global {
  interface Window {
    trustWallet: any;
    trustwallet: any;
  }
}

export const isWalletInstalled = (name: string) => {
  if (typeof window === 'undefined') return false;
  const { ethereum } = window;
  return !!(
    ethereum?.[`is${name}`] ||
    (ethereum?.providers &&
      ethereum?.providers.find((provider) => provider?.[`is${name}`]))
  );
};

export const isMetaMask = () => isWalletInstalled('MetaMask');
export const isCoinbaseWallet = () => isWalletInstalled('CoinbaseWallet');
export const isFamily = () => isWalletInstalled('Family');
export const isBrave = () => isWalletInstalled('BraveWallet');
export const isTokenary = () => isWalletInstalled('Tokenary');
export const isDawn = () => isWalletInstalled('Dawn');
export const isFrame = () => isWalletInstalled('Frame');
export const isPhantom = () => isWalletInstalled('Phantom');
export const isInfinityWallet = () => isWalletInstalled('InfinityWallet');
export const isRabby = () => isWalletInstalled('Rabby');
export const isArgent = () => isWalletInstalled('Argent');
export const isFrontier = () => isWalletInstalled('Frontier');
export const isTrust = () => {
  if (typeof window === 'undefined') return false;
  return (
    isWalletInstalled('Trust') ||
    window?.trustWallet?.isTrust ||
    window?.trustwallet?.isTrust
  );
};
export const isTokenPocket = () => isWalletInstalled('TokenPocket');
export const isTalisman = () => isWalletInstalled('Talisman');
export const isFordefi = () => isWalletInstalled('Fordefi');
export const isRainbow = () => isWalletInstalled('Rainbow');
export const isZerion = () => isWalletInstalled('Zerion');
export const isSafe = () => isWalletInstalled('Safe');
</file>

<file path="packages/connectkit/src/wallets/index.ts">
import { CreateConnectorFn } from 'wagmi';
import { injected } from '@wagmi/connectors';

import { walletConfigs } from './walletConfigs';

type WalletIds = Extract<keyof typeof walletConfigs, string>;

export const wallets: {
  [key: WalletIds]: CreateConnectorFn;
} = Object.keys(walletConfigs).reduce((acc, key) => {
  const config = walletConfigs[key];
  if (!config?.getWalletConnectDeeplink) return acc;
  const target = key.split(',')[0].trim();
  const flag =
    config.name?.replace('Wallet', '').replace(' ', '') ??
    target[0].toUpperCase() + target.slice(1);

  const connector = injected({
    target: {
      id: target,
      name: config.name ?? config.shortName ?? key,
      provider: (w) => w?.ethereum?.[`is${flag}`],
    },
  });
  const name = (config.name ?? config.shortName ?? key)
    .toLowerCase()
    // capitalize first letter
    .replace(/(?:^|\s)\S/g, (a) => a.toUpperCase())
    // remove spaces
    .replace(/\s/g, '')
    // lowercase first letter
    .replace(/(?:^|\s)\S/g, (a) => a.toLowerCase());

  acc[name] = connector;
  return acc;
}, {});
</file>

<file path="packages/connectkit/src/wallets/useWallets.tsx">
import { Connector } from 'wagmi';

import { useConnectors } from '../hooks/useConnectors';
import { walletConfigs, WalletConfigProps } from './walletConfigs';
import { useContext } from '../components/ConnectKit';
import { isCoinbaseWalletConnector, isInjectedConnector } from '../utils';

export type WalletProps = {
  id: string;
  connector: Connector;
  isInstalled?: boolean;
} & WalletConfigProps;

export const useWallet = (id: string): WalletProps | null => {
  const wallets = useWallets();
  const wallet = wallets.find((c) => c.id === id);
  if (!wallet) return null;
  return wallet;
};
export const useWallets = (): WalletProps[] => {
  const connectors = useConnectors();
  const context = useContext();

  const wallets = connectors.map((connector): WalletProps => {
    // use overrides
    const walletId = Object.keys(walletConfigs).find(
      // where id is comma seperated list
      (id) =>
        id
          .split(',')
          .map((i) => i.trim())
          .indexOf(connector.id) !== -1
    );

    const c: WalletProps = {
      id: connector.id,
      name: connector.name ?? connector.id ?? connector.type,
      icon: (
        <img
          src={connector.icon}
          alt={connector.name}
          width={'100%'}
          height={'100%'}
        />
      ),
      connector,
      iconShape: 'squircle',
      isInstalled:
        connector.type === 'mock' ||
        (connector.type === 'injected' && connector.id !== 'metaMask') ||
        isCoinbaseWalletConnector(connector.id), // always run coinbase wallet SDK
    };

    if (walletId) {
      const wallet = walletConfigs[walletId];
      return {
        ...c,
        iconConnector: connector.icon ? (
          <img
            src={connector.icon}
            alt={connector.name}
            width={'100%'}
            height={'100%'}
          />
        ) : undefined,
        ...wallet,
      };
    }

    return c;
  });

  return (
    wallets
      // remove duplicate ids
      .filter(
        (wallet, index, self) =>
          self.findIndex((w) => w.id === wallet.id) === index
      )
      // Replace walletConnect's name with the one from options
      .map((wallet) => {
        if (wallet.id === 'walletConnect') {
          return {
            ...wallet,
            name: context.options?.walletConnectName || wallet.name,
            shortName: context.options?.walletConnectName || wallet.shortName,
          };
        }
        return wallet;
      })
      // remove wallet with id coinbaseWalletSDK if wallet with id 'com.coinbase.wallet' exists
      .filter(
        (wallet, index, self) =>
          !(
            wallet.id === 'coinbaseWalletSDK' &&
            self.find((w) => w.id === 'com.coinbase.wallet')
          )
      )
      // remove wallet with id io.metamask if wallet with id 'metaMask' exists
      .filter(
        (wallet, index, self) =>
          !(
            (wallet.id === 'metaMaskSDK' || wallet.id === 'metaMask') &&
            self.find(
              (w) => w.id === 'io.metamask' || w.id === 'io.metamask.mobile'
            )
          )
      )
      // order by isInstalled injected connectors first
      .sort((a, b) => {
        const AisInstalled =
          a.isInstalled && isInjectedConnector(a.connector.type);
        const BisInstalled =
          b.isInstalled && isInjectedConnector(b.connector.type);

        if (AisInstalled && !BisInstalled) return -1;
        if (!AisInstalled && BisInstalled) return 1;
        return 0;
      })
      // move walletConnect to the end
      .sort((a, b) => {
        if (a.id === 'walletConnect') return 1;
        if (b.id === 'walletConnect') return -1;
        return 0;
      })
  );
};
</file>

<file path="packages/connectkit/src/wallets/walletConfigs.tsx">
import Logos from '../assets/logos';
import { isAndroid } from '../utils';

/**
 * EIP-6963: Multi Injected Provider Discovery
 * https://eips.ethereum.org/EIPS/eip-6963
 *
 */
export type WalletConfigProps = {
  // Wallets name
  name?: string;
  // Wallets short name. Defaults to `name`
  shortName?: string;
  // Icon to display in the modal
  icon?: string | React.ReactNode;
  // Icon to use on the wallet list button. If not provided, `icon` will be used
  iconConnector?: React.ReactNode;
  // Defaults to `'circle'`, but some icons look better as squircle (e.g. if they have a background)
  iconShape?: 'squircle' | 'circle' | 'square';
  // Defaults to `false`, but some icons don't have a background and look better if they shrink to fit the container
  iconShouldShrink?: boolean;
  // Links to download the wallet
  downloadUrls?: {
    // Download redirect, hosted by Family.co
    // This URL redirects to the correct download URL based on the user's device
    // Note: this will eventually be automated by the below data
    download?: string;
    // wallet's website
    website?: string;
    // app downloads
    desktop?: string;
    android?: string;
    ios?: string;
    // browser extensions
    chrome?: string;
    firefox?: string;
    brave?: string;
    edge?: string;
    safari?: string;
  };
  // Create URI for QR code, where uri is encoded data from WalletConnect
  getWalletConnectDeeplink?: (uri: string) => string;
  shouldDeeplinkDesktop?: boolean;
};

// Organised in alphabetical order by key
export const walletConfigs: {
  [rdns: string]: WalletConfigProps; // for multiple cases seperate rdns by comma
} = {
  mock: {
    icon: <Logos.Mock />,
  },
  argent: {
    name: 'Argent',
    icon: <Logos.Argent />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/argent',
      android:
        'https://play.google.com/store/apps/details?id=im.argent.contractwalletclient',
      ios: 'https://apps.apple.com/app/argent/id1358741926',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `https://argent.link/app/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  'coinbaseWallet, coinbaseWalletSDK': {
    name: 'Coinbase Wallet',
    shortName: 'Coinbase',
    icon: <Logos.Coinbase background />,
    iconShape: 'squircle',
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/coinbasewallet',
      website: 'https://www.coinbase.com/wallet/getting-started-extension',
      android: 'https://play.google.com/store/apps/details?id=org.toshi',
      ios: 'https://apps.apple.com/app/coinbase-wallet-store-crypto/id1278383455',
      chrome:
        'https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return `https://go.cb-w.com/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  'com.coinbase.wallet': {
    name: 'Coinbase Wallet',
    shortName: 'Coinbase',
    icon: <Logos.Coinbase background />,
    iconShape: 'circle',
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/coinbasewallet',
      website: 'https://www.coinbase.com/wallet/getting-started-extension',
      android: 'https://play.google.com/store/apps/details?id=org.toshi',
      ios: 'https://apps.apple.com/app/coinbase-wallet-store-crypto/id1278383455',
      chrome:
        'https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return `https://go.cb-w.com/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  'com.crypto.wallet': {
    name: 'Crypto.com',
    shortName: 'Crypto',
  },
  dawn: {
    name: 'Dawn Wallet',
    shortName: 'Dawn',
    downloadUrls: {
      download:
        'https://apps.apple.com/us/app/dawn-ethereum-wallet/id1673143782',
      website: 'https://www.dawnwallet.xyz/',
      ios: 'https://apps.apple.com/us/app/dawn-ethereum-wallet/id1673143782',
    },
  },
  'co.family.wallet': {
    name: 'Family',
    shortName: 'Family',
    icon: <Logos.Family />,
    iconShape: 'squircle',
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/family',
      website: 'https://family.co',
      ios: 'https://family.co/download',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `familywallet://wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  familyAccountsProvider: {
    name: 'Family',
    shortName: 'Family',
    icon: <Logos.FamilyAccount />,
    iconConnector: <Logos.FamilyAccount />,
    iconShape: 'squircle',
  },
  frame: {
    name: 'Frame',
    icon: <Logos.Frame />,
    iconShouldShrink: true,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/frame',
      website: 'https://frame.sh',
      chrome:
        'https://chrome.google.com/webstore/detail/frame-companion/ldcoohedfbjoobcadoglnnmmfbdlmmhf',
      firefox: 'https://addons.mozilla.org/en-US/firefox/addon/frame-extension',
      brave:
        'https://chrome.google.com/webstore/detail/frame-companion/ldcoohedfbjoobcadoglnnmmfbdlmmhf',
    },
    getWalletConnectDeeplink: (uri: string) => uri,
  },
  frontier: {
    name: 'Frontier Wallet',
    shortName: 'Frontier',
    icon: <Logos.Frontier />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/frontier',
      ios: 'https://apps.apple.com/app/frontier-crypto-defi-wallet/id1482380988',
      android:
        'https://play.google.com/store/apps/details?id=com.frontierwallet',
      website: 'https://frontier.xyz/',
      chrome:
        'https://chrome.google.com/webstore/detail/frontier-wallet/kppfdiipphfccemcignhifpjkapfbihd',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid() ? uri : `frontier://wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  injected: {
    name: 'Browser Wallet',
    shortName: 'Browser',
    icon: <Logos.Injected />,
  },
  'metaMask, metaMask-io, io.metamask, io.metamask.mobile, metaMaskSDK': {
    name: 'MetaMask',
    icon: <Logos.MetaMask />,
    iconConnector: <Logos.MetaMask />,
    iconShouldShrink: true,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/metamask',
      website: 'https://metamask.io/download/',
      android: 'https://play.google.com/store/apps/details?id=io.metamask',
      ios: 'https://apps.apple.com/app/metamask/id1438144202',
      chrome:
        'https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn',
      firefox: 'https://addons.mozilla.org/firefox/addon/ether-metamask/',
      brave:
        'https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn',
      edge: 'https://microsoftedge.microsoft.com/addons/detail/metamask/ejbalbakoplchlghecdalmeeeajnimhm',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `https://metamask.app.link/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  'app.phantom': {
    name: 'Phantom',
    iconShape: 'squircle',
  },
  'me.rainbow': {
    name: 'Rainbow Wallet',
    shortName: 'Rainbow',
    icon: <Logos.Rainbow />,
    iconShape: 'squircle',
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/rainbow',
      website: 'https://rainbow.me/?utm_source=connectkit',
      android:
        'https://play.google.com/store/apps/details?id=me.rainbow&referrer=utm_source%3Dconnectkit&utm_source=connectkit',
      ios: 'https://apps.apple.com/app/rainbow-ethereum-wallet/id1457119021?pt=119997837&ct=connectkit&mt=8',
      chrome: 'https://rainbow.me/extension?utm_source=connectkit',
      edge: 'https://rainbow.me/extension?utm_source=connectkit',
      brave: 'https://rainbow.me/extension?utm_source=connectkit',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `https://rnbwapp.com/wc?uri=${encodeURIComponent(
            uri
          )}&connector=connectkit`;
    },
  },
  'io.rabby': {
    name: 'Rabby Wallet',
    shortName: 'Rabby',
    downloadUrls: {
      website: 'https://rabby.io',
      chrome:
        'https://chrome.google.com/webstore/detail/rabby-wallet/acmacodkjbdgmoleebolmdjonilkdbch',
    },
  },
  safe: {
    name: 'Safe',
    icon: <Logos.Safe />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/safe',
      website: 'https://safe.global/',
      ios: 'https://apps.apple.com/app/id1515759131',
      android: 'https://play.google.com/store/apps/details?id=io.gnosis.safe',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `https://gnosis-safe.io/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  'xyz.talisman': {
    name: 'Talisman',
    shortName: 'Talisman',
    iconShape: 'squircle',
    downloadUrls: {
      download: 'https://talisman.xyz/download',
      website: 'https://talisman.xyz',
      chrome:
        'https://chrome.google.com/webstore/detail/talisman-polkadot-wallet/fijngjgcjhjmmpcmkeiomlglpeiijkld',
      firefox:
        'https://addons.mozilla.org/en-US/firefox/addon/talisman-wallet-extension/',
    },
  },
  'com.trustwallet.app': {
    name: 'Trust Wallet',
    shortName: 'Trust',
    icon: <Logos.Trust />,
    iconShouldShrink: true,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/trust',
      android:
        'https://play.google.com/store/apps/details?id=com.wallet.crypto.trustapp',
      ios: 'https://apps.apple.com/app/trust-crypto-bitcoin-wallet/id1288339409',
    },
    getWalletConnectDeeplink(uri) {
      return isAndroid()
        ? uri
        : `https://link.trustwallet.com/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  infinityWallet: {
    name: 'Infinity Wallet',
    icon: <Logos.InfinityWallet />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/infinityWallet',
      website: 'https://infinitywallet.io/download',
      chrome: 'https://infinitywallet.io/download',
      firefox: 'https://infinitywallet.io/download',
      brave: 'https://infinitywallet.io/download',
      edge: 'https://infinitywallet.io/download',
    },
  },
  imToken: {
    name: 'imToken',
    icon: <Logos.ImToken />,
    downloadUrls: {
      //website: 'https://support.token.im/hc/en-us/categories/360000925393',
      download: 'https://connect.family.co/v0/download/imToken',
      android: 'https://play.google.com/store/apps/details?id=im.token.app',
      ios: 'https://itunes.apple.com/us/app/imtoken2/id1384798940',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return `imtokenv2://wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  unstoppable: {
    name: 'Unstoppable',
    icon: <Logos.Unstoppable />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/unstoppable',
      ios: 'https://apps.apple.com/app/bank-bitcoin-wallet/id1447619907',
      android:
        'https://play.google.com/store/apps/details?id=io.horizontalsystems.bankwallet',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `https://unstoppable.money/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  onto: {
    name: 'ONTO',
    icon: <Logos.ONTO />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/onto',
      ios: 'https://apps.apple.com/app/onto-an-ontology-dapp/id1436009823',
      android:
        'https://play.google.com/store/apps/details?id=com.github.ontio.onto',
      website: 'https://onto.app/en/download/',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `https://onto.app/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  steak: {
    name: 'Steak',
    icon: <Logos.Steak />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/steak',
      android:
        'https://play.google.com/store/apps/details?id=fi.steakwallet.app',
      ios: 'https://apps.apple.com/app/steakwallet/id1569375204',
      website: 'https://steakwallet.fi/download',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `https://links.steakwallet.fi/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  ledger: {
    name: 'Ledger Live',
    shortName: 'Ledger',
    icon: <Logos.Ledger />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/ledger',
      website: 'https://www.ledger.com/ledger-live/download#download-device-2',
      android: 'https://play.google.com/store/apps/details?id=com.ledger.live',
      ios: 'https://apps.apple.com/app/ledger-live-web3-wallet/id1361671700',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `ledgerlive://wc?uri=${encodeURIComponent(uri)}`;
    },
    shouldDeeplinkDesktop: true,
  },
  zerion: {
    name: 'Zerion',
    icon: <Logos.Zerion />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/zerion',
      ios: 'https://apps.apple.com/app/apple-store/id1456732565',
      android:
        'https://play.google.com/store/apps/details?id=io.zerion.android',
      website: 'https://zerion.io/',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `https://app.zerion.io/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  slope: {
    name: 'Slope',
    icon: <Logos.Slope />,
    downloadUrls: {
      download: 'https://connect.family.co/v0/download/slope',
      ios: 'https://apps.apple.com/app/slope-wallet/id1574624530',
      android: 'https://play.google.com/store/apps/details?id=com.wd.wallet',
      chrome:
        'https://chrome.google.com/webstore/detail/slope-wallet/pocmplpaccanhmnllbbkpgfliimjljgo',
      website: 'https://slope.finance/',
    },
    getWalletConnectDeeplink: (uri: string) => {
      return isAndroid()
        ? uri
        : `https://slope.finance/app/wc?uri=${encodeURIComponent(uri)}`;
    },
  },
  tokenPocket: {
    name: 'TokenPocket Wallet',
    icon: <Logos.TokenPocket />,
    downloadUrls: {
      website: 'https://www.tokenpocket.pro/en/download/app',
      download: 'https://www.tokenpocket.pro/en/download/app',
      android:
        'https://play.google.com/store/apps/details?id=vip.mytokenpocket',
      ios: 'https://apps.apple.com/us/app/tp-global-wallet/id6444625622',
      chrome:
        'https://chrome.google.com/webstore/detail/tokenpocket/mfgccjchihfkkindfppnaooecgfneiii',
    },
  },
  talisman: {
    name: 'Talisman',
    icon: <Logos.Talisman />,
    downloadUrls: {
      download: 'https://talisman.xyz/download',
      website: 'https://talisman.xyz',
      chrome:
        'https://chrome.google.com/webstore/detail/talisman-polkadot-wallet/fijngjgcjhjmmpcmkeiomlglpeiijkld',
      firefox:
        'https://addons.mozilla.org/en-US/firefox/addon/talisman-wallet-extension/',
    },
  },
  walletConnect: {
    name: 'Other Wallets',
    shortName: 'Other',
    icon: <Logos.WalletConnect background />,
    iconConnector: <Logos.OtherWallets />,
    iconShape: 'square',
    getWalletConnectDeeplink: (uri: string) => uri,
  },
} as const;
</file>

<file path="packages/connectkit/src/defaultConfig.ts">
import { http } from 'wagmi';
import { type CreateConfigParameters } from '@wagmi/core';
import { mainnet, polygon, optimism, arbitrum } from 'wagmi/chains';
import { CoinbaseWalletParameters } from 'wagmi/connectors';
import { EthereumProviderOptions as FamilyOptions } from 'family';

import defaultConnectors from './defaultConnectors';

// TODO: Move these to a provider rather than global variable
let globalAppName: string;
let globalAppIcon: string;
export const getAppName = () => globalAppName;
export const getAppIcon = () => globalAppIcon;

type DefaultConfigProps = {
  appName: string;
  appIcon?: string;
  appDescription?: string;
  appUrl?: string;

  // WC 2.0 requires a project ID (get one here: https://cloud.walletconnect.com/sign-in)
  walletConnectProjectId: string;
  // Coinbase Wallet preference
  coinbaseWalletPreference?: CoinbaseWalletParameters<'4'>['preference'];
  // Family options (https://app.family.co)
  enableFamily?: boolean;
  familyOptions?: FamilyOptions;
} & Partial<CreateConfigParameters>;

const defaultConfig = ({
  appName = 'ConnectKit',
  appIcon,
  appDescription,
  appUrl,
  walletConnectProjectId,
  coinbaseWalletPreference,
  chains = [mainnet, polygon, optimism, arbitrum],
  client,
  enableFamily = true,
  familyOptions,
  ...props
}: DefaultConfigProps): CreateConfigParameters => {
  globalAppName = appName;
  if (appIcon) globalAppIcon = appIcon;

  // TODO: nice to have, automate transports based on chains, but for now just provide public if not provided
  const transports: CreateConfigParameters['transports'] =
    props?.transports ??
    Object.fromEntries(chains.map((chain) => [chain.id, http()]));

  const connectors: CreateConfigParameters['connectors'] =
    props?.connectors ??
    defaultConnectors({
      app: {
        name: appName,
        icon: appIcon,
        description: appDescription,
        url: appUrl,
      },
      walletConnectProjectId,
      coinbaseWalletPreference,
      enableFamily,
      familyOptions,
    });

  const config: CreateConfigParameters<any, any> = {
    ...props,
    chains,
    connectors,
    transports,
  };

  return config;
};

export default defaultConfig;
</file>

<file path="packages/connectkit/src/defaultConnectors.ts">
import { CreateConnectorFn } from 'wagmi';
import {
  injected,
  walletConnect,
  coinbaseWallet,
  CoinbaseWalletParameters,
  safe,
} from '@wagmi/connectors';

import {
  EthereumProviderOptions as FamilyOptions,
  familyAccountsConnector,
} from 'family';

type DefaultConnectorsProps = {
  app: {
    name: string;
    icon?: string;
    description?: string;
    url?: string;
  };
  walletConnectProjectId?: string;
  coinbaseWalletPreference?: CoinbaseWalletParameters<'4'>['preference'];
  enableFamily?: boolean;
  familyOptions?: FamilyOptions;
};

const defaultConnectors = ({
  app,
  walletConnectProjectId,
  coinbaseWalletPreference,
  enableFamily,
  familyOptions,
}: DefaultConnectorsProps): CreateConnectorFn[] => {
  const hasAllAppData = app.name && app.icon && app.description && app.url;
  const shouldUseSafeConnector =
    !(typeof window === 'undefined') && window?.parent !== window;

  const connectors: CreateConnectorFn[] = enableFamily
    ? [familyAccountsConnector(familyOptions)]
    : [];

  // If we're in an iframe, include the SafeConnector
  if (shouldUseSafeConnector) {
    connectors.push(
      safe({
        allowedDomains: [/gnosis-safe.io$/, /app.safe.global$/],
      })
    );
  }

  // Add the rest of the connectors
  connectors.push(
    injected({ target: 'metaMask' }),
    coinbaseWallet({
      appName: app.name,
      appLogoUrl: app.icon,
      overrideIsMetaMask: false,
      preference: coinbaseWalletPreference,
    })
  );

  if (walletConnectProjectId) {
    connectors.push(
      walletConnect({
        showQrModal: false,
        projectId: walletConnectProjectId,
        metadata: hasAllAppData
          ? {
              name: app.name,
              description: app.description!,
              url: app.url!,
              icons: [app.icon!],
            }
          : undefined,
      })
    );
  }
  /*
  connectors.push(
    injected({
      shimDisconnect: true,
    })
  );
  */

  return connectors;
};

export default defaultConnectors;
</file>

<file path="packages/connectkit/src/defaultTransports.ts">
/**
 * TODO: Automate transports based on configured chains
 *
 * Developers using this causes loss of granular control over a dapps transports,
 * but for simple use cases, it's nice to have and saves a lot of boilerplate.
 *
 */

import { fallback, http, webSocket } from 'wagmi';
import { type CreateConfigParameters } from '@wagmi/core';
import { type Chain, mainnet, polygon, optimism, arbitrum } from 'wagmi/chains';
import { type HttpTransport, type WebSocketTransport } from 'viem';

import { chainConfigs } from './constants/chainConfigs';

const createTransport = ({
  chain,
  provider = 'public',
  apiKey,
}: {
  chain: Chain;
  provider: 'alchemy' | 'infura' | 'public';
  apiKey: string;
}): HttpTransport | WebSocketTransport => {
  const supportedChain = chainConfigs.find((c) => c.id === chain.id);
  if (supportedChain?.rpcUrls) {
    if (provider === 'alchemy') {
      if (supportedChain.rpcUrls?.alchemy?.http) {
        return http(supportedChain.rpcUrls?.alchemy?.http + apiKey);
      } else {
        return webSocket(supportedChain.rpcUrls?.alchemy?.webSocket + apiKey);
      }
    } else if (provider === 'infura') {
      if (supportedChain.rpcUrls?.infura?.http) {
        return http(supportedChain.rpcUrls?.infura?.http + apiKey);
      } else {
        return webSocket(supportedChain.rpcUrls?.infura?.webSocket + apiKey);
      }
    }
  }
  return http();
};

type GetDefaultTransportsProps = {
  chains?: CreateConfigParameters['chains'];
  alchemyId?: string;
  infuraId?: string;
};

export const getDefaultTransports = ({
  chains = [mainnet, polygon, optimism, arbitrum],
  alchemyId,
  infuraId,
}: GetDefaultTransportsProps): CreateConfigParameters['transports'] => {
  const transports: CreateConfigParameters['transports'] = {};
  Object.keys(chains).forEach((key, index) => {
    const chain = chains[index];
    const urls: (HttpTransport | WebSocketTransport)[] = [];
    if (alchemyId)
      urls.push(
        createTransport({ chain, provider: 'alchemy', apiKey: alchemyId })
      );
    if (infuraId)
      urls.push(
        createTransport({ chain, provider: 'infura', apiKey: infuraId })
      );

    urls.push(http());

    transports[chain.id] = fallback(urls);
  });

  return transports;
};
</file>

<file path="packages/connectkit/src/index.ts">
export const CONNECTKIT_VERSION = '1.9.0';

export * as Types from './types';
export { default as getDefaultConfig } from './defaultConfig';
export { default as getDefaultConnectors } from './defaultConnectors';
export { wallets } from './wallets';

export { useModal } from './hooks/useModal';
export {
  SIWEProvider,
  useSIWE,
  SIWE_NONCE_QUERY_KEY,
  SIWE_SESSION_QUERY_KEY,
} from './siwe';
export type { SIWESession, SIWEConfig } from './siwe';

export { ConnectKitProvider, Context } from './components/ConnectKit';
export { ConnectKitButton } from './components/ConnectButton';
export { default as SIWEButton } from './components/Standard/SIWE';

//export { default as NetworkButton } from './components/NetworkButton';
//export { default as BalanceButton, Balance } from './components/BalanceButton';
export { default as Avatar } from './components/Common/Avatar';
export { default as ChainIcon } from './components/Common/Chain';

// Hooks
export { default as useIsMounted } from './hooks/useIsMounted'; // Useful for apps that use SSR
export { useChains } from './hooks/useChains';
export { useChainIsSupported } from './hooks/useChainIsSupported';

// TODO: Make this private
export { default as ConnectKitModalDemo } from './components/ConnectModal/demo';
</file>

<file path="packages/connectkit/src/types.ts">
import { Languages as Lang } from './localizations';
export type Languages = Lang;

export type Theme =
  | 'auto'
  | 'web95'
  | 'retro'
  | 'soft'
  | 'midnight'
  | 'minimal'
  | 'rounded'
  | 'nouns';
export type Mode = 'light' | 'dark' | 'auto';
export type CustomTheme = any; // TODO: define type

export type All = {
  theme?: Theme;
  mode?: Mode;
  customTheme?: CustomTheme;
  lang?: Languages;
};

export type { ConnectKitOptions } from './components/ConnectKit';
export type { CustomAvatarProps } from './components/Common/Avatar';
</file>

<file path="packages/connectkit/package.json">
{
  "name": "connectkit",
  "version": "1.9.0",
  "author": "Family",
  "homepage": "https://docs.family.co/connectkit",
  "license": "BSD-2-Clause license",
  "description": "Connecting a wallet, made simple.",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/family/connectkit.git",
    "directory": "packages/connectkit"
  },
  "type": "module",
  "exports": {
    "import": "./build/index.es.js",
    "types": "./build/index.d.ts"
  },
  "types": "./build/index.d.ts",
  "engines": {
    "node": ">=12.4"
  },
  "files": [
    "build",
    "README.md"
  ],
  "scripts": {
    "start": "rollup --config rollup.config.dev.js -w",
    "dev": "rollup --config rollup.config.dev.js -w",
    "build": "rollup --config rollup.config.prod.js",
    "lint": "eslint src --ext .ts"
  },
  "keywords": [
    "ens",
    "react-hook",
    "blockchain",
    "hooks",
    "family",
    "ethereum",
    "react"
  ],
  "dependencies": {
    "buffer": "^6.0.3",
    "detect-browser": "^5.3.0",
    "family": "^0.1.1",
    "framer-motion": "^6.3.11",
    "qrcode": "^1.5.0",
    "react-transition-state": "^1.1.4",
    "react-use-measure": "^2.1.1",
    "resize-observer-polyfill": "^1.5.1",
    "styled-components": "^5.3.5"
  },
  "peerDependencies": {
    "@tanstack/react-query": ">=5.0.0",
    "react": "17.x || 18.x",
    "react-dom": "17.x || 18.x",
    "viem": "2.x",
    "wagmi": "2.x"
  },
  "devDependencies": {
    "@types/node": "18.7.18",
    "@types/qrcode": "^1.4.2",
    "@types/react": "^18.0.6",
    "@types/react-dom": "^18.0.2",
    "@types/styled-components": "^5.1.25",
    "typescript": "^5.0.4"
  },
  "resolutions": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "viem": "^2.23.2",
    "wagmi": "^2.14.11"
  }
}
</file>

<file path="packages/connectkit/rollup.config.dev.js">
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import typescript from 'rollup-plugin-typescript2';
import createStyledComponentsTransformer from 'typescript-plugin-styled-components';
import packageJson from './package.json';

const styledComponentsTransformer = createStyledComponentsTransformer({
  displayName: true,
});

export default [
  {
    input: ['./src/index.ts'],
    external: ['react', 'react-dom', 'framer-motion', 'wagmi'],
    output: [
      {
        file: packageJson.exports.import,
        format: 'esm',
        sourcemap: false,
      },
    ],
    plugins: [
      peerDepsExternal(),
      typescript({
        useTsconfigDeclarationDir: true,
        exclude: 'node_modules/**',
        transformers: [
          () => ({
            before: [styledComponentsTransformer],
          }),
        ],
      }),
    ],
  },
];
</file>

<file path="packages/connectkit/rollup.config.prod.js">
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import typescript from 'rollup-plugin-typescript2';

import packageJson from './package.json';

export default [
  {
    input: ['./src/index.ts'],
    external: ['react', 'react-dom', 'framer-motion', 'wagmi'],
    output: {
      file: packageJson.exports.import,
      format: 'esm',
      sourcemap: true,
    },
    plugins: [
      peerDepsExternal(),
      typescript({
        useTsconfigDeclarationDir: true,
        exclude: 'node_modules/**',
      }),
    ],
  },
];
</file>

<file path="packages/connectkit/tsconfig.json">
{
  "compilerOptions": {
    "strict": true,
    "composite": true,
    "rootDir": "src",
    "outDir": "build",
    "declaration": true,
    "declarationDir": "build",
    "module": "ESNext",
    "moduleResolution": "node",
    "target": "ES2019",
    "lib": ["es6", "dom", "es2016", "es2017", "es2021"],
    "sourceMap": false,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "noImplicitAny": false,
    "jsx": "react-jsx",
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "build", "src/**/*.test.tsx?"],
  "watchOptions": {
    "watchFile": "useFsEvents",
    "watchDirectory": "useFsEvents",
    "fallbackPolling": "dynamicPriority",
    "synchronousWatchDirectory": true,
    "excludeDirectories": ["../node_modules", "build"]
  }
}
</file>

<file path="packages/connectkit-next-siwe/src/configureSIWE.tsx">
import { FunctionComponent, ComponentProps } from 'react';
import { SIWEProvider } from 'connectkit';
import type { IncomingMessage, ServerResponse } from 'http';
import { getIronSession, IronSession, IronSessionOptions } from 'iron-session';
import { NextApiHandler, NextApiRequest, NextApiResponse } from 'next';

import { Chain, Transport, PublicClient, createPublicClient, http } from 'viem';
import * as allChains from 'viem/chains';
import {
  generateSiweNonce,
  createSiweMessage,
  parseSiweMessage,
} from 'viem/siwe';

type RouteHandlerOptions = {
  afterNonce?: (
    req: NextApiRequest,
    res: NextApiResponse,
    session: NextSIWESession<{}>
  ) => Promise<void>;
  afterVerify?: (
    req: NextApiRequest,
    res: NextApiResponse,
    session: NextSIWESession<{}>
  ) => Promise<void>;
  afterSession?: (
    req: NextApiRequest,
    res: NextApiResponse,
    session: NextSIWESession<{}>
  ) => Promise<void>;
  afterLogout?: (req: NextApiRequest, res: NextApiResponse) => Promise<void>;
};

type NextServerSIWEConfig = {
  config?: {
    chains: readonly [Chain, ...Chain[]];
    transports?: Record<number, Transport>;
  };
  session?: Partial<IronSessionOptions>;
  options?: RouteHandlerOptions;
};

type NextClientSIWEConfig = {
  apiRoutePrefix: string;
  statement?: string;
};

type NextSIWESession<TSessionData extends Object = {}> = IronSession &
  TSessionData & {
    nonce?: string;
    address?: string;
    chainId?: number;
  };

type NextSIWEProviderProps = Omit<
  ComponentProps<typeof SIWEProvider>,
  | 'getNonce'
  | 'createMessage'
  | 'verifyMessage'
  | 'getSession'
  | 'signOut'
  | 'data'
  | 'signIn'
  | 'status'
  | 'resetStatus'
>;

type ConfigureServerSIWEResult<TSessionData extends Object = {}> = {
  apiRouteHandler: NextApiHandler;
  getSession: (
    req: IncomingMessage,
    res: ServerResponse
  ) => Promise<NextSIWESession<TSessionData>>;
};

type ConfigureClientSIWEResult<TSessionData extends Object = {}> = {
  Provider: FunctionComponent<NextSIWEProviderProps>;
};

const getSession = async <TSessionData extends Object = {}>(
  req: IncomingMessage,
  res: any, // ServerResponse<IncomingMessage>,
  sessionConfig: IronSessionOptions
) => {
  const session = (await getIronSession(
    req,
    res,
    sessionConfig
  )) as NextSIWESession<TSessionData>;
  return session;
};

const logoutRoute = async (
  req: NextApiRequest,
  res: NextApiResponse<void>,
  sessionConfig: IronSessionOptions,
  afterCallback?: RouteHandlerOptions['afterLogout']
) => {
  switch (req.method) {
    case 'GET':
      const session = await getSession(req, res, sessionConfig);
      session.destroy();
      if (afterCallback) {
        await afterCallback(req, res);
      }
      res.status(200).end();
      break;
    default:
      res.setHeader('Allow', ['GET']);
      res.status(405).end(`Method ${req.method} Not Allowed`);
  }
};

const nonceRoute = async (
  req: NextApiRequest,
  res: NextApiResponse<string>,
  sessionConfig: IronSessionOptions,
  afterCallback?: RouteHandlerOptions['afterNonce']
) => {
  switch (req.method) {
    case 'GET':
      const session = await getSession(req, res, sessionConfig);
      if (!session.nonce) {
        session.nonce = generateSiweNonce();
        await session.save();
      }
      if (afterCallback) {
        await afterCallback(req, res, session);
      }
      res.send(session.nonce);
      break;
    default:
      res.setHeader('Allow', ['GET']);
      res.status(405).end(`Method ${req.method} Not Allowed`);
  }
};

const sessionRoute = async (
  req: NextApiRequest,
  res: NextApiResponse<{ address?: string; chainId?: number }>,
  sessionConfig: IronSessionOptions,
  afterCallback?: RouteHandlerOptions['afterSession']
) => {
  switch (req.method) {
    case 'GET':
      const session = await getSession(req, res, sessionConfig);
      if (afterCallback) {
        await afterCallback(req, res, session);
      }
      const { address, chainId } = session;
      res.send({ address, chainId });
      break;
    default:
      res.setHeader('Allow', ['GET']);
      res.status(405).end(`Method ${req.method} Not Allowed`);
  }
};

const verifyRoute = async (
  req: NextApiRequest,
  res: NextApiResponse<void>,
  sessionConfig: IronSessionOptions,
  config?: NextServerSIWEConfig['config'],
  afterCallback?: RouteHandlerOptions['afterVerify']
) => {
  switch (req.method) {
    case 'POST':
      try {
        const session = await getSession(req, res, sessionConfig);
        const { message, signature } = req.body as {
          message: string;
          signature: `0x${string}`;
        };

        const parsed = parseSiweMessage(message);
        if (parsed.nonce !== session.nonce) {
          return res.status(422).end('Invalid nonce.');
        }

        let chain = config?.chains
          ? Object.values(config.chains).find((c) => c.id === parsed.chainId)
          : undefined;
        if (!chain) {
          // Try to find chain from allChains if not found in user-provided chains
          chain = Object.values(allChains).find((c) => c.id === parsed.chainId);
        }
        if (!chain) {
          throw new Error('Chain not found.');
        }

        const publicClient: PublicClient = createPublicClient({
          chain,
          transport: http(),
        });

        const verified = await publicClient.verifySiweMessage({
          message,
          signature,
          nonce: session.nonce,
        });
        if (!verified) {
          return res.status(422).end('Unable to verify signature.');
        }

        session.address = parsed.address;
        session.chainId = parsed.chainId;
        await session.save();
        if (afterCallback) {
          await afterCallback(req, res, session);
        }
        res.status(200).end();
      } catch (error) {
        res.status(400).end(String(error));
      }
      break;
    default:
      res.setHeader('Allow', ['POST']);
      res.status(405).end(`Method ${req.method} Not Allowed`);
  }
};

const envVar = (name: string) => {
  const value = process.env[name];
  if (!value) {
    throw new Error(`Missing environment variable: ${name}`);
  }
  return value;
};

export const configureServerSideSIWE = <TSessionData extends Object = {}>({
  config,
  session: { cookieName, password, cookieOptions, ...otherSessionOptions } = {},
  options: { afterNonce, afterVerify, afterSession, afterLogout } = {},
}: NextServerSIWEConfig): ConfigureServerSIWEResult<TSessionData> => {
  const sessionConfig: IronSessionOptions = {
    cookieName: cookieName ?? 'connectkit-next-siwe',
    password: password ?? envVar('SESSION_SECRET'),
    cookieOptions: {
      secure: process.env.NODE_ENV === 'production',
      ...(cookieOptions ?? {}),
    },
    ...otherSessionOptions,
  };

  const apiRouteHandler: NextApiHandler = async (req, res) => {
    if (!(req.query.route instanceof Array)) {
      throw new Error(
        'Catch-all query param `route` not found. SIWE API page should be named `[...route].ts` and within your `pages/api` directory.'
      );
    }

    const route = req.query.route.join('/');
    switch (route) {
      case 'nonce':
        return await nonceRoute(req, res, sessionConfig, afterNonce);
      case 'verify':
        return await verifyRoute(req, res, sessionConfig, config, afterVerify);
      case 'session':
        return await sessionRoute(req, res, sessionConfig, afterSession);
      case 'logout':
        return await logoutRoute(req, res, sessionConfig, afterLogout);
      default:
        return res.status(404).end();
    }
  };

  return {
    apiRouteHandler,
    getSession: async (req: IncomingMessage, res: ServerResponse) =>
      await getSession<TSessionData>(req, res, sessionConfig),
  };
};

export const configureClientSIWE = <TSessionData extends Object = {}>({
  apiRoutePrefix,
  statement = 'Sign In With Ethereum.',
}: NextClientSIWEConfig): ConfigureClientSIWEResult<TSessionData> => {
  const NextSIWEProvider = (props: NextSIWEProviderProps) => {
    return (
      <SIWEProvider
        getNonce={async () => {
          const res = await fetch(`${apiRoutePrefix}/nonce`);
          if (!res.ok) {
            throw new Error('Failed to fetch SIWE nonce');
          }
          const nonce = await res.text();
          return nonce;
        }}
        createMessage={({ nonce, address, chainId }) =>
          createSiweMessage({
            version: '1',
            domain: window.location.host,
            uri: window.location.origin,
            address,
            chainId,
            nonce,
            statement,
          })
        }
        verifyMessage={({ message, signature }) =>
          fetch(`${apiRoutePrefix}/verify`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message, signature }),
          }).then((res) => res.ok)
        }
        getSession={async () => {
          const res = await fetch(`${apiRoutePrefix}/session`);
          if (!res.ok) {
            throw new Error('Failed to fetch SIWE session');
          }
          const { address, chainId } = await res.json();
          return address && chainId ? { address, chainId } : null;
        }}
        signOut={() => fetch(`${apiRoutePrefix}/logout`).then((res) => res.ok)}
        {...props}
      />
    );
  };

  return {
    Provider: NextSIWEProvider,
  };
};
</file>

<file path="packages/connectkit-next-siwe/src/index.ts">
export { configureClientSIWE, configureServerSideSIWE } from './configureSIWE';
</file>

<file path="packages/connectkit-next-siwe/package.json">
{
  "name": "connectkit-next-siwe",
  "version": "0.3.0",
  "author": "Family",
  "homepage": "https://docs.family.co/connectkit",
  "license": "BSD-2-Clause license",
  "description": "Connecting a wallet, made simple.",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/family/connectkit.git",
    "directory": "packages/connectkit-next-siwe"
  },
  "type": "module",
  "exports": "./build/index.es.js",
  "types": "./build/index.d.ts",
  "engines": {
    "node": ">=12.4"
  },
  "files": [
    "build",
    "README.md"
  ],
  "scripts": {
    "start": "rollup --config rollup.config.dev.js -w",
    "dev": "rollup --config rollup.config.dev.js -w",
    "build": "rollup --config rollup.config.prod.js",
    "lint": "eslint src --ext .ts"
  },
  "keywords": [
    "ens",
    "react-hook",
    "blockchain",
    "hooks",
    "family",
    "ethereum",
    "react"
  ],
  "dependencies": {
    "iron-session": "^6.2.1",
    "viem": "^2.23.2"
  },
  "peerDependencies": {
    "connectkit": ">=1.2.0",
    "next": ">=12.x",
    "react": "17.x || 18.x",
    "react-dom": "17.x || 18.x",
    "viem": ">=2.13.3"
  },
  "devDependencies": {
    "@types/node": "^16.11.27",
    "@types/react": "^18.0.6",
    "@types/react-dom": "^18.0.2",
    "typescript": "^4.9.5"
  }
}
</file>

<file path="packages/connectkit-next-siwe/README.md">
# connectkit-next-siwe

[ConnectKit](https://docs.family.co/connectkit) provides a simple solution for integrating [Sign In With Ethereum](https://login.xyz), a secure [authentication standard](https://docs.login.xyz/general-information/siwe-overview/eip-4361), to your Next.js app.

## 1. Install

Once you've <a href={routes.ConnectKit.GettingStarted}>set up ConnectKit</a>, install the official [Sign In With Ethereum package](https://www.npmjs.com/package/siwe) and our SIWE helper package to your Next.js project.

```
yarn add siwe connectkit-next-siwe
```

## 2. Configure

You can find the full configuration documentation for this package in the Family docs [here](https://docs.family.co/connectkit/auth-with-nextjs).

## Contribute

Before starting on anything, please have a read through our [Contribution Guidelines](https://github.com/family/connectkit/blob/main/CONTRIBUTING.md).

## Twitter

Follow [@family](https://twitter.com/family) on Twitter for the latest updates on ConnectKit.

## License

See [LICENSE](https://github.com/family/connectkit/blob/main/LICENSE) for more information.
</file>

<file path="packages/connectkit-next-siwe/rollup.config.dev.js">
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import typescript from 'rollup-plugin-typescript2';

import packageJson from './package.json';

export default [
  {
    input: ['./src/index.ts'],
    external: ['react', 'react-dom', 'framer-motion', 'wagmi'],
    output: {
      file: packageJson.exports,
      format: 'esm',
      sourcemap: false,
    },
    plugins: [peerDepsExternal(), typescript()],
  },
];
</file>

<file path="packages/connectkit-next-siwe/rollup.config.prod.js">
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import typescript from 'rollup-plugin-typescript2';

import packageJson from './package.json';

export default [
  {
    input: ['./src/index.ts'],
    external: ['react', 'react-dom', 'framer-motion', 'wagmi'],
    output: {
      file: packageJson.exports,
      format: 'esm',
      sourcemap: true,
    },
    plugins: [
      peerDepsExternal(),
      typescript({
        useTsconfigDeclarationDir: true,
        exclude: 'node_modules/**',
      }),
    ],
  },
];
</file>

<file path="packages/connectkit-next-siwe/tsconfig.json">
{
  "compilerOptions": {
    "strict": true,
    "composite": true,
    "rootDir": "src",
    "outDir": "build",
    "declaration": true,
    "declarationDir": "build",
    "module": "ESNext",
    "moduleResolution": "node",
    "target": "ES2019",
    "lib": ["es6", "dom", "es2016", "es2017", "es2021"],
    "sourceMap": false,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "noImplicitAny": false,
    "jsx": "react-jsx",
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "build", "src/**/*.test.tsx?"],
  "watchOptions": {
    "watchFile": "useFsEvents",
    "watchDirectory": "useFsEvents",
    "fallbackPolling": "dynamicPriority",
    "synchronousWatchDirectory": true,
    "excludeDirectories": ["../node_modules", "build"]
  }
}
</file>

<file path="packages/cra-template/template/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="packages/cra-template/template/public/manifest.json">
{
    "short_name": "React App",
    "name": "Create React App Sample",
    "icons": [
      {
        "src": "favicon.ico",
        "sizes": "64x64 32x32 24x24 16x16",
        "type": "image/x-icon"
      },
      {
        "src": "logo192.png",
        "type": "image/png",
        "sizes": "192x192"
      },
      {
        "src": "logo512.png",
        "type": "image/png",
        "sizes": "512x512"
      }
    ],
    "start_url": ".",
    "display": "standalone",
    "theme_color": "#000000",
    "background_color": "#ffffff"
  }
</file>

<file path="packages/cra-template/template/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="packages/cra-template/template/src/App.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/Connect Wallet/i);
  expect(linkElement).toBeInTheDocument();
});
</file>

<file path="packages/cra-template/template/src/App.tsx">
import { ConnectKitButton } from 'connectkit';

function App() {
  return (
    <div
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
      }}
    >
      <ConnectKitButton />
    </div>
  );
}

export default App;
</file>

<file path="packages/cra-template/template/src/index.tsx">
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import reportWebVitals from './reportWebVitals';

import { WagmiProvider, createConfig } from 'wagmi';
import { ConnectKitProvider, getDefaultConfig } from 'connectkit';

const config = createConfig(
  getDefaultConfig({
    appName: 'My App Name',
    walletConnectProjectId: process.env.REACT_APP_WALLETCONNECT_PROJECT_ID!,
  })
);

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <WagmiProvider config={config}>
      <ConnectKitProvider theme="auto">
        <App />
      </ConnectKitProvider>
    </WagmiProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="packages/cra-template/template/src/reportWebVitals.ts">
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="packages/cra-template/template/src/setupTests.ts">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path="packages/cra-template/template/.env.example">
REACT_APP_ALCHEMY_ID=
REACT_APP_INFURA_ID=
REACT_APP_WALLETCONNECT_PROJECT_ID=
</file>

<file path="packages/cra-template/template/gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="packages/cra-template/package.json">
{
  "name": "cra-template-connectkit",
  "version": "0.0.1",
  "author": "Family",
  "homepage": "https://docs.family.co/connectkit",
  "keywords": [
    "react",
    "create-react-app",
    "template",
    "typescript",
    "connectkit"
  ],
  "description": "ConnectKit + TypeScript template for Create React App.",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/family/connectkit.git",
    "directory": "packages/cra-template"
  },
  "license": "MIT",
  "engines": {
    "node": ">=14"
  },
  "bugs": {
    "url": "https://github.com/family/connectkit/issues"
  },
  "files": [
    "template",
    "template.json"
  ]
}
</file>

<file path="packages/cra-template/README.md">
# [Create React App Template](https://reactjs.org/docs/create-a-new-react-app.html) + ConnectKit

This is a simple ConnectKit + [Create React App (TypeScript)](https://reactjs.org/docs/create-a-new-react-app.html) template. Get started quickly by simply running:

#### npm

```sh
npx create-react-app my-app --template cra-template-connectkit
```

#### yarn

```sh
yarn create react-app my-app --template cra-template-connectkit
```

#### pnpm

```sh
pnpm dlx create-react-app ./my-app --template cra-template-connectkit
```
---

- If you'd like to look at an example online, try this [CodeSandbox](https://codesandbox.io/s/5rhqm0?file=/README.md)
- If you want to run this example locally have a look at the instructions in the [ConnectKit README](https://github.com/family/connectkit#running-examples-locally)
</file>

<file path="packages/cra-template/template.json">
{
  "package": {
    "dependencies": {
      "@testing-library/jest-dom": "^5.14.1",
      "@testing-library/react": "^13.0.0",
      "@testing-library/user-event": "^13.2.1",
      "@types/jest": "^27.0.1",
      "@types/node": "^16.7.13",
      "@types/react": "^18.0.0",
      "@types/react-dom": "^18.0.0",
      "connectkit": "latest",
      "typescript": "^5.0.4",
      "viem": "^2.23.2",
      "wagmi": "^2.14.11",
      "web-vitals": "^2.1.0"
    },
    "eslintConfig": {
      "extends": ["react-app", "react-app/jest"]
    }
  }
}
</file>

<file path=".gitignore">
# running the build command copies the root README.md to the connectkit directory for npm release
packages/connectkit/README.md

# dependencies
node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
build
tsconfig.tsbuildinfo

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
.yarn/cache
.yarn/install-state.gz
</file>

<file path=".prettierrc">
{
  "singleQuote": true,
  "trailingComma": "es5"
}
</file>

<file path=".yarnrc.yml">
nodeLinker: node-modules

plugins:
  - path: .yarn/plugins/@yarnpkg/plugin-workspace-tools.cjs
    spec: '@yarnpkg/plugin-workspace-tools'

yarnPath: .yarn/releases/yarn-3.2.3.cjs
</file>

<file path="build.js">
/*
 * This script is used to copy over the version number in the package.json to
 * the CONNECTKIT_VERSION constant in the index.ts file. This is done to
 * ensure that the version number attribute on the ConnectKit wrapper is always
 * up to date with the version number in the package.json file.
 */

const fs = require('fs');
const config = require('./packages/connectkit/package.json');

const file = fs.readFileSync('packages/connectkit/src/index.ts', 'utf8');
const lines = file.split('\n');
const versionLine = lines.findIndex((line) =>
  line.includes('export const CONNECTKIT_VERSION = ')
);
lines[versionLine] = `export const CONNECTKIT_VERSION = '${config.version}';`;

fs.writeFileSync('packages/connectkit/src/index.ts', lines.join('\n'), 'utf8');
</file>

<file path="CHANGELOG.md">
# 1.9.0

We're thrilled to announce a major upgrade to ConnectKit—designed to make onboarding and navigating Ethereum simpler and safer than ever.

Introducing [Family Accounts](https://app.family.co), simplified onboarding for new users.

Learn more by reading the announcement [here](https://family.co/blog/family-accounts).

## New

- Support for [Family Accounts](https://app.family.co).

## Improved

- Updates chain logos for `zora`, `base`, `optimism` and `lens`.

# 1.8.2

This update includes improvements to the `CoinbaseWalletSDK` connect popup and `MockConnector`.

## Fixed

- `CoinbaseWalletSDK` connect popup now works on first interaction.
- `MockConnector` now working as intended.

# 1.8.1

This update adds additional localisations, and improves the stability of Coinbase Wallet and MetaMask connections.

## New

- Localisations for `Vietnamese`, `Turkish`, `Persian`, `Arabic`, `Russian`, `Estonian` and `Catalan`.

## Fixed

- `CoinbaseWalletSDK` connect popup being blocked on iOS Safari.
- Revert back to using `MetaMaskSDK` for MetaMask connections.
- Desktop deeplinking for LedgerLive.

# 1.8.0

This update adds support for [Coinbase Smart Wallet](https://smartwallet.dev), adds additional support for the latest versions of peer dependencies `wagmi` and `viem`, and removes the dependency `ethers` from `connectkit-next-siwe` in favor of `viem`'s [SIWE implementation](https://viem.sh/docs/siwe/actions/verifySiweMessage).

## New

- Adds support for [Coinbase Smart Wallet](https://smartwallet.dev).

## Updated

- Changed default setting for `enforceSupportedChains` to `false` to allow for a better default user and developer experience.
- Updates peer dependency `viem` to `>=2.13.x`.

## Deprecated

- Removes dependency `ethers` from `connectkit-next-siwe` in favor of `viem`'s [SIWE implementation](https://viem.sh/docs/siwe/actions/verifySiweMessage).

# 1.7.3

This update fixes a few bugs and improves the stability of the QR code generation for WalletConnect and Coinbase Wallet.

## Fixed

- ENS resolution when `mainnet` not found in `createConfig`.
- `WalletConnectConnector` regenerates QR codes when a user disconnects and attempts to reconnect their wallet.
- `CoinbaseConnector` generated QR code now using a better supported URI.
- Configured `projectId` now being passed to the `WalletConnectConnector` when opening "More" UI in mobile view.

## Removed

- References to `WalletConnectLegacy` (WalletConnect v1).

# 1.7.2

This update fixes an issue with the order of React Hooks, and improves the stability of the SIWE Provider.

## Improved

- Remove `initialData` from `useQuery` Hooks.

## Fixed

- Fix order of Hooks in `useChainIsSupported`.

# 1.7.1

This update fixes a bug where the chain was incorrectly detected as unsupported when only one chain is configured.

## Improved

- Switch to using wagmi storage for detecting the last used connector ID.
- Filter out duplicate connectors from the list of available connectors.
- More defined overflow divider for the connector list.

## Fixed

- Chain being incorrectly detected as unsupported when only one chain is configured.
- Ability to override the "Other Wallets" button text.
- SIWE Provider stability and returned types when returning `nonce` and `session` from the server.

# 1.7.0

This update moves peer dependencies wagmi and viem up to their latest versions.

> **Note**
>
> This version of ConnectKit has breaking changes. Make sure your application is compatible by following the [ConnectKit migration guide](https://docs.family.co/connectkit/migration-guide#170-breaking-changes), and the [wagmi 2.x migration guide](https://wagmi.sh/react/guides/migrate-from-v1-to-v2).

## New

- Updates peer dependency `wagmi` to `2.x`.
- Updates peer dependency `viem` to `2.x`.
- New peer dependency `@tanstack/react-query`.

## Deprecated

- Removes dependency `mipd`.

# 1.6.0

This update adds [EIP-6963](https://eips.ethereum.org/EIPS/eip-6963) support for enhanced wallet discovery and improves the functionality and developer experience of using ConnectKit.

## New

- Support for [EIP-6963](https://eips.ethereum.org/EIPS/eip-6963).
  - Includes dependency [`mipd`](https://www.npmjs.com/package/mipd) for EIP-6963 TypeScript utilities, built by the team at [wevm](https://github.com/wevm) (creators of [wagmi](https://wagmi.sh/) and [viem](https://viem.sh/)).
- Added [Zerion](https://zerion.io) extension support.

## Improved

- Hide SIWE tooltip when using `hideTooltips` option.

# 1.5.3

This update adds branding support for additional detectable injected connectors and improves the functionality and developer experience of using ConnectKit.

## New

- [Rainbow](https://rainbow.me/) extension support.
- Exports `defaultConnectors`

## Improved

- Added name in header for injected wallet when detected by wagmi.

## Fixed

- Fixed UI overflow in switch network tab.
- Fixed text overlap in switch network buttons.
- Provide `exports.types` in `package.json`

# 1.5.2

This update addresses a few bugs and improves the overall experience of ConnectKit.

## Fixed

- Added `wcm-modal` tag to css variable override.
- Fixed flash of unstyled content on the `<ChainIcon>` component.
- Fixed bug where the modal wouldn't open if the configuration didn't include the `InjectedConnector`.

# 1.5.1

This update improves how ConnectKit handles multiple injected wallets.

## Improved

- Better support when dealing with multiple injected wallets.

## Fixed

- Updated `--w3m-z-index` to `--wcm-z-index` to align with latest wagmi connectors.

# 1.5.0

This update improves the developer experience of using ConnectKit by upgrading the peer dependency, [wagmi](https://wagmi.sh), to version `1.1.x`, updating [viem](https://viem.sh/) to version `1.x.x`, and providing additional wallet branding support.

## New

- Updates peer dependency `wagmi` to `1.1.x`.
- Updates peer dependency `viem` to `1.x.x`.
- Add branding for the following injected wallets:
  - [Rabby](https://rabby.io)
  - [TokenPocket](https://tokenpocket.pro)
  - [Family](https://family.co)
  - [Trust](https://trustwallet.com)
  - [Frontier](https://www.frontier.xyz/)
  - [Talisman](https://www.talisman.xyz/)
  - [Infinity](https://infinitywallet.io/)
  - [Phantom](https://phantom.app) (2023 rebrand)

## Improved

- Better support for injected wallets.
- Updated [Phantom](https://phantom.app) branding.

## Misc

- Fixed typo in Safe website URL.
- Updated some SVGs to be more performant with JSX.
- Fixed arrows in buttons not inheriting hover colors.

# 1.4.0

This update improves the developer experience of using ConnectKit by upgrading the peer dependency wagmi up a version to `1.x.x`, and removes the peer dependency `ethers` in favor of [`viem`](https://viem.sh).

> **Note**
>
> This version of ConnectKit has breaking changes. Make sure your application is compatible by following the [migration guide](https://docs.family.co/connectkit/migration-guide#140-breaking-changes).

## New

- Updates peer dependency `wagmi` to `1.x.x`.
- Adds peer dependency [`viem`](https://viem.sh).

## Deprecated

- Removes peer dependency on `ethers`.

# 1.3.0

WalletConnect v1 is scheduled to shut down and will be no longer be supported after **June 28 2023.** It is advised to update your dApps immediately to support WalletConnect v2.

[Read the announcement](https://medium.com/walletconnect/how-to-prepare-for-the-walletconnect-v1-0-shutdown-1a954da1dbff)

> **Note**
>
> This version of ConnectKit has breaking changes. Make sure your application is compatible by following the [migration guide](https://docs.family.co/connectkit/migration-guide#130-breaking-changes).

## New

- Adds support for WalletConnect v2.

### Deprecated

- Removes default support for WalletConnect v1.

# 1.2.4

This update adds branding support for additional detectable injected connectors and improves the functionality and developer experience of using ConnectKit with Sign In With Ethereum.

## New

- Branding for additional injected connectors:
  - Frame
  - Phantom
  - Dawn
- `connectkit-next-siwe` version `0.1.1` add adds `afterNonce` `afterVerify` `afterSession` and `afterLogout` callbacks to the server-side SIWE helper functions.
- `connectkit-next-siwe` version `0.2.0` updates peer dependency `siwe` to `2.0.0`.

# 1.2.3

This update adds some minor quality of life features to ConnectKit.

## Improved

- Updated styling of the switch chain page for better readability.
- Adds prefix to LocalStorage keys to avoid collisions with other apps.
- Restyled [documentation site](https://docs.family.co/connectkit) to make following guides even easier.

# 1.2.2

This update improves the functionality and developer experience of using ConnectKit and moves the peer dependency wagmi up a version to `0.12.x`.

> **Note**
>
> This update does not yet include support for WalletConnect 2.0.

## New

- Adds a `Recent` badge to the most recently used connector button by a user. This helps returning users reconnect easily and save time.
- Introduce [`SafeConnector`](https://wagmi.sh/react/connectors/safe) into the default configuration for better support for Safe Apps. Learn more about this connector in the [wagmi](https://wagmi.sh/react/connectors/safe) docs.
- Convenient `onConnect` and `onDisconnect` callbacks on the `ConnectKitProvider` component and `useModal` Hook.
- Added dedicated `overlayBlur` prop to `ConnectKitProvider` to allow for blurring the background when the modal is open.
- Update peer dependency wagmi to version `0.12.x`.

## Improved

- Added support for Node 14.
- Improved aria-labels on buttons for better accessibility.
- Icons within buttons are now properly horizontally centered on FireFox.
- Optimise some of the SVGs used in ConnectKit.

## Fixed

- Fixed a bug where changing accounts when signed-in with Ethereum would cause an infinite loop (thanks [JamieLottering](https://github.com/JamieLottering)).

# 1.2.1

This update improves the functionality and developer experience of using ConnectKit and moves the peer dependency wagmi up a version to `0.11.x`.
This update does not yet include support for WalletConnect 2.0 (wagmi `0.12.x`)

> **Note**
>
> This version of wagmi has breaking changes. Make sure your application is compatible by following [wagmi's migration guide](https://wagmi.sh/react/migration-guide#011x-breaking-changes).

## New

- Update peer dependency wagmi to version `0.11.x` (thanks [Songkeys](https://github.com/Songkeys)).
- Add new `pt-BR` translations (thanks [LuwkasLima](https://github.com/luwkaslima)).
- Include new `hideBalance` option to hide the wallet balance from the profile view.
- Include new `enforceSupportedChains` option to disable the forced network switching UX when connected to an unsupported chain.
- Include new `disableSiweRedirect` option to disable the redirect to the SIWE page when a wallet connects.
- Include new functions from the `useModal` Hook to choose a page to navigate to on open.
  - The `openSIWE()` function accepts a boolean, if `true` it will initiate the wallet SIWE signing request at the same time as opening the modal.
- Add logos for the following chains:
  - Optimism Goerli
  - Telos + Testnet
  - Aurora + Testnet
  - Avalanche + Fuji Testnet
  - Foundry
  - Gnosis
  - Evmos + Testnet
  - BNB Smart Chain + Testnet
  - Sepolia
  - Taraxa + Testnet
  - zkSync + Testnet
  - Celo + Alfajores Testnet
  - Canto
  - Fantom + Testnet
  - Filecoin + Hyperspace + Calibration Testnets
  - Flare + Coston2 testnet
  - Metis + Testnet
  - IoTeX + Testnet

## Improved

- Update testbench for better developer experience.
- Improve logic for `isConnecting` within the Custom `ConnectKitButton`.
- Replace `getGlobalChains` with `useChains` Hook
- Tidy up some internal component structure and include a few useful dev updates (thanks [pugson](https://github.com/pugson)).
- Export `useIsMounted` and `Context` (thanks [shahruz](https://github.com/shahruz)).

# 1.2.0

This update improves the functionality and developer experience of using ConnectKit with Sign In With Ethereum.

## New

- Add `onSignIn` and `onSignOut` handlers for `useSIWE` and the SIWE provider.

## Improved

- Separate the SIWE helper functions into more friendlier client and server configurations.
- Improved the `useSIWE` hook to allow for better dev access to SIWE functionality.

# 1.1.4

This update adds some minor quality of life features to ConnectKit.

## Improved

- Included `shimChainChangedDisconnect` option to `MetaMaskConnector` to automatically disconnect the wallet when the chain changes in particular version of MetaMask (thanks [Songkeys](https://github.com/Songkeys)).
- Added `size` prop to `ChainIcon` component to allow for custom sizing (thanks [JamieLottering](https://github.com/JamieLottering)).
- Exported type `ConnectKitOptions` for better TypeScript support when creating a wagmi client (thanks [ryanberckmans](https://github.com/ryanberckmans)).
- Included `chain` to `ConnectKitButton.custom` to allow for chains to be passed to custom buttons.

# 1.1.3

This update fixes compatibility issues that were found with Next 13's default configuration. If you would like to use previous versions of ConnectKit you will need to make sure your application [supports Terser compression](https://nextjs.org/docs/advanced-features/compiler#minification).

## Removed

- Terser build compression.

## Improved

- Synced dev and prod rollup configs to avoid environment mismatching.
- Next.js 13 config no longer requires Terser support ([`swcMinify: false`](https://nextjs.org/docs/advanced-features/compiler#minification)).

# 1.1.2

This update moves the peer dependency wagmi up to the latest version (`0.10.x`).
This does not yet include support for WalletConnect 2.0.

## New

- Update peer dependency wagmi to version `0.10.x`.
- New options for `ethereumOnboardingUrl` and `walletOnboardingUrl` to custom change the _Learn More_ and _About Wallets_ call to actions.

## Fixed

- Remove sunset ethhub.io links and replace with ethereum.org links.

## Improved

- Update to chain handling to allow devs access to the configured chains using `getGlobalChains`.
- Update to allow turning off the default targeted `chainId` to let wallets connect using their currently active chain.
- - This can be done by setting `initialChainId` to `0` within the `getDefaultClient` helper function.

# 1.1.1

This update moves the peer dependency [wagmi](https://wagmi.sh) up to the latest version (`0.9.x`).

> **Note**
>
> This version of wagmi has breaking changes. Make sure your application is compatible by following [wagmi's migration guide](https://wagmi.sh/react/migration-guide#09x-breaking-changes).

# 1.1.0

This update moves the peer dependency wagmi up to the latest version (`0.8.x`).

> **Note**
>
> This version of ConnectKit has breaking changes. Make sure your application is compatible by following the [migration guide](https://docs.family.co/connectkit/migration-guide#110-breaking-changes).

## New

- Update peer dependency wagmi to version `0.8.x`.

## Removed

- Removed CommonJS support to work within wagmi's `0.8.x` requirements.

# 1.0.1

This update introduces localisations to ConnectKit.

## New

- Added a `language` option under `options` that allows developers to include localisation support—starting with options for `Spanish`, `French`, `Japanese` and `Chinese (Simplified)`.

## Fixed

- Removed layered background on the injected connectors flow to allow for transparent modal background colors ([issue #41](https://github.com/family/connectkit/issues/41)).

# 1.0.0

This update introduces Sign In With Ethereum and other helpful changes and additions to make your app better than ever.

## New

- Added **Sign In With Ethereum** support with a Next.js package to help with quick setup.
- Added an `<Avatar />` component for developers to utilize the default ConnectKit avatar.
- Created a `<CustomAvatar />` component for developers to override the default avatar.
- Added a `walletConnectCTA` option under `options` to choose whether to display the 'Copy to Clipboard' option under the WalletConnect QR code.
- Added a `initialChainId` option under `options` to customize the initially connected chain.
- Added a `--ck-overlay-backdrop-filter` property for custom themes to utilise the `backdrop-filter` property on the modal overlay.
- Added a new `nouns` theme to the built-in default themes ⌐◨-◨

## Fixed

- Corrected some variable names for the secondary buttons.

## Improved

- Updated Gnosis Safe to reflect their recent rebrand to 'Safe'.
- Wrong Network UX now suggests a network change and no longer blocks users from changing networks.
- Enabled TypeScript strict mode (bumped target to `es6`).
- Line break for "Scan with Coinbase Wallet" title if the font is too wide.
- Fix an SVG `stop-color` vs `stopColor` issue (thanks [@keon](https://github.com/family/connectkit/pull/25)).
- Added icon support for Arbitrum Goerli (thanks [@mirshko](https://github.com/family/connectkit/pull/26)).
- Unknown chain icon fallback (thanks [@Bridgerz](https://github.com/family/connectkit/pull/29)).

## Removed

- Unnecessary SVGs and logos.

# 0.0.2

## New

- `NetworkButton` component for making network switching easier, opens as a dropdown
- `BalanceButton` component for displaying the balance of the connected wallet (in a button), opens the profile modal
- `Balance` component for displaying the balance of the connected wallet, intentionally left mostly unstyled
- `Avatar` component for displaying a wallets ens avatar, with a fallback to a nice gradient based on that ens/address as a seed

## General

- Add `buffer` as a dependency to ConnectKit. Developers no longer need to maintain their own installation of the `buffer` package.
- Remove Slope as a suggested wallet in the UI
- Default connector buttons in the modal are now filled instead of previously stroked
- Improvements and update to the default themes
- Wallet Connection now requests the first `chain` in the chains array given when creating your client configuration

## ConnectKitButton

- Add props to `<ConnectKitButton />` for additional button configuration
  - `label` to customize the connect button text/label
  - `showBalance` to show wallet balance when connected (false default)
  - `showAvatar` to show ENS/wallet avatar when connected (true default)

## ConnectKitProvider

- Add `disclaimer` option under `options` that accepts a string or ReactNode to be displayed in the first screen of the modal when a wallet is not connected

## Bug Fixes

- Single chain tooltip was not inherting theme correctly

## Misc.

- Visual debug message in the UI when there is a custom client config setup for `CoinbaseWalletConnector` that does not have `headlessMode:true`
</file>

<file path="CONTRIBUTING.md">
# ConnectKit Contributions

> **If you plan on working on a significant feature, please open an issue and ask before you get started.**

Before starting any development work on ConnectKit please take some time to review this document.

## Develop

Before jumping into any code, make sure you have the following installed:

- [Node.js](https://nodejs.org/en/) v16 or higher
- [Yarn](https://yarnpkg.com/getting-started/install) v3 or higher

Then simply clone the repository to your computer like following:

```sh
$ git clone git@github.com:family/connectkit.git
$ cd connectkit
```

and install the dependencies and run the bundler:

```sh
$ yarn install
$ yarn dev:connectkit # Start the bundler
```

Depending on how you'd like to develop and test ConnectKit there are a couple of different environments you can fire up (you can see them in `package.json`). These environments double as simple code examples of how to get ConnectKit set up.

```sh
# Custom testbench
$ yarn dev:testbench
# In Create React App
$ yarn dev:cra
# In Next.js
$ yarn dev:nextjs
```

If the above environments do not fit your needs, feel free to create a new one.

## Submitting a Pull Request

When you're ready, open a [pull request](https://github.com/family/connectkit/pulls) and we'll gladly jump into reviewing the code.

Please try and be as detailed as possible in both your commit messages and the changes you introduce to help make the process smoother.

## Writing Documentation

We'll help with updating and writing any documentation related to any feature or changes you're working on.

If there are specific callouts, just let us know in your pull request.
</file>

<file path="LICENSE">
BSD 2-Clause License

Copyright (c) 2022, LFE, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
</file>

<file path="package.json">
{
  "name": "family-connectkit",
  "version": "0.0.0",
  "description": "Family ConnectKit.",
  "main": "packages/connectkit/src/index.ts",
  "private": true,
  "workspaces": [
    "packages/*",
    "examples/*"
  ],
  "scripts": {
    "dev:connectkit": "yarn workspace connectkit run dev",
    "dev:connectkit-next-siwe": "yarn workspace connectkit-next-siwe run dev",
    "dev:cra": "yarn workspace cra run dev",
    "dev:nextjs": "yarn workspace nextjs run dev",
    "dev:nextjs-app": "yarn workspace nextjs-app run dev",
    "dev:nextjs-siwe": "yarn workspace nextjs-siwe run dev",
    "dev:vite": "yarn workspace vite run dev",
    "dev:testbench": "yarn workspace testbench run dev",
    "build": "node build.js && yarn workspace connectkit run build && cp README.md packages/connectkit/README.md",
    "build:connectkit-next-siwe": "yarn workspace connectkit-next-siwe run build",
    "build:cra": "yarn build && yarn workspace cra build",
    "build:nextjs": "yarn build && yarn workspace nextjs build",
    "build:nextjs-app": "yarn build && yarn workspace nextjs-app build",
    "build:nextjs-siwe": "yarn build && yarn workspace nextjs-siwe build",
    "build:vite": "yarn build && yarn workspace vite build",
    "build:testbench": "yarn build && yarn build:connectkit-next-siwe && yarn workspace testbench build",
    "build:ci": "yarn workspaces foreach -R run build",
    "lint:ci": "yarn workspaces foreach -R run lint"
  },
  "devDependencies": {
    "@rollup/plugin-node-resolve": "^13.1.3",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "rollup": "^2.67.1",
    "rollup-plugin-peer-deps-external": "^2.2.4",
    "rollup-plugin-terser": "^7.0.2",
    "rollup-plugin-typescript2": "^0.34.0",
    "rollup-plugin-visualizer": "^5.5.4",
    "tslib": "^1.9.3",
    "typescript-plugin-styled-components": "^2.0.0",
    "viem": "^2.23.2",
    "wagmi": "^2.14.11"
  },
  "packageManager": "yarn@3.2.0",
  "dependencies": {
    "@changesets/cli": "^2.24.4"
  }
}
</file>

<file path="README.md">
<a href="https://docs.family.co/connectkit">
  <img width="1080" alt="connectkit" src="https://github.com/family/connectkit/assets/1930210/87c2e868-3228-44b8-82c3-a38adf6d1bbf">
</a>



# ConnectKit

ConnectKit is a powerful [React](https://reactjs.org/) component library for connecting a wallet to your dApp. It supports the most popular connectors and chains out of the box and provides a beautiful, seamless experience.

## Features

- 💡 TypeScript Ready — Get types straight out of the box.
- 🌱 Ecosystem Standards — Uses top libraries such as [wagmi](https://github.com/wagmi-dev/wagmi).
- 🖥️ Simple UX — Give users a simple, attractive experience.
- 🎨 Beautiful Themes — Predesigned themes or full customization.

and much more...

## Quick Start

Get started with a ConnectKit + [wagmi](https://wagmi.sh/) + [viem](https://viem.sh) project by running one of the following in your terminal:

#### npm

```sh
npx create-react-app my-app --template cra-template-connectkit
```

#### yarn

```sh
yarn create react-app my-app --template cra-template-connectkit
```

#### pnpm

```sh
pnpm dlx create-react-app ./my-app --template cra-template-connectkit
```

## Documentation

You can find the full ConnectKit documentation in the Family docs [here](https://docs.family.co/connectkit).

## API Reference

You can find the full API Reference in the Family docs [here](https://docs.family.co/connectkit/api-reference).

## Examples

There are various runnable examples included in this repository in the [examples folder](https://github.com/family/connectkit/tree/main/examples):

- [Create React App Example (TypeScript)](https://github.com/family/connectkit/tree/main/examples/cra)
- [Next.js Example (TypeScript)](https://github.com/family/connectkit/tree/main/examples/nextjs)
- [Vite Example (TypeScript)](https://github.com/family/connectkit/tree/main/examples/vite)

### Try in CodeSandbox

You can try out some ConnectKit examples directly in your browser through CodeSandbox:

- [Create React App Example (TypeScript)](https://codesandbox.io/s/5rhqm0?file=/README.md)
- [Next.js (TypeScript)](https://codesandbox.io/s/qnvyqe?file=/README.md)
- [Vite Example (TypeScript)](https://codesandbox.io/s/4jtssh?file=/README.md)

### Running Examples Locally

Clone the ConnectKit project and install the necessary dependencies:

```sh
$ git clone git@github.com:family/connectkit.git
$ cd connectkit
$ yarn install
```

and start the code bundler:

```sh
$ yarn dev:connectkit
$ yarn dev:connectkit-next-siwe
```

and then simply select the example you'd like to run:

```sh
$ yarn dev:vite # Vite
$ yarn dev:nextjs # Next.js
$ yarn dev:nextjs-siwe # Next.js with SIWE
$ yarn dev:cra # Create React App
```

## Contribute

Before starting on anything, please have a read through our [Contribution Guidelines](https://github.com/family/connectkit/blob/main/CONTRIBUTING.md).

## Twitter

Follow [@family](https://twitter.com/family) on Twitter for the latest updates on ConnectKit.

## License

See [LICENSE](https://github.com/family/connectkit/blob/main/LICENSE) for more information.
</file>

</files>
