TITLE: Setting up AppKit with Wagmi in React Native
DESCRIPTION: This snippet demonstrates the complete setup process for Reown's AppKit in a React Native application. It includes importing dependencies, configuring Wagmi with chains, creating an AppKit instance, and implementing the provider structure for your app.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import "@walletconnect/react-native-compat";
import { WagmiProvider } from "wagmi";
import { mainnet, polygon, arbitrum } from "@wagmi/core/chains";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import {
  createAppKit,
  defaultWagmiConfig,
  AppKit,
} from "@reown/appkit-wagmi-react-native";

// 0. Setup queryClient
const queryClient = new QueryClient();

// 1. Get projectId at https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create config
const metadata = {
  name: "AppKit RN",
  description: "AppKit RN Example",
  url: "https://reown.com/appkit",
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
  redirect: {
    native: "YOUR_APP_SCHEME://",
    universal: "YOUR_APP_UNIVERSAL_LINK.com",
  },
};

const chains = [mainnet, polygon, arbitrum] as const;

const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata });

// 3. Create modal
createAppKit({
  projectId,
  wagmiConfig,
  defaultChain: mainnet, // Optional
  enableAnalytics: true, // Optional - defaults to your Cloud configuration
});

export default function App() {
  return (
    <WagmiProvider config={wagmiConfig}>
      <QueryClientProvider client={queryClient}>
        // Rest of your app...
        <AppKit />
      </QueryClientProvider>
    </WagmiProvider>
  );
}

----------------------------------------

TITLE: Importing Modules for Solana Balance Checking
DESCRIPTION: Imports the necessary modules to check the balance of a Solana wallet, including the AppKit connection and account hooks, and the Solana PublicKey and LAMPORTS_PER_SOL constants.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
import { useAppKitConnection } from "@reown/appkit-adapter-solana/react";
import { useAppKitAccount } from "@reown/appkit/react";
import { PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";

----------------------------------------

TITLE: Implementing Solana Wallet Functions with @solana/web3.js in JavaScript
DESCRIPTION: This code demonstrates how to interact with the Solana blockchain by setting up providers, connections, and implementing transaction and balance functions. It includes methods for sending SOL tokens and retrieving wallet balances in LAMPORTS.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/about/programs.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { PublicKey, LAMPORTS_PER_SOL, Transaction, SystemProgram } from "@solana/web3.js";

import type { Provider } from '@reown/appkit-adapter-solana'

const solanaProvider = {};
const solanaConnection = {};
modal.subscribeProviders(state => {
    solanaProvider = state['solana'];
    const url = solanaProvider.getActiveChain().rpcUrls.default.http[0];
    const solanaConnection = new Connection(url);
})

const addressFrom = await modal.subscribeAccount(state => {
  return state;
})

const sendTransaction = async () => {
  if (!addressFrom || !solanaConnection) throw Error('user is disconnected');

  const wallet = new PublicKey(addressFrom);
  if (!wallet) throw Error('wallet provider is not available');

  const latestBlockhash = await solanaConnection.getLatestBlockhash();

  const transaction = new Transaction({
    feePayer: wallet,
    recentBlockhash: latestBlockhash?.blockhash,
  }).add(
    SystemProgram.transfer({
      fromPubkey: wallet,
      toPubkey: new PublicKey(address), // destination address
      lamports: 1000,
    })
  );

  return await provider.sendTransaction(transaction, solanaConnection);
}

const getBalance = async () => {
  if (!addressFrom || !solanaConnection) throw Error('user is disconnected');

  const wallet = new PublicKey(addressFrom);
  const balance = await solanaConnection?.getBalance(wallet);
  if (balance !== undefined) {
    return `${balance / LAMPORTS_PER_SOL}`;
  } else {
    return '-';
  }
}

----------------------------------------

TITLE: Declaring Smart Contract Address and ABI in JavaScript
DESCRIPTION: This snippet defines the smart contract address and ABI (Application Binary Interface) required for interacting with the contract. The ABI includes function definitions for 'retrieve' and 'store' operations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
const storageSC = "0xEe6D291CC60d7CeD6627fA4cd8506912245c8cA4";

const storageABI = [
  {
    inputs: [],
    name: "retrieve",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "num",
        type: "uint256",
      },
    ],
    name: "store",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

----------------------------------------

TITLE: Configuring Reown AppKit with WagmiProvider
DESCRIPTION: Complete setup example showing how to initialize Reown AppKit with WagmiProvider, including QueryClient configuration, project setup, and provider wrapper component creation. Demonstrates integration with multiple blockchain networks and metadata configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/wagmi/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'

import { WagmiProvider } from 'wagmi'
import { arbitrum, mainnet } from '@reown/appkit/networks'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

// 0. Setup queryClient
const queryClient = new QueryClient()

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 3. Set the networks
const networks = [mainnet, arbitrum]

// 4. Create Wagmi Adapter
const wagmiAdapter = new WagmiAdapter({
  networks,
  projectId,
  ssr: true
})

// 5. Create modal
createAppKit({
  adapters: [wagmiAdapter],
  networks,
  projectId,
  metadata,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export function AppKitProvider({ children }) {
  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Integrating AppKit with Ethers and Solana Adapters
DESCRIPTION: TypeScript implementation for integrating AppKit with Ethers and Solana network adapters. Configures specific Solana wallet providers (Phantom and Solflare) alongside EVM networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#2025-04-10_snippet_7

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { SolanaAdapter } from '@reown/appkit-adapter-solana'
import { EthersAdapter } from '@reown/appkit-adapter-ethers'

import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks';
import { mainnet, arbitrum, sepolia } from "@reown/appkit/networks";

import {
  SolflareWalletAdapter,
  PhantomWalletAdapter,
} from "@solana/wallet-adapter-wallets";

const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet]

// 0. Create the Ethers adapter
export const ethersAdapter = new EthersAdapter()

// 1. Create Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]
})

// 2. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 3. Set up the metadata - Optional
const metadata = {
name: 'AppKit',
description: 'AppKit Example',
url: 'https://example.com', // origin must match your domain & subdomain
icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 4. Create the AppKit instance
const modal = createAppKit({
adapters: [ethersAdapter, solanaWeb3JsAdapter],
networks,
metadata,
projectId,
features: {
analytics: true,
}
})

----------------------------------------

TITLE: Configuring Reown AppKit with Ethers Adapter in TypeScript
DESCRIPTION: Sets up a Reown AppKit instance with Ethers adapter and network configurations for mainnet and arbitrum. Includes essential metadata configuration with a warning about matching the URL to your domain for verification purposes. Requires a project ID from Reown Cloud.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { createAppKit } from "@reown/appkit";
import { EthersAdapter } from "@reown/appkit-adapter-ethers";
import { mainnet, arbitrum } from "@reown/appkit/networks";

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create your application's metadata object
const metadata = {
  name: "AppKit",
  description: "AppKit Example",
  url: "https://reown.com/appkit", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229952"],
};

// 3. Create a AppKit instance
const modal = createAppKit({
  adapters: [new EthersAdapter()],
  networks: [mainnet, arbitrum],
  metadata,
  projectId,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

----------------------------------------

TITLE: Implementing Smart Contract Read and Write Actions with Wagmi in React
DESCRIPTION: This code defines functions to read from and write to a smart contract using Wagmi hooks. It includes a read operation that fetches and logs data, a write operation that stores a value, and a useEffect hook to log successful writes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#2025-04-10_snippet_3

LANGUAGE: jsx
CODE:
// Call the function to read the smart contract and print on console
const handleReadSmartContract = async () => {
  const { data } = await readContract.refetch();
  console.log("data: ", data);
};

// Write to the smart contract and check if the transaction is successful with useEffect
const handleWriteSmartContract = () => {
  writeContract({
    address: storageSC,
    abi: storageABI,
    functionName: "store",
    args: [123n],
  });
};

// useEffect to print the success message when the contract is written
useEffect(() => {
  if (isSuccess) {
    console.log("contract write success");
  }
}, [isSuccess]);

----------------------------------------

TITLE: Preparing Transaction Calldata in TypeScript
DESCRIPTION: Encodes the function call data for purchasing a donut, then prepares a transaction object with the contract address, ETH value, and encoded function data. This snippet shows how to format a transaction for the sponsored call.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
const purchaseDonutCallData = encodeFunctionData({
  abi: donutContractAbi,
  functionName: 'purchase',
  args: [1]
})

const TEST_TX = {
  to: donutContractaddress,
  value: parseEther('0.0001'),
  data: purchaseDonutCallData
}

----------------------------------------

TITLE: Installing SIWE Dependencies with Yarn
DESCRIPTION: Command to install the required packages for SIWE One-Click Auth implementation using Yarn package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
yarn add @reown/appkit-siwe siwe

----------------------------------------

TITLE: Opening AppKit Modal with Specific Views in TypeScript
DESCRIPTION: Shows how to open the AppKit modal with specific view options, such as Account, Connect, or namespace-specific connect views for different blockchain networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
modal.open({ view: "Account" });

// to connect and show multi wallets view
modal.open({ view: "Connect" });

// to connect and show only solana wallets
modal.open({ view: "Connect", namespace: "solana" });

// to connect and show only bitcoin wallets
modal.open({ view: "Connect", namespace: "bip122" });

// to connect and show only ethereum wallets
modal.open({ view: "Connect", namespace: "eip155" });

----------------------------------------

TITLE: Configuring Reown AppKit with Ethers Adapter in TypeScript
DESCRIPTION: Sets up a Reown AppKit instance with Ethers adapter and network configurations for mainnet and arbitrum. Includes essential metadata configuration with a warning about matching the URL to your domain for verification purposes. Requires a project ID from Reown Cloud.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { createAppKit } from "@reown/appkit";
import { EthersAdapter } from "@reown/appkit-adapter-ethers";
import { mainnet, arbitrum } from "@reown/appkit/networks";

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create your application's metadata object
const metadata = {
  name: "AppKit",
  description: "AppKit Example",
  url: "https://reown.com/appkit", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229952"],
};

// 3. Create a AppKit instance
const modal = createAppKit({
  adapters: [new EthersAdapter()],
  networks: [mainnet, arbitrum],
  metadata,
  projectId,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

----------------------------------------

TITLE: Using useSignMessage Hook from wagmi for Message Signing
DESCRIPTION: This hook from the wagmi library enables signing messages with the connected wallet account. It provides a signMessage function that can be called with a message parameter to trigger the wallet's signing functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/wagmi/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { useSignMessage } from "wagmi";

function App() {
  const { signMessage } = useSignMessage();

  return (
    <button onClick={() => signMessage({ message: "hello world" })}>
      Sign message
    </button>
  );
}

----------------------------------------

TITLE: Using AppKit Provider Hooks with Ethers.js for Message Signing
DESCRIPTION: Demonstrates how to use the useAppKitProvider, useAppKitAccount, and useAppKitNetwork hooks to access wallet provider information and sign messages with ethers.js. Shows the integration between AppKit and the ethers library for blockchain interactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import {
  useAppKitAccount,
  useAppKitProvider,
  useAppKitNetwork,
} from "@reown/appkit/react";
import { ethers } from "ethers";
import { useAppKitProvider } from "@reown/appkit/react";

function Components() {
  const { walletProvider } = useAppKitProvider("eip155");
  const { address } = useAppKitAccount();
  const { chainId } = useAppKitNetwork();

  async function onSignMessage() {
    const provider = new ethers.providers.Web3Provider(walletProvider, chainId);
    const signer = provider.getSigner(address);
    const signature = await signer?.signMessage("Hello AppKit Ethers");
    console.log(signature);
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>;
}

----------------------------------------

TITLE: Implementing useSendTransaction with Chain Abstraction in Wagmi
DESCRIPTION: This code snippet demonstrates how to modify the useSendTransaction hook in Wagmi to support Chain Abstraction. By setting gas: null, the gas estimation is deferred to the wallet instead of being handled by the Dapp, allowing seamless cross-chain transactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/chain-abstraction.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useSendTransaction } from "wagmi";
import { parseEther } from "viem";

function App() {
  const { sendTransaction } = useSendTransaction();

  return (
    <button
      onClick={() =>
        sendTransaction({
          to: "0xd2135CfB216b74109775236E36d4b433F1DF507B",
          value: parseEther("0.01"),
          gas: null, // <- Add this
        })
      }
    >
      Send transaction
    </button>
  );
}

----------------------------------------

TITLE: Implementing AppKit Button Component in React/TSX
DESCRIPTION: Example showing how to use the appkit-button web component in a React component. The appkit-button is a global HTML element that requires no explicit import.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/wagmi/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Configuring Reown AppKit with Ethers Adapter in TypeScript
DESCRIPTION: Sets up a Reown AppKit instance with Ethers adapter and network configurations for mainnet and arbitrum. Includes essential metadata configuration with a warning about matching the URL to your domain for verification purposes. Requires a project ID from Reown Cloud.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { createAppKit } from "@reown/appkit";
import { EthersAdapter } from "@reown/appkit-adapter-ethers";
import { mainnet, arbitrum } from "@reown/appkit/networks";

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create your application's metadata object
const metadata = {
  name: "AppKit",
  description: "AppKit Example",
  url: "https://reown.com/appkit", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229952"],
};

// 3. Create a AppKit instance
const modal = createAppKit({
  adapters: [new EthersAdapter()],
  networks: [mainnet, arbitrum],
  metadata,
  projectId,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

----------------------------------------

TITLE: Integrating Custom Wagmi Connectors with Reown AppKit
DESCRIPTION: This code demonstrates how to set up Reown AppKit with custom Wagmi connectors including WalletConnect, injected wallets, and Coinbase Wallet. It configures the Wagmi adapter with Sepolia testnet and required parameters for proper integration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/custom-connectors.mdx#2025-04-10_snippet_0

LANGUAGE: ts
CODE:
import { createAppKit } from '@reown/appkit'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { reconnect, http, createConfig } from '@wagmi/core'
import { CreateConnectorFn } from 'wagmi'
import { sepolia } from '@reown/appkit/networks'
import { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'

const projectId = 'YOUR_PROJECT_ID'

const metadata = {
  //...
}

// create the connectors (delete the ones you don't need)
const connectors: CreateConnectorFn[] = []
connectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false
connectors.push(injected({ shimDisconnect: true }))
connectors.push(
  coinbaseWallet({
    appName: metadata.name,
    appLogoUrl: metadata.icons[0]
  })
)

export const networks = [sepolia]

export const wagmiAdapter = new WagmiAdapter({
  storage:
  transports: {
    [sepolia.id]: http()
  },
  connectors,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig

createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [sepolia]
})

----------------------------------------

TITLE: Using eth_signTypedData Method in Ethereum JSON-RPC
DESCRIPTION: Example of using eth_signTypedData method to sign typed data according to EIP-712 standard, which provides better security and usability for signing structured data.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "eth_signTypedData",
  "params": ["0x9b2055d370f73ec7d8a03e965129118dc8f5bf83", {see above}],
}
'

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": "0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c"
}

----------------------------------------

TITLE: Installing AppKit with Wagmi and Solana Adapters
DESCRIPTION: Installation commands for AppKit with Wagmi and Solana adapters using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
bun a @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-solana

----------------------------------------

TITLE: Implementing Transaction Sending Function for EVM
DESCRIPTION: Function that triggers a wallet transaction modal to send tokens to a predefined address. It includes error handling and uses the estimated gas value for the transaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_10

LANGUAGE: jsx
CODE:
// function to send a TX
const handleSendTx = () => {
  try {
    sendTransaction({
      ...TEST_TX,
      gas, // Add the gas to the transaction
    });
  } catch (err) {
    console.log("Error sending transaction:", err);
  }
};

----------------------------------------

TITLE: Implementing Smart Contract Read and Write Actions with Ethers in React
DESCRIPTION: This code defines asynchronous functions to read from and write to a smart contract using Ethers. It includes operations to create a contract instance, perform a read operation, and execute a write operation with logging.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#2025-04-10_snippet_6

LANGUAGE: jsx
CODE:
// get the data from the smart contract and print on console
const handleReadSmartContract = async () => {
  const ethersProvider = new BrowserProvider(walletProvider);
  const signer = await ethersProvider.getSigner();
  const contract = new Contract(storageSC, storageABI, signer);
  const data = await contract.retrieve();
  console.log("data: ", data);
};

// write to the smart contract and print on console
const handleWriteSmartContract = async () => {
  const ethersProvider = new BrowserProvider(walletProvider);
  const signer = await ethersProvider.getSigner();
  const contract = new Contract(storageSC, storageABI, signer);
  const data = await contract.store(1n);
  console.log("data: ", data);
};

----------------------------------------

TITLE: Using personal_sign Method in Ethereum JSON-RPC
DESCRIPTION: Example of using personal_sign method to calculate an Ethereum-specific signature by signing a message with a prefix. This prevents misuse where malicious DApps could sign arbitrary data to impersonate victims.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "personal_sign",
  "params":["0xdeadbeaf","0x9b2055d370f73ec7d8a03e965129118dc8f5bf83"],
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": "0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b"
}

----------------------------------------

TITLE: Verifying SIWE Signatures with Viem
DESCRIPTION: Demonstrates how to verify a SIWE signature using the viem library instead of the built-in verifySignature function. This approach is recommended for working with social logins and emails with non-deployed smart accounts where the standard verification might not work.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/code.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from "viem";

const publicClient = createPublicClient({
  transport: http(
    `https://rpc.walletconnect.org/v1/?chainId=${chainId}&projectId=${projectId}`
  ),
});
const isValid = await publicClient.verifyMessage({
  message,
  address: address as `0x${string}`,
  signature: signature as `0x${string}`,
});

// The verifySignature is not working with social logins and emails with non deployed smart accounts
// for this reason we recommend using the viem to verify the signature
// import { verifySignature } from '@reown/appkit-siwe'
// const isValid = await verifySignature({ address, message, signature, chainId, projectId })

----------------------------------------

TITLE: Making Requests to Blockchain via AppKit
DESCRIPTION: Creates and sends a request to the blockchain with specified method and parameters. Includes callbacks for successful requests and error handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#2025-04-10_snippet_4

LANGUAGE: kotlin
CODE:
val requestParams = Modal.Params.Request(
    method = /* Selected method */,
    params = /* Method params  */,
)

AppKit.request(
    request = requestParams,
    onSuccess = {
    /* callback that letting you know that you have successful request */
    },
    onError = { error ->
    /* callback for error */
    }
)

----------------------------------------

TITLE: Using AppKit Provider Hook for Message Signing
DESCRIPTION: Shows how to use the useAppKitProvider hook to access wallet provider and implement message signing functionality using Ethers.js BrowserProvider.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { BrowserProvider } from "ethers";
import { useAppKitProvider } from "@reown/appkit/react";

function Components() {
  const { walletProvider } = useAppKitProvider("eip155");

  async function onSignMessage() {
    const provider = new BrowserProvider(walletProvider);
    const signer = await provider.getSigner();
    const signature = await signer?.signMessage("Hello AppKit Ethers");
    console.log(signature);
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>;
}

----------------------------------------

TITLE: Configuring AppKit with Wagmi Adapter in React
DESCRIPTION: This snippet shows how to configure AppKit using the Wagmi adapter in a React application. It creates the AppKit instance with specified adapters, networks, metadata, and features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_13

LANGUAGE: typescript
CODE:
createAppKit({
 adapters: [wagmiAdapter],
 networks: [mainnet, arbitrum],
 metadata: metadata,
 projectId,
 features: {
   analytics: true,
 }
})

export default function App() {
  return (
    <>
      <WagmiProvider config={wagmiAdapter.wagmiConfig}>
      <QueryClientProvider client={queryClient}>
          <HomePage />
       </QueryClientProvider>
      </WagmiProvider>
    </>
  )
}

----------------------------------------

TITLE: Sending EVM Transactions with Ethers and AppKit
DESCRIPTION: Create functions to prepare and send EVM transactions using Ethers and the wallet information from AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#2025-04-10_snippet_4

LANGUAGE: jsx
CODE:
// test transaction
const TEST_TX = {
  to: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045" as Address, // vitalik address
  value: parseUnits('0.0001', 'gwei')
}

// function to send a TX
const handleSendTx = async () => {
  // create the provider and signer
  const provider = new BrowserProvider(walletProvider, chainId);
  const signer = new JsonRpcSigner(provider, address);

  // send the transaction
  const tx = await signer.sendTransaction(TEST_TX);
  // log the transaction
  console.log(tx);
};

----------------------------------------

TITLE: Installing Core Reown AppKit Packages for React Native
DESCRIPTION: Installs the Reown AppKit for React Native along with ethers.js dependency using yarn.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
yarn add @reown/appkit-ethers-react-native ethers

----------------------------------------

TITLE: Implementing Session Approval in WalletKit
DESCRIPTION: Demonstrates how to approve a session by providing proposer's public key and namespaces. Requires CAIP-10 compliant account addresses.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_5

LANGUAGE: kotlin
CODE:
val proposerPublicKey: String = /*Proposer publicKey from SessionProposal object*/
val namespace: String = /*Namespace identifier, see for reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md#syntax*/
val accounts: List<String> = /*List of accounts on chains*/
val methods: List<String> = /*List of methods that wallet approves*/
val events: List<String> = /*List of events that wallet approves*/
val namespaces: Map<String, Wallet.Model.Namespaces.Session> = mapOf(namespace, Wallet.Model.Namespaces.Session(accounts, methods, events))

val approveParams: Wallet.Params.SessionApprove = Wallet.Params.SessionApprove(proposerPublicKey, namespaces)
WalletKit.approveSession(approveParams) { error -> /*callback for error while approving a session*/ }

----------------------------------------

TITLE: Implementing Solana Counter Program Interaction using TypeScript and @Solana/web3.js
DESCRIPTION: This snippet demonstrates how to interact with a counter program on Solana. It includes importing necessary modules, deserializing account data, creating and sending transactions to increment a counter. The code utilizes @Solana/web3.js for blockchain interactions and custom hooks for wallet and connection management.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/about/programs.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import {
  SystemProgram,
  PublicKey,
  Keypair,
  Transaction,
  TransactionInstruction,
  LAMPORTS_PER_SOL
} from '@solana/web3.js'
import { useAppKitAccount, useAppKitProvider } from '@reown/appkit/react'
import { useAppKitConnection, type Provider } from '@reown/appkit-adapter-solana/react'

function deserializeCounterAccount(data?: Buffer): { count: number } {
  if (data?.byteLength !== 8) {
    throw Error('Need exactly 8 bytes to deserialize counter')
  }

  return {
    count: Number(data[0])
  }
}

const { address } = useAppKitAccount()
const { connection } = useAppKitConnection()
const { walletProvider } = useAppKitProvider<Provider>('solana')

async function onIncrementCounter() {
  const PROGRAM_ID = new PublicKey('Cb5aXEgXptKqHHWLifvXu5BeAuVLjojQ5ypq6CfQj1hy')

  const counterKeypair = Keypair.generate()
  const counter = counterKeypair.publicKey

  const balance = await connection.getBalance(walletProvider.publicKey)
  if (balance < LAMPORTS_PER_SOL / 100) {
    throw Error('Not enough SOL in wallet')
  }

  const COUNTER_ACCOUNT_SIZE = 8
  const allocIx: TransactionInstruction = SystemProgram.createAccount({
    fromPubkey: walletProvider.publicKey,
    newAccountPubkey: counter,
    lamports: await connection.getMinimumBalanceForRentExemption(COUNTER_ACCOUNT_SIZE),
    space: COUNTER_ACCOUNT_SIZE,
    programId: PROGRAM_ID
  })

  const incrementIx: TransactionInstruction = new TransactionInstruction({
    programId: PROGRAM_ID,
    keys: [
      {
        pubkey: counter,
        isSigner: false,
        isWritable: true
      }
    ],
    data: Buffer.from([0x0])
  })

  const tx = new Transaction().add(allocIx).add(incrementIx)

  tx.feePayer = walletProvider.publicKey
  tx.recentBlockhash = (await connection.getLatestBlockhash('confirmed')).blockhash

  await walletProvider.signAndSendTransaction(tx, [counterKeypair])

  const counterAccountInfo = await connection.getAccountInfo(counter, {
    commitment: 'confirmed'
  })

  if (!counterAccountInfo) {
    throw new Error('Expected counter account to have been created')
  }

  const counterAccount = deserializeCounterAccount(counterAccountInfo?.data)

  if (counterAccount.count !== 1) {
    throw new Error('Expected count to have been 1')
  }

  console.log(`[alloc+increment] count is: ${counterAccount.count}`);
}

----------------------------------------

TITLE: Integrating AppKit with Wagmi and Bitcoin Adapters
DESCRIPTION: TypeScript implementation for integrating AppKit with Wagmi and Bitcoin network adapters. Configures EVM networks (Ethereum, Arbitrum, Sepolia) and Bitcoin.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

import { mainnet, arbitrum, sepolia, bitcoin } from '@reown/appkit/networks'

const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, arbitrum, sepolia, bitcoin]

// 0. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 1. Create the Wagmi adapter
export const wagmiAdapter = new WagmiAdapter({
  ssr: true,
  projectId,
  networks
})

// 2. Set up Bitcoin Adapter
const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

// 3. Set up the metadata - Optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 4. Create the AppKit instance
const modal = createAppKit({
  adapters: [wagmiAdapter, bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true,
  }
})

----------------------------------------

TITLE: Installing AppKit v5 and Dependencies for React
DESCRIPTION: This code snippet shows how to install AppKit v5 and its dependencies for a React environment using different package managers. It includes installing @web3modal/wagmi, wagmi, viem, and @tanstack/react-query.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @web3modal/wagmi@latest wagmi@2.x viem@2.x @tanstack/react-query@5.x

LANGUAGE: bash
CODE:
yarn add @web3modal/wagmi@latest wagmi@2.x viem@2.x @tanstack/react-query@5.x

LANGUAGE: bash
CODE:
bun a @web3modal/wagmi@latest wagmi@2.x viem@2.x @tanstack/react-query@5.x

LANGUAGE: bash
CODE:
pnpm add @web3modal/wagmi@latest wagmi@2.x viem@2.x @tanstack/react-query@5.x

----------------------------------------

TITLE: Configuring Custom RPC URLs with Wagmi Adapter in TypeScript
DESCRIPTION: Example showing how to configure custom RPC URLs for both WagmiAdapter and AppKit. When using the Wagmi adapter, you need to pass the same customRpcUrls configuration to both components.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_33

LANGUAGE: typescript
CODE:
const customRpcUrls: CustomRpcUrlMap = {
  'eip155:1': [{ url: 'https://your-custom-mainnet-url.com' }],
  'eip155:137': [{ url: 'https://your-custom-polygon-url.com' }]
}

const wagmiAdapter = new WagmiAdapter({
  networks: [...],
  projectId: "project-id",
  customRpcUrls
})

const modal = createAppKit({
  adapters: [...],
  networks: [...],
  projectId: "project-id",
  customRpcUrls
})

----------------------------------------

TITLE: Fetching Wallet Balance using Ethers and AppKit
DESCRIPTION: Create a function to retrieve and display the wallet balance using the BrowserProvider from Ethers and the wallet information from AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#2025-04-10_snippet_2

LANGUAGE: jsx
CODE:
// function to get the balance
const handleGetBalance = async () => {
  const provider = new BrowserProvider(walletProvider, chainId);
  const balance = await provider.getBalance(address);
  const eth = formatEther(balance);
  console.log(`${eth} ETH`);
};

----------------------------------------

TITLE: Configuring Networks in ReOwn AppKit
DESCRIPTION: Example of configuring multiple networks in the AppKit by importing them from the @reown/appkit/networks library.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { mainnet, solana } from "@reown/appkit/networks";

createAppKit({
  // ...
  networks: [mainnet, solana],
});

----------------------------------------

TITLE: Installing Legacy SIWE Dependencies with Yarn
DESCRIPTION: Command to install the required packages for legacy SIWE implementation using Yarn package manager. Includes viem as an additional dependency.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#2025-04-10_snippet_5

LANGUAGE: bash
CODE:
yarn add @reown/appkit-siwe siwe viem

----------------------------------------

TITLE: Initializing AppKit with Ethers.js v5 in React Native
DESCRIPTION: This snippet demonstrates how to import necessary dependencies, create configurations, define chains, and initialize AppKit in a React Native application. It includes setting up project ID, metadata, and chain configurations for Ethereum and Polygon networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import "@walletconnect/react-native-compat";
import "@ethersproject/shims";

import {
  createAppKit,
  defaultConfig,
  AppKit,
} from "@reown/appkit-ethers5-react-native";

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create config
const metadata = {
  name: "AppKit RN",
  description: "AppKit RN Example",
  url: "https://reown.com/appkit",
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
  redirect: {
    native: "YOUR_APP_SCHEME://",
  },
};

const config = defaultConfig({ metadata });

// 3. Define your chains
const mainnet = {
  chainId: 1,
  name: "Ethereum",
  currency: "ETH",
  explorerUrl: "https://etherscan.io",
  rpcUrl: "https://cloudflare-eth.com",
};

const polygon = {
  chainId: 137,
  name: "Polygon",
  currency: "MATIC",
  explorerUrl: "https://polygonscan.com",
  rpcUrl: "https://polygon-rpc.com",
};

const chains = [mainnet, polygon];

// 4. Create modal
createAppKit({
  projectId,
  chains,
  config,
  enableAnalytics: true, // Optional - defaults to your Cloud configuration
});

export default function App() {
  return (
    <>
      // Rest of your app...
      <AppKit />
    </>
  );
}

----------------------------------------

TITLE: Importing and Using Smart Sessions MDX Component
DESCRIPTION: This code snippet demonstrates how to import the Smart Sessions documentation component from a shared snippets folder and then render it in the current page. It uses JSX syntax common in React-based documentation frameworks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/early-access/smart-session.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SmartSessions from "/snippets/appkit/shared/smart-sessions.mdx";

<SmartSessions />

----------------------------------------

TITLE: Sending Native Token Transactions with AppKit EVM Module
DESCRIPTION: Methods to send native token transactions (e.g., ETH). Supports both direct parameter passing and using a SendTransactionParams object.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_13

LANGUAGE: csharp
CODE:
// Basic transaction
string txHash = await AppKit.EVM.SendTransactionAsync(
    "0x123...", // recipient address
    1000000000000000000, // 1 ETH in wei
    "0x" // optional data
);

// Using parameters object
var transactionParams = new SendTransactionParams
{
    AddressTo = "0x123...",
    Value = 1000000000000000000, // 1 ETH in wei
    Data = "0x" // optional data
};
string txHash = await AppKit.EVM.SendTransactionAsync(transactionParams);

----------------------------------------

TITLE: Accessing Wallet Provider with useAppKitProvider in Vue
DESCRIPTION: The useAppKitProvider hook retrieves the wallet provider and its type, which can then be used with libraries like ethers.js to interact with the blockchain. This example demonstrates signing a message.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/composables.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { BrowserProvider } from "ethers";
import { useAppKitProvider } from "@reown/appkit/vue";

function Components() {
  const { walletProvider } = useAppKitProvider("eip155");

  async function onSignMessage() {
    const provider = new BrowserProvider(walletProvider);
    const signer = await provider.getSigner();
    const signature = await signer?.signMessage("Hello AppKit Ethers");
    console.log(signature);
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>;
}

----------------------------------------

TITLE: Transaction Parameters for eth_sendTransaction in Ethereum
DESCRIPTION: Example parameters for eth_sendTransaction showing the structure of a transaction object including from/to addresses, gas parameters, and value fields.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
[
  {
    from: "0xb60e8dd61c5d32be8058bb8eb970870f07233155",
    to: "0xBDE1EAE59cE082505bB73fedBa56252b1b9C60Ce",
    data: "0x",
    gasPrice: "0x029104e28c",
    gas: "0x5208",
    value: "0x00",
  },
];

----------------------------------------

TITLE: Network Switching with AppKit
DESCRIPTION: Configuration and usage of AppKit for switching between different blockchain networks like mainnet, arbitrum, and polygon
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit/react";
import { mainnet, arbitrum, polygon } from "@reown/appkit/networks";

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  },
});

modal.switchNetwork(polygon);

----------------------------------------

TITLE: Creating Wagmi Adapter for AppKit in React
DESCRIPTION: This code demonstrates how to create a Wagmi adapter for AppKit in React. It sets up the project ID, metadata, and initializes the WagmiAdapter with specified networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_12

LANGUAGE: typescript
CODE:
const projectId = 'YOUR_PROJECT_ID'
const queryClient = new QueryClient()

const metadata = { //optional
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://example.com',
    icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const wagmiAdapter = new WagmiAdapter({
  networks: [mainnet, arbitrum],
  projectId
})

----------------------------------------

TITLE: Authentication Response Implementation in Kotlin
DESCRIPTION: Shows how to implement authentication response handling including creating authentication objects and signing messages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_32

LANGUAGE: kotlin
CODE:
override val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)
  get() = { sessionAuthenticate, verifyContext ->
  val auths = mutableListOf<Sign.Model.Cacao>()

  val authPayloadParams =
    generateAuthPayloadParams(
      sessionAuthenticate.payloadParams,
      supportedChains = listOf("eip155:1", "eip155:137", "eip155:56"), // Note: Only EVM chains are supported
      supportedMethods = listOf("personal_sign", "eth_signTypedData", "eth_sign")
  )

  authPayloadParams.chains.forEach { chain ->
    val issuer = "did:pkh:$chain:$address"
    val formattedMessage = formatAuthMessage(Sign.Params.FormatMessage(authPayloadParams, issuer))

    val signature = signMessage(message: formattedMessage, privateKey: privateKey) //Note: Assume `signMessage` is a function you've implemented to sign messages.
    val auth = generateAuthObject(authPayloadParams, issuer, signature)
    auths.add(auth)
  }
}

----------------------------------------

TITLE: Configuring and Switching Networks with AppKit
DESCRIPTION: Demonstrates how to initialize AppKit with multiple networks and switch between them. Shows configuration with wagmi adapter and network switching functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit/react";
import { mainnet, arbitrum, polygon } from "@reown/appkit/networks";

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  },
});

modal.switchNetwork(polygon);

----------------------------------------

TITLE: Detecting Smart Contract Wallets with web3.js
DESCRIPTION: This snippet shows how to check if an address is a smart contract wallet using web3.js. It retrieves the bytecode at the address and verifies if it's non-empty, indicating the presence of a smart contract.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/smart-contract-wallet-usage.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
import Web3 from "web3";

const web3 = new Web3(rpcUrl);

const bytecode = await web3.eth.getCode(address);

const isSmartContract = bytecode && utils.hexStripZeros(bytecode) !== "0x";

----------------------------------------

TITLE: Implementing AppKit Button in HTML
DESCRIPTION: This HTML snippet demonstrates how to include the AppKit button web component in a basic HTML structure. It uses the <appkit-button> element and includes a script reference to main.js for any additional functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/bitcoin/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: HTML
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>HTML AppKit Example</title>
  </head>
  <body>
    <appkit-button />
    <script type="module" src="main.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Using useAppKitState with Ethers
DESCRIPTION: Demonstrates how to use the useAppKitState hook with Ethers integration to access the current state of the AppKit modal, including whether it's open and the selected network ID.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
import { useAppKitState } from '@reown/appkit-ethers-react-native'

const { open, selectedNetworkId } = useAppKitState()

----------------------------------------

TITLE: Configuring AppKit in TypeScript for Reown Project
DESCRIPTION: This code snippet demonstrates how to set up AppKit configuration in a Reown project. It includes importing necessary modules, setting up project ID and metadata, and creating an AppKit instance with specified adapters, networks, and features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers5/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { createAppKit } from "@reown/appkit";
import { Ethers5Adapter } from "@reown/appkit-adapter-ethers5";
import { mainnet, arbitrum } from "@reown/appkit/networks";

// 1. Get projectId at https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create your application's metadata object
const metadata = {
  name: "My Website",
  description: "My Website description",
  url: "https://mywebsite.com", // url must match your domain & subdomain
  icons: ["https://avatars.mywebsite.com/"],
};

// 3. Create a AppKit instance
const modal = createAppKit({
  adapters: [new Ethers5Adapter()],
  metadata: metadata,
  networks: [mainnet, arbitrum],
  projectId,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

----------------------------------------

TITLE: Accessing Wallet Provider in TypeScript
DESCRIPTION: Gets the wallet provider object which can be used for interactions with the blockchain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
const walletProvider = modal.getWalletProvider();

----------------------------------------

TITLE: Interacting with Wallets and Smart Contracts using Ethers in JavaScript
DESCRIPTION: Example of using Ethers to interact with wallets and send a transaction. This snippet shows how to create a provider, get a signer, and send a transaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#2025-04-10_snippet_7

LANGUAGE: tsx
CODE:
import { BrowserProvider, Contract, parseEther } from "ethers";

const provider = await modal.subscribeProviders((state) => {
  return state["eip155"];
});

const addressFrom = await modal.subscribeAccount((state) => {
  return state;
});

if (!provider) throw Error("No provider found");
if (!addressFrom) throw Error("No address found");

function sendTransaction() {
  const tx = {
    from: addressFrom,
    to: "0x...", // any address
    value: parseEther("0.0001"),
  };
  const ethersProvider = new BrowserProvider(provider);
  const signer = await ethersProvider.getSigner();
  const tx = await signer.sendTransaction(tx);
  console.log("transaction:", tx);
}

----------------------------------------

TITLE: Writing to Smart Contract in Reown AppKit (JavaScript)
DESCRIPTION: This code snippet shows how to write to a smart contract using the Reown AppKit, including transferring tokens and calling a custom function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#2025-04-10_snippet_8

LANGUAGE: javascript
CODE:
Future<dynamic> requestWriteContract({
  required String? topic,
  required String chainId,
  required DeployedContract deployedContract,
  required String functionName,
  required Transaction transaction,
  List<dynamic> parameters = const [],
  String? method,
});

LANGUAGE: javascript
CODE:
Future<void> transferToken() async {
  final chainId = _appKitModal.selectedChain!.chainId;
  final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);

  // Transfer 0.01 amount of Token using Smart Contract's transfer function
  final result = await _appKitModal.requestWriteContract(
    topic: _appKitModal.session!.topic,
    chainId: chainId,
    deployedContract: deployedContract,
    functionName: 'transfer',
    transaction: Transaction(
      from: EthereumAddress.fromHex(_appKitModal.session!.getAddress(namespace)), // sender address
    ),
    parameters: [
      EthereumAddress.fromHex('0x59e2f66C0E96803206B6486cDb39029abAE834c0'), // recipient address
      transferValue, // == 0.23 USDT
    ],
  );
}

LANGUAGE: javascript
CODE:
Future<void> writeMessage() async {
  final chainId = _appKitModal.selectedChain!.chainId;
  final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);

  final result = await _appKitModal.requestWriteContract(
    topic: _appKitModal.session!.topic,
    chainId: chainId,
    deployedContract: deployedContract,
    functionName: 'sayHello',
    transaction: Transaction(
      from: EthereumAddress.fromHex(_appKitModal.session!.getAddress(namespace)), // sender address
    ),
    parameters: ['Hello world!'],
  );
}

----------------------------------------

TITLE: Initiating Authentication with ReCaps in Swift
DESCRIPTION: Initiates an authentication request with ReCaps capabilities, which extends the SIWE protocol to enable users to give informed consent for dApps to exercise scoped capabilities on their behalf.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_8

LANGUAGE: Swift
CODE:
func initiateAuthentication() {
    Task {
        do {
            let authParams = AuthRequestParams.stub() // Customize your AuthRequestParams as needed
            let uri = try await Sign.instance.authenticate(authParams)
            // Present the URI to the user, e.g., show a QR code or send a deep link
            presentAuthenticationURI(uri)
        } catch {
            print("Failed to initiate authentication request: \(error)")
        }
    }
}

----------------------------------------

TITLE: Multi-Blockchain Support Configuration with EVM, Solana, Polkadot, and Tron
DESCRIPTION: Advanced configuration example for ReownAppKitModal supporting multiple blockchains including EVM, Solana, Polkadot, and Tron. This setup includes network definitions and namespace configurations for all supported chains.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#2025-04-10_snippet_8

LANGUAGE: javascript
CODE:
// Add Polkadot and Tron before instantiating ReownAppKitModal()
ReownAppKitModalNetworks.addSupportedNetworks('polkadot', [
  ReownAppKitModalNetworkInfo(
    name: 'Polkadot',
    chainId: '91b171bb158e2d3848fa23a9f1c25182',
    chainIcon: 'https://cryptologos.cc/logos/polkadot-new-dot-logo.png',
    currency: 'DOT',
    rpcUrl: 'https://rpc.polkadot.io',
    explorerUrl: 'https://polkadot.subscan.io',
  ),
  ReownAppKitModalNetworkInfo(
    name: 'Westend',
    chainId: 'e143f23803ac50e8f6f8e62695d1ce9e',
    currency: 'DOT',
    rpcUrl: 'https://westend-rpc.polkadot.io',
    explorerUrl: 'https://westend.subscan.io',
    isTestNetwork: true,
  ),
]);

ReownAppKitModalNetworks.addSupportedNetworks('tron', [
  ReownAppKitModalNetworkInfo(
    name: 'Tron',
    chainId: '0x2b6653dc',
    chainIcon: 'https://cryptologos.cc/logos/tron-trx-logo.png',
    currency: 'TRX',
    rpcUrl: 'https://api.trongrid.io',
    explorerUrl: 'https://tronscan.org',
  ),
  ReownAppKitModalNetworkInfo(
    name: 'Tron testnet',
    chainId: '0xcd8690dc',
    chainIcon: 'https://cryptologos.cc/logos/tron-trx-logo.png',
    currency: 'TRX',
    rpcUrl: 'https://nile.trongrid.io',
    explorerUrl: 'https://test.tronscan.org',
    isTestNetwork: true,
  ),
]);

final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect( // OPTIONAL
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: false,
    ),
  ),
  // With this configuration you can enable Email + Social Login but it will only work with EVM and Solana blockchains
  featuresConfig: FeaturesConfig(
    email: true,
    socials: [...],
    showMainWallets: true|false,
  ),
  // optionalNamespaces are mandatory with this kind of configuration 
  optionalNamespaces: {
    'eip155': RequiredNamespace.fromJson({
      'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
        namespace: 'eip155',
      ).map((chain) => '${chain.chainId}').toList(),
      'methods':
          NetworkUtils.defaultNetworkMethods['eip155']!.toList(),
      'events':
          NetworkUtils.defaultNetworkEvents['eip155']!.toList(),
    }),
    'solana': RequiredNamespace.fromJson({
      'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
        namespace: 'solana',
      ).map((chain) => '${chain.chainId}').toList(),
      'methods':
          NetworkUtils.defaultNetworkMethods['solana']!.toList(),
      'events': [],
    }),
    'polkadot': RequiredNamespace.fromJson({
      'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
        namespace: 'polkadot',
      ).map((chain) => '${chain.chainId}').toList(),
      'methods': [
        'polkadot_signMessage',
        'polkadot_signTransaction',
      ],
      'events': []
    }),
    'tron': RequiredNamespace.fromJson({
      'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
        namespace: 'tron',
      ).map((chain) => '${chain.chainId}').toList(),
      'methods': [
        'tron_signMessage',
        'tron_signTransaction',
      ],
      'events': []
    }),
  },
);

----------------------------------------

TITLE: Initializing Reown AppKit in React Application
DESCRIPTION: This code demonstrates how to set up the Reown AppKit in a React application. It includes importing necessary dependencies, configuring project metadata, setting up supported networks, and creating the AppKit instance. The configuration must be placed outside of React components to prevent unnecessary re-renders.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit/react";
import { Ethers5Adapter } from "@reown/appkit-adapter-ethers5";
import { mainnet, arbitrum } from "@reown/appkit/networks";

// 1. Get projectId
const projectId = "YOUR_PROJECT_ID";

// 2. Create a metadata object - optional
const metadata = {
  name: "My Website",
  description: "My Website description",
  url: "https://mywebsite.com", // origin must match your domain & subdomain
  icons: ["https://avatars.mywebsite.com/"],
};

// 3. Create the AppKit instance
createAppKit({
  adapters: [new Ethers5Adapter()],
  metadata: metadata,
  networks: [mainnet, arbitrum],
  projectId,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

export default function App() {
  return <YourApp />; //make sure you have configured the <appkit-button> inside
}

----------------------------------------

TITLE: Setting Up Firebase Messaging Listeners in TypeScript
DESCRIPTION: This code snippet shows how to set up listeners for incoming push notifications using Firebase Cloud Messaging. It includes handlers for both foreground and background notifications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/push.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
import messaging from '@react-native-firebase/messaging';

// emitted when the app is open and a notification is received
messaging().onMessage(async notification => {
    ...
});

// emitted when the app is in the background or closed and a notification is received
messaging().setBackgroundMessageHandler(async notification => {
    ...
});

----------------------------------------

TITLE: Using useAppKitEvents with Ethers v5
DESCRIPTION: Demonstrates how to use the useAppKitEvents hook with Ethers v5 integration to track modal events. The hook accepts an optional callback function that executes when an event is triggered.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_9

LANGUAGE: typescript
CODE:
import { useAppKitEvents } from '@reown/appkit-ethers5-react-native'

const event = useAppKitEvents(event => {
  // your code here
})

----------------------------------------

TITLE: Handling WalletConnect Session Requests in Swift
DESCRIPTION: Sets up a subscription to process incoming session requests from dApps after a session is established. These requests typically involve signing transactions or messages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_12

LANGUAGE: swift
CODE:
WalletKit.instance.sessionRequestPublisher
  .receive(on: DispatchQueue.main)
  .sink { [weak self] session in
      self?.verifyDapp(session.context)
      self?.showSessionRequest(session.request)
  }.store(in: &publishers)

----------------------------------------

TITLE: Using AppKit Connection Hook for Solana
DESCRIPTION: Hook to access the Solana connection object for blockchain interactions. Provides access to the Connection class from solana-web3.js.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { useAppKitConnection } from '@reown/appkit-adapter-solana/react'

...

const { connection } = useAppKitConnection()

----------------------------------------

TITLE: Sending ERC20 Tokens in C#
DESCRIPTION: Shows how to send ERC20 tokens by interacting with a token contract using AppKit. This operation requires a transaction and gas fees because it changes blockchain state. The code estimates the required gas before submitting the transaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/usage.mdx#2025-04-10_snippet_3

LANGUAGE: csharp
CODE:
const string contractAddress = "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984";
const string recipientAddress = "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045";
const string abi = "..."; // ABI of the ERC20 token contract

BigInteger amount = 1;

// Arguments for the transfer method. The order of the arguments must match the order in the method signature.
// Method signature: `function transfer(address _to, uint256 _value) public returns (bool success)`
var arguments = new object[]
{
    recipientAddress,
    amount
};

// Estimate gas amount
var gasAmount = await AppKit.Evm.EstimateGasAsync(contractAddress, abi, "transfer", arguments: arguments);

// Send transaction
var result = await AppKit.Evm.WriteContractAsync(contractAddress, abi, "transfer", gasAmount, arguments);

----------------------------------------

TITLE: Using useAppKit Hook with Ethers v5
DESCRIPTION: Demonstrates how to use the useAppKit hook with Ethers v5 integration to control the AppKit modal. The hook provides open and close functions to manage the modal's visibility.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
import { useAppKit } from '@reown/appkit-ethers5-react-native'

export default function Component() {
  const { open, close } = useAppKit()

open()

//...
}

----------------------------------------

TITLE: Signing Messages with useAppKitProvider in Vue
DESCRIPTION: This snippet shows how to use the useAppKitProvider hook to get the wallet provider and sign a message. It includes error handling and demonstrates the process of encoding and signing a message using the Solana provider.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/composables.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { useAppKitAccount, useAppKitProvider } from "@reown/appkit/vue";
import type { Provider } from "@reown/appkit-adapter-solana";

function SignMessage() {
  // 0. Get account and provider
  const { address } = useAppKitAccount();
  const { walletProvider } = useAppKitProvider<Provider>("solana");

  // 1. Create a function to sign a message
  async function onSignMessage() {
    try {
      if (!walletProvider || !address) {
        throw Error("user is disconnected");
      }

      // 2. Encode message and sign it
      const encodedMessage = new TextEncoder().encode("Hello from AppKit");
      const signature = await walletProvider.signMessage(encodedMessage);

      console.log(signature);
    } catch (err) {
      // Handle Error Here
    }
  }

  // 3. Create a button to trigger the function
  return <button onClick={onSignMessage}>Sign Message</button>;
}

----------------------------------------

TITLE: Installing Solana Wallet Adapter Package
DESCRIPTION: This snippet provides commands for installing the Solana wallet adapter package using different package managers like npm, Yarn, Bun, and pnpm.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/custom-connectors.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
npm install @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
yarn add @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
bun a @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
pnpm add @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Session Approval Implementation in Kotlin
DESCRIPTION: Demonstrates how to approve a WalletConnect session by providing the proposer's public key and namespace configuration. Uses CAIP10 standard for address formatting.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_23

LANGUAGE: kotlin
CODE:
val proposerPublicKey: String = /*Proposer publicKey from SessionProposal object*/
val namespace: String = /*Namespace identifier, see for reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md#syntax*/
val accounts: List<String> = /*List of accounts on chains*/
val methods: List<String> = /*List of methods that wallet approves*/
val events: List<String> = /*List of events that wallet approves*/
val namespaces: Map<String, Sign.Model.Namespaces.Session> = mapOf(namespace, Sign.Model.Namespaces.Session(accounts, methods, events))

val approveParams: Sign.Params.Approve = Sign.Params.Approve(proposerPublicKey, namespaces)
SignClient.approveSession(approveParams) { error -> /*callback for error while approving a session*/ }

----------------------------------------

TITLE: Initializing Wallet Provider for Message Signing
DESCRIPTION: Initializes the wallet provider from the AppKit hook and gets the user's connection status and address for message signing functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
// Get the wallet provider with the AppKit hook
const { walletProvider } = useAppKitProvider < Provider > "solana";

// AppKit hook to get the address and check if the user is connected
const { address, isConnected } = useAppKitAccount();

----------------------------------------

TITLE: Initializing AppKit with SIWE Configuration
DESCRIPTION: Code snippet showing how to initialize AppKit with the SIWE configuration. This is needed to enable Sign In With Ethereum authentication in your application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { siweConfig } from "./siweConfig.ts";

createAppKit({
  //...
  siweConfig,
});

----------------------------------------

TITLE: Setting up SIWE Server-side Express Implementation
DESCRIPTION: Implements a backend server using Express.js that handles SIWE authentication. Includes routes for generating nonces, verifying messages, managing sessions, and handling sign-out. Uses viem for signature verification and specifically addresses handling of social logins and emails with non-deployed smart accounts.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/code.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import cors from "cors";
import express from "express";
import Session from "express-session";
import { generateNonce } from "siwe";
import {
  /*verifySignature,*/
  getAddressFromMessage,
  getChainIdFromMessage,
} from "@reown/appkit-siwe";
import { createPublicClient, http } from "viem";

const app = express();

const projectId = "YOUR_PROJECT_ID";

// configure cors and sessions
app.use(
  cors({
    origin: "http://localhost:5173", // frontend URL
    credentials: true,
  })
);
app.use(express.json());
app.use(
  Session({
    name: "siwe-quickstart",
    secret: "siwe-quickstart-secret",
    resave: true,
    saveUninitialized: true,
    cookie: { secure: false, sameSite: true },
  })
);

app.get("/nonce", function (_, res) {
  res.setHeader("Content-Type", "text/plain");
  res.send(generateNonce());
});

// verify the message
app.post("/verify", async (req, res) => {
  try {
    if (!req.body.message) {
      return res.status(400).json({ error: "SiweMessage is undefined" });
    }

    // save the session with the address and chainId (SIWESession)
    req.session.siwe = { address, chainId };
    req.session.save(() => res.status(200).send(true));

    const message = req.body.message;
    const signature = req.body.signature;
    const address = getAddressFromMessage(message);
    let chainId = getChainIdFromMessage(message);

    // for the moment, the verifySignature is not working with social logins and emails  with non deployed smart accounts
    // for this reason we recommend using the viem to verify the signature
    const publicClient = createPublicClient({
      transport: http(
        `https://rpc.walletconnect.org/v1/?chainId=${chainId}&projectId=${projectId}`
      ),
    });
    const isValid = await publicClient.verifyMessage({
      message,
      address,
      signature,
    });
    if (!isValid) {
      // throw an error if the signature is invalid
      throw new Error("Invalid signature");
    }
    if (chainId.includes(":")) {
      chainId = chainId.split(":")[1];
    }

    // Convert chainId to a number
    chainId = Number(chainId);

    if (isNaN(chainId)) {
      throw new Error("Invalid chainId");
    }

    // save the session with the address and chainId (SIWESession)
    req.session.siwe = { address, chainId };
    req.session.save(() => res.status(200).send(true));
  } catch (e) {
    // clean the session
    req.session.siwe = null;
    req.session.nonce = null;
    req.session.save(() => res.status(500).json({ message: e.message }));
  }
});

/// ... check the github repository for the others endpoints

// get the session
app.get("/session", (req, res) => {
  res.setHeader("Content-Type", "application/json");
  res.send(req.session.siwe);
});

----------------------------------------

TITLE: Registering a Wallet Account with Notify API in JavaScript
DESCRIPTION: Demonstrates how to register a wallet account with the Notify API. This process involves checking if the account is already registered, preparing registration parameters, signing a message, and finally registering the account.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
const account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`
const domain =  'app.mydomain.com',
const allApps =  true

if (notifyClient.isRegistered({ account, domain, allApps })) return;

const {registerParams, message}  = notifyClient.prepareRegistration({
  account,
  domain,
  allApps
});

const signature = await ethersWallet.signMessage(message);

await notifyClient.register({
  registerParams,
  signature,
})

----------------------------------------

TITLE: Updating Session with New Chains in WalletKit
DESCRIPTION: This snippet shows how to update an existing session with new chains using the updateSession method in WalletKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_8

LANGUAGE: javascript
CODE:
const namespaces = session.namespaces;
const chains = ["eip155:1", "eip155:137"];
const accounts = [
  "eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb",
  "eip155:137:0x1234567890123456789012345678901234567890",
];
const updatedNamespaces = {
  ...namespaces,
  eip155: {
    ...namespaces.eip155,
    accounts,
    chains,
  },
};
await walletKit.updateSession({
  topic: session.topic,
  namespaces: updatedNamespaces,
});

----------------------------------------

TITLE: Importing AppKit Hooks for Bitcoin Connection
DESCRIPTION: Imports the necessary hooks from the AppKit library to interact with the Bitcoin blockchain and wallet providers. These hooks are essential for connecting to Bitcoin wallets and accessing their functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { useAppKitProvider, useAppKitAccount } from "@reown/appkit/react";
import type { BitcoinConnector } from "@reown/appkit-adapter-bitcoin";

----------------------------------------

TITLE: Smart Contract Interaction with Ethers
DESCRIPTION: Example of using Ethers to interact with smart contracts in a React component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#2025-04-10_snippet_3

LANGUAGE: tsx
CODE:
import { useAppKitProvider, useAppKitAccount } from "@reown/appkit/react";
import { BrowserProvider, Contract, formatUnits } from "ethers";

const USDTAddress = "0x617f3112bf5397D0467D315cC709EF968D9ba546";

// The ERC-20 Contract ABI, which is a common contract interface
// for tokens (this is the Human-Readable ABI format)
const USDTAbi = [
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function balanceOf(address) view returns (uint)",
  "function transfer(address to, uint amount)",
  "event Transfer(address indexed from, address indexed to, uint amount)",
];

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();
  const { walletProvider } = useAppKitProvider("eip155");

  async function getBalance() {
    if (!isConnected) throw Error("User disconnected");

    const ethersProvider = new BrowserProvider(walletProvider);
    const signer = await ethersProvider.getSigner();
    // The Contract object
    const USDTContract = new Contract(USDTAddress, USDTAbi, signer);
    const USDTBalance = await USDTContract.balanceOf(address);

    console.log(formatUnits(USDTBalance, 18));
  }

  return <button onClick={getBalance}>Get User Balance</button>;
}

----------------------------------------

TITLE: Triggering AppKit Modal with Default Button Component in React Native
DESCRIPTION: This code snippet shows how to use the pre-built AppKitButton component to open the AppKit modal in a React Native application. It's a simple way to integrate the connect functionality without custom implementation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/implementation.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { AppKitButton } from "@reown/appkit-ethers5-react-native";

export default function ConnectView() {
  return (
    <>
      ...rest of your view
      <AppKitButton />
    </>
  );
}

----------------------------------------

TITLE: Implementing getBalance Function for EVM Wallet in React
DESCRIPTION: Function that fetches and logs the user's wallet balance. It uses the refetch method from the useBalance hook to get up-to-date balance information.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_2

LANGUAGE: jsx
CODE:
// function to get the balance
const handleGetBalance = async () => {
  const balance = await refetch();
  console.log(
    `${balance?.data?.value.toString()} ${balance?.data?.symbol.toString()}`
  );
};

----------------------------------------

TITLE: Using useAppKitAccount Hook for Client Information in React
DESCRIPTION: This hook returns the client's account information including address, CAIP address, and connection status. It's part of the @reown/appkit/react package and provides essential wallet connectivity data.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Using Wallet Provider with Ethers.js in Vue Components
DESCRIPTION: Demonstrates how to use the useAppKitProvider hook together with useAppKitAccount and useAppKitNetwork hooks to access wallet information and sign messages with ethers.js in a Vue component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers5/composables.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import {
  useAppKitAccount,
  useAppKitProvider,
  useAppKitNetwork,
} from "@reown/appkit/vue";
import { ethers } from "ethers";
import { useAppKitProvider } from "@reown/appkit/vue";

function Components() {
  const { walletProvider } = useAppKitProvider("eip155");
  const { address } = useAppKitAccount();
  const { chainId } = useAppKitNetwork();

  async function onSignMessage() {
    const provider = new ethers.providers.Web3Provider(walletProvider, chainId);
    const signer = provider.getSigner(address);
    const signature = await signer?.signMessage("Hello AppKit Ethers");
    console.log(signature);
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>;
}

----------------------------------------

TITLE: Configuring Reown AppKit with WagmiAdapter
DESCRIPTION: Complete setup of Reown AppKit using the createAppKit function with WagmiAdapter. Includes project configuration, network setup, metadata definition, and modal event handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/wagmi/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { mainnet, arbitrum } from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

// 1. Get a project ID at https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

export const networks = [mainnet, arbitrum]

// 2. Set up Wagmi adapter
const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks
})

// 3. Configure the metadata
const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 3. Create the modal
const modal = createAppKit({
  adapters: [wagmiAdapter],
  networks: [mainnet, arbitrum],
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

// 4. Trigger modal programaticaly
const openConnectModalBtn = document.getElementById('open-connect-modal')
const openNetworkModalBtn = document.getElementById('open-network-modal')

openConnectModalBtn.addEventListener('click', () => modal.open())
openNetworkModalBtn.addEventListener('click', () => modal.open({ view: 'Networks' }))

----------------------------------------

TITLE: Configuring Web3Modal for Solana
DESCRIPTION: Configuration setup for Web3Modal with Solana, including chain selection, project ID, and metadata for wallet connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#2025-04-10_snippet_4

LANGUAGE: tsx
CODE:
// 0. Setup chains
const chains = [solana, solanaTestnet, solanaDevnet]

//  Get projectId at https://cloud.reown.com
const projectId = import.meta.env.VITE_PROJECT_ID
if (!projectId) throw new Error('Project ID is undefined')

// 2. Create solanaConfig
const metadata = {
  name: 'Appkit Solana Example',
  description: 'Appkit Solana Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const solanaConfig = defaultSolanaConfig({
  metadata,
  chains,
  projectId,
  auth: {
    email: true,
    socials: ['google', 'x', 'farcaster', 'github']
  }
})

//  Create modal
createWeb3Modal({
  metadata,
  solanaConfig,
  chains,
  projectId
})

----------------------------------------

TITLE: Initializing AppKit Hooks for Wallet and Network Information
DESCRIPTION: Use AppKit hooks to retrieve the user's address, connection status, chain ID, and wallet provider for EVM interactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#2025-04-10_snippet_1

LANGUAGE: jsx
CODE:
// AppKit hook to get the address and check if the user is connected
const { address, isConnected } = useAppKitAccount();
// AppKit hook to get the chain id
const { chainId } = useAppKitNetworkCore();
// AppKit hook to get the wallet provider
const { walletProvider } = useAppKitProvider < Provider > "eip155";

----------------------------------------

TITLE: Using useAppKitNetwork Hook for Network Management
DESCRIPTION: Hook for accessing and managing network data including network switching functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
import { useAppKitNetwork } from "@reown/appkit/react";

export default Component(){
  const { caipNetwork, caipNetworkId, chainId, switchNetwork } = useAppKitNetwork()
}

----------------------------------------

TITLE: Creating a Custom Network with AppKit
DESCRIPTION: This snippet demonstrates how to define a custom EVM-compatible network object and pass it to the AppKit. It shows all required parameters including chain ID, name, CAIP network ID, native currency details, RPC URLs, and block explorer information.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/custom-networks.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { defineChain } from '@reown/appkit/networks';

// Define the custom network
const customNetwork = defineChain({
  id: 123456789,
  caipNetworkId: 'eip155:123456789',
  chainNamespace: 'eip155',
  name: 'Custom Network',
  nativeCurrency: {
    decimals: 18,
    name: 'Ether',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: {
      http: ['RPC_URL'],
      webSocket: ['WS_RPC_URL'],
    },
  },
  blockExplorers: {
    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },
  },
  contracts: {
    // Add the contracts here
  }
})

// Then pass it to the AppKit
createAppKit({
    adapters: [...],
    networks: [customNetwork],
    chainImages: { // Customize networks' logos
      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'
    }
})

----------------------------------------

TITLE: Reading Contract Data with AppKit EVM Module
DESCRIPTION: Methods to read data from smart contracts without requiring gas. Supports both JSON and human-readable ABI formats, with and without arguments, and using a ReadContractParams object.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_11

LANGUAGE: csharp
CODE:
// Using JSON ABI
string jsonAbi = "[ /* Your contract ABI */ ]";
string tokenSymbol = await AppKit.EVM.ReadContractAsync<string>(
    "0x123...", // contract address
    jsonAbi,
    "symbol" // method name
);

// Using human-readable ABI
string humanReadableAbi = "function symbol() view returns (string)";
string tokenSymbol = await AppKit.EVM.ReadContractAsync<string>(
    "0x123...", // contract address
    humanReadableAbi,
    "symbol" // method name
);

// With arguments
string balance = await AppKit.EVM.ReadContractAsync<string>(
    "0x123...", // contract address
    jsonAbi,
    "balanceOf", // method name
    new object[] { "0x456..." } // arguments
);

// Using parameters object
var readContractParams = new ReadContractParams
{
    ContractAddress = "0x123...",
    ContractAbi = jsonAbi,
    MethodName = "balanceOf",
    Arguments = new object[] { "0x456..." }
};
string balance = await AppKit.EVM.ReadContractAsync<string>(readContractParams);

----------------------------------------

TITLE: Initializing AppKit Provider for Ethers in React
DESCRIPTION: This code initializes the AppKit provider hook to obtain the wallet provider for EIP-155 compatible chains, which is necessary for Ethers-based smart contract interactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#2025-04-10_snippet_5

LANGUAGE: jsx
CODE:
const { walletProvider } = useAppKitProvider < Provider > "eip155";

----------------------------------------

TITLE: Implementing Message Signing Function
DESCRIPTION: Function to prompt the wallet to sign a message. It encodes the message, calls the signMessage method from the wallet provider, and logs the signature in hexadecimal format.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
// function to sing a msg
const handleSignMsg = async () => {
  // message to sign
  const encodedMessage = new TextEncoder().encode("Hello Reown AppKit!");

  // Raise the modal
  const sig = await walletProvider.signMessage(encodedMessage);

  // Print the signed message in hexadecimal format
  console.log(Buffer.from(sig).toString("hex"));
};

----------------------------------------

TITLE: Preparing Chain Abstraction Transactions in TypeScript
DESCRIPTION: The prepare method checks if a transaction requires additional bridging transactions beforehand, returning a Promise with the CanFulfilResponse indicating whether bridging is needed and providing necessary transaction data.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/early-access/chain-abstraction.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
public prepare(params: {
  transaction: ChainAbstractionTypes.Transaction;
}): Promise<ChainAbstractionTypes.CanFulfilResponse>;

----------------------------------------

TITLE: Importing Balance and Account Hooks for EVM in React
DESCRIPTION: Import statements for accessing wallet balance functionality using Wagmi and Reown AppKit in React. These imports provide hooks for retrieving balance data and account information.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import { useBalance } from "wagmi";
import { useAppKitAccount } from "@reown/appkit/react";
import { type Address } from "viem";

----------------------------------------

TITLE: Integrating AppKit with Wagmi and Solana Adapters
DESCRIPTION: TypeScript implementation for integrating AppKit with Wagmi and Solana network adapters. Configures EVM networks (Ethereum, Arbitrum, Sepolia) and Solana networks (Mainnet, Testnet, Devnet).
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { SolanaAdapter } from '@reown/appkit-adapter-solana'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

import {
  mainnet,
  arbitrum,
  sepolia,
  solana,
  solanaTestnet,
  solanaDevnet,
} from "@reown/appkit/networks";
import type { AppKitNetwork } from "@reown/appkit/types";

const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet]

// 0. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 1. Create the Wagmi adapter
export const wagmiAdapter = new WagmiAdapter({
  ssr: true,
  projectId,
  networks
})

// 2. Create Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter()

// 3. Set up the metadata - Optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 4. Create the AppKit instance
const modal = createAppKit({
  adapters: [wagmiAdapter, solanaWeb3JsAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true,
  }
})

----------------------------------------

TITLE: Initializing AppKit with SIWE Configuration
DESCRIPTION: TypeScript code example showing how to initialize AppKit with SIWE configuration, including adapter setup, network configuration, and feature flags.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/siwe.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter], //or your Ethers adapter
  projectId,
  networks: [mainnet, arbitrum],
  defaultNetwork: mainnet,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
  siweConfig: siweConfig, // pass your siweConfig
});

----------------------------------------

TITLE: Initializing Hooks for Solana Transactions
DESCRIPTION: Initializes the hooks to get the connection status, address, Solana connection object, and wallet provider needed for creating and sending transactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_10

LANGUAGE: javascript
CODE:
const { isConnected, address } = useAppKitAccount();
const { connection } = useAppKitConnection();
const { walletProvider } = useAppKitProvider < Provider > "solana";

----------------------------------------

TITLE: Sending Notifications with cURL
DESCRIPTION: cURL command example for sending notifications. Shows how to structure the request with proper headers and JSON payload.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "notification": {
      "type": "a1e53b95-18e5-4af8-9f03-9308ec87b687",
      "title": "The price of Ethereum has risen",
      "body": "The price of Ethereum has gone up 10%",
      "url": "https://app.example.com"
    },
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"
    ]
  }'

----------------------------------------

TITLE: Registering an Account with Wagmi Core in TypeScript
DESCRIPTION: This code demonstrates the complete flow for registering an account with Reown using the @wagmi/core library for signing messages. It includes preparing registration parameters, checking if an account is already registered, signing the message, and submitting the registration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/registering-accounts/javascript.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { signMessageAsync } from '@wagmi/core'

const { registerParams, signature } = await client.prepareRegistration({
  account
})
const isRegistered = await client.getAccountIsRegistered(account)
const signature = await signMessageAsync({ message })
await register({ registerParams, signature })

----------------------------------------

TITLE: Handling Errors with useAppKitError Hook
DESCRIPTION: The useAppKitError hook provides access to any errors that occur during wallet interactions. This allows for proper error handling and user feedback in the application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: ts
CODE:
import { useAppKitError } from "@reown/appkit-ethers5-react-native";

function Components() {
  const { error } = useAppKitError();

  //...
}

----------------------------------------

TITLE: Signing Messages with Ethers and AppKit
DESCRIPTION: Implement a function to sign messages using the JsonRpcSigner from Ethers and the wallet provider from AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#2025-04-10_snippet_3

LANGUAGE: jsx
CODE:
// function to sing a msg
const handleSignMsg = async () => {
  // create the provider and signer
  const provider = new BrowserProvider(walletProvider, chainId);
  const signer = new JsonRpcSigner(provider, address);
  // sign the message
  const signature = await signer?.signMessage("Hello Reown AppKit!");
  // log the signature
  console.log(signature);
};

----------------------------------------

TITLE: Default EVM and Solana Support Configuration for AppKit Flutter
DESCRIPTION: Example configuration for ReownAppKitModal with default support for EVM and Solana blockchains, including project metadata and features configuration for email and social login.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
// Nothing more is required to support EVM + Solana networks besides adding more EVM or Solana networks
// ReownAppKitModalNetworks.addSupportedNetworks('eip155', extraChains);
// ReownAppKitModalNetworks.addSupportedNetworks('solana', extraChains);

final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect( // OPTIONAL
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: false,
    ),
  ),
  // With default configuration you can enable Email + Social Login
  featuresConfig: FeaturesConfig(
    email: true,
    socials: [...],
    showMainWallets: true|false,
  ),
);

----------------------------------------

TITLE: Using useAppKitAccount Hook in React Native
DESCRIPTION: This hook returns the client's wallet information including address, chainId, and connection status. It's used to access the user's account details in a React Native application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from "@reown/appkit-ethers-react-native";

function Components() {
  const { address, chainId, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Handling WalletConnect Session Requests for Signing in JavaScript
DESCRIPTION: Implementation of the session_request event handler for processing transaction and message signing requests from dapps. The code demonstrates how to parse requests, validate accounts, sign data, and return responses for both message and transaction signing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/wallet-integration-guide.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
walletKit.on("session_request", async (requestEvent) => {
  const { params, id } = requestEvent;
  const { request } = params;
  const address = request.params?.address;

  // check that the request address is in your users list of wallets
  // Example:
  const wallet = getPolkadotWallet(address); //

  if (!wallet) {
    throw new Error("Polkadot wallet does not exist");
  }

  // handle supported methods (polkadot_signMessage, polkadot_signTransaction)
  switch (request.method) {
    case "polkadot_signMessage":
      // call function used by wallet to sign message and return the signature
      const signature = await yourwallet.signMessage(request.params.message);

      // create the response containing the signature in the result
      const response = { id, result: { signature: signature }, jsonrpc: "2.0" };

      // respond to the dapp request with the response and topic
      await walletKit.respondSessionRequest({ topic, response });

    case "polkadot_signTransaction":
      // call function used by wallet to sign transactions and return the signature
      const signature = await yourwallet.signTransaction(
        request.params.transactionPayload
      );

      // create the response containing the signature in the result
      const response = { id, result: { signature: signature }, jsonrpc: "2.0" };

      // respond to the dapp request with the response and topic
      await walletKit.respondSessionRequest({ topic, response });

    // throw error for methods your wallet doesn't support
    default:
      throw new Error(getSdkError("INVALID_METHOD").message);
  }
});

----------------------------------------

TITLE: Using useAppKitAccount Hook in React Native
DESCRIPTION: This hook returns the client's wallet information including address, chainId, and connection status. It's used to access the user's account details in a React Native application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from "@reown/appkit-ethers-react-native";

function Components() {
  const { address, chainId, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: EVM-Only Blockchain Support Configuration for AppKit Flutter
DESCRIPTION: Configuration example for ReownAppKitModal when only supporting EVM blockchains. This setup removes Solana support and enables EVM-specific features like SIWE (Sign-In With Ethereum).
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
// first remove support for Solana networks
ReownAppKitModalNetworks.removeSupportedNetworks('solana');

final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect( // OPTIONAL
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: false,
    ),
  ),
  // With only EVM support configuration you can enable Link Mode + SIWE feature
  siweConfig: SIWEConfig(...),
  // With only EVM support configuration you can enable Email + Social Login
  featuresConfig: FeaturesConfig(
    email: true,
    socials: [...],
    showMainWallets: true|false,
  ),
);

----------------------------------------

TITLE: Using AppKit Account Hook in React
DESCRIPTION: React hook that provides access to client wallet information including address, CAIP address, and connection status
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Using AppKit Provider Hook for Message Signing
DESCRIPTION: Example showing how to use the wallet provider hook to sign messages with Solana. Demonstrates provider initialization, message encoding, and error handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { useAppKitAccount, useAppKitProvider } from "@reown/appkit/react";
import type { Provider } from "@reown/appkit-adapter-solana";

function SignMessage() {
  // 0. Get account and provider
  const { address } = useAppKitAccount();
  const { walletProvider } = useAppKitProvider<Provider>("solana");

  // 1. Create a function to sign a message
  async function onSignMessage() {
    try {
      if (!walletProvider || !address) {
        throw Error("user is disconnected");
      }

      // 2. Encode message and sign it
      const encodedMessage = new TextEncoder().encode("Hello from AppKit");
      const signature = await walletProvider.signMessage(encodedMessage);

      console.log(signature);
    } catch (err) {
      // Handle Error Here
    }
  }

  // 3. Create a button to trigger the function
  return <button onClick={onSignMessage}>Sign Message</button>;
}

----------------------------------------

TITLE: SIWE Message Validation Example
DESCRIPTION: This code snippet demonstrates how to validate a SIWE message using the standard SIWE package. It shows the basic pattern for validating that a message is authentic and has been properly signed by the wallet address.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#2025-04-10_snippet_9

LANGUAGE: javascript
CODE:
SiweMessage(message).validate(signature);

----------------------------------------

TITLE: Opening AppKit Using Web Components in HTML
DESCRIPTION: Demonstrates how to use the AppKit button web component in an HTML template. Web components are global HTML elements that don't require importing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Initializing Shared WalletConnect Core Instance in TypeScript
DESCRIPTION: Demonstrates how to create a shared Core instance and initialize both SignClient and AuthClient with it. This approach prevents duplicate resource allocation and improves performance by sharing common logic and resources between multiple WalletConnect SDKs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/shared-core.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { Core } from "@walletconnect/core";
import SignClient from "@walletconnect/sign-client";
import { AuthClient } from "@walletconnect/auth-client";

// First instantiate a separate `Core` instance.
const core = new Core({
  projectId: "<YOUR_PROJECT_ID>",
});

const metadata = {
  name: "Example Dapp",
  description: "Example Dapp",
  url: "#",
  icons: ["https://walletconnect.com/walletconnect-logo.png"],
};

// Pass `core` to the SignClient on init.
const signClient = await SignClient.init({ core, metadata });

// Pass `core` to the AuthClient on init.
const authClient = await AuthClient.init({ core, metadata });

----------------------------------------

TITLE: Configuring AppKit Bitcoin Integration in React
DESCRIPTION: Configuration setup for integrating Bitcoin wallet connectivity using AppKit. Includes project initialization, network setup, Bitcoin adapter configuration, metadata definition, and modal creation with event listeners.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/bitcoin/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
// App.tsx
import { createAppKit } from '@reown/appkit'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { bitcoin } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set the networks
const networks = [bitcoin]

// 3. Set up Bitcoin Adapter
const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

// 4. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Bitcoin Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 5. Create modal
const modal = createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration,
    email: false,
    socials: []
  }
})

// 6. Trigger modal programaticaly
const openConnectModalBtn = document.getElementById('open-connect-modal')
const openNetworkModalBtn = document.getElementById('open-network-modal')

openConnectModalBtn.addEventListener('click', () => modal.open())
openNetworkModalBtn.addEventListener('click', () => modal.open({ view: 'Networks' }))

----------------------------------------

TITLE: Parsing WalletConnect Request Parameters in Swift
DESCRIPTION: Shows how to extract and parse parameters from different types of WalletConnect requests. The code handles different methods like personal_sign, eth_signTypedData, and eth_sendTransaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_13

LANGUAGE: swift
CODE:
if sessionRequest.method == "personal_sign" {
    let params = try! sessionRequest.params.get([String].self)
} else if method == "eth_signTypedData" {
    let params = try! sessionRequest.params.get([String].self)
} else if method == "eth_sendTransaction" {
    let params = try! sessionRequest.params.get([EthereumTransaction].self)
}

----------------------------------------

TITLE: Subscribing to Modal State Changes in AppKit
DESCRIPTION: Demonstrates how to subscribe to state changes in the AppKit modal, allowing for real-time reactions to user interactions with the modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
const modal = createAppKit({ wagmiConfig, projectId });

modal.subscribeState((newState) => console.log(newState));

----------------------------------------

TITLE: Sending Notifications with JavaScript
DESCRIPTION: JavaScript example demonstrating how to send notifications using the WalletConnect Notify API. This code makes a POST request to the notify endpoint with authentication headers and a JSON payload containing notification details.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/${PROJECT_ID}/notify`,
  {
    method: "POST",
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      notification: {
        type: "a1e53b95-18e5-4af8-9f03-9308ec87b687",
        title: "The price of Ethereum has risen",
        body: "The price of Ethereum has gone up 10%",
        url: "https://app.example.com",
      },
      accounts: ["eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"],
    }),
  }
);

----------------------------------------

TITLE: Initializing WalletKit Client in Kotlin
DESCRIPTION: This snippet demonstrates how to initialize the WalletKit client with a Core Client in an Android application. It shows how to configure the connection type, telemetry settings, and application metadata. Telemetry is used to collect data about code execution and error codes to improve reliability and observability.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_0

LANGUAGE: kotlin
CODE:
val projectId = "" // Get Project ID at https://cloud.reown.com/
val connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL
val telemetryEnabled: Boolean = true
val appMetaData = Core.Model.AppMetaData(
    name = "Wallet Name",
    description = "Wallet Description",
    url = "Wallet URL",
    icons = /*list of icon url strings*/,
    redirect = "kotlin-wallet-wc:/request" // Custom Redirect URI
)

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData, telemetryEnabled = telemetryEnabled)

val initParams = Wallet.Params.Init(core = CoreClient)

WalletKit.initialize(initParams) { error ->
    // Error will be thrown if there's an issue during initialization
}

----------------------------------------

TITLE: Presenting AppKit Modal from Specific View Controller
DESCRIPTION: Demonstrates how to present the AppKit modal from a specific UIViewController, which is useful in UIKit-based applications where you need more control over presentation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#2025-04-10_snippet_4

LANGUAGE: swift
CODE:
AppKit.present(from: viewController)

----------------------------------------

TITLE: Creating Authentication Objects with Multiple Chain Support
DESCRIPTION: Shows how to generate authentication payload parameters, format authentication messages, and create authentication objects for multiple chains.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/one-click-auth.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
override val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)
  get() = { sessionAuthenticate, verifyContext ->
  val auths = mutableListOf<Wallet.Model.Cacao>()

  val authPayloadParams =
    WalletKit.generateAuthPayloadParams(
      sessionAuthenticate.payloadParams,
      supportedChains = listOf("eip155:1", "eip155:137", "eip155:56"), // Note: Only EVM chains are supported
      supportedMethods = listOf("personal_sign", "eth_signTypedData", "eth_sign")
  )

  authPayloadParams.chains.forEach { chain ->
    val issuer = "did:pkh:$chain:$address"
    val formattedMessage = WalletKit.formatAuthMessage(Wallet.Params.FormatAuthMessage(authPayloadParams, issuer))

    val signature = signMessage(message: formattedMessage, privateKey: privateKey) //Note: Assume `signMessage` is a function you've implemented to sign messages.
    val auth = WalletKit.generateAuthObject(authPayloadParams, issuer, signature)
    auths.add(auth)
  }
}

----------------------------------------

TITLE: Approving a Session with Custom Namespaces in C#
DESCRIPTION: Demonstrates session approval by constructing approved Namespaces. This handles the required namespaces from the proposal and adds account information to complete the connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_8

LANGUAGE: csharp
CODE:
sdk.SessionProposed += async (sender, @event) =>
{
    var proposal = @event.Proposal;
    var requiredNamespaces = proposal.RequiredNamespaces;
    var approvedNamespaces = new Namespaces(requiredNamespaces);
    approvedNamespaces["eip155"].WithAccount("eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb");

    var sessionData = await sdk.ApproveSession(proposal.Id, approvedNamespaces);
    var sessionTopic = sessionData.Topic;
};

----------------------------------------

TITLE: Defining and Using a Custom Network in Reown AppKit
DESCRIPTION: This code demonstrates how to define a custom EVM network for Reown AppKit and pass it to the AppKit initialization. It includes setting up essential network parameters like chain ID, name, native currency, RPC URLs, and block explorers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/custom-networks.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { defineChain } from '@reown/appkit/networks';

// Define the custom network
const customNetwork = defineChain({
  id: 123456789,
  caipNetworkId: 'eip155:123456789',
  chainNamespace: 'eip155',
  name: 'Custom Network',
  nativeCurrency: {
    decimals: 18,
    name: 'Ether',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: {
      http: ['RPC_URL'],
      webSocket: ['WS_RPC_URL'],
    },
  },
  blockExplorers: {
    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },
  },
  contracts: {
    // Add the contracts here
  }
})

// Then pass it to the AppKit
createAppKit({
    adapters: [...],
    networks: [customNetwork],
    chainImages: { // Customize networks' logos
      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'
    }
})

----------------------------------------

TITLE: SIWE Configuration Interface Definition
DESCRIPTION: This typescript interface defines the structure of the SIWE configuration object required for AppKit integration. It specifies required methods like getNonce, createMessage, verifyMessage, getSession, and signOut, as well as optional configuration settings.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
interface SIWEConfig {
  // Required
  getNonce: () => Promise<string>;
  createMessage: (args: SIWECreateMessageArgs) => string;
  verifyMessage: (args: SIWEVerifyMessageArgs) => Promise<boolean>;
  getSession: () => Promise<SIWESession | null>;
  signOut: () => Promise<boolean>;

  // Optional
  onSignIn?: (session?: SIWESession) => void;
  onSignOut?: () => void;
  // Defaults to true
  enabled?: boolean;
  // In milliseconds, defaults to 5 minutes
  nonceRefetchIntervalMs?: number;
  // In milliseconds, defaults to 5 minutes
  sessionRefetchIntervalMs?: number;
  // Defaults to true
  signOutOnDisconnect?: boolean;
  // Defaults to true
  signOutOnAccountChange?: boolean;
  // Defaults to true
  signOutOnNetworkChange?: boolean;
}

----------------------------------------

TITLE: Response Format from grantPermissions in TypeScript
DESCRIPTION: Example of the response format received after successful execution of grantPermissions, which includes the granted permissions and session context.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#2025-04-10_snippet_4

LANGUAGE: tsx
CODE:
{
  chainId: `0x14a34`
  address: `0x...`
  expiry: 1727824386
  permissions: [
    {
      type: 'contract-call',
      data: {
        address: '0x2E65BAfA07238666c3b239E94F32DaD3cDD6498D', // sample donut contract address
        abi: [
          {
            inputs: [{ internalType: 'uint256', name: 'amount', type: 'uint256' }],
            name: 'purchase',
            outputs: [],
            stateMutability: 'payable',
            type: 'function'
          }
        ],
        functions: [ {
          functionName: 'purchase'
        } ]
      }
    }
  ],
  context: '...'  // Context identifier for the session
}

----------------------------------------

TITLE: Initializing AppKit with SIWE Configuration
DESCRIPTION: Code example showing how to initialize AppKit with SIWE configuration. The siweConfig object is passed to the createAppKit function along with adapters, networks, and other configuration options.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#2025-04-10_snippet_8

LANGUAGE: ts
CODE:
// Pass your siweConfig inside the createAppKit() function
const modal = createAppKit({
  adapters: [wagmiAdapter], //or your Ethers adapter
  projectId,
  networks: [mainnet, arbitrum],
  defaultNetwork: mainnet,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
  siweConfig: siweConfig, // pass your siweConfig
});

----------------------------------------

TITLE: Handling Pairing Expiry Events on iOS
DESCRIPTION: This Swift code sets up a publisher for pairing expiration events on iOS. It uses WalletKit's pairingExpirationPublisher to monitor when pairings expire and filters for inactive pairings that should trigger user notifications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_4

LANGUAGE: swift
CODE:
WalletKit.instance.pairingExpirationPublisher
    .receive(on: DispatchQueue.main)
    .sink { pairing in
    guard !pairing.active else { return }
    // let user know that pairing has expired
}.store(in: &publishers)

----------------------------------------

TITLE: Creating AppKit Context Provider for Next.js
DESCRIPTION: This snippet demonstrates creating a context provider for Reown AppKit in a Next.js client component. It initializes AppKit with the Wagmi adapter, sets up the QueryClient, and configures project metadata and features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/about/implementation.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
'use client'

import { wagmiAdapter, projectId } from '@/config'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { createAppKit } from '@reown/appkit/react'
import { mainnet, arbitrum } from '@reown/appkit/networks'
import React, { type ReactNode } from 'react'
import { cookieToInitialState, WagmiProvider, type Config } from 'wagmi'

// Set up queryClient
const queryClient = new QueryClient()

if (!projectId) {
  throw new Error('Project ID is not defined')
}

// Set up metadata
const metadata = {
  name: 'appkit-example',
  description: 'AppKit Example',
  url: 'https://appkitexampleapp.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// Create the modal
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  defaultNetwork: mainnet,
  metadata: metadata,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

function ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) {
  const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config, cookies)

  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

export default ContextProvider

----------------------------------------

TITLE: Verifying SIWE Signatures with AppKit
DESCRIPTION: Function for verifying a SIWE signature by calling your backend verification method. This is used to validate that a user has properly signed a message with their Ethereum wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
import { verifySignature } from "@reown/appkit-siwe-react-native";

const isValid = await verifySignature({
  address,
  message,
  signature,
  chainId,
  projectId,
});

----------------------------------------

TITLE: Smart Contract Interaction with Wagmi
DESCRIPTION: Example of using Wagmi hooks to interact with smart contracts and read contract data
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { useReadContract } from "wagmi";
import { USDTAbi } from "../abi/USDTAbi";

const USDTAddress = "0x...";

function App() {
  const result = useReadContract({
    abi: USDTAbi,
    address: USDTAddress,
    functionName: "totalSupply",
  });
}

----------------------------------------

TITLE: Configuring and Initializing AppKit Bitcoin in React
DESCRIPTION: This code snippet demonstrates the setup of AppKit Bitcoin for a React application. It includes importing required modules, configuring networks, setting up the Bitcoin adapter, creating metadata, and initializing AppKit with various options including analytics and features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/bitcoin/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
// App.tsx
import { createAppKit } from '@reown/appkit/react'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { bitcoin } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set the networks
const networks = [bitcoin]

// 3. Set up Bitcoin Adapter
const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

// 4. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Bitcoin Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 5. Create modal
createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration,
    email: false,
    socials: []
  }
})

export default function App() {
  return <YourApp />
}

----------------------------------------

TITLE: Implementing Message Signing with Bitcoin Wallet
DESCRIPTION: Creates a function to prompt the wallet for message signing. This function uses the walletProvider to trigger the wallet's signing modal for a given message and returns the signature.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// function to sign a message
const handleSignMsg = async () => {
  // raise the modal to sign the message
  const signature = await walletProvider.signMessage({
    address,
    message: "Hello Reown AppKit!",
  });

  // Print the signed message in console
  console.log(signature);
};

----------------------------------------

TITLE: Importing Libraries for Ethers Smart Contract Interaction in React
DESCRIPTION: This snippet imports the necessary libraries and types from AppKit and Ethers to interact with smart contracts in a React application using the Ethers library.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#2025-04-10_snippet_4

LANGUAGE: jsx
CODE:
import { useAppKitProvider } from "@reown/appkit/react";
import { Contract, BrowserProvider } from "ethers";
import type { Provider } from "@reown/appkit/react";

----------------------------------------

TITLE: Defining and Configuring a Custom Network in Reown AppKit
DESCRIPTION: This snippet demonstrates how to create a custom network object and configure it within the Reown AppKit. It includes defining the network's properties such as ID, name, native currency, RPC URLs, and block explorers, as well as passing the custom network to the AppKit creation function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/custom-networks.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { defineChain } from '@reown/appkit/networks';

// Define the custom network
const customNetwork = defineChain({
  id: 123456789,
  caipNetworkId: 'eip155:123456789',
  chainNamespace: 'eip155',
  name: 'Custom Network',
  nativeCurrency: {
    decimals: 18,
    name: 'Ether',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: {
      http: ['RPC_URL'],
      webSocket: ['WS_RPC_URL'],
    },
  },
  blockExplorers: {
    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },
  },
  contracts: {
    // Add the contracts here
  }
})

// Then pass it to the AppKit
createAppKit({
    adapters: [...],
    networks: [customNetwork],
    chainImages: { // Customize networks' logos
      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'
    }
})

----------------------------------------

TITLE: Configuring SIWE Client for Authentication in TypeScript
DESCRIPTION: A comprehensive configuration setup for the SIWE client that handles nonce generation, message verification, session management, and sign-out functionality. This configuration is necessary for implementing Sign In With Ethereum authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
// siweConfig.ts

import {
  createSIWEConfig,
  formatMessage,
  type SIWEVerifyMessageArgs,
  type SIWECreateMessageArgs,
} from "@reown/appkit-siwe-react-native";

export const siweConfig = createSIWEConfig({
  getNonce: async (): Promise<string> => {
    // The getNonce method functions as a safeguard
    // against spoofing, akin to a CSRF token.

    return await api.getNonce();
  },
  verifyMessage: async ({
    message,
    signature,
    cacao,
  }: SIWEVerifyMessageArgs): Promise<boolean> => {
    try {
      // This function ensures the message is valid,
      // has not been tampered with, and has been appropriately
      // signed by the wallet address.

      const isValid = await api.verifyMessage({ message, signature, cacao });

      return isValid;
    } catch (error) {
      return false;
    }
  },
  getSession: async (): Promise<SIWESession | null> => {
    // The backend session should store the associated address and chainId
    // and return it via the `getSession` method.

    const session = await api.getSession();
    if (!session) throw new Error("Failed to get session!");

    const { address, chainId } = session;

    return { address, chainId };
  },
  signOut: (): Promise<boolean> => {
    try {
      // The users session must be destroyed when calling `signOut`.

      await api.signOut();
      return true;
    } catch {
      return false;
    }
  },
  createMessage: ({ address, ...args }: SIWECreateMessageArgs): string => {
    // Method for generating an EIP-4361-compatible message.

    return formatMessage(args, address);
  },
  getMessageParams: () => {
    // Parameters to create the SIWE message internally.
    // More info in https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-222.method

    return {
      domain: "your domain",
      uri: "your uri",
      chains: [1, 137], // array of chain ids
      statement: "Please sign with your account",
      iat: new Date().toISOString(),
    };
  },
});

----------------------------------------

TITLE: Integrating AppKit in Next.js Root Layout
DESCRIPTION: This code snippet demonstrates how to import and use the custom AppKit component in the root layout of a Next.js application. It wraps the children components with the AppKit provider.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/about/implementation.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import "./globals.css";

import { AppKit } from "../context/appkit";

export const metadata = {
  title: "AppKit",
  description: "AppKit Example",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <AppKit>{children}</AppKit>
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Making a Request to a Connected Wallet in Swift
DESCRIPTION: Sends a request to the connected wallet with specified method, parameters, and blockchain identifier. Useful for requesting transaction signatures or other wallet operations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#2025-04-10_snippet_3

LANGUAGE: swift
CODE:
try await AppKit.instance.request(
    params: .init(
        topic: session.topic,
        method: "some_method",
        params: AnyCodable(payload),
        chainId: Blockchain
    )
)

----------------------------------------

TITLE: Using useAppKitWallet Hook for Wallet Connections
DESCRIPTION: Example of using the useAppKitWallet hook with success and error callbacks to connect to a specific wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_12

LANGUAGE: tsx
CODE:
const { isReady, isPending, connect } = useAppKitWallet({
    onSuccess() {
      // ...
    },
    onError(error) {
      // ...
    }
  })

...

// Connect to a wallet
<Button onClick={() => connect("walletConnect")} />

----------------------------------------

TITLE: Registering Device Token with WalletKit in TypeScript
DESCRIPTION: This code snippet shows how to register a device token with WalletKit for push notifications. It uses the walletKit.registerDeviceToken method, passing the token, client ID, notification type, and encryption flag.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/push.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
walletKit.registerDeviceToken({
  token: await messaging().getToken(), // device token
  clientId: await walletKit.core.crypto.getClientId(), //your instance clientId
  notificationType: 'fcm', // notification type
  enableEncrypted: true // flag that enabled detailed notifications
})

----------------------------------------

TITLE: Using useAppKit Hook with Ethers
DESCRIPTION: Demonstrates how to use the useAppKit hook with Ethers integration to control the AppKit modal. The hook provides open and close functions to manage the modal's visibility.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { useAppKit } from '@reown/appkit-ethers-react-native'

export default function Component() {
  const { open, close } = useAppKit()

  open()

  //...
}

----------------------------------------

TITLE: Default Session Parameters for AppKit in Swift
DESCRIPTION: Shows the default namespace configuration that AppKit uses when no custom session parameters are provided. Includes standard Ethereum methods, events, and blockchain support.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
let methods: Set<String> = ["eth_sendTransaction", "personal_sign", "eth_signTypedData"]
let events: Set<String> = ["chainChanged", "accountsChanged"]
let blockchains: Set<Blockchain> = [Blockchain("eip155:1")!]
let namespaces: [String: ProposalNamespace] = [
    "eip155": ProposalNamespace(
        chains: blockchains,
        methods: methods,
        events: events
    )
]

let defaultSessionParams =  SessionParams(
                                requiredNamespaces: namespaces,
                                optionalNamespaces: nil,
                                sessionProperties: nil
                            )

----------------------------------------

TITLE: Handling Sign Requests in WalletKit
DESCRIPTION: Implementation of personal sign request handling and redirection logic after processing signing requests.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
Future<void> personalSignRequestHandler(String topic, dynamic parameters) async {
  // Process signing requests
  // ...
  // With the given topic with retrieve the current session data
  final session = _walletKit.sessions.get(topic);
  // And we get the peer metadata to trigger dapp's redirect value
  try {
    await _walletKit.redirectToDapp(
      topic: topic,
      redirect: session!.peer.metadata.redirect,
    );
  } catch (e) {
    ...
  }
}

----------------------------------------

TITLE: Configuring AppKit in Vue.js Application
DESCRIPTION: Demonstrates the complete setup of AppKit in a Vue.js application using TypeScript. Includes importing required dependencies, setting up project configuration, defining application metadata, and creating an AppKit instance with network configurations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers5/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { createAppKit, useAppKit } from "@reown/appkit/vue";
  import { Ethers5Adapter } from "@reown/appkit-adapter-ethers5";
  import { mainnet, arbitrum } from "@reown/appkit/networks";

  // 1. Get projectId at https://cloud.reown.com
  const projectId = "YOUR_PROJECT_ID";

  function getBlockchainApiRpcUrl(chainId) {
    return `https://rpc.walletconnect.org/v1/?chainId=eip155:${chainId}&projectId=${projectId}`;
  }

  // 2. Create your application's metadata object
  const metadata = {
    name: "My Website",
    description: "My Website description",
    url: "https://mywebsite.com", // url must match your domain & subdomain
    icons: ["https://avatars.mywebsite.com/"],
  };

  // 3. Create a AppKit instance
  createAppKit({
    adapters: [new Ethers5Adapter()],
    networks: [mainnet, arbitrum],
    projectId,
    features: {
      analytics: true, // Optional - defaults to your Cloud configuration
    },
  });

  // 4. Use modal composable
  const modal = useAppKit();
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Contract Call Permission Type Definitions in JSX
DESCRIPTION: Type definitions for ContractCallPermission, showing supported operators, operations, and data structures for function permissions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#2025-04-10_snippet_9

LANGUAGE: jsx
CODE:
export enum ParamOperator {
  EQUAL = 'EQUAL',
  GREATER_THAN = 'GREATER_THAN',
  LESS_THAN = 'LESS_THAN'
}

export enum Operation {
  Call = 'Call',
  DelegateCall = 'DelegateCall'
}

export type ArgumentCondition = {
  operator: ParamOperator
  value: `0x${string}`
}

export type FunctionPermission = {
  functionName: string
  args?: ArgumentCondition[]
  valueLimit?: `0x${string}`
  operation?: Operation
}
export type ContractCallPermission = {
  type: 'contract-call'
  data: {
    address: `0x${string}`
    abi: Record<string, unknown>[]
    functions: FunctionPermission[]
  }
}

----------------------------------------

TITLE: Creating a Custom AppKit Configuration in Next.js
DESCRIPTION: This code creates a custom AppKit configuration file with Ethers5 adapter support for mainnet and arbitrum networks. It sets up project metadata and feature configurations, then exports a React component that wraps your application with the AppKit context.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
"use client";

import { createAppKit } from "@reown/appkit/react";
import { Ethers5Adapter } from "@reown/appkit-adapter-ethers5";
import { mainnet, arbitrum } from "@reown/appkit/networks";

// 1. Get projectId at https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create a metadata object
const metadata = {
  name: "My Website",
  description: "My Website description",
  url: "https://mywebsite.com", // origin must match your domain & subdomain
  icons: ["https://avatars.mywebsite.com/"],
};

// 3. Create the AppKit instance
createAppKit({
  adapters: [new Ethers5Adapter()],
  metadata: metadata,
  networks: [mainnet, arbitrum],
  projectId,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

export function AppKit() {
  return (
    <YourApp /> //make sure you have configured the <appkit-button> inside
  );
}

----------------------------------------

TITLE: Setting up AppKit with Ethers in React Native
DESCRIPTION: This code configures AppKit by importing required dependencies, creating project configuration with a unique ID, defining metadata, setting up chain information for Ethereum and Polygon networks, and creating the AppKit modal. It includes a basic App component implementation that renders the AppKit component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import "@walletconnect/react-native-compat";

import {
  createAppKit,
  defaultConfig,
  AppKit,
} from "@reown/appkit-ethers-react-native";

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create config
const metadata = {
  name: "AppKit RN",
  description: "AppKit RN Example",
  url: "https://reown.com/appkit",
  icons: ["https://avatars.githubusercontent.com/u/179229952"],
  redirect: {
    native: "YOUR_APP_SCHEME://",
  },
};

const config = defaultConfig({ metadata });

// 3. Define your chains
const mainnet = {
  chainId: 1,
  name: "Ethereum",
  currency: "ETH",
  explorerUrl: "https://etherscan.io",
  rpcUrl: "https://cloudflare-eth.com",
};

const polygon = {
  chainId: 137,
  name: "Polygon",
  currency: "MATIC",
  explorerUrl: "https://polygonscan.com",
  rpcUrl: "https://polygon-rpc.com",
};

const chains = [mainnet, polygon];

// 4. Create modal
createAppKit({
  projectId,
  chains,
  config,
  enableAnalytics: true, // Optional - defaults to your Cloud configuration
});

export default function App() {
  return (
    <>
      // Rest of your app...
      <AppKit />
    </>
  );
}

----------------------------------------

TITLE: Configuring AppKit Solana in React
DESCRIPTION: This snippet demonstrates how to set up AppKit Solana in a React application. It includes importing necessary dependencies, configuring the Solana adapter, setting project metadata, and creating the AppKit modal with specified features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit";
import { SolanaAdapter } from "@reown/appkit-adapter-solana";
import { solana, solanaTestnet, solanaDevnet } from "@reown/appkit/networks";

// 0. Set up Solana Adapter
const solanaWeb3JsAdapter = new SolanaAdapter();

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create a metadata object - optional
const metadata = {
  name: "AppKit",
  description: "AppKit Solana Example",
  url: "https://example.com", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
};

// 3. Create modal
createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

----------------------------------------

TITLE: Implementing Web3Inbox Widget in React
DESCRIPTION: Demonstrates how to import, configure and render the Web3Inbox widget component in a React application. The snippet shows the basic setup including required imports, hook usage for managing widget state, and component rendering with necessary props like account and projectId.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/usage.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { W3iWidget, useManageView } from "@web3inbox/widget-react";
import "@web3inbox/widget-react/dist/compiled.css";
...

const { open } = useManageView()
open();

return (
	<W3iWidget
		account="eip155:1:0x..."
		projectId="7a..."
		onSign={yourSignFunction}
		onConnect={connectFunction}
	/>
)

----------------------------------------

TITLE: Using useAppKitNetwork Hook for Network Access and Switching
DESCRIPTION: Hook for accessing blockchain network data and methods, including current network information and network switching functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
import { useAppKitNetwork } from "@reown/appkit/react";

export default Component(){
  const { caipNetwork, caipNetworkId, chainId, switchNetwork } = useAppKitNetwork()
}

----------------------------------------

TITLE: Firebase Push Notification Service Implementation in Kotlin
DESCRIPTION: Implements a Firebase Push Messaging Service with notification channel creation and handling. Includes best practices for notification display and user control.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#2025-04-10_snippet_9

LANGUAGE: kotlin
CODE:
class SampleFirebaseService: PushMessagingService() {
  //...
  override fun onMessage(message: Core.Model.Message, originalMessage: RemoteMessage) {
      if (message is Core.Model.Message.Notify) {
        val account: String = // CAIP-10 account
        val appMetadata = NotifyClient.getActiveSubscriptions(Notify.Params.GetActiveSubscriptions(account))[topic]?.metadata
            ?: throw IllegalStateException("No active subscription for topic: $topic")

        val appDomain = URI(appMetadata.url).host
            ?: throw IllegalStateException("Unable to parse domain from $appMetadata.url")

        val notificationType = NotifyClient.getNotificationTypes(Notify.Params.GetNotificationTypes(appDomain))[channelId]
            ?: throw IllegalStateException("No notification type for topic:${topic} and type: $channelId")

        val channelName = appMetadata.name + ": " + notificationType.name
        val channelId = message.type

        val notificationBuilder = NotificationCompat.Builder(this, channelId)
            .setContentTitle(message.title)
            .setSmallIcon(android.R.drawable.ic_popup_reminder) // specify icon for notification
            .setContentText(message.body)
            .setAutoCancel(true) // clear notification after click
            .setSound(defaultSoundUri) // specify sound for notification
            .setContentIntent(pendingIntent) // specify pendingIntent

        // Since android Oreo notification channel is needed.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_HIGH)
            notificationManager.createNotificationChannel(channel)
        }

        notificationManager.notify(message.hashCode(), notificationBuilder.build()) // specify id of notification
      }
  }
//...

----------------------------------------

TITLE: Getting Active Sessions in JavaScript
DESCRIPTION: Retrieves the active WalletKit sessions using the getActiveSessions function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
const activeSessions = walletKit.getActiveSessions();

----------------------------------------

TITLE: Subscribing to Provider Changes in TypeScript
DESCRIPTION: Sets up a subscription to monitor changes in the wallet connection including provider, address, chain ID, and connection status. The handler function will be called whenever any of these properties change.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
function handleChange({
  provider,
  providerType,
  address,
  error,
  chainId,
  isConnected,
}) {
  //...
}

modal.subscribeProvider(handleChange);

----------------------------------------

TITLE: Updating Notification Subscription Settings in Kotlin
DESCRIPTION: Shows how to modify notification preferences for a dapp subscription. Allows users to select specific notification types and includes timeout configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#2025-04-10_snippet_6

LANGUAGE: kotlin
CODE:
val topic: String = // active subscription topic
val scope: List<String> = // list of notification types
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec
val params = Notify.Params.UpdateSubscription(topic, scope, timeout)

NotifyClient.update(params).let { result ->
    when (result) {
        is Notify.Result.UpdateSubscription.Success -> {
          // callback for when the update request was successful
        }
        is Notify.Result.UpdateSubscription.Error -> {
          // callback for when the update request has failed
        }
    }
}

----------------------------------------

TITLE: Registering Request Handlers for Session Requests in ReownWalletKit
DESCRIPTION: Shows how to register request handlers for specific methods and blockchain chains. This approach allows the wallet to handle session requests like personal_sign and eth_sendTransaction by implementing custom handlers for each supported chain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
final supportedChains = ['eip155:1', 'eip155:137'];
Map<String, dynamic Function(String, dynamic)> supportedMethods = {
  'personal_sign': _personalSignHandler,
  'eth_sendTransaction': _ethSendTransactionHandler,
};
for (var chainId in supportedChains) {
  for (var method in supportedMethods.entries) {
    _walletKit.registerRequestHandler(
      chainId: chainId,
      method: method.key,
      handler: method.value,
    );
  }
}

Future<void> _personalSignHandler(String topic, dynamic params) async {
  final id = _walletKit.pendingRequests.getAll().first;

  // message should arrive encoded
  final decoded = hex.decode(params.first.substring(2));
  final message = utf8.decode(decoded);

  // display a prompt for the user to approve or reject the request
  // if approved
  if (approved) {
    // Your code to sign the message here
    final signature = ...

    return _walletKit.respondSessionRequest(
      topic: topic,
      response: JsonRpcResponse(
        id: id,
        jsonrpc: '2.0',
        result: signature,
      ),
    );
  }
  // if rejected
  return _walletKit.respondSessionRequest(
    topic: topic,
    response: JsonRpcResponse(
      id: id,
      jsonrpc: '2.0',
      error: const JsonRpcError(code: 5001, message: 'User rejected method'),
    ),
  );
}

Future<void> _ethSendTransactionHandler(String topic, dynamic params) async {
  // ...
}

----------------------------------------

TITLE: Configuring AppKit with Bitcoin Adapter in React
DESCRIPTION: Sets up AppKit with Bitcoin wallet integration for a React application. The configuration includes creating a Bitcoin adapter with project ID, setting up networks, defining metadata, and initializing the AppKit with optional features like analytics. This setup should be performed outside React components to prevent unnecessary rerenders.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/bitcoin/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
// App.tsx
import { createAppKit } from '@reown/appkit/react'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { bitcoin  } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set the networks
const networks = [bitcoin]

// 3. Set up Bitcoin Adapter
const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

// 4. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Bitcoin Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 5. Create modal
createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration,
    email: false,
    socials: []
  }
})

export default function App() {
  return <YourApp />
}

----------------------------------------

TITLE: Approving Session Proposals in WalletKit
DESCRIPTION: This code shows how to approve a session proposal. It includes callbacks for handling success and error states, allowing the wallet to update the UI appropriately when the approval is processed.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
 WalletKit.approveSession(approveProposal,
    onSuccess = {
        //Session approval response was sent successfully - update your UI
    }
    onError = { error ->
        //Error while sending session approval - update your UI
    })

----------------------------------------

TITLE: Implementing AppKit Using Web Component
DESCRIPTION: Demonstrates how to implement the AppKit button using the web component approach. The component is used globally without requiring imports.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />;
}

----------------------------------------

TITLE: Initializing Ethereum Provider with configuration options
DESCRIPTION: Example of initializing the EthereumProvider with project ID, metadata, QR modal settings, optional chains, and custom RPCs. The provider is configured with application metadata and chain support options.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/ethereum.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { EthereumProvider } from "@walletconnect/ethereum-provider";

const provider = await EthereumProvider.init({
  projectId: "YOUR_PROJECT_ID",
  metadata: {
    name: "My Website",
    description: "My Website Description",
    url: "https://mywebsite.com", // origin must match your domain & subdomain
    icons: ["https://avatars.githubusercontent.com/u/37784886"],
  },
  showQrModal: true,
  optionalChains: [1, 137, 2020],

  /*Optional - Add custom RPCs for each supported chain*/
  rpcMap: {
    1: "mainnet.rpc...",
    137: "polygon.rpc...",
  },
});

----------------------------------------

TITLE: Installing Solana Wallet Adapter Package
DESCRIPTION: Command-line instructions for installing the Solana wallet adapter package using different package managers including npm, Yarn, Bun, and pnpm.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/custom-connectors.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
yarn add @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
bun a @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
pnpm add @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Configuring AppKit in Vue Application
DESCRIPTION: Demonstrates the complete setup of Reown AppKit in a Vue.js application using createAppKit function. Includes project configuration, metadata setup, network selection, and Wagmi adapter integration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/wagmi/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<script lang="ts" setup>
  import { createAppKit } from '@reown/appkit/vue'
  import { arbitrum, mainnet, type AppKitNetwork } from '@reown/appkit/networks'
  import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

  // 1. Get projectId from https://cloud.reown.com
  const projectId = 'YOUR_PROJECT_ID'

  // 2. Create a metadata object
  const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://example.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

  // 3. Set the networks
  const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, polygon, base]

  // 4. Create Wagmi Adapter
  const wagmiAdapter = new WagmiAdapter({
    networks,
    projectId
  })

  // 5. Create the modal
  const modal = createAppKit({
    adapters: [wagmiAdapter],
    networks,
    projectId,
    metadata,
    features: {
      analytics: true // Optional - defaults to your Cloud configuration
    }
  })
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Integrating AppKit into Next.js Root Layout
DESCRIPTION: This snippet shows how to import and use the custom AppKit component in the root layout file of a Next.js application. It wraps the entire application with the AppKit provider, making it available throughout the app.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/implementation.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import "./globals.css";

import { AppKit } from "../context/appkit";

export const metadata = {
  title: "AppKit",
  description: "AppKit Example",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <AppKit>{children}</AppKit>
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Verifying SIWE Signature with Viem
DESCRIPTION: TypeScript code for verifying a SIWE signature using the Viem library, which is recommended for compatibility with social logins and non-deployed smart accounts.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from "viem";

const publicClient = createPublicClient({
  transport: http(
    `https://rpc.walletconnect.org/v1/?chainId=${chainId}&projectId=${projectId}`
  ),
});
const isValid = await publicClient.verifyMessage({
  message,
  address: address as `0x${string}`,
  signature: signature as `0x${string}`,
});

----------------------------------------

TITLE: Implementing Authentication Request Handler in Kotlin
DESCRIPTION: Demonstrates how to set up a WalletKit.WalletDelegate to handle incoming authentication requests through the onSessionAuthenticate callback.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/one-click-auth.mdx#2025-04-10_snippet_0

LANGUAGE: kotlin
CODE:
override val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)
  get() = { sessionAuthenticate, verifyContext ->
      // Triggered when wallet receives the session authenticate sent by a Dapp
      // Process the authentication request here
      // This involves displaying UI to the user
}

----------------------------------------

TITLE: Initializing AppKit Client with Default Configuration in Swift
DESCRIPTION: Sets up the AppKit client with project ID and app metadata. This configuration includes app details and optional verification URL for the Verify service.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
let metadata = AppMetadata(
    name: "Example Wallet",
    description: "Wallet description",
    url: "example.wallet",
    icons: ["https://avatars.githubusercontent.com/u/179229932"],
    // Used for the Verify: to opt-out verification ignore this parameter
    verifyUrl: "verify.walletconnect.com"
)

AppKit.configure(
    projectId: PROJECT_ID,
    metadata: metadata
)

----------------------------------------

TITLE: wallet_prepareCalls Return Value Type in TypeScript
DESCRIPTION: Type definition for the return value of the wallet_prepareCalls method, including preparedCalls, signatureRequest, and context properties.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#2025-04-10_snippet_7

LANGUAGE: tsx
CODE:
type PrepareCallsReturnValue = [{
    preparedCalls: {
        type: string
        data: any
        chainId: `0x${string}`
    }
    signatureRequest: {  
        hash: `0x${string}`
    }
    context: `0x${string}`
}]

----------------------------------------

TITLE: Handling Session Request Response in JavaScript
DESCRIPTION: Demonstrates how to handle incoming session requests from dapps, specifically for signing messages. Shows how to extract request parameters, sign messages, and send responses.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
walletKit.on("session_request", async (event) => {
  const { topic, params, id } = event;
  const { request } = params;
  const requestParamsMessage = request.params[0];

  // convert `requestParamsMessage` by using a method like hexToUtf8
  const message = hexToUtf8(requestParamsMessage);

  // sign the message
  const signedMessage = await wallet.signMessage(message);

  const response = { id, result: signedMessage, jsonrpc: "2.0" };

  await walletKit.respondSessionRequest({ topic, response });
});

----------------------------------------

TITLE: Configuring WagmiAdapter with Virtual TestNet Support
DESCRIPTION: This configuration sets up the WagmiAdapter with support for the custom Tenderly Virtual TestNet. It imports the custom chain configuration, adds it to the networks array, and configures the HTTP transport for the virtual testnet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#2025-04-10_snippet_4

LANGUAGE: tsx
CODE:
import { cookieStorage, createStorage, http } from "@wagmi/core";
import { WagmiAdapter } from "@reown/appkit-adapter-wagmi";
import { mainnet, arbitrum } from "@reown/appkit/networks";
import { vTestnet } from "@/app/tenderly.config";

// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;

if (!projectId) {
  throw new Error("Project ID is not defined");
}

export const networks = [mainnet, arbitrum, vTestnet];

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  storage: createStorage({
    storage: cookieStorage,
  }),
  ssr: true,
  transports: {
    [vTestnet.id]: http(process.env.TENDERLY_VIRTUAL_TESTNET_RPC!),
  },
  networks,
  projectId,
});

export const config = wagmiAdapter.wagmiConfig;

----------------------------------------

TITLE: Using useAppKit Composable for Modal Control in Vue
DESCRIPTION: Demonstrates how to import and use the useAppKit composable to control the modal with open and close functions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { useAppKit } from "@reown/appkit/vue";

export default function Component() {
  const { open, close } = useAppKit();
}

----------------------------------------

TITLE: Importing Modules for Solana Transactions
DESCRIPTION: Imports the necessary modules for sending transactions on Solana, including connection, account, and provider hooks, as well as Solana transaction-related classes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_9

LANGUAGE: javascript
CODE:
import { useAppKitConnection } from "@reown/appkit-adapter-solana/react";
import { PublicKey, Transaction, SystemProgram } from "@solana/web3.js";
import { useAppKitAccount, useAppKitProvider } from "@reown/appkit/react";
import type { Provider } from "@reown/appkit-adapter-solana/react";

----------------------------------------

TITLE: Configuring AppKit with Custom Session Parameters in Swift
DESCRIPTION: Demonstrates how to initialize AppKit with custom session parameters instead of using the defaults. This allows for more tailored configuration of supported blockchains, methods, and events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
let metadata = AppMetadata(...)

let sessionParams = SessionParams(...)

AppKit.configure(
    projectId: PROJECT_ID,
    metadata: metadata,
    sessionParams: sessionParams
)

----------------------------------------

TITLE: Approving Authentication Requests
DESCRIPTION: Shows two approaches for approving authentication requests - single chain and multi-chain authentication with signature creation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/one-click-auth.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// Approach 1
// Sign the authentication message(s) to create a verifiable authentication object(s)
final credentials = EthPrivateKey.fromHex('$privateKey');
final signature = credentials.signPersonalMessageToUint8List(
  Uint8List.fromList(message.codeUnits),
);
final hexSignature = bytesToHex(signature, include0x: true);
// Build the authentication object(s)
final cacao = AuthSignature.buildAuthObject(
  requestPayload: cacaoRequestPayload,
  signature: CacaoSignature(
    t: CacaoSignature.EIP191,
    s: hexSignature,
  ),
  iss: iss,
);

// Approve
await _walletKit!.approveSessionAuthenticate(
  id: args.id,
  auths: [cacao],
);

// Approach 2
// Note that you can also sign multiple messages for every requested chain/address pair
final List<Cacao> cacaos = [];
for (var chain in newAuthPayload.chains) {
  final message = _walletKit!.formatAuthMessage(
    iss: iss,
    cacaoPayload: cacaoRequestPayload,
  );
  final credentials = EthPrivateKey.fromHex('$privateKey');
  final signature = credentials.signPersonalMessageToUint8List(
    Uint8List.fromList(message.codeUnits),
  );
  final hexSignature = bytesToHex(signature, include0x: true);
  final cacao = AuthSignature.buildAuthObject(
    requestPayload: cacaoRequestPayload,
    signature: CacaoSignature(
      t: CacaoSignature.EIP191,
      s: hexSignature,
    ),
    iss: iss,
  );
  cacaos.add(cacao)
}

// Approve
await _walletKit!.approveSessionAuthenticate(
  id: args.id,
  auths: cacaos,
);

----------------------------------------

TITLE: Handling Authentication Request Rejection in TypeScript
DESCRIPTION: Shows how to reject an authentication request using the WalletConnect SDK's error utilities.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_7

LANGUAGE: typescript
CODE:
import { getSdkError } from "@walletconnect/utils";

await walletKit.rejectSessionAuthenticate({
  id: payload.id,
  reason: getSdkError("USER_REJECTED"),
});

----------------------------------------

TITLE: Setting Default Network with Ethers in ReOwn AppKit
DESCRIPTION: Configures the default network using Ethers adapter by manually specifying network details including chainId, name, currency, explorer URL, and RPC URL.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
const mainnet = {
  chainId: 1,
  name: "Ethereum",
  currency: "ETH",
  explorerUrl: "https://etherscan.io",
  rpcUrl: "https://cloudflare-eth.com",
};

createAppKit({
  //...
  defaultNetwork: mainnet,
});

----------------------------------------

TITLE: Handling Session Proposal and Approval in ReownWalletKit
DESCRIPTION: Demonstrates how to subscribe to session proposal events and approve a session. The code shows how to process the SessionProposalEvent and call approveSession method with the required parameters when a user accepts the connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
_walletKit.onSessionProposal.subscribe((SessionProposalEvent? event) {
  // display a prompt for the user to approve or reject the session
  // ....
  // If approved
  _walletKit.approveSession(
    id: event.id,
    namespaces: // event.params.generatedNamespaces! or approvedNamespaces,
  );
});

----------------------------------------

TITLE: Handling WalletConnect Session Proposals in Swift
DESCRIPTION: Sets up a publisher subscription to handle incoming session proposals from dApps. The code shows how to receive and process session proposals, which define the session rules between wallet and dApp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_5

LANGUAGE: swift
CODE:
WalletKit.instance.sessionProposalPublisher
    .receive(on: DispatchQueue.main)
    .sink { [weak self] session in
        self?.verifyDapp(session.context)
        self?.showSessionProposal(session.proposal)
    }.store(in: &publishers)

----------------------------------------

TITLE: Registering Device Token for Push Notifications in Swift
DESCRIPTION: Shows how to register a device token to receive WalletConnect push notifications. This enables the wallet to receive notifications even when the app is not in the foreground.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_19

LANGUAGE: swift
CODE:
WalletKit.instance.register(deviceToken: deviceToken, enableEncrypted: true)

----------------------------------------

TITLE: Retrieving Accounts with cosmos_getAccounts
DESCRIPTION: This code demonstrates how to use the cosmos_getAccounts method to retrieve available key pairs from the wallet. The method returns an array of accounts with their signing algorithm, address, and public key.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/cosmos-rpc.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "cosmos_getAccounts",
    "params": {}
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result":  [
        {
            "algo": "secp256k1",
            "address": "cosmos1sguafvgmel6f880ryvq8efh9522p8zvmrzlcrq",
            "pubkey": "AgSEjOuOr991QlHCORRmdE5ahVKeyBrmtgoYepCpQGOW"
        }
    ]
}

----------------------------------------

TITLE: Retrieving Errors with AppKit in React
DESCRIPTION: This snippet demonstrates how to use the getError function from the AppKit modal to retrieve error information in a React component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: ts
CODE:
function Components() {
  const error = modal.getError();
  //...
}

----------------------------------------

TITLE: Making Direct RPC Requests with AppKit EVM Module
DESCRIPTION: Methods to make direct JSON-RPC requests to the blockchain node. Supports various Ethereum RPC methods with different parameter combinations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_17

LANGUAGE: csharp
CODE:
// Get the latest block number
BigInteger blockNumber = await AppKit.EVM.RpcRequestAsync<BigInteger>("eth_blockNumber");

// Get transaction by hash
var transaction = await AppKit.EVM.RpcRequestAsync<object>("eth_getTransactionByHash", "0x123...");

// Call a custom method with multiple parameters
var result = await AppKit.EVM.RpcRequestAsync<object>("custom_method", param1, param2);

----------------------------------------

TITLE: Setting Theme Variables in AppKit Modal
DESCRIPTION: Shows how to customize theme variables in the AppKit modal after initialization.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
const modal = createAppKit({ wagmiConfig, projectId })

modal.setThemeVariables({ ... })

----------------------------------------

TITLE: Configuring AppKit with Project ID and Metadata
DESCRIPTION: Basic configuration for initializing the AppKit with required project identification and metadata. The project ID can be obtained from Reown Cloud, and metadata includes the application name, description, URL, and icon URL.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/installation.mdx#2025-04-10_snippet_1

LANGUAGE: csharp
CODE:
await AppKit.InitializeAsync(
    new AppKitConfig(
        projectId: "YOUR PROJECT ID",
        new Metadata(
            name: "My Game",
            description: "Short description
            url: "https://example.com",
            iconUrl: "https://example.com/logo.png"
        )
    )
);

----------------------------------------

TITLE: Initializing AppKit Provider and Account in React
DESCRIPTION: Sets up the wallet provider function and account details using AppKit hooks. The walletProvider gives access to wallet functionality while useAppKitAccount provides address and connection status information.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
// Get the wallet provider with the AppKit hook
const { walletProvider } = useAppKitProvider < BitcoinConnector > "bip122";

// AppKit hook to get the address and check if the user is connected
const { allAccounts, address, isConnected } = useAppKitAccount();

----------------------------------------

TITLE: Using useDisconnect Hook for Session Disconnection
DESCRIPTION: Hook for disconnecting the current wallet session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
import { useDisconnect } from "@reown/appkit/react";

const { disconnect } = useDisconnect();

await disconnect();

----------------------------------------

TITLE: Handling Session Requests via Event Subscription in ReownWalletKit
DESCRIPTION: Demonstrates an alternative approach to handle session requests by subscribing to onSessionRequest events. This code shows how to process different methods based on the event parameters and respond appropriately to user actions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
_walletKit.onSessionRequest.subscribe(_onSessionRequest);

void _onSessionRequest(SessionRequestEvent? event) async {
  if (event != null) {
    final id = event.id;
    final topic = event.topic;
    final method = event.method;
    final chainId = event.chainId;
    final params = event.params as List;

    // message should arrive encoded
    final decoded = hex.decode(params.first.substring(2));
    final message = utf8.decode(decoded);

    // display a prompt for the user to approve or reject the request
    // if approved
    if (approved) {
      // Your code to sign the message here
      final signature = ...

      return _walletKit.respondSessionRequest(
        topic: topic,
        response: JsonRpcResponse(
          id: id,
          jsonrpc: '2.0',
          result: signature,
        ),
      );
    }
    // if rejected
    return _walletKit.respondSessionRequest(
      topic: topic,
      response: JsonRpcResponse(
        id: id,
        jsonrpc: '2.0',
        error: const JsonRpcError(code: 5001, message: 'User rejected method'),
      ),
    );
  }
}

----------------------------------------

TITLE: Getting Subscribers with TypeScript
DESCRIPTION: TypeScript implementation for fetching subscriber information. Includes type definitions for request and response bodies.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const requestBody: RequestBody = {
  accounts: [
    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',
    'eip155:1:0x0000000000000000000000000000000000000000'
  ]
}

const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
  body: JSON.stringify(requestBody)
})

const subscribers: ResponseBody = await response.json()

type RequestBody = {
  // Max 100 accounts
  accounts: string[]
}
type ResponseBody = {
  [account: string]: Subscriber
}
type Subscriber = {
  notification_types: string[]
}

----------------------------------------

TITLE: Initializing WalletKit Client in JavaScript
DESCRIPTION: Creates a new Core instance with a project ID and initializes WalletKit with metadata about the app.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { Core } from "@walletconnect/core";
import { WalletKit } from "@reown/walletkit";

const core = new Core({
  projectId: process.env.PROJECT_ID,
});

const walletKit = await WalletKit.init({
  core, // <- pass the shared `core` instance
  metadata: {
    name: "Demo app",
    description: "Demo Client as Wallet/Peer",
    url: "https://reown.com/walletkit",
    icons: [],
  },
});

----------------------------------------

TITLE: Opening On-Ramp Modal with AppKit in JavaScript
DESCRIPTION: This code snippet demonstrates how to programmatically open the On-Ramp modal using the AppKit API. It utilizes the 'useAppKit' hook to access the 'open' function, which is then called with the 'OnRampProviders' view.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/transactions/onramp.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
const { open } = useAppKit()

open({ view: 'OnRampProviders' })

----------------------------------------

TITLE: Implementing Solana Transaction Function
DESCRIPTION: Creating a function to generate and send a Solana transaction using the connected wallet provider and connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#2025-04-10_snippet_9

LANGUAGE: tsx
CODE:
const handleSendTransaction = async () => {
  if (!walletProvider || !address || !connection) {
    // walletProvider, connection or address are undefined
    return
  }

  // Recipient address
  const recipientAddress = new PublicKey('DG1Bq6muEMqaW6MHzWZFfQ8MmHiwvEuQcjVefVmPoV3j')

  // Create a new transaction
  const transaction = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: walletProvider.publicKey,
      toPubkey: recipientAddress,
      lamports: 10000000 //0.01 SOL
    })
  )
  transaction.feePayer = walletProvider.publicKey

  const { blockhash } = await connection.getLatestBlockhash()
  transaction.recentBlockhash = blockhash
  const tx = await walletProvider.sendTransaction(transaction, connection as Connection)
}

----------------------------------------

TITLE: Subscribing to Provider Changes with Reown AppKit in TypeScript
DESCRIPTION: This code shows how to subscribe to provider changes using the subscribeProvider method of the Reown AppKit modal. It includes a callback function that handles various provider-related data.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#2025-04-10_snippet_7

LANGUAGE: typescript
CODE:
function handleChange({
  provider,
  providerType,
  address,
  error,
  chainId,
  isConnected,
}) {
  //...
}

modal.subscribeProvider(handleChange);

----------------------------------------

TITLE: Rendering UI Components for Wallet Interactions
DESCRIPTION: Create React components to trigger wallet interactions such as getting balance, signing messages, and sending transactions when the user is connected.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#2025-04-10_snippet_5

LANGUAGE: jsx
CODE:
return (
  isConnected && (
    <div>
      <button onClick={getBalance}>Get Balance</button>
      <button onClick={handleSignMsg}>Sign Message</button>
      <button onClick={handleSendTx}>Send Transaction</button>
    </div>
  )
);

----------------------------------------

TITLE: Example WalletConnect Proposal Namespaces Request in JSON
DESCRIPTION: Shows an example of proposal namespaces requested by a dApp. It defines the blockchain networks, methods, and events that the dApp wants to interact with, following the CAIP-25 specification.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_8

LANGUAGE: json
CODE:
{
  "eip155": {
    "chains": ["eip155:137", "eip155:1"],
    "methods": ["eth_sign"],
    "events": ["accountsChanged"]
  },
  "cosmos": {
    "chains": ["cosmos:cosmoshub-4"],
    "methods": ["cosmos_signDirect"],
    "events": ["someCosmosEvent"]
  }
}

----------------------------------------

TITLE: Implementing Solana Transaction Function
DESCRIPTION: Function to create and send a Solana transaction. It gets the latest blockhash, creates a transaction to transfer LAMPORTS, prompts the wallet to sign and send it, and logs the transaction signature.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_11

LANGUAGE: javascript
CODE:
// function to send a TX
const handleSendTx = () => {
    const latestBlockhash = await connection.getLatestBlockhash();

    // create the transaction
    const transaction= new Transaction({
        feePayer: wallet,
        recentBlockhash: latestBlockhash?.blockhash,
      }).add(
        SystemProgram.transfer({
          fromPubkey: wallet,
          toPubkey: new PublicKey(address), // destination address
          lamports: 1000,
        })
      );

    // raise the modal
    const signature = await walletProvider.sendTransaction(transaction, connection)

    // print the Transaction Signature
    console.log(signature);
}

----------------------------------------

TITLE: Initializing AppKit with Recommended Wallets in Kotlin
DESCRIPTION: This snippet demonstrates how to initialize the WalletConnect AppKit with a list of recommended wallet IDs. The order of wallets in the list is respected when displaying recommendations to users.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#2025-04-10_snippet_0

LANGUAGE: kotlin
CODE:
val recommendedWalletsIds = listOf<String>(
    "1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369",
    "4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0"
)

val initParams = Modal.Params.Init(core = CoreClient, recommendedWalletsIds = recommendedWalletsIds)

AppKit.initialize(
    init = initParams,
    onSuccess = {
        // Callback will be called if initialization is successful
    },
    onError = { error ->
        // Error will be thrown if there's an issue during initialization
    }
)

----------------------------------------

TITLE: Pairing a Session in WalletConnect using C#
DESCRIPTION: Pairs an incoming session using the session's URI to obtain the connection proposal, which can then be approved or denied by the wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_37

LANGUAGE: csharp
CODE:
ProposalStruct proposal = await walletClient.Pair(connectData.Uri);

----------------------------------------

TITLE: React Implementation for Reown AppKit
DESCRIPTION: React code showing import updates and initialization of Reown AppKit with Solana adapter configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit/react'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'

const solanaAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]
})

const modal = createAppKit({
  projectId,
  metadata,
  networks: [solana, solanaTestnet, solanaDevnet],
  adapters: [solanaAdapter],
})

----------------------------------------

TITLE: Using solana_signAllTransactions Method in TypeScript
DESCRIPTION: Example of the solana_signAllTransactions method, which signs a list of transactions. The wallet must sign all transactions and return them in the same order as received, or return an error if it cannot sign any transaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
// Request
{
	"id": 1,
	"jsonrpc": "2.0",
	"method": "solana_signAllTransactions",
	"params": {
    "transactions": string[]
	}
}

// Response
{
	"id": 1,
	"jsonrpc": "2.0",
	"result":  {
	  "transactions": string[]
	}
}

----------------------------------------

TITLE: Configuring Reown AppKit - React Implementation
DESCRIPTION: Complete React implementation showing imports, adapter configuration, and component setup with WagmiProvider
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_25

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { arbitrum, mainnet } from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { WagmiProvider } from 'wagmi'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

LANGUAGE: tsx
CODE:
const projectId = 'YOUR_PROJECT_ID'
const queryClient = new QueryClient()

const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://example.com',
    icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const wagmiAdapter = new WagmiAdapter({
  networks: [mainnet, arbitrum],
  projectId
})

LANGUAGE: tsx
CODE:
createAppKit({
 adapters: [wagmiAdapter],
 networks: [mainnet, arbitrum],
 metadata: metadata,
 projectId,
 features: {
   analytics: true,
 }
})

export default function App() {
  return (
    <>
      <WagmiProvider config={wagmiAdapter.wagmiConfig}>
      <QueryClientProvider client={queryClient}>
          <HomePage />
       </QueryClientProvider>
      </WagmiProvider>
    </>
  )
}

----------------------------------------

TITLE: Building Approved Namespaces in JavaScript
DESCRIPTION: Demonstrates how to use the buildApprovedNamespaces utility to create namespaces for session approval.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
import { WalletKit, WalletKitTypes } from '@reown/walletkit'
import { buildApprovedNamespaces, getSdkError } from '@walletconnect/utils'

async function onSessionProposal({ id, params }: WalletKitTypes.SessionProposal){
  try{
    // ------- namespaces builder util ------------ //
    const approvedNamespaces = buildApprovedNamespaces({
      proposal: params,
      supportedNamespaces: {
        eip155: {
          chains: ['eip155:1', 'eip155:137'],
          methods: ['eth_sendTransaction', 'personal_sign'],
          events: ['accountsChanged', 'chainChanged'],
          accounts: [
            'eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb',
            'eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb'
          ]
        }
      }
    })
    // ------- end namespaces builder util ------------ //

    const session = await walletKit.approveSession({
      id,
      namespaces: approvedNamespaces
    })
  }catch(error){
    // use the error.message to show toast/info-box letting the user know that the connection attempt was unsuccessful
    ....
    await walletKit.rejectSession({
      id: proposal.id,
      reason: getSdkError("USER_REJECTED")
    })
  }
}


walletKit.on('session_proposal', onSessionProposal)

----------------------------------------

TITLE: Retrieving and Managing Notification Types with TypeScript Client
DESCRIPTION: This code demonstrates how to interact with notification types using a client interface. It shows methods for getting current notification types, watching for changes to notification types, and updating enabled notification types for an account subscribed to an application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/javascript.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
// get scopes of current account's subscription to current dapp
const types = client.getNotificationTypes()

// watch scopes of specific account's subscription to specific dapp
client.watchNotificationTypes(scp => {
  console.log(scp)
})

client.update(['enabledType-1', 'enabledType-2'])

----------------------------------------

TITLE: Using useAppKitEventSubscription with Ethers
DESCRIPTION: Demonstrates how to use the useAppKitEventSubscription hook with Ethers integration to subscribe to specific modal events like MODAL_OPEN. The hook accepts an event name and a callback function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_11

LANGUAGE: typescript
CODE:
import { useAppKitEventSubscription } from '@reown/appkit-ethers-react-native'

useAppKitEventSubscription('MODAL_OPEN', newEvent => {
  // your code here
});

----------------------------------------

TITLE: Using Connect Button with ReownAppKit
DESCRIPTION: Implements the AppKitModalConnectButton to open a connection modal for wallet or social authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
AppKitModalConnectButton(appKit: _appKitModal)

----------------------------------------

TITLE: Sending Raw Transactions with AppKit EVM Module
DESCRIPTION: Method to send a pre-signed transaction to the blockchain network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_14

LANGUAGE: csharp
CODE:
string txHash = await AppKit.EVM.SendRawTransactionAsync(
    "0x123..." // signed transaction data
);

----------------------------------------

TITLE: Getting Account Data with Wagmi Core in TSX
DESCRIPTION: This snippet demonstrates how to retrieve account data and connection status using the getAccount action from Wagmi Core. It requires a wagmiConfig instance to be imported and passed to the function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/wagmi/actions.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { getAccount } from "@wagmi/core";
import { wagmiConfig } from "./main";

const account = getAccount(wagmiConfig);

----------------------------------------

TITLE: Manual Contract Interaction with WETH9 using WalletConnect and Nethereum in C#
DESCRIPTION: This extensive example shows how to manually interact with a smart contract (WETH9) using WalletConnect and Nethereum. It includes session management, function parameter encoding, transaction creation, and error handling. This approach provides more control over the interaction process.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_43

LANGUAGE: csharp
CODE:
public async Task ContractTransaction()
{
    var session = WalletConnect.Instance.ActiveSession;

    // Because one session can have multiple namespaces, we need to select one.
    // In most cases, especially in games, dapp will use only one namespace.
    var @namespace = session.Namespaces.First();
    var myAddress = session.CurrentAddress(@namespace.Key).Address;

    // Define contract and function details
    var contractAddress = "0x4200000000000000000000000000000000000006";
    var toAddress = myAddress; // Use sender's address for the sake of example
    var amount = new BigInteger(12345);

    // Define the parameters for the approve function
    var parameters = new Parameter[] {
        new("address", "guy"),
        new("uint256", "wad")
    };

    var functionCallEncoder = new FunctionCallEncoder();
    var sha3Signature = new Sha3Keccack().CalculateHash("approve(address,uint256)");

    // Encode the parameters
    var encodedParameters = functionCallEncoder
        .EncodeParameters(parameters, toAddress, amount)
        .ToHex();

    // Combine signature and parameters
    var data = "0x" + sha3Signature[..8] + encodedParameters;

    // Create transaction
    var ethSendTransaction = new EthSendTransaction(new Transaction
    {
        From = myAddress,
        To = contractAddress,
        Value = "0",
        Data = data
    });

    try
    {
        var result = await WalletConnect.Instance.RequestAsync<EthSendTransaction, string>(ethSendTransaction);
        Debug.Log($"Transaction success! TxHash: {result}", this);
    }
    catch (Exception e)
    {
        Debug.LogError(e, this);
    }
}

public class Transaction
{
    [JsonProperty("from")] public string From { get; set; }

    [JsonProperty("to")] public string To { get; set; }

    [JsonProperty("gas", NullValueHandling = NullValueHandling.Ignore)]
    public string Gas { get; set; }

    [JsonProperty("gasPrice", NullValueHandling = NullValueHandling.Ignore)]
    public string GasPrice { get; set; }

    [JsonProperty("value")] public string Value { get; set; }

    [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
    public string Data { get; set; } = "0x";
}

[RpcMethod("eth_sendTransaction"), RpcRequestOptions(Clock.ONE_MINUTE, 99997)]
public class EthSendTransaction : List<Transaction>
{
    public EthSendTransaction(params Transaction[] transactions) : base(transactions)
    {
    }

    [Preserve]
    public EthSendTransaction()
    {
    }
}

----------------------------------------

TITLE: Installing Solana Web3.js Library
DESCRIPTION: Installation commands for adding the @solana/web3.js library to different package managers, which is required for interacting with the Solana blockchain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @solana/web3.js

LANGUAGE: bash
CODE:
yarn add @solana/web3.js

LANGUAGE: bash
CODE:
pnpm add @solana/web3.js

LANGUAGE: bash
CODE:
bun add @solana/web3.js

----------------------------------------

TITLE: Initializing useNotifications Hook in TypeScript
DESCRIPTION: Sets up the useNotifications hook with configuration parameters for pagination, infinite scrolling, and sorting behavior. This hook returns notification data and methods to manage notification read status.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const notificationsPerPage = 5
const isInfiniteScroll = true
const unreadFirst = true

const {
  data: notifications,
  nextPage,
  markNotificationsAsRead,
  markAllNotificationsAsRead
} = useNotifications(
  notificationsPerPage,
  isInfiniteScroll,
  account,
  domain,
  unreadFirst,
  onRead // optional function to run whenever messages are read
)

----------------------------------------

TITLE: Connecting to WalletConnect in Flutter
DESCRIPTION: This snippet demonstrates how to connect to WalletConnect using SignClient in a Flutter application. It includes setting up required namespaces and handling the connection response.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_19

LANGUAGE: dart
CODE:
ConnectResponse response = await signClient.connect(
    requiredNamespaces: {
        'eip155': RequiredNamespace(
            chains: ['eip155:1'], // Ethereum chain
            methods: ['eth_signTransaction'], // Requestable Methods
        ),
        'kadena': RequiredNamespace(
            chains: ['kadena:mainnet01'], // Kadena chain
            methods: ['kadena_quicksign_v1'], // Requestable Methods
        ),
    }
);

Uri? uri = response.uri;

----------------------------------------

TITLE: Approving Session Proposal in Swift
DESCRIPTION: Shows how to approve a session proposal using WalletKit, including error handling and UI updates.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#2025-04-10_snippet_3

LANGUAGE: swift
CODE:
do {
    try await WalletKit.instance.approve(proposalId: proposal.id, namespaces: sessionNamespaces, sessionProperties: proposal.sessionProperties)
    // Update UI, remove loader
} catch {
    // present error
}

----------------------------------------

TITLE: Initializing WalletConnect in Android
DESCRIPTION: Initializes the WalletConnect Core and Sign clients in an Android application. Sets up the project ID, connection type, and app metadata for the connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_13

LANGUAGE: Kotlin
CODE:
val projectId = "" // Get Project ID at https://cloud.reown.com/
val connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL
val appMetaData = Core.Model.AppMetaData(
    name = "Dapp Name",
    description = "Dapp Description",
    url = "Dapp URL",
    icons = /*list of icon url strings*/,
    redirect = "kotlin-dapp-wc:/request" // Custom Redirect URI
)

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)

val init = Sign.Params.Init(core = CoreClient)

SignClient.initialize(init) { error ->
    // Error will be thrown if there's an issue during initialization
}

----------------------------------------

TITLE: Configuring Recommended Wallets in AppKit (Swift)
DESCRIPTION: This snippet shows how to set default recommended wallets in AppKit using wallet IDs fetched from WalletGuide. The order of the wallets is respected based on the provided array.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
AppKit.configure(
    ...
    recommendedWalletIds: [String]
    ...
)

----------------------------------------

TITLE: Handling Registration in Web3Inbox using TypeScript
DESCRIPTION: Demonstrates the new registration process using separate hooks for preparing and executing registration, following the single responsibility principle.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
- const handleRegistration = () => {
-   register(signMessageAsync)
- }
+ const { prepareRegistration } = usePrepareRegistration();
+ const { register, isLoading: isLoadingRegister } = useRegister();
+ const handleRegistration = async () => {
+   try {
+     const { message, registerParams } = await prepareRegistration();
+     const signature = await signMessageAsync({ message: message });
+     await register({ registerParams, signature });
+   } catch (registerIdentityError: any) {
+     console.error(registerIdentityError)
+   }
+ };

----------------------------------------

TITLE: Implementing Authentication Request Approval in TypeScript
DESCRIPTION: Demonstrates two approaches for signing authentication messages and creating verifiable authentication objects. Supports both single and multi-chain authentication flows using SIWE (Sign-In with Ethereum) messages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
// Approach 1
const signature = await cryptoWallet.signMessage(message, privateKey);
const auth = buildAuthObject(
  authPayload,
  {
    t: "eip191",
    s: signature,
  },
  iss
);

await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths: [auth],
});

// Approach 2
const auths = [];
authPayload.chains.forEach(async (chain) => {
  const message = walletKit.formatAuthMessage({
    request: authPayload,
    iss: `${chain}:${cryptoWallet.address}`,
  });
  const signature = await cryptoWallet.signMessage(message);
  const auth = buildAuthObject(
    authPayload,
    {
      t: "eip191",
      s: signature,
    },
    `${chain}:${cryptoWallet.address}`
  );
  auths.push(auth);
});

await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths,
});

----------------------------------------

TITLE: Using useAppKitAccount Hook for Client Information in React
DESCRIPTION: This snippet demonstrates how to use the useAppKitAccount hook to retrieve client blockchain information. It provides access to the user's address, CAIP-formatted address, and connection status.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Implementing Chain Abstraction with WalletKit in TypeScript
DESCRIPTION: Complete implementation example of handling chain abstraction in a wallet. Shows how to check if bridging is needed, execute bridging transactions, monitor status, and complete the original transaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/early-access/chain-abstraction.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
walletkit.on("session_request", async (event) => {
  const {
    id,
    topic,
    params: { request, chainId },
  } = event;

  if (request.method === "eth_sendTransaction") {
    const originalTransaction = request.params[0];
    
    // Check if bridging transactions are required
    const prepareResponse = await wallet.prepare({
      transaction: {
        ...originalTransaction,
        chainId,
      },
    });

    if (prepareResponse.status === "error") {
      // Display error to user and respond to dapp
      await wallet.respondSessionRequest({
        topic,
        response: formatJsonRpcResult(id, prepareResponse.reason),
      });
      return;
    }

    if (prepareResponse.status === "available") {
      const { transactions, funding, fulfilmentId, checkIn } = prepareResponse.data;

      // Display bridging information to user
      // Once approved, execute bridging transactions
      for (const transaction of transactions) {
        const signedTransaction = await wallet.signTransaction(transaction);
        await wallet.sendTransaction(signedTransaction);
      }
      // await for the completed fulfilment status 
      await statusResult = await wallet.status({
        fulfilmentId
      });

      // Proceed with original transaction
      const signedTransaction = await wallet.signTransaction(originalTransaction);
      const result = await wallet.sendTransaction(signedTransaction);
      
      await wallet.respondSessionRequest({
        topic,
        response: formatJsonRpcResult(id, result)
      });
    } else {
      // No bridging required, process transaction normally
      const signedTransaction = await wallet.signTransaction(originalTransaction);
      const result = await wallet.sendTransaction(signedTransaction);
      
      await wallet.respondSessionRequest({
        topic,
        response: formatJsonRpcResult(id, result)
      });
    }
  }
});

----------------------------------------

TITLE: Getting ERC20 Token Balance in C#
DESCRIPTION: Demonstrates reading an ERC20 token balance from a smart contract using AppKit's ReadContractAsync method. This is a read-only operation that doesn't require a transaction fee. The code also retrieves and applies the token's decimal places.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/usage.mdx#2025-04-10_snippet_2

LANGUAGE: csharp
CODE:
const string contractAddress = "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984";
const string ownerAddress = "0x3D30B1aB88D487B0F3061F40De76845Bec3F1e94";
const string abi = "..."; // ABI of the ERC20 token contract

var evm = AppKit.Evm;
var balance = await evm.ReadContractAsync<BigInteger>(contractAddress, abi, "balanceOf", new object[]
{
    ownerAddress
});
var decimals = await evm.ReadContractAsync<BigInteger>(contractAddress, abi, "decimals");

var finalBalance = tokenBalance / BigInteger.Pow(10, tokenDecimal);

----------------------------------------

TITLE: Creating Wagmi Adapter for AppKit in JavaScript
DESCRIPTION: This snippet shows how to create a Wagmi adapter for AppKit in JavaScript. It sets up the project ID, metadata, and initializes the WagmiAdapter with specified networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_19

LANGUAGE: javascript
CODE:
const projectId = 'YOUR_PROJECT_ID'
const queryClient = new QueryClient()

const metadata = { //optional
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://example.com',
    icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const wagmiAdapter = new WagmiAdapter({
  networks: [mainnet, arbitrum],
  projectId
})

----------------------------------------

TITLE: Setting Theme Mode in AppKit Modal
DESCRIPTION: Shows how to set the theme mode (light/dark) of the AppKit modal after initialization.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
const modal = createAppKit({ wagmiConfig, projectId });

modal.setThemeMode("dark");

----------------------------------------

TITLE: Setting Up Balance Hook with AppKit Account in React
DESCRIPTION: Code to set up the useBalance hook with the user's address obtained from AppKit. The hook prepares for fetching the wallet balance when triggered.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_1

LANGUAGE: jsx
CODE:
// AppKit hook to get the address and check if the user is connected
const { address, isConnected } = useAppKitAccount()

// Call the useBalance hook with the user's address to prepare for fetching the balance.
const { refetch } = useBalance({
    address: address as Address
});

----------------------------------------

TITLE: Using useAppKitState with Ethers v5
DESCRIPTION: Demonstrates how to use the useAppKitState hook with Ethers v5 integration to access the current state of the AppKit modal, including whether it's open and the selected network ID.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
import { useAppKitState } from '@reown/appkit-ethers5-react-native'

const { open, selectedNetworkId } = useAppKitState()

----------------------------------------

TITLE: Implementing AppKit as a Compose Component in Kotlin
DESCRIPTION: This snippet demonstrates how to use AppKit as a Compose component within a ModalBottomSheetLayout. It includes state management for the bottom sheet and the AppKit component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#2025-04-10_snippet_4

LANGUAGE: kotlin
CODE:
import androidx.compose.material.ExperimentalMaterialApi
import androidx.compose.material.ModalBottomSheetState
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.compose.material.ModalBottomSheetLayout

setContent {
    val modalSheetState = rememberModalBottomSheetState(initialValue = ModalBottomSheetValue.Hidden, skipHalfExpanded = true)
    val coroutineScope = rememberCoroutineScope()
    val navController = rememberNavController()

    ModalBottomSheetLayout(
        sheetContent = {
            AppKitComponent(
                shouldOpenChooseNetwork = true | false,
                closeModal = { coroutineScope.launch { modalSheetState.hide() }
            )
        }
    ) {
        // content
    }
}

----------------------------------------

TITLE: Initializing and Connecting WalletConnect Client
DESCRIPTION: Demonstrates the initialization of WalletConnect client and establishing connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_24

LANGUAGE: csharp
CODE:
var dappClient = await WalletConnectSignClient.Init(dappOptions);
var connectData = await dappClient.Connect(dappConnectOptions);

----------------------------------------

TITLE: Initializing Web3 Inbox Client with TypeScript
DESCRIPTION: Configuration function for the Web3 Inbox client that accepts projectId (required), domain (optional, defaults to window.location.host), allApps flag (optional, controls subscription access scope), and logLevel (optional, for console logging verbosity).
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/initialization/react.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
initWeb3inboxClient({ projectId, domain, allApps, logLevel })

----------------------------------------

TITLE: Managing Subscriptions in Web3Inbox using TypeScript
DESCRIPTION: Illustrates the new approach to managing subscriptions using separate hooks for subscribing, unsubscribing, and retrieving subscription data, following the single responsibility principle.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
- import { useManageSubscription } from "@web3inbox/widget-react"
+ import { useSubscribe, useUnsubscribe, useSubscription } from "@web3inbox/react"

- const { subscribe, unsubscribe, isSubscribed } = useManageSubscription()
+ const { subscribe } = useSubscribe()
+ const { unsubscribe } = useUnsubscribe()
+ const { data: subscription } = useSubscription()
- const { subscriptions } = useSubscriptions()
+ const { data: subscriptions } = useSubscriptions()

----------------------------------------

TITLE: Integrating AppKit with Ethers5 and Solana Adapters
DESCRIPTION: TypeScript implementation for integrating AppKit with Ethers5 and Solana network adapters. Configures specific Solana wallet providers (Phantom and Solflare) alongside EVM networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { SolanaAdapter } from '@reown/appkit-adapter-solana'
import { EthersAdapter } from '@reown/appkit-adapter-ethers'

import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import { mainnet, arbitrum, sepolia } from '@reown/appkit/networks'

import { SolflareWalletAdapter, PhantomWalletAdapter } from '@solana/wallet-adapter-wallets'

// 0. Create the Ethers adapter
export const ethersAdapter = new EthersAdapter()

// 1. Create Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]
})

// 2. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 3. Set up the metadata - Optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 4. Create the AppKit instance
const modal = createAppKit({
  adapters: [ethersAdapter, solanaWeb3JsAdapter],
  networks: [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet],
  metadata,
  projectId,
  features: {
    analytics: true,
  }
})

----------------------------------------

TITLE: Smart Contract Interaction using Ethers in Vue
DESCRIPTION: Vue script example showing how to use Ethers.js to interact with an ERC-20 token contract. This code gets a user's USDT balance by connecting to their wallet and querying the contract.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_22

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { useAppKitProvider, useAppKitAccount } from "@reown/appkit/vue";
  import { BrowserProvider, Contract, formatUnits } from "ethers";

  const USDTAddress = "0x617f3112bf5397D0467D315cC709EF968D9ba546";

  // The ERC-20 Contract ABI, which is a common contract interface
  // for tokens (this is the Human-Readable ABI format)
  const USDTAbi = [
    "function name() view returns (string)",
    "function symbol() view returns (string)",
    "function balanceOf(address) view returns (uint)",
    "function transfer(address to, uint amount)",
    "event Transfer(address indexed from, address indexed to, uint amount)",
  ];

  function Components() {
    const { address, isConnected } = useAppKitAccount();
    const { walletProvider } = useAppKitProvider("eip155");

    async function getBalance() {
      if (!isConnected) throw Error("User disconnected");

      const ethersProvider = new BrowserProvider(walletProvider);
      const signer = await ethersProvider.getSigner();
      // The Contract object
      const USDTContract = new Contract(USDTAddress, USDTAbi, signer);
      const USDTBalance = await USDTContract.balanceOf(address);

      console.log(formatUnits(USDTBalance, 18));
    }
    return <button onClick={getBalance}>Get User Balance</button>;
  }
</script>

----------------------------------------

TITLE: Implementing Verify API Validation Checks
DESCRIPTION: This code snippet demonstrates how to subscribe to session proposals and check Verify API validation states to determine if a user is interacting with a potentially malicious dapp. It accesses the verifyContext object from the SessionProposalEvent to check for scam, invalid, valid, or unknown validation states.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/verify.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
_walletKit!.onSessionProposal.subscribe((SessionProposalEvent? args) {
  if (args != null) {
    final scamApp = args.verifyContext?.validation.scam;
    final invalidApp = args.verifyContext?.validation.invalid;
    final validApp = args.verifyContext?.validation.valid;
    final unknown = args.verifyContext?.validation.unknown;
  }
});

----------------------------------------

TITLE: Initializing WalletConnect Provider
DESCRIPTION: Creates a universal provider instance with project configuration and relay URL.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
const provider = await UniversalProvider.init({
  projectId: "2ea3f3ghubh32b8ie2f2",
  relayUrl: "wss://relay.walletconnect.com",
});

----------------------------------------

TITLE: Using AppKit Account Hook in React
DESCRIPTION: Hook that retrieves client account information including wallet address, CAIP address, and connection status
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Sending Ether with AppKit EVM in C#
DESCRIPTION: Demonstrates how to send Ether to an address using AppKit's EVM integration. This code creates a transaction with the default gas amount of 21000, and the gas price is determined by the wallet provider.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/usage.mdx#2025-04-10_snippet_0

LANGUAGE: csharp
CODE:
const string toAddress = "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045";
BigInteger amount = Web3.Convert.ToWei(0.001);
string result = await AppKit.Evm.SendTransactionAsync(toAddress, amount);

Debug.Log("Transaction hash: " + result);

----------------------------------------

TITLE: Setting Chains for AppKit in Kotlin
DESCRIPTION: This snippet shows how to define and set chains for AppKit. It uses a predefined set of Ethereum chains from AppKitChainsPresets.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
Example of definition chains: https://github.com/reown-com/reown-kotlin/blob/main/product/appkit/src/main/kotlin/com/reown/appkit/presets/AppKitChainsPresets.kt

AppKit.setChains(AppKitChainsPresets.ethChains.values.toList())

----------------------------------------

TITLE: Defining Custom Desktop Wallets in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the structure for defining an array of custom desktop or web-based wallets. Each wallet requires an id, name, and links object containing native (for deep linking) and universal (for web fallback) URLs. An accompanying note mentions that wallet images must be added in the walletImages configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/desktopWallets.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
desktopWallets: [
  {
    id: string,
    name: string,
    links: {
      native: string
      universal: string,
    },
  },
];

----------------------------------------

TITLE: Implementing Solana Smart Contract Counter Interaction in TypeScript React
DESCRIPTION: This code demonstrates how to interact with a Solana counter program by creating a new account, incrementing the counter, and reading its state. It uses the Solana web3.js library along with reown AppKit hooks for wallet connection and transaction signing. The example includes account creation, transaction building, and data deserialization.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/about/programs.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import {
  SystemProgram,
  PublicKey,
  Keypair,
  Transaction,
  TransactionInstruction,
  LAMPORTS_PER_SOL
} from '@solana/web3.js'
import { useAppKitAccount, useAppKitProvider } from '@reown/appkit/react'
import { useAppKitConnection, type Provider } from '@reown/appkit-adapter-solana/react'

function deserializeCounterAccount(data?: Buffer): { count: number } {
  if (data?.byteLength !== 8) {
    throw Error('Need exactly 8 bytes to deserialize counter')
  }

  return {
    count: Number(data[0])
  }
}

const { address } = useAppKitAccount()
const { connection } = useAppKitConnection()
const { walletProvider } = useAppKitProvider<Provider>('solana')

async function onIncrementCounter() {
  const PROGRAM_ID = new PublicKey('Cb5aXEgXptKqHHWLifvXu5BeAuVLjojQ5ypq6CfQj1hy')

  const counterKeypair = Keypair.generate()
  const counter = counterKeypair.publicKey

  const balance = await connection.getBalance(walletProvider.publicKey)
  if (balance < LAMPORTS_PER_SOL / 100) {
    throw Error('Not enough SOL in wallet')
  }

  const COUNTER_ACCOUNT_SIZE = 8
  const allocIx: TransactionInstruction = SystemProgram.createAccount({
    fromPubkey: walletProvider.publicKey,
    newAccountPubkey: counter,
    lamports: await connection.getMinimumBalanceForRentExemption(COUNTER_ACCOUNT_SIZE),
    space: COUNTER_ACCOUNT_SIZE,
    programId: PROGRAM_ID
  })

  const incrementIx: TransactionInstruction = new TransactionInstruction({
    programId: PROGRAM_ID,
    keys: [
      {
        pubkey: counter,
        isSigner: false,
        isWritable: true
      }
    ],
    data: Buffer.from([0x0])
  })

  const tx = new Transaction().add(allocIx).add(incrementIx)

  tx.feePayer = walletProvider.publicKey
  tx.recentBlockhash = (await connection.getLatestBlockhash('confirmed')).blockhash

  await walletProvider.signAndSendTransaction(tx, [counterKeypair])

  const counterAccountInfo = await connection.getAccountInfo(counter, {
    commitment: 'confirmed'
  })

  if (!counterAccountInfo) {
    throw new Error('Expected counter account to have been created')
  }

  const counterAccount = deserializeCounterAccount(counterAccountInfo?.data)

  if (counterAccount.count !== 1) {
    throw new Error('Expected count to have been 1')
  }

  console.log(`[alloc+increment] count is: ${counterAccount.count}`);
}

----------------------------------------

TITLE: Updating Subscription Notification Settings with Notify API in JavaScript
DESCRIPTION: Shows how to update notification settings for a subscription using the Notify API. This process allows users to select which types of notifications they wish to receive from a dapp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
await notifyClient.update({
  topic,
  scope: ["alerts"],
});

----------------------------------------

TITLE: Pairing a Session in C#
DESCRIPTION: Shows how to pair an incoming session using the session's URI. This is the first step in establishing a connection between a dApp and a wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_7

LANGUAGE: csharp
CODE:
var uri = "...";
await sdk.Pair(uri);

----------------------------------------

TITLE: Adding Custom Wallets to AppKit (Swift)
DESCRIPTION: This snippet illustrates how to add custom wallets that are not included in the explorer to AppKit. It includes details such as wallet ID, name, homepage, image URL, and other properties.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
AppKit.configure(
    ...
    customWallets: [
                .init(
                    id: "swift-sample",
                    name: "Swift Sample Wallet",
                    homepage: "https://reown.com/",
                    imageUrl: "https://avatars.githubusercontent.com/u/179229932?s=200&v=4",
                    order: 1,
                    mobileLink: "walletapp://",
                    linkMode: "https://appkit-lab.reown.com/example"
                )
            ]
    ...
)

----------------------------------------

TITLE: Configuring Auth Connector in Wagmi Config
DESCRIPTION: Code snippet demonstrating how to import and configure the ReOwn auth connector in the Wagmi configuration. The auth connector is added to the extraConnectors array to enable authentication functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/email.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
// Add the following code lines
import { authConnector } from "@reown/appkit-auth-wagmi-react-native";

const auth = authConnector({ projectId, metadata });

const wagmiConfig = defaultWagmiConfig({
  chains,
  projectId,
  metadata,
  // Add the following code line
  extraConnectors: [auth],
});

----------------------------------------

TITLE: Initializing WalletConnect SignClient with Project ID in JavaScript
DESCRIPTION: This snippet demonstrates how to instantiate a WalletConnect SignClient with a project ID. The project ID is obtained from cloud.reown.com and is used to authenticate connections to the relay service.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/cloud/relay.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import SignClient from '@walletconnect/sign-client'
const signClient = await SignClient.init({
  projectId: 'c4f79cc821944d9680842e34466bfb'
})

----------------------------------------

TITLE: Signing Messages with AppKit EVM Module
DESCRIPTION: Methods to sign messages using the active account's private key. Supports signing string messages, raw bytes, or specifying a particular address for signing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_7

LANGUAGE: csharp
CODE:
// Sign a string message
string signature = await AppKit.EVM.SignMessageAsync("Hello World");

// Sign raw bytes
byte[] rawMessage = System.Text.Encoding.UTF8.GetBytes("Hello World");
string signature = await AppKit.EVM.SignMessageAsync(rawMessage);

// Sign with specific address (optional)
string signature = await AppKit.EVM.SignMessageAsync("Hello World", "0x123...");

----------------------------------------

TITLE: Implementing Session Rejection in WalletKit
DESCRIPTION: Shows how to reject a session proposal using CAIP-25 compliant rejection codes and reasons.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_6

LANGUAGE: kotlin
CODE:
val proposerPublicKey: String = /*Proposer publicKey from SessionProposal object*/
val rejectionReason: String = /*The reason for rejecting the Session Proposal*/
val rejectionCode: String = /*The code for rejecting the Session Proposal*/

val rejectParams: Wallet.Params.SessionReject = SessionReject(proposerPublicKey, rejectionReason, rejectionCode)
WalletKit.rejectSession(rejectParams) { error -> /*callback for error while rejecting a session*/ }

----------------------------------------

TITLE: Installing SIWE Dependencies with Package Managers
DESCRIPTION: Commands for installing the required dependencies for SIWE integration using various package managers. This includes @reown/appkit-siwe, siwe, and viem packages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwe siwe viem

LANGUAGE: bash
CODE:
yarn add @reown/appkit-siwe siwe viem

LANGUAGE: bash
CODE:
bun a @reown/appkit-siwe siwe viem

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-siwe siwe viem

----------------------------------------

TITLE: Setting Active Blockchain in AppKit
DESCRIPTION: Method to change the currently active blockchain network. The chain must be included in the supported chains configuration of AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_2

LANGUAGE: csharp
CODE:
Chain newChain = ChainConstants.Chains.Ethereum;
await AppKit.NetworkController.ChangeActiveChainAsync(newChain);

----------------------------------------

TITLE: Implementing Message Signing with useSignMessage Hook in React Native
DESCRIPTION: This snippet shows how to implement message signing in a React Native application using the useSignMessage hook from wagmi. It handles pending, success, and error states while providing a UI for users to sign messages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { View, Text, Pressable } from "react-native";
import { useSignMessage } from "wagmi";

function App() {
  const { data, isError, isPending, isSuccess, signMessage } = useSignMessage();

  return (
    <View>
      <Pressable
        disabled={isPending}
        onPress={() => signMessage({ message: "hello world" })}
      >
        <Text>Sign message</Text>
      </Pressable>
      {isSuccess && <Text>Signature: {data}</Text>}
      {isError && <Text>Error signing message</Text>}
    </View>
  );
}

----------------------------------------

TITLE: Signing Messages with Wagmi Core in TypeScript
DESCRIPTION: This snippet shows how to sign messages with a connected account using the signMessage action from Wagmi Core. It requires a wagmiConfig instance and accepts a message parameter that will be signed by the connected wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/wagmi/actions.mdx#2025-04-10_snippet_1

LANGUAGE: ts
CODE:
import { signMessage } from "@wagmi/core";
import { wagmiConfig } from "./main";

await signMessage(wagmiConfig, { message: "hello world" });

----------------------------------------

TITLE: Defining Smart Contract ABI in TypeScript
DESCRIPTION: Sets up the ABI for a donut contract with a purchase function, and specifies the contract address to interact with. This code defines the structure of the contract interface and establishes the target for sponsored transactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const donutContractAbi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      }
    ],
    name: 'purchase',
    outputs: [],
    stateMutability: 'payable',
    type: 'function'
  },
]

const donutContactAddress = '0x2E65BAfA07238666c3b239E94F32DaD3cDD6498D' as const

----------------------------------------

TITLE: Setting Application Metadata in ReOwn AppKit
DESCRIPTION: Configuration of application metadata including name, description, icons, and URL for use in wallet connection screens and other UI elements.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
createAppKit({
  // ...
  metadata: {
    name: "My App",
    description: "My App Description",
    icons: ["https://myapp.com/icon.png"],
    url: "https://myapp.com",
  },
});

----------------------------------------

TITLE: Account Logout Implementation in Kotlin
DESCRIPTION: Handles account logout by unregistering from the Notify API. Removes all subscriptions and messages for the specified account from client storage.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#2025-04-10_snippet_8

LANGUAGE: kotlin
CODE:
val params = Notify.Params.Unregistration(/*CAIP-10 account*/)
NotifyClient.unregister(
  params,
  onSuccess = {
      // callback for when the unregistration was successful
  },
  onError = { error ->
    // callback for when the unregistration has failed
  }
)

----------------------------------------

TITLE: Implementing WalletDelegate Interface in WalletKit
DESCRIPTION: Shows how to implement the WalletDelegate interface to handle various session-related callbacks and events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_12

LANGUAGE: kotlin
CODE:
val walletDelegate = object : WalletKit.WalletDelegate {
    override fun onSessionProposal(sessionProposal: Wallet.Model.SessionProposal, verifyContext: Wallet.Model.VerifyContext) {
        // Triggered when wallet receives the session proposal sent by a Dapp
    }

    fun onSessionAuthenticate(sessionAuthenticate: Wallet.Model.SessionAuthenticate, verifyContext: Wallet.Model.VerifyContext) {
      // Triggered when wallet receives the session authenticate sent by a Dapp
    }

    override fun onSessionRequest(sessionRequest: Wallet.Model.SessionRequest, verifyContext: Wallet.Model.VerifyContext) {
        // Triggered when a Dapp sends SessionRequest to sign a transaction or a message
    }

    override fun onAuthRequest(authRequest: Wallet.Model.AuthRequest, verifyContext: Wallet.Model.VerifyContext) {
        // Triggered when Dapp / Requester makes an authorization request
    }

    override fun onSessionDelete(sessionDelete: Wallet.Model.SessionDelete) {
        // Triggered when the session is deleted by the peer
    }

    override fun onSessionSettleResponse(settleSessionResponse: Wallet.Model.SettledSessionResponse) {
        // Triggered when wallet receives the session settlement response from Dapp
    }

    override fun onSessionUpdateResponse(sessionUpdateResponse: Wallet.Model.SessionUpdateResponse) {
        // Triggered when wallet receives the session update response from Dapp
    }

    override fun onConnectionStateChange(state: Wallet.Model.ConnectionState) {
        //Triggered whenever the connection state is changed
    }

    override fun onError(error: Wallet.Model.Error) {
        // Triggered whenever there is an issue inside the SDK
    }
}
WalletKit.setWalletDelegate(walletDelegate)

----------------------------------------

TITLE: Extending Session Duration in WalletKit
DESCRIPTION: Demonstrates how to extend a session duration by 7 days.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_9

LANGUAGE: kotlin
CODE:
val sessionTopic: String = /*Topic of Session*/
val extendParams = Wallet.Params.SessionExtend(sessionTopic = sessionTopic)

WalletKit.extendSession(extendParams) { error -> /*callback for error while extending a session*/ }

----------------------------------------

TITLE: Rejecting Session Requests in WalletKit
DESCRIPTION: This snippet shows how to reject a session request in WalletKit by sending an error response.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
const response = {
  id,
  jsonrpc: "2.0",
  error: {
    code: 5000,
    message: "User rejected.",
  },
};

----------------------------------------

TITLE: Initializing Wagmi Hooks for Smart Contract Interaction in React
DESCRIPTION: This snippet demonstrates how to initialize the Wagmi hooks for reading from and writing to a smart contract. It sets up the contract address, ABI, and disables automatic query execution on component load.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#2025-04-10_snippet_2

LANGUAGE: jsx
CODE:
const { writeContract, isSuccess } = useWriteContract();
const readContract = useReadContract({
  address: storageSC,
  abi: storageABI,
  functionName: "retrieve",
  query: {
    enabled: false, // disable the query in onload
  },
});

----------------------------------------

TITLE: Opening AppKit with NavController in Kotlin (XML-defined navigation)
DESCRIPTION: This Kotlin snippet shows how to open AppKit using a NavController when the navigation is defined in XML. It includes options for network selection and error handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#2025-04-10_snippet_8

LANGUAGE: kotlin
CODE:
import androidx.navigation.fragment.findNavController
import com.reown.appkit.ui.openAppKit

findNavController().openAppKit(
    shouldOpenChooseNetwork = true | false
    onError = {  }
)

----------------------------------------

TITLE: Importing WalletConnect Dependencies
DESCRIPTION: Initial setup for importing required WalletConnect modules including UniversalProvider and WalletConnectModal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import UniversalProvider from "@walletconnect/universal-provider";
import { WalletConnectModal } from "@walletconnect/modal";

----------------------------------------

TITLE: Cleaning Up WalletConnect Data in Swift
DESCRIPTION: Removes all stored data associated with the specified topic, including pairings, sessions, and keys. Useful when resetting connection state or for privacy purposes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#2025-04-10_snippet_7

LANGUAGE: swift
CODE:
AppKit.instance.cleanup(topic)

----------------------------------------

TITLE: Implementing AppKit Button Component in React TSX
DESCRIPTION: This code snippet shows how to use the global appkit-button web component within a React functional component. The ConnectButton component simply returns the appkit-button element, which doesn't require any import statements as it's globally available as a custom HTML element.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Implementing NextAuth.js with Legacy SIWE
DESCRIPTION: This code snippet sets up a NextAuth.js API route using the standard SIWE package for Ethereum authentication. It configures credentials providers, JWT sessions, and SIWE message verification for wallet-based authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
import { NextAuthOptions } from "next-auth";
import credentialsProvider from "next-auth/providers/credentials";
import { getCsrfToken } from "next-auth/react";
import NextAuth from "next-auth/next";

import type { SIWESession } from "@reown/appkit-siwe";
import { SiweMessage } from "siwe";

declare module "next-auth" {
  interface Session extends SIWESession {
    address: string;
    chainId: number;
  }
}

const nextAuthSecret = process.env.NEXTAUTH_SECRET;
if (!nextAuthSecret) {
  throw new Error("NEXTAUTH_SECRET is not set");
}
// Get your projectId on https://cloud.reown.com
const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;
if (!projectId) {
  throw new Error("NEXT_PUBLIC_PROJECT_ID is not set");
}

const authOptions: NextAuthOptions = {
  // https://next-auth.js.org/configuration/providers/oauth
  secret: nextAuthSecret,
  providers: [
    credentialsProvider({
      name: "Ethereum",
      credentials: {
        message: {
          label: "Message",
          type: "text",
          placeholder: "0x0",
        },
        signature: {
          label: "Signature",
          type: "text",
          placeholder: "0x0",
        },
      },
      async authorize(credentials, req) {
        try {
          if (!credentials?.message) {
            throw new Error("SiweMessage is undefined");
          }
          const siwe = new SiweMessage(credentials.message);
          const nonce = await getCsrfToken({ req: { headers: req.headers } });
          const result = await siwe.verify({
            signature: credentials?.signature || "",
            nonce,
          });
          if (result.success) {
            return {
              id: `eip155:${siwe.chainId}:${siwe.address}`,
            };
          }

          return null;
        } catch (e) {
          return null;
        }
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  callbacks: {
    session({ session, token }) {
      if (!token.sub) {
        return session;
      }

      const [, chainId, address] = token.sub.split(":");
      if (chainId && address) {
        session.address = address;
        session.chainId = parseInt(chainId, 10);
      }

      return session;
    },
  },
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };

----------------------------------------

TITLE: Initializing ReownAppKitModal with Email & Social Features
DESCRIPTION: Configuration of ReownAppKitModal with email and social login options. Demonstrates how to set up project metadata and enable specific authentication methods including Farcaster, X, Apple, and Discord.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/email.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
    ),
  ),
  featuresConfig: FeaturesConfig(
    email: true,
    socials: [
      AppKitSocialOption.Farcaster,
      AppKitSocialOption.X,
      AppKitSocialOption.Apple,
      AppKitSocialOption.Discord,
    ],
    showMainWallets: false,
  ),
);

----------------------------------------

TITLE: Getting Bitcoin Balance through UTXOs
DESCRIPTION: Implements functions to fetch and calculate a Bitcoin address balance by retrieving its Unspent Transaction Outputs (UTXOs) from the mempool.space API. The balance is calculated by summing the values of all UTXOs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
const handleGetBalance = () => {
    const isTestnet = true; // change to false if you want to get the balance on mainnet

    // get all the utxos from the address
    const response = await fetch(
        `https://mempool.space${isTestnet ? '/testnet' : ''}/api/address/${address}/utxo`
    );
    const data = await response.json();

    // get the utxos - the list of unspent transactions that the sender has
    const utxos = await getUTXOs(address, isTestnet)
    // return the sum of the utxos ... The balance of the sender
    const balance = utxos.reduce((sum, utxo) => sum + utxo.value, 0)

    // print the balance in console
    console.log(balance);
}

// Get the utxos ... List of unspent transactions that the sender has
const getUTXOs = async (address: string, isTestnet: boolean = false): Promise<UTXO[]> => {
    const response = await fetch(
        `https://mempool.space${isTestnet ? '/testnet' : ''}/api/address/${address}/utxo`
    )
    return await response.json();
}

// Type of the UTXO ... List of unspent transactions that the sender has
type UTXO = {
    txid: string
    vout: number
    value: number
    status: {
        confirmed: boolean
        block_height: number
        block_hash: string
        block_time: number
    }
}

----------------------------------------

TITLE: Making WalletConnect JSON-RPC Requests
DESCRIPTION: Example of making JSON-RPC requests through an established WalletConnect session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
const result = await signClient.request({
  topic: session.topic,
  chainId: "eip155:1",
  request: {
    method: "personal_sign",
    params: [
      "0x7468697320697320612074657374206d65737361676520746f206265207369676e6564",
      "0x1d85568eEAbad713fBB5293B45ea066e552A90De",
    ],
  },
});

----------------------------------------

TITLE: Rejecting Session Proposal in Swift
DESCRIPTION: Demonstrates how to reject a session proposal using WalletKit, including error handling and UI updates.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#2025-04-10_snippet_4

LANGUAGE: swift
CODE:
do {
    try await WalletKit.instance.reject(proposalId: proposal.id, reason: .userRejected)
    // Update UI, remove loader
} catch {
    // present error
}

----------------------------------------

TITLE: Registering Identity Key for Cross-Device Syncing in iOS
DESCRIPTION: This function registers an identity key to enable cross-device account syncing. It requires a signing callback to handle message signing for identity key registration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_17

LANGUAGE: swift
CODE:
Notify.instance.register(account: account, onSign: onSign)

func onSign(message: String) -> SigningResult {

    // Provide your own sing function implementation that returns CacaoSignature
    // For more detailed example see our sample WalletApp
    let signature = try! signer.sign(message: message)
    return .signed(signature)
}

----------------------------------------

TITLE: Configuring Excluded Wallets in AppKit (Swift)
DESCRIPTION: This code demonstrates how to exclude specific wallets from being fetched from WalletGuide in AppKit. Wallet IDs to be excluded are provided as an array.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
AppKit.configure(
    ...
    excludedWalletIds: [String]
    ...
)

----------------------------------------

TITLE: Initializing WalletConnect Core and WalletKit in JavaScript
DESCRIPTION: Code for instantiating WalletConnect Core with a project ID and initializing WalletKit with core instance and metadata. This establishes the foundation for wallet-to-dapp communication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/wallet-integration-guide.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
const core = new Core({ projectId: "fgu234234njbhvhv23525bj" });
const walletKit = await WalletKit.init({
  core: core,
  metadata: {
    name: "Example WalletConnect Wallet",
    description: "Example WalletConnect Integration",
    url: "myexamplewallet.com",
    icons: [],
  },
});

----------------------------------------

TITLE: Using eth_sendTransaction Method in Ethereum JSON-RPC
DESCRIPTION: Example of using eth_sendTransaction method to create a new message call transaction or contract creation. This method requires the sending account to be unlocked in the client.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "eth_sendTransaction",
  "params":[{see above}],
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"
}

----------------------------------------

TITLE: Configuring Solana Wallet Adapters for AppKit
DESCRIPTION: This snippet demonstrates how to set up Solana wallet adapters for use with AppKit. It includes importing necessary dependencies, creating a SolanaAdapter with custom wallets, and configuring the AppKit with Solana networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/custom-connectors.mdx#2025-04-10_snippet_2

LANGUAGE: ts
CODE:
import { createAppKit } from "@reown/appkit/react";
import { SolanaAdapter } from "@reown/appkit-adapter-solana/react";
import { solana, solanaTestnet, solanaDevnet } from "@reown/appkit/networks";

import {
  SolflareWalletAdapter,
  PhantomWalletAdapter,
} from "@solana/wallet-adapter-wallets";

// 0. Set up Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],
});

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Set up the metadata
const metadata = {
  //...
};

// 3. Create the modal
const modal = createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true,
  },
});

----------------------------------------

TITLE: Customizing Universal Provider Behavior in AppKit in TypeScript
DESCRIPTION: Configuration example for customizing specific aspects of the provider's behavior using universalProviderConfigOverride. This allows you to specify supported methods, chains, events, RPC URLs, and the default chain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_35

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  universalProviderConfigOverride: {
    methods: { eip155: ['eth_sendTransaction', 'personal_sign'] },
    chains: { eip155: ['1', '137'] },
    events: { eip155: ['chainChanged', 'accountsChanged'] },
    rpcMap: { eip155:1: 'https://ethereum.publicnode.com' },
    defaultChain: 'eip155:1'
  },
});

----------------------------------------

TITLE: Getting Current Theme Variables in AppKit
DESCRIPTION: Demonstrates how to retrieve the current theme variables from the AppKit modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#2025-04-10_snippet_9

LANGUAGE: typescript
CODE:
const modal = createAppKit({ wagmiConfig, projectId });

const themeMode = modal.getThemeVariables();

----------------------------------------

TITLE: Defining a Custom Tenderly Virtual TestNet Chain with AppKit
DESCRIPTION: This code creates a custom chain configuration for Tenderly Virtual TestNet using AppKit's defineChain function. It specifies the chain ID, currency details, RPC endpoints, block explorer URL, and required contract addresses.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#2025-04-10_snippet_3

LANGUAGE: tsx
CODE:
import { defineChain } from "@reown/appkit/networks";

export const vTestnet = defineChain({
  id: 73571, // Add this to match the chain Id you set for your Virtual TestNet
  caipNetworkId: "eip155:73571",
  chainNamespace: "eip155",
  name: "Virtual Sepolia",
  nativeCurrency: { name: "vSepolia", symbol: "vETH", decimals: 18 },
  rpcUrls: {
    default: {
      http: [process.env.TENDERLY_VIRTUAL_TESTNET_RPC!],
    },
  },
  blockExplorers: {
    default: {
      name: "Tenderly Explorer",
      url: "https://dashboard.tenderly.co/explorer/vnet/6a6910ba-5831-4758-9d89-1f8e3169433f", // replace this with your your Virtual TestNet's explorer URL
    },
  },
  contracts: {
    ensRegistry: {
      address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    },
    ensUniversalResolver: {
      address: "0xE4Acdd618deED4e6d2f03b9bf62dc6118FC9A4da",
      blockCreated: 16773775,
    },
    multicall3: {
      address: "0xca11bde05977b3631167028862be2a173976ca11",
      blockCreated: 14353601,
    },
  },
});

----------------------------------------

TITLE: Using AppKit Provider Hook for Wallet Interactions in React
DESCRIPTION: This snippet shows how to use the useAppKitProvider hook along with other AppKit hooks to interact with a wallet. It demonstrates signing a message using the Ethers library with the wallet provider obtained from AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import {
  useAppKitAccount,
  useAppKitProvider,
  useAppKitNetwork,
} from "@reown/appkit/react";
import { ethers } from "ethers";
import { useAppKitProvider } from "@reown/appkit/react";

function Components() {
  const { walletProvider } = useAppKitProvider("eip155");
  const { address } = useAppKitAccount();
  const { chainId } = useAppKitNetwork();

  async function onSignMessage() {
    const provider = new ethers.providers.Web3Provider(walletProvider, chainId);
    const signer = provider.getSigner(address);
    const signature = await signer?.signMessage("Hello AppKit Ethers");
    console.log(signature);
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>;
}

----------------------------------------

TITLE: Implementing Sponsored Transactions with Paymaster Service in TypeScript
DESCRIPTION: This code demonstrates how to implement a sponsored transaction using a paymaster service in AppKit. It shows how to use the sendCalls function with the capabilities.paymasterService field to specify a paymaster URL and optional context. This setup allows transaction fees to be covered by the paymaster rather than the end user.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/sponsored-transactions.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
sendCalls({
  calls: ...callsToSend,
  capabilities: {
    paymasterService: {
      url: paymasterServiceUrl,
      context?: {
        // Any additional context
      }
    }
  }
})

----------------------------------------

TITLE: Implementing Deep Link Handler for Phantom Wallet in Flutter
DESCRIPTION: Creates a Flutter EventChannel to receive and process deep links from Phantom Wallet. This handler passes received links to the AppKit Modal for processing through the dispatchEnvelope method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:reown_appkit/modal/i_appkit_modal_impl.dart';

class DeepLinkHandler {
  static const _eventChannel = EventChannel('com.exampledapp/events');
  static late IReownAppKitModal _appKitModal;

  static void init(IReownAppKitModal appKitModal) {
    if (kIsWeb) return;

    try {
      _appKitModal = appKitModal;
      _eventChannel.receiveBroadcastStream().listen(_onLink, onError: _onError);
    } catch (e) {
      debugPrint('[SampleDapp] checkInitialLink $e');
    }
  }

  static void _onLink(dynamic link) async {
    try {
      _appKitModal.dispatchEnvelope(link);
    } catch (e) {
      print(e);
    }
  }

  static void _onError(dynamic error) {
    print(error);
  }
}

----------------------------------------

TITLE: Checking Connection Status with Reown AppKit in TypeScript
DESCRIPTION: This snippet shows how to check if the wallet is connected using the getIsConnected method of the Reown AppKit modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
const isConnected = modal.getIsConnected();

----------------------------------------

TITLE: Setting Up Event Listeners for Notify Client in JavaScript
DESCRIPTION: Adds event listeners to handle various Notify Client events such as subscription responses, incoming messages, subscription updates, and subscription changes. These listeners are crucial for managing the notification flow in your application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
notifyClient.on("notify_subscription", async ({ params }) => {
  const { error } = params;

  if (error) {
    console.error("Setting up subscription failed: ", error);
  } else {
    console.log(`Subscribed successfully.`);
  }
});

notifyClient.on("notify_message", ({ params }) => {
  const { message } = params;
});

notifyClient.on("notify_update", ({ params }) => {
  const { error } = params;

  if (error) {
    console.error("Setting up subscription failed: ", error);
  } else {
    console.log(`Successfully updated subscription scope.`);
  }
});

notifyClient.on("notify_subscriptions_changed", ({ params }) => {
  const { subscriptions } = params;
});

----------------------------------------

TITLE: Approving a Session with Direct Accounts Array in C#
DESCRIPTION: Simplified approach to approve a session by providing just the account addresses. The SDK automatically creates the appropriate namespace configuration based on the proposal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_9

LANGUAGE: csharp
CODE:
sdk.SessionProposed += async (sender, @event) =>
{
    var proposal = @event.Proposal;

    var sessionData = await sdk.ApproveSession(proposal, new[] { "eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb" });
    var sessionTopic = sessionData.Topic;
};

----------------------------------------

TITLE: Implementing Transaction Receipt Request Handler in C#
DESCRIPTION: Shows how to set up an event handler for transaction receipt requests with optional topic filtering.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_14

LANGUAGE: csharp
CODE:
walletClient.Engine.SessionRequestEvents<EthGetTransactionReceipt, TransactionReceipt>().OnRequest += OnEthTransactionReceiptRequest;

private Task OnEthTransactionReceiptRequest(RequestEventArgs<EthGetTransactionReceipt, TransactionReceipt> e)
{
    // logic for request goes here
    // set e.Response to return a response
}

----------------------------------------

TITLE: Initializing WalletKit Client in Swift
DESCRIPTION: Configures a new WalletKit instance with app metadata, crypto provider, push settings, and telemetry options. Also shows how to register a device token for push notifications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
let telemetryEnabled = true;
let metadata = AppMetadata(
    name: "Example Wallet",
    description: "Wallet description",
    url: "example.wallet",
    icons: ["https://avatars.githubusercontent.com/u/37784886"],
    redirect: AppMetadata.Redirect(native: "example://", universal: nil)
)

WalletKit.configure(
    metadata: metadata,
    crypto: DefaultCryptoProvider(),
    // Used for the Push: "echo.walletconnect.com" will be used by default if not provided
    pushHost: "echo.walletconnect.com",
    // Used for the Push: "APNSEnvironment.production" will be used by default if not provided
    environment: .production,
    telemetryEnabled: telemetryEnabled
)

try await WalletKit.instance.register(deviceToken: deviceToken)

----------------------------------------

TITLE: Subscribing to a Dapp with Notify API in JavaScript
DESCRIPTION: Shows how to subscribe to a dapp using the Notify API. This process involves getting the dapp's domain from the Explorer API and then using the notifyClient to subscribe the account to the dapp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
const appDomain = new URL(fetchedExplorerDapp.platform_browser).hostname;

await notifyClient.subscribe({
  account,
  appDomain,
});

----------------------------------------

TITLE: Fetching Active Subscriptions in Swift
DESCRIPTION: Retrieves the current list of active subscriptions for a given account. Returns an array of NotifySubscription objects representing the actual state of subscriptions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#2025-04-10_snippet_4

LANGUAGE: swift
CODE:
public func getActiveSubscriptions(account: Account) -> [NotifySubscription]

----------------------------------------

TITLE: Defining SendTransferParams Type in TypeScript
DESCRIPTION: This snippet defines the SendTransferParams type, which includes the amount to be sent in satoshis and the recipient address.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
export type SendTransferParams = {
  /**
   * The amount to be sent in satoshis
   */
  amount: string
  /**
   * The address to send the transfer to
   */
  recipient: string
}

----------------------------------------

TITLE: Registering an Account with Notify API using SIWE Message
DESCRIPTION: Demonstrates how to check if an account is registered with Notify API and how to register it if needed. The process involves preparing a registration by generating a SIWE message, signing it to prove account ownership, and then completing the registration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
val account: String = ""// The CAIP-10 account i.e. "eip155:1:0xAbC1234567890DefABC1234567890dEFABC12345"
val domain = BuildConfig.APPLICATION_ID

// Caution: This function is blocking and runs on the current thread. It is advised that this function be called from background operation
val isRegistered = NotifyClient.isRegistered(params = Notify.Params.IsRegistered(account = account, domain = domain))

if (!isRegistered) {
    NotifyClient.prepareRegistration(
        params = Notify.Params.PrepareRegistration(account = account, domain = domain),
        onSuccess = { cacaoPayloadWithIdentityPrivateKey, message ->

            // Pick one of the following methods to sign the message:

            // 1. Using CacaoSigner to sign the message
            val signature = CacaoSigner.sign(
              message,
              PRIVATE_KEY, // Private key used to signing a message,
              SignatureType.EIP191
            )

            // 2. Alternatively, you can use your own signing method
            /** Add imports:
                import com.reown.android.cacao.signature.SignatureType
                import com.reown.android.internal.common.signing.signature.Signature
                import com.reown.android.internal.common.signing.signature.toCacaoSignature
             */

            val signature: String = // Here developers provide signed message using their own signing method
            val cacaoSignature = Notify.Model.Cacao.Signature(SignatureType.EIP191.header, Signature.fromString(signature).toCacaoSignature())

            // Once the message has been signed, call the register function

            NotifyClient.register(
                params = Notify.Params.Register(cacaoPayloadWithIdentityPrivateKey = cacaoPayloadWithIdentityPrivateKey, signature = signature),
                onSuccess = {
                  // Registration was successful
                 },
                onError = {
                  // There was an error while trying to register the account
                }
            )

        },
        onError = {
          // There was an error while trying to prepare the registration
        }
    )
} else {
  // Great! Account is already registered
}

----------------------------------------

TITLE: Retrieving Active Subscriptions
DESCRIPTION: Code to fetch all active notification subscriptions for a specific account, organized by subscription topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_10

LANGUAGE: javascript
CODE:
// Will return all active subscriptions for the provided account, keyed by subscription topic.
const accountSubscriptions = notifyClient.getActiveSubscriptions({
  account: `eip155:1:0x63Be...`,
});

----------------------------------------

TITLE: Configuring Coinbase Wallet Support in iOS Info.plist
DESCRIPTION: Adds the Coinbase Wallet scheme to the iOS Info.plist file to enable integration with Coinbase Wallet, which uses a different communication protocol than standard WalletConnect.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#2025-04-10_snippet_3

LANGUAGE: xml
CODE:
<key>LSApplicationQueriesSchemes</key>
<array>
  <string>cbwallet</string>
  <!-- Any other scheme previously added -->
</array>

----------------------------------------

TITLE: Initializing Notify Client in JavaScript
DESCRIPTION: Creates a new Notify Client instance and initializes it with a project ID from Cloud. This is the first step in setting up the Notify API in your application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { NotifyClient } from "@walletconnect/notify-client";

const notifyClient = await NotifyClient.init({
  projectId: "<YOUR PROJECT ID>",
});

----------------------------------------

TITLE: Responding to dApp Requests in Swift
DESCRIPTION: Code to respond to a dApp's request after signing a transaction or message. Uses the Sign.instance to send the response back to the requesting dApp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_13

LANGUAGE: swift
CODE:
let response: AnyCodable = sign(request: sessionRequest) // Implement your signing method
try await Sign.instance.respond(topic: request.topic, requestId: request.id, response: .response(response))

----------------------------------------

TITLE: Responding to Session Requests with WalletKit in TypeScript
DESCRIPTION: Illustrates how to respond to session requests using WalletKit, including error handling and UI feedback.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
try {
    await walletKit.respondSessionRequest(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

----------------------------------------

TITLE: Rejecting a Session in C#
DESCRIPTION: Shows how to reject a session proposal with a reason. This is used when the user or wallet decides not to establish the connection with the dApp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_11

LANGUAGE: csharp
CODE:
sdk.SessionProposed += async (sender, @event) =>
{
    var proposal = @event.Proposal;
    await sdk.RejectSession(proposal, "User rejected");
};

----------------------------------------

TITLE: iOS Dapp URI Generation
DESCRIPTION: Demonstrates how to generate a pairing URI from the dapp side in iOS.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_12

LANGUAGE: swift
CODE:
let uri = try await Pair.instance.create()

----------------------------------------

TITLE: Using useAppKitAccount for Multi-Chain Environments in Vue
DESCRIPTION: Demonstrates how to access account data for specific blockchain namespaces when working in a multi-chain environment.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/vue";

const eip155Account = useAppKitAccount({ namespace: "eip155" }); // for EVM chains
const solanaAccount = useAppKitAccount({ namespace: "solana" });
const bip122Account = useAppKitAccount({ namespace: "bip122" }); // for bitcoin

----------------------------------------

TITLE: Request and Response Examples for starknet_signTypedData
DESCRIPTION: Complete JSON-RPC request and response examples for the starknet_signTypedData method, showing how to format the request with account address and typed data, and the expected signature array response.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/starknet-rpc.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "starknet_signTypedData",
  "params": ["0x003a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64", {see above}]
}


// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": { "signature" : ["0x3a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64", "0x072e509b6502e2bbc4a649052eb6c299d53a04e16605b915621c", "0x07897a1b93efb0eca126b44df4646", "0x072e509b6502e2bbc4a649052eb6c299d53a04e16605b915621c"] }
}

----------------------------------------

TITLE: Using useAppKitWallet Hook for Wallet Integration
DESCRIPTION: Hook for implementing wallet connection functionality with support for multiple wallet types and social logins.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#2025-04-10_snippet_6

LANGUAGE: tsx
CODE:
const { isReady, isPending, connect } = useAppKitWallet({
    onSuccess() {
      // ...
    },
    onError(error) {
      // ...
    }
  })

...

// Connect to a wallet
<Button onClick={() => connect("walletConnect")} />

----------------------------------------

TITLE: Triggering AppKit Modal Using Hooks in React Native
DESCRIPTION: This example shows how to use the useAppKit hook to programmatically open the AppKit modal. It demonstrates creating a custom button using React Native's Pressable component that calls the open function from the hook when pressed.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/implementation.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { Pressable, Text } from "react-native";
import { useAppKit } from "@reown/appkit-ethers-react-native";

export default function ConnectView() {
  const { open } = useAppKit();

  return (
    <>
      <Pressable onClick={() => open()}>
        <Text>Open Connect Modal</Text>
      </Pressable>
    </>
  );
}

----------------------------------------

TITLE: Rendering Message Signing Button Component
DESCRIPTION: Renders a button to trigger the message signing function when the user is connected. The button is only displayed when isConnected is true.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_8

LANGUAGE: jsx
CODE:
return (
  isConnected && (
    <div>
      <button onClick={handleSignMsg}>Sign Message</button>
    </div>
  )
);

----------------------------------------

TITLE: Checking Connection Status with modal.getIsConnected()
DESCRIPTION: This method returns a boolean indicating whether the selected network adapter is connected. It returns the connection status for the currently active namespace.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_11

LANGUAGE: javascript
CODE:
modal.getIsConnected()

----------------------------------------

TITLE: Creating AppKit Context Provider with Virtual TestNet Support
DESCRIPTION: This code sets up the React context provider for AppKit with the Tenderly Virtual TestNet integrated alongside other networks. It configures the WagmiProvider and QueryClientProvider to enable the application to interact with the Virtual TestNet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#2025-04-10_snippet_5

LANGUAGE: tsx
CODE:
"use client";

import { wagmiAdapter, projectId } from "@/config";
import { createAppKit } from "@reown/appkit/react";
import { mainnet, arbitrum } from "@reown/appkit/networks";
import { vTestnet } from "@/app/tenderly.config";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import React, { type ReactNode } from "react";
import { cookieToInitialState, WagmiProvider, type Config } from "wagmi";

// Set up queryClient
const queryClient = new QueryClient();

if (!projectId) {
  throw new Error("Project ID is not defined");
}

// Set up metadata
const metadata = {
  //this is optional
  name: "appkit-example",
  description: "AppKit Example - EVM",
  url: "https://exampleapp.com", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/37784886"],
};

// Create the modal
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum, vTestnet],
  metadata: metadata,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

function ContextProvider({
  children,
  cookies,
}: {
  children: ReactNode;
  cookies: string | null;
}) {
  const initialState = cookieToInitialState(
    wagmiAdapter.wagmiConfig as Config,
    cookies
  );

  return (
    <WagmiProvider
      config={wagmiAdapter.wagmiConfig as Config}
      initialState={initialState}
    >
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}

export default ContextProvider;

----------------------------------------

TITLE: Using useAppKit Hook with Wagmi
DESCRIPTION: Demonstrates how to use the useAppKit hook with Wagmi integration to control the AppKit modal. The hook provides open and close functions to manage the modal's visibility.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { useAppKit } from '@reown/appkit-wagmi-react-native'

export default function Component() {
  const { open, close } = useAppKit()

open()

//...
}

----------------------------------------

TITLE: Getting Subscribers with JavaScript
DESCRIPTION: JavaScript example for checking which accounts are subscribed to notifications. This code demonstrates creating a request to the subscribers endpoint, handling the response, and includes TypeScript type definitions for the request and response formats.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const requestBody: RequestBody = {
  accounts: [
    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',
    'eip155:1:0x0000000000000000000000000000000000000000'
  ]
}

const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
  body: JSON.stringify(requestBody)
})

const subscribers: ResponseBody = await response.json()

type RequestBody = {
  // Max 100 accounts
  accounts: string[]
}
type ResponseBody = {
  [account: string]: Subscriber
}
type Subscriber = {
  notification_types: string[]
}

----------------------------------------

TITLE: Configuring WalletConnectModal in Swift
DESCRIPTION: Initializes WalletConnectModal in iOS with app metadata and project ID. The metadata includes app details and an optional verification URL.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
let metadata = AppMetadata(
    name: "Example Wallet",
    description: "Wallet description",
    url: "example.wallet",
    icons: ["https://avatars.githubusercontent.com/u/37784886"],
    // Used for the Verify: to opt-out verification ignore this parameter
    verifyUrl: "verify.walletconnect.com"
)

WalletConnectModal.configure(
    projectId: PROJECT_ID,
    metadata: metadata
)

----------------------------------------

TITLE: Using useAppKitError Hook for Error Handling
DESCRIPTION: This hook returns any errors that occur during wallet interactions. It allows for error handling and displaying error messages in a React Native application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: ts
CODE:
import { useAppKitError } from "@reown/appkit-ethers-react-native";

function Components() {
  const { error } = useAppKitError();

  //...
}

----------------------------------------

TITLE: Using solana_signMessage Method in JavaScript
DESCRIPTION: Example of using the solana_signMessage method, which returns a signature for a provided message. The method requires the message (base58 encoded) and the public key of the signer, returning the corresponding signature as a string.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// Request
{
	"id": 1,
	"jsonrpc": "2.0",
	"method": "solana_signMessage",
	"params": {
		"message": "37u9WtQpcm6ULa3VtWDFAWoQc1hUvybPrA3dtx99tgHvvcE7pKRZjuGmn7VX2tC3JmYDYGG7",
		"pubkey": "AqP3MyNwDP4L1GJKYhzmaAUdrjzpqJUZjahM7kHpgavm"
	}
}

// Result
{
	"id": 1,
	"jsonrpc": "2.0",
	"result":  { signature: "2Lb1KQHWfbV3pWMqXZveFWqneSyhH95YsgCENRWnArSkLydjN1M42oB82zSd6BBdGkM9pE6sQLQf1gyBh8KWM2c4" }
}

----------------------------------------

TITLE: Defining SignMessageParams Type in TypeScript
DESCRIPTION: This snippet defines the SignMessageParams type, which includes the message to be signed and the address to sign the message with.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
export type SignMessageParams = {
  /**
   * The message to be signed
   */
  message: string
  /**
   * The address to sign the message with
   */
  address: string
}

----------------------------------------

TITLE: Utilizing useAppKitProvider Hook for Ethereum Transactions
DESCRIPTION: The useAppKitProvider hook gives access to the wallet provider, which can be used with ethers.js to create a Web3Provider. This allows for interactions with the Ethereum blockchain, such as signing messages or sending transactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { ethers } from "ethers";
import { useAppKitProvider } from "@reown/appkit-ethers5-react-native";

function Components() {
  const { walletProvider } = useAppKitProvider();

  async function onSignMessage() {
    const provider = new ethers.providers.Web3Provider(walletProvider);
    const signer = provider.getSigner();
    const signature = await signer?.signMessage("Hello AppKit Ethers");
    console.log(signature);
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>;
}

----------------------------------------

TITLE: Setting Up Transaction Hooks for EVM in React
DESCRIPTION: Code to set up transaction-related hooks for gas estimation and transaction sending. It includes a test transaction object with a predefined destination address and token amount.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_9

LANGUAGE: jsx
CODE:
// test transaction
const TEST_TX = {
  to: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045" as Address, // vitalik address
  value: parseGwei('0.0001')
}

 // Wagmi hook to estimate gas
const { data: gas } = useEstimateGas({...TEST_TX});

// Wagmi hook to send a transaction
const { data: hash, sendTransaction, } = useSendTransaction();

// AppKit hook to check if the user is connected
const { isConnected } = useAppKitAccount()

----------------------------------------

TITLE: Using eth_sign Method in Ethereum JSON-RPC
DESCRIPTION: Example of using eth_sign method to calculate an Ethereum-specific signature with a prefix. This requires the signing address to be unlocked before use.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "eth_sign",
  "params": ["0x9b2055d370f73ec7d8a03e965129118dc8f5bf83", "0xdeadbeaf"],
}


// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": "0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b"
}

----------------------------------------

TITLE: Opening AppKit using NavController in Kotlin
DESCRIPTION: This snippet shows how to open AppKit using a NavController. It includes an option to choose whether to open the network selection screen and provides an error callback.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
import com.reown.appkit.ui.openAppKit

navController().openAppKit(
    shouldOpenChooseNetwork = true | false
    onError = {  }
)

----------------------------------------

TITLE: Initializing AppKit in Vue.js with TypeScript
DESCRIPTION: This snippet shows how to set up AppKit in a Vue.js application using TypeScript. It includes importing necessary modules, creating an AppKit instance with Ethers adapter, configuring networks, and setting up application metadata. The code also demonstrates how to use the AppKit modal composable.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { createAppKit, useAppKit } from "@reown/appkit/vue";
  import { EthersAdapter } from "@reown/appkit-adapter-ethers";
  import { mainnet, arbitrum } from "@reown/appkit/networks";

  // 1. Get projectId from https://cloud.reown.com
  const projectId = "YOUR_PROJECT_ID";

  // 2. Create your application's metadata object
  const metadata = {
    name: "My Website",
    description: "My Website description",
    url: "https://mywebsite.com", // url must match your domain & subdomain
    icons: ["https://avatars.mywebsite.com/"],
  };

  // 3. Create a AppKit instance
  createAppKit({
    adapters: [new EthersAdapter()],
    networks: [mainnet, arbitrum],
    metadata,
    projectId,
    features: {
      analytics: true, // Optional - defaults to your Cloud configuration
    },
  });

  // 4. Use modal composable
  const modal = useAppKit();
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Configuring SIWE Client for Legacy Implementation
DESCRIPTION: TypeScript code for configuring the SIWE client using the legacy implementation, including message creation, nonce retrieval, and signature verification with NextAuth.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
import { getCsrfToken, signIn, signOut, getSession } from "next-auth/react";

import { SiweMessage } from "siwe";

import type {
  SIWEVerifyMessageArgs,
  SIWECreateMessageArgs,
} from "@reown/appkit-siwe";
import { createSIWEConfig, formatMessage } from "@reown/appkit-siwe";

export const siweConfig = createSIWEConfig({
  createMessage: ({ nonce, address, chainId }: SIWECreateMessageArgs) =>
    new SiweMessage({
      version: "1",
      domain: window.location.host,
      uri: window.location.origin,
      address,
      chainId,
      nonce,
      // Human-readable ASCII assertion that the user will sign, and it must not contain `\n`.
      statement: "Sign in With Ethereum.",
    }).prepareMessage(),
  getNonce: async () => {
    const nonce = await getCsrfToken();
    if (!nonce) {
      throw new Error("Failed to get nonce!");
    }

    return nonce;
  },
  getSession,
  verifyMessage: async ({ message, signature }: SIWEVerifyMessageArgs) => {
    try {
      const success = await signIn("credentials", {
        message,
        redirect: false,
        signature,
        callbackUrl: "/protected",
      });

      return Boolean(success?.ok);
    } catch (error) {
      return false;
    }
  },
  signOut: async () => {
    try {
      await signOut({
        redirect: false,
      });

      return true;
    } catch (error) {
      return false;
    }
  },
});

----------------------------------------

TITLE: Retrieving Wallet Provider with Reown AppKit in TypeScript
DESCRIPTION: This code demonstrates how to get the current wallet provider using the getWalletProvider method of the Reown AppKit modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
const walletProvider = modal.getWalletProvider();

----------------------------------------

TITLE: Implementing ConnectButton in Compose
DESCRIPTION: Shows how to add a ConnectButton component in Jetpack Compose, which is used for connecting to wallet services with configurable sizes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_5

LANGUAGE: kotlin
CODE:
import com.reown.appkit.ui.components.button.ConnectButton
import com.reown.appkit.ui.components.button.ConnectButtonSize
import com.reown.appkit.ui.components.button.rememberAppKitState

YourAppScreen(navController: NavController) {
    val appKitState = rememberAppKitState(navController = navController)
    ConnectButton(
        state = appKitState,
        buttonSize = ConnectButtonSize.NORMAL || ConnectButtonSize.SMALL
    )
}

----------------------------------------

TITLE: Configuring Root Gradle Dependencies for AppKit
DESCRIPTION: Configuration for the root build.gradle.kts file to add required Maven repositories for AppKit dependencies including mavenCentral and JitPack.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/installation.mdx#2025-04-10_snippet_0

LANGUAGE: gradle
CODE:
allprojects {
   repositories {
      mavenCentral()
      maven { url "https://jitpack.io" }
   }
}

----------------------------------------

TITLE: Implementing WalletConnect Modal Delegate in Android
DESCRIPTION: Complete implementation of the WalletConnectModal.ModalDelegate interface in Android, handling all the callbacks for session events including approval, rejection, and error states.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_29

LANGUAGE: kotlin
CODE:
val walletConnectModalDelegate = object : WalletConnectModal.ModalDelegate {
    override fun onSessionApproved(approvedSession: Modal.Model.ApprovedSession) {
        // Triggered when receives the session approval from wallet
    }

    override fun onSessionRejected(rejectedSession: Modal.Model.RejectedSession) {
        // Triggered when receives the session rejection from wallet
    }

    override fun onSessionUpdate(updatedSession: Modal.Model.UpdatedSession) {
        // Triggered when receives the session update from wallet
    }

    override fun onSessionExtend(session: Modal.Model.Session) {
        // Triggered when receives the session extend from wallet
    }

    override fun onSessionEvent(sessionEvent: Modal.Model.SessionEvent) {
        // Triggered when the peer emits events that match the list of events agreed upon session settlement
    }

    override fun onSessionDelete(deletedSession: Modal.Model.DeletedSession) {
        // Triggered when receives the session delete from wallet
    }

    override fun onSessionRequestResponse(response: Modal.Model.SessionRequestResponse) {
        // Triggered when receives the session request response from wallet
    }

    override fun onProposalExpired(proposal: Modal.Model.ExpiredProposal) {
        // Triggered when a proposal becomes expired
    }

    override fun onRequestExpired(request: Modal.Model.ExpiredRequest) {
        // Triggered when a request becomes expired
    }

    override fun onConnectionStateChange(state: Modal.Model.ConnectionState) {
        //Triggered whenever the connection state is changed
    }

    override fun onError(error: Modal.Model.Error) {
        // Triggered whenever there is an issue inside the SDK
    }
}

----------------------------------------

TITLE: Fetching Available Notification Types with Notify API in TypeScript
DESCRIPTION: Demonstrates how to fetch the latest notification types specified by a dapp using the Notify API. This code snippet filters active subscriptions to get the scope (available notification types) for a specific topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
const notificationTypes = notifyClient
  .getActiveSubscriptions({ account })
  .filter((subscription) => subscription.topic === topic).scope;

----------------------------------------

TITLE: Rejecting a Session Proposal in ReownWalletKit
DESCRIPTION: Demonstrates how to reject a session proposal by subscribing to the onSessionProposal event and calling rejectSession with an appropriate error code when a user declines the connection request.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
_walletKit.onSessionProposal.subscribe((SessionProposalEvent? event) async {
  // display a prompt for the user to approve or reject the session
  // ....
  // If rejected
  await _walletKit.rejectSession(
    id: event.id,
    reason: Errors.getSdkError(Errors.USER_REJECTED).toSignError(),
  );
});

----------------------------------------

TITLE: Installing Expo-specific Dependency
DESCRIPTION: Adds the expo-application package which is required when using WalletKit in an Expo project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/installation.mdx#2025-04-10_snippet_2

LANGUAGE: sh
CODE:
npx expo install expo-application

----------------------------------------

TITLE: Defining Transaction Receipt Response Class in WalletConnect using C#
DESCRIPTION: Creates a class for the transaction receipt response with JSON properties corresponding to Ethereum transaction receipt fields. Includes RpcMethod and RpcRequestOptions attributes for proper handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_45

LANGUAGE: csharp
CODE:
using Newtonsoft.Json;
using System.Numerics;

[RpcMethod("eth_getTransactionReceipt"), RpcRequestOptions(Clock.ONE_MINUTE, 99995)]
public class TransactionReceipt
{
    [JsonProperty("transactionHash")]
    public string TransactionHash;

    [JsonProperty("transactionIndex")]
    public BigInteger TransactionIndex;

    [JsonProperty("blockHash")]
    public string BlockHash;

    [JsonProperty("blockNumber")]
    public BigInteger BlockNumber;

    [JsonProperty("from")]
    public string From;

    [JsonProperty("to")]
    public string To;

    [JsonProperty("cumulativeGasUsed")]
    public BigInteger CumulativeGasUsed;

    [JsonProperty("effectiveGasPrice ")]
    public BigInteger EffectiveGasPrice ;

    [JsonProperty("gasUsed")]
    public BigInteger GasUsed;

    [JsonProperty("contractAddress")]
    public string ContractAddress;

    [JsonProperty("logs")]
    public object[] Logs;

    [JsonProperty("logsBloom")]
    public string LogBloom;

    [JsonProperty("type")]
    public BigInteger Type;

    [JsonProperty("status")]
    public BigInteger Status;
}

----------------------------------------

TITLE: Signing Stellar Transactions with stellar_signXDR Method
DESCRIPTION: This example shows how to use the stellar_signXDR method to sign a Stellar transaction without submitting it to the network. It sends an XDR-encoded transaction to the wallet for signing and returns the signed transaction, allowing the application to handle submission separately.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/stellar-rpc.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "stellar_signXDR",
  "params": {
    "xdr": "AAAAAPewD+/6X8o0bx3bp49Wf+mUhG3o+TUrcjcst717DWJVAAAAyAFvzscADTkNAAAAAAAAAAAAAAACAAAAAAAAAAYAAAACWE1BVEsAAAAAAAAAAAAAAAPvNOuztX4IjvV8pztsEc1/ZnTz0G3p5Cx4vcf04+xUAAONfqTGgAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAD2NyeXB0b21hcmluZS5ldQAAAAAAAAAAAAAAAAF7DWJVAAAAQK3vfUCZ8mbjW3ssMd0n1tJTF9Fv6EbuJ6cWKkYXBqG5itqanPbFzIQoZEHbPS8nr2vo4dROvKI0uQzNcfExKwM="
  }
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
    "signedXDR": "AAAAAPewD+/6X8o0bx3bp49Wf+mUhG3o+TUrcjcst717DWJVAAAAyAFvzscADTkNAAAAAAAAAAAAAAACAAAAAAAAAAYAAAACWE1BVEsAAAAAAAAAAAAAAAPvNOuztX4IjvV8pztsEc1/ZnTz0G3p5Cx4vcf04+xUAAONfqTGgAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAD2NyeXB0b21hcmluZS5ldQAAAAAAAAAAAAAAAAF7DWJVAAAAQK3vfUCZ8mbjW3ssMd0n1tJTF9Fv6EbuJ6cWKkYXBqG5itqanPbFzIQoZEHbPS8nr2vo4dROvKI0uQzNcfExKwM="
  }
}

----------------------------------------

TITLE: Configuring AppKit with Wagmi Adapter in JavaScript
DESCRIPTION: This code demonstrates how to configure AppKit using the Wagmi adapter in a JavaScript application. It creates the AppKit instance with specified adapters, networks, metadata, and features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_20

LANGUAGE: javascript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter],
  networks: [mainnet, arbitrum],
  metadata: metadata,
  projectId,
  features: {
    analytics: true
  }
})

----------------------------------------

TITLE: Configuring AppKit with Solana Wallet Integration in React
DESCRIPTION: Sets up AppKit configuration with Solana wallet adapters and networks. Demonstrates the initialization of Phantom and Solflare wallet adapters, network configuration, and project metadata setup. The configuration should be done outside React components to prevent unnecessary rerenders.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
// App.tsx
import { createAppKit } from "@reown/appkit/react";
import { SolanaAdapter } from "@reown/appkit-adapter-solana/react";
import { solana, solanaTestnet, solanaDevnet } from "@reown/appkit/networks";
import {
  PhantomWalletAdapter,
  SolflareWalletAdapter,
} from "@solana/wallet-adapter-wallets";

// 0. Set up Solana Adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],
});

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Create a metadata object - optional
const metadata = {
  name: "AppKit",
  description: "AppKit Solana Example",
  url: "https://example.com", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
};

// 3. Create modal
createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

export default function App() {
  return <YourApp />;
}

----------------------------------------

TITLE: Available Publishers in AppKit for Swift
DESCRIPTION: Lists all the available publishers that can be subscribed to for receiving AppKit events. These publishers provide updates on sessions, connections, and authentication responses.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#2025-04-10_snippet_5

LANGUAGE: swift
CODE:
public var sessionPublisher: AnyPublisher<[Session], Never>
public var sessionSettlePublisher: AnyPublisher<Session, Never>
public var sessionRejectionPublisher: AnyPublisher<(Session.Proposal, Reason), Never>
public var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>
public var sessionResponsePublisher: AnyPublisher<Response, Never>
public var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>
public var authResponsePublisher: AnyPublisher<(id: RPCID, result: Result<(Session?, [Cacao]), AuthError>), Never>

----------------------------------------

TITLE: Triggering modal in Vue/JavaScript
DESCRIPTION: Code to trigger the modal in Vue or JavaScript using Reown AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_9

LANGUAGE: js
CODE:
document.getElementById('my-button').addEventListener('click', () => {
    modal.open()
})

<button id="my-button">Connect Wallet</button>

----------------------------------------

TITLE: Reading Smart Contract Data with useReadContract Hook in React Native
DESCRIPTION: This snippet demonstrates how to use the useReadContract hook to call a read method on a smart contract. It shows implementation for handling loading, success, and error states when querying contract data like totalSupply.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { View, Text } from "react-native";
import { useReadContract } from "./abi";

function App() {
  const { data, isError, isPending, isSuccess } = useReadContract({
    abi,
    address: "0x6b175474e89094c44da98b954eedeac495271d0f",
    functionName: "totalSupply",
  });

  return (
    <View>
      {isPending && <Text>Loading</Text>}
      {isSuccess && <Text>Response: {data?.toString()}</Text>}
      {isError && <Text>Error reading contract</Text>}
    </View>
  );
}

----------------------------------------

TITLE: Executing Chain Abstraction Transactions in Swift
DESCRIPTION: The execute method broadcasts all transactions in the correct order and monitors the cross-chain transfer process. It returns an ExecuteDetails object with transaction status and results.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/early-access/chain-abstraction.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
@available(*, message: "This method is experimental. Use with caution.")
public func execute(uiFields: UiFields, routeTxnSigs: [FfiPrimitiveSignature], initialTxnSig: FfiPrimitiveSignature) async throws -> ExecuteDetails {
}

----------------------------------------

TITLE: Signing and Submitting a DEX Order Transaction with xrpl_signTransaction in XRPL
DESCRIPTION: This example demonstrates how to use the xrpl_signTransaction method to sign and submit a DEX order transaction on the XRP Ledger. The transaction creates an offer to sell 15,000 XRP in exchange for 7,072.8 USD. The request includes transaction details, and the response contains the signed transaction with auto-filled fields and the transaction hash.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/xrpl-rpc.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "xrpl_signTransaction",
    "params": {
        "tx_json": {
            "TransactionType": "OfferCreate",
            "Account": "rMBzp8CgpE441cp5PVyA9rpVV7oT8hP3ys",
            "Flags": 524288,
            "LastLedgerSequence": 7108682,
            "Expiration": 595640108,
            "TakerGets": "15000000000",
            "TakerPays": {
                "currency": "USD",
                "issuer": "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
                "value": "7072.8"
            }
        }
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "tx_json": {
            "Account": "rMBzp8CgpE441cp5PVyA9rpVV7oT8hP3ys",
            "Expiration": 595640108,
            "Fee": "10",
            "Flags": 524288,
            "OfferSequence": 1752791,
            "Sequence": 1752792,
            "LastLedgerSequence": 7108682,
            "SigningPubKey": "03EE83BB432547885C219634A1BC407A9DB0474145D69737D09CCDC63E1DEE7FE3",
            "TakerGets": "15000000000",
            "TakerPays": {
                "currency": "USD",
                "issuer": "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
                "value": "7072.8"
            },
            "TransactionType": "OfferCreate",
            "TxnSignature": "30440220143759437C04F7B61F012563AFE90D8DAFC46E86035E1D965A9CED282C97D4CE02204CFD241E86F17E011298FC1A39B63386C74306A5DE047E213B0F29EFA4571C2C",
            "hash": "73734B611DDA23D3F5F62E20A173B78AB8406AC5015094DA53F53D39B9EDB06C"
        }
    }
}

----------------------------------------

TITLE: Initializing WalletConnect NotifyClient SDK
DESCRIPTION: Code to import and initialize the NotifyClient with your project ID. This is the first step in setting up the notification system.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
import { NotifyClient } from "@walletconnect/notify-client";

const notifyClient = await NotifyClient.init({
  projectId: "<YOUR PROJECT ID>",
});

----------------------------------------

TITLE: Pairing WalletConnect Sessions with URI
DESCRIPTION: Process for creating a pairing proposal by using a URI received from a dapp. This code demonstrates how to approve or reject a session proposal after pairing, including setting up the appropriate namespaces.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
// This will trigger the `session_proposal` event
await signClient.core.pairing.pair({ uri });

// Approve session proposal, use id from session proposal event and respond with namespace(s) that satisfy dapps request and contain approved accounts
const { topic, acknowledged } = await signClient.approve({
  id: 123,
  namespaces: {
    eip155: {
      accounts: ["eip155:1:0x0000000000..."],
      methods: ["personal_sign", "eth_sendTransaction"],
      events: ["accountsChanged"],
    },
  },
});

// Optionally await acknowledgement from dapp
const session = await acknowledged();

// Or reject session proposal
await signClient.reject({
  id: 123,
  reason: {
    code: 1,
    message: "rejected",
  },
});

----------------------------------------

TITLE: Fetching and Displaying Blockchain Chains with React
DESCRIPTION: This component fetches blockchain chains from WalletConnect API, renders them as clickable cards with search functionality, and enables copying chain namespace to clipboard. It uses a combination of React JSX for structure and vanilla JavaScript DOM manipulation for dynamic content rendering.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/chainlist.mdx#2025-04-10_snippet_0

LANGUAGE: JavaScript
CODE:
export const ChainList = () => {
  let chains = [];
  let filteredChains = [];

  if (typeof document !== "undefined") {
    fetch(
      "https://explorer-api.walletconnect.com/v3/chains?projectId=8e998cd112127e42dce5e2bf74122539"
    )
      .then((response) => response.json())
      .then((data) => {
        chains = Object.keys(data.chains).map((key) => ({
          name: data.chains[key].name, 
          namespace: key, 
        }));
        filteredChains = [...chains];
        renderChains(filteredChains);

        const searchInput = document.querySelector(".search-bar");
        if (searchInput) {
          searchInput.addEventListener("input", (event) => {
            const query = event.target.value.toLowerCase();
            filteredChains = chains.filter((chain) =>
              chain.name.toLowerCase().includes(query)
            );
            renderChains(filteredChains);
          });
        }
      })
      .catch((error) => console.error(error));
  }

  const renderChains = (chains) => {
    const container = document.querySelector(".chain-card-container");
    if (container) {
      container.innerHTML = "";
      chains.forEach((chain) => {
        const card = document.createElement("button");
        card.className = `
          flex items-center justify-center 
          border border-gray-500 p-2 text-center 
          w-full dark:bg-gray-600 dark:text-white h-20
        `;
        card.innerText = chain.name;
        card.onclick = () => {
          navigator.clipboard.writeText(chain.namespace);
          card.innerText = "Chain ID copied!";
          setTimeout(() => {
            card.innerText = chain.name;
          }, 3000);
        };
        container.appendChild(card);
      });
    }
  };

  return (
    <div className="chain-list">
      <input
        type="text"
        className="search-bar"
        placeholder="Search for a chain..."
        style={{
          width: "100%",
          padding: "8px",
          marginBottom: "20px",
          marginTop: "20px",
          boxSizing: "border-box",
        }}
      />
      <div
        className="chain-card-container"
        style={{
          display: "grid",
          gridTemplateColumns: "repeat(auto-fill, minmax(200px, 1fr))",
          gap: "8px",
        }}
      ></div>
    </div>
  );
};

----------------------------------------

TITLE: Initializing Reown AppKit Configuration with Solana
DESCRIPTION: Sets up a Reown AppKit instance with Solana network support. Includes project configuration, chain settings, metadata definition, and SolanaAdapter initialization. Must be configured outside React components to prevent unnecessary rerenders.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/solana/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit/react";
import { solana, solanaTestnet, solanaDevnet } from "@reown/appkit/networks";
import { SolanaAdapter } from "@reown/appkit-adapter-solana/react";

// 1. Get projectId
const projectId = "YOUR_PROJECT_ID";

// 2. Set chains
const mainnet = {
  chainId: "5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  name: "Solana",
  currency: "SOL",
  explorerUrl: "https://solscan.io",
  rpcUrl: "https://rpc.walletconnect.org/v1",
};

// 3. Create a metadata object
const metadata = {
  name: "My Website",
  description: "My Website description",
  url: "https://mywebsite.com", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
};

// 4. Create Wagmi Adapter
const solanaWeb3JsAdapter = new SolanaAdapter();

// 5. Create a AppKit instance
const modal = createAppKit({
  projectId,
  metadata,
  networks: [solana, solanaTestnet, solanaDevnet],
  adapters: [solanaWeb3JsAdapter],
});

export default function App() {
  return <YourApp />;
}

----------------------------------------

TITLE: Using Notification Types Hook in TypeScript
DESCRIPTION: This snippet shows the usage of a custom hook called useNotificationTypes(). It returns an object with 'data' (renamed to 'types') containing notification types, and an 'update' function to modify the enabled scopes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/react.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const { data: types, update } = useNotificationTypes()

----------------------------------------

TITLE: Fetching Notification History with Pagination in Swift
DESCRIPTION: Retrieves notification history for a specific subscription with pagination support. The method fetches and saves notifications to the SDK's database, triggering an update event through the messagesPublisher.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#2025-04-10_snippet_9

LANGUAGE: swift
CODE:
func fetchHistory(subscription: NotifySubscription, after: String?, limit: Int) async throws -> Bool

----------------------------------------

TITLE: Updating Subscription Notification Settings in Swift
DESCRIPTION: Allows users to modify their notification settings for a specific dapp subscription. Users can select which types of notifications they want to receive based on the latest options provided by the dapp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#2025-04-10_snippet_6

LANGUAGE: swift
CODE:
public func update(topic: String, scope: Set<String>) async throws

----------------------------------------

TITLE: Opening and Closing AppKit Modal in TypeScript
DESCRIPTION: Demonstrates how to create an AppKit instance and open or close the modal programmatically. Shows the basic modal initialization with adapters, networks, and a project ID.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter],
  networks: [mainnet, arbitrum],
  projectId,
});

modal.open();

modal.close();

----------------------------------------

TITLE: Implementing One-Click SIWE Client Configuration in TypeScript
DESCRIPTION: Configures the client-side SIWE authentication using the @reown/appkit-siwe package. Creates a configuration object with methods for message creation, session management, and verification. Includes functions for fetching sessions and verifying messages against a backend server.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/code.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { SiweMessage } from "siwe";
import {
  type SIWESession,
  type SIWEVerifyMessageArgs,
  type SIWECreateMessageArgs,
  createSIWEConfig,
  formatMessage,
} from "@reown/appkit-siwe";

const BASE_URL = "http://localhost:8080";

/* Function that returns the user's session - this should come from your SIWE backend */
async function getSession() {
  const res = await fetch(BASE_URL + "/session", {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
    credentials: "include",
  });
  if (!res.ok) {
    throw new Error("Network response was not ok");
  }

  const data = await res.json();

  const isValidData =
    typeof data === "object" &&
    typeof data.address === "string" &&
    typeof data.chainId === "number";

  return isValidData ? (data as SIWESession) : null;
}

/* Use your SIWE server to verify if the message and the signature are valid */
const verifyMessage = async ({ message, signature }: SIWEVerifyMessageArgs) => {
  try {
    const response = await fetch(BASE_URL + "/verify", {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      mode: "cors",
      body: JSON.stringify({ message, signature }),
      credentials: "include",
    });

    if (!response.ok) {
      return false;
    }

    const result = await response.json();
    return result === true;
  } catch (error) {
    return false;
  }
};

// Check the full example for signOut and getNonce functions ...

/* Create a SIWE configuration object */
export const siweConfig = createSIWEConfig({
  getMessageParams: async () => ({
    domain: window.location.host,
    uri: window.location.origin,
    chains: [1, 2020],
    statement: "Please sign with your account",
  }),
  createMessage: ({ address, ...args }: SIWECreateMessageArgs) =>
    formatMessage(args, address),

  getNonce: async () => {
    //This is only an example, substitute it with your actual nonce getter.
    const nonce = "YOUR_NONCE_GETTER";
    if (!nonce) {
      throw new Error("Failed to get nonce!");
    }
    return nonce;
  },
  getSession,
  verifyMessage,
  signOut: async () => {
    //Example
    // Implement your Sign out function
  },
});

----------------------------------------

TITLE: Using useAppKitEvents Hook for Event Subscription
DESCRIPTION: Hook for subscribing to modal events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_7

LANGUAGE: typescript
CODE:
import { useAppKitEvents } from "@reown/appkit/react";

const events = useAppKitEvents();

----------------------------------------

TITLE: Opening Specific Modal Views in ReownAppKit
DESCRIPTION: Demonstrates various ways to open specific screens within the ReownAppKit modal, such as network selection, QR code scanning, and wallet listing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_14

LANGUAGE: javascript
CODE:
// With no options will open default screen depending on the connection status
_appKitModal.openModalView();

// Will open Network Selection screen independently of the connection status
// This option is not needed if you use AppKitModalNetworkSelectButton()
_appKitModal.openModalView(ReownAppKitModalSelectNetworkPage());

// Will open QR Code screen for connection.
// Will work only if not yet connected.
_appKitModal.openModalView(ReownAppKitModalQRCodePage());

// Will open All Wallets screen for connection
// Will work only if not yet connected.
_appKitModal.openModalView(ReownAppKitModalAllWalletsPage());

----------------------------------------

TITLE: Integrating AppKitComponent in ModalBottomSheet
DESCRIPTION: Shows how to add an AppKitComponent within a ModalBottomSheetLayout, including necessary imports and state management for showing/hiding the sheet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_0

LANGUAGE: kotlin
CODE:
import androidx.compose.material.ExperimentalMaterialApi
import androidx.compose.material.ModalBottomSheetState
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.compose.material.ModalBottomSheetLayout

setContent {
    val modalSheetState = rememberModalBottomSheetState(initialValue = ModalBottomSheetValue.Hidden, skipHalfExpanded = true)
    val coroutineScope = rememberCoroutineScope()
    val navController = rememberNavController()

    ModalBottomSheetLayout(
        sheetContent = {
            AppKitComponent(
                shouldOpenChooseNetwork = true | false,
                closeModal = { coroutineScope.launch { modalSheetState.hide() }
            )
        }
    ) {
        // content
    }
}

----------------------------------------

TITLE: Adding WalletConnectModal to Swift Package.swift
DESCRIPTION: Swift code example showing how to integrate WalletConnectModal into a Swift project using the Package.swift manifest file by adding it to dependencies.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
dependencies: [
  .package(
    name: "WalletConnectV2",
    url: "https://github.com/WalletConnectV2/WalletConnectSwiftV2.git",
    .upToNextMajor(from: "1.6.4")
  ),

  // Any other dependencies you have...
],

----------------------------------------

TITLE: Setting Featured Wallet IDs in ReOwn AppKit
DESCRIPTION: Prioritizes specific wallets to be displayed on the modal's main view by providing their unique wallet IDs in a preferred order.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  featuredWalletIds: [
    "1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369",
    "4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0",
  ],
});

----------------------------------------

TITLE: Defining Transaction Receipt Request Class in WalletConnect using C#
DESCRIPTION: Creates a request class that inherits from List<string> for handling eth_getTransactionReceipt requests. Includes the required RpcMethod and RpcRequestOptions attributes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_46

LANGUAGE: csharp
CODE:
[RpcMethod("eth_getTransactionReceipt"), RpcRequestOptions(Clock.ONE_MINUTE, 99994)]
public class EthGetTransactionReceipt : List<string>
{
    public EthGetTransactionReceipt(params string[] hashes) : base(hashes)
    {
    }
}

----------------------------------------

TITLE: Handling Universal Links in iOS AppDelegate
DESCRIPTION: This Swift code snippet shows how to handle incoming Universal Links in the AppDelegate.mm file for an iOS app. It implements two methods: one for handling deep links and another for handling Universal Links.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/link-mode.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
#import <React/RCTLinkingManager.h>

// Enable deeplinks
- (BOOL)application:(UIApplication *)application
   openURL:(NSURL *)url
   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
{
  return [RCTLinkingManager application:application openURL:url options:options];
}

// Enable Universal Links
- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity
 restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler
{
 return [RCTLinkingManager application:application
                  continueUserActivity:userActivity
                    restorationHandler:restorationHandler];
}

----------------------------------------

TITLE: Smart Contract Interaction with Ethers
DESCRIPTION: Example of using Ethers.js to interact with ERC-20 tokens and read token balances
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { useAppKitProvider, useAppKitAccount } from "@reown/appkit/react";
import { BrowserProvider, Contract, formatUnits } from "ethers";

const USDTAddress = "0x617f3112bf5397D0467D315cC709EF968D9ba546";

// The ERC-20 Contract ABI, which is a common contract interface
// for tokens (this is the Human-Readable ABI format)
const USDTAbi = [
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function balanceOf(address) view returns (uint)",
  "function transfer(address to, uint amount)",
  "event Transfer(address indexed from, address indexed to, uint amount)",
];

function Components() {
  const { address, isConnected } = useAppKitAccount();
  const { walletProvider } = useAppKitProvider("eip155");

  async function getBalance() {
    if (!isConnected) throw Error("User disconnected");

    const ethersProvider = new BrowserProvider(walletProvider);
    const signer = await ethersProvider.getSigner();
    // The Contract object
    const USDTContract = new Contract(USDTAddress, USDTAbi, signer);
    const USDTBalance = await USDTContract.balanceOf(address);

    console.log(formatUnits(USDTBalance, 18));
  }

  return <button onClick={getBalance}>Get User Balance</button>;
}

----------------------------------------

TITLE: Creating Authentication Payloads
DESCRIPTION: Demonstrates how to create authentication payloads with supported chains and methods, and format authentication messages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/one-click-auth.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
final supportedChains = ['eip155:1', 'eip155:10', 'eip155:137'];
final supportedMethods = ['personal_sign', 'eth_sendTransaction'];
final SessionAuthPayload authPayload = AuthSignature.populateAuthPayload(
  authPayload: args.authPayload,
  chains: supportedChains,
  methods: supportedMethods,
);
final cacaoRequestPayload = CacaoRequestPayload.fromSessionAuthPayload(
  newAuthPayload,
);

// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format
final iss = 'eip155:1:0x59e2f66C0E96803206B6486cDb39029abAE834c0';
// Now you can use the authPayload to format the authentication message
final message = _walletKit!.formatAuthMessage(
  iss: iss,
  cacaoPayload: cacaoRequestPayload,
);

// Present the authentication message to the user
...

----------------------------------------

TITLE: SIWEConfig Class Reference
DESCRIPTION: Complete reference for the SIWEConfig class showing all available properties and their default values, including configuration for signature verification, session management and logout behaviors.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
class SIWEConfig {
  final Future<String> Function() getNonce;
  final Future<SIWEMessageArgs> Function() getMessageParams;
  final String Function(SIWECreateMessageArgs args) createMessage;
  final Future<bool> Function(SIWEVerifyMessageArgs args) verifyMessage;
  final Future<SIWESession?> Function() getSession;
  final Future<bool> Function() signOut;
  // Callback when user signs in
  final Function(SIWESession session)? onSignIn;
  // Callback when user signs out
  final VoidCallback? onSignOut;
  // Defaults to true
  final bool enabled;
  // In milliseconds, defaults to 5 minutes
  final int nonceRefetchIntervalMs;
  // In milliseconds, defaults to 5 minutes
  final int sessionRefetchIntervalMs;
  // Defaults to true
  final bool signOutOnDisconnect;
  // Defaults to true
  final bool signOutOnAccountChange;
  // Defaults to true
  final bool signOutOnNetworkChange;
  //

  SIWEConfig({
    required this.getNonce,
    required this.getMessageParams,
    required this.createMessage,
    required this.verifyMessage,
    required this.getSession,
    required this.signOut,
    this.onSignIn,
    this.onSignOut,
    this.enabled = true,
    this.signOutOnDisconnect = true,
    this.signOutOnAccountChange = true,
    this.signOutOnNetworkChange = true,
    this.nonceRefetchIntervalMs = 300000,
    this.sessionRefetchIntervalMs = 300000,
  });
}

----------------------------------------

TITLE: Updating Session with New Accounts in WalletKit
DESCRIPTION: This code demonstrates how to update an existing session with new accounts using the updateSession method in WalletKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
const namespaces = session.namespaces;
const accounts = [
  "eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb",
  "eip155:1:0x1234567890123456789012345678901234567890",
];
const updatedNamespaces = {
  ...namespaces,
  eip155: {
    ...namespaces.eip155,
    accounts,
  },
};
const { acknowledged } = await walletKit.updateSession({
  topic: session.topic,
  namespaces: updatedNamespaces,
});
// If you wish to be notified when the dapp acknowledges the update.
// note that if the dapp is offline `acknowledged` will not resolve until it comes back online
await acknowledged();

----------------------------------------

TITLE: Retrieving Error State with Reown AppKit in TypeScript
DESCRIPTION: This code shows how to retrieve the current error state using the getError method of the Reown AppKit modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
const error = modal.getError();

----------------------------------------

TITLE: Handling WalletConnect Authentication Requests
DESCRIPTION: Implementation of event handling for WalletConnect authentication requests. This code shows how to subscribe to authentication events and begin the processing workflow for authentication requests.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
walletKit.on("session_authenticate", async (payload) => {
  // Process the authentication request here.
  // Steps include:
  // 1. Populate the authentication payload with the supported chains and methods
  // 2. Format the authentication message using the payload and the user's account
  // 3. Present the authentication message to the user
  // 4. Sign the authentication message(s) to create a verifiable authentication object(s)
  // 5. Approve the authentication request with the authentication object(s)
});

----------------------------------------

TITLE: Retrieving Modal State with modal.getState
DESCRIPTION: This method returns the current state of the modal, including whether it's open and the selected network ID.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_15

LANGUAGE: javascript
CODE:
modal.getState

----------------------------------------

TITLE: Controlling Theme with useAppKitTheme in Vue
DESCRIPTION: Demonstrates how to use the useAppKitTheme composable to control the modal's theme and appearance.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
import { useAppKitTheme } from "@reown/appkit/vue";
const themeAction = useAppKitTheme();
// or
// const { setThemeMode, setThemeVariables } = useAppKitTheme()

----------------------------------------

TITLE: Pairing a Wallet with Dapp using WalletKit on iOS
DESCRIPTION: This Swift code shows how to pair a wallet with a dapp on iOS devices. It creates a WalletConnectURI from a string URL and uses WalletKit's pair method in an asynchronous task to establish the connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
let uri = WalletConnectURI(string: urlString)

if let uri {
Task {
try await WalletKit.instance.pair(uri: uri)
}
}

----------------------------------------

TITLE: Connecting Wallet Accounts and Session Management
DESCRIPTION: Code sample demonstrating how to attempt resuming a previous wallet connection session and handling new connections. Includes event subscription for account connection and modal display functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/installation.mdx#2025-04-10_snippet_3

LANGUAGE: csharp
CODE:
public async Task ResumeSession()
{
    // Try to resume account connection from the last session
    var resumed = await AppKit.ConnectorController.TryResumeSessionAsync();

    if (resumed)
    {
        // Continue to the game
        MyAccountConnectedHandler();
    }
    else
    {
        // Connect account
        AppKit.AccountConnected += (_, e) => MyAccountConnectedHandler();
        AppKit.OpenModal();
    }
}

----------------------------------------

TITLE: Initializing the Notify SDK Client in React Native
DESCRIPTION: Code for initializing the NotifyClient with a project ID in a React Native application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_35

LANGUAGE: javascript
CODE:
import { NotifyClient } from "@walletconnect/notify-client";

const notifyClient = await NotifyClient.init({
  projectId: "<YOUR PROJECT ID>",
});

----------------------------------------

TITLE: Fetching Notification Types with NotifyClient in Kotlin
DESCRIPTION: This snippet illustrates how to retrieve notification types for a specific app using NotifyClient.getNotificationTypes. It requires the app's domain as a parameter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_30

LANGUAGE: kotlin
CODE:
val appMetadata: Core.Model.AppMetaData = /*App Metadata could be fetched from NotifyClient.getActiveSubscriptions()*/
val appDomain: String = /*App Domain*/ // URI(appMetadata.url).host
val notificationTypesParams = Notify.Params.NotificationTypes(appDomain)
NotifyClient.getNotificationTypes(notificationTypesParams)

----------------------------------------

TITLE: Monitoring WebSocket Connection State with WalletKit in TypeScript
DESCRIPTION: Shows how to track and handle WebSocket connection state changes using the WalletKit core, allowing for appropriate UI updates based on connectivity.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#2025-04-10_snippet_7

LANGUAGE: typescript
CODE:
core.relayer.on("relayer_connect", () => {
    // connection to the relay server is established
})

core.relayer.on("relayer_disconnect", () => {
// connection to the relay server is lost
})

----------------------------------------

TITLE: Configuring AppKit with SIWX for Travel Rule Compliance
DESCRIPTION: TypeScript code snippet demonstrating how to set up AppKit with SIWX enabled for Travel Rule compliance. It imports necessary modules and configures AppKit with the DefaultSIWX implementation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/travel-rule.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { DefaultSIWX } from '@reown/appkit-siwx'

const appkit = createAppKit({
  projectId,
  networks,
  metadata,
  siwx: new DefaultSIWX() // add this line to enable SIWX
})

----------------------------------------

TITLE: Extracting Chain ID and Address from SIWE Message
DESCRIPTION: TypeScript code snippets for extracting the chain ID and address from a SIWE message using utility functions from the @reown/appkit-siwe package.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
import { getChainIdFromMessage } from "@reown/appkit-siwe";

const chainId = getChainIdFromMessage(message);

LANGUAGE: typescript
CODE:
import { getAddressFromMessage } from "@reown/appkit-siwe";

const address = getAddressFromMessage(message);

----------------------------------------

TITLE: Installing AppKit with Ethers for JavaScript
DESCRIPTION: Commands to install AppKit and its dependencies for use with Ethers in JavaScript projects using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers ethers

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-ethers ethers

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-ethers ethers

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-ethers ethers

----------------------------------------

TITLE: Updating Session Namespaces in Swift
DESCRIPTION: Code to update a user session's chains, accounts, methods, or events. This allows the wallet to modify the capabilities available to the connected dApp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_14

LANGUAGE: swift
CODE:
try await Sign.instance.update(topic: session.topic, namespaces: newNamespaces)

----------------------------------------

TITLE: Defining AccountAddress Type in TypeScript
DESCRIPTION: This snippet defines the AccountAddress type, which includes the public address, optional public key and derivation path, and the purpose of the address.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
export type AccountAddress = {
  /**
   * Public address belonging to the account.
   */
  address: string
  /**
   * Public key for the derivation path in hex, without 0x prefix
   */
  publicKey?: string
  /**
   * The derivation path of the address e.g. "m/84'/0'/0'/0/0"
   */
  path?: string
  /**
   * The purpose of the address
   */
  purpose: 'payment' | 'ordinal' | 'stx'
}

----------------------------------------

TITLE: Using AppKit Wallet Button Component
DESCRIPTION: Example showing how to use the appkit-wallet-button web component to create a wallet connection button for MetaMask.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/components.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
<appkit-wallet-button wallet="metamask" />

----------------------------------------

TITLE: Using useAppKitTheme Hook for Theme Control
DESCRIPTION: Hook for managing the modal's theme including mode and custom variables.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
import { useAppKitTheme } from "@reown/appkit/react";
const { themeMode, themeVariables, setThemeMode, setThemeVariables } = useAppKitTheme();

setThemeMode("dark");

setThemeVariables({
  "--w3m-color-mix": "#00BB7F",
  "--w3m-color-mix-strength": 40,
});

----------------------------------------

TITLE: Starting a Wallet via Deep Link from a DApp in Kotlin
DESCRIPTION: Kotlin code for initiating a wallet connection from a DApp by launching a deep link intent. This code triggers the mobile wallet to open and process the pairing URI for establishing a connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/mobile-linking.mdx#2025-04-10_snippet_4

LANGUAGE: kotlin
CODE:
requireActivity().startActivity(Intent(Intent.ACTION_VIEW, deeplinkPairingUri.toUri()))

----------------------------------------

TITLE: Detecting Smart Contract Wallets with ethers.js
DESCRIPTION: This snippet demonstrates how to determine if an address belongs to a smart contract wallet by checking if it has deployed code. It uses ethers.js to query the blockchain and verify if the bytecode is non-empty.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/smart-contract-wallet-usage.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { providers, utils } from "ethers";

const provider = new providers.JsonRpcProvider(rpcUrl);

const bytecode = await provider.getCode(address);

const isSmartContract = bytecode && utils.hexStripZeros(bytecode) !== "0x";

----------------------------------------

TITLE: Submitting Signed Transaction
DESCRIPTION: Final step of submitting the signed transaction to the network and handling transaction status events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#2025-04-10_snippet_9

LANGUAGE: javascript
CODE:
const unsub = await tx.send(({ status, events }) => {
  if (status.isReady) {
    // ...
  }

  if (status.isInBlock) {
    // ...
  }

  if (status.isFinalized) {
    events.forEach(({ event: { method } }) => {
      if (method === "ExtrinsicSuccess") {
        // ...
        unsub();
      } else if (method === "ExtrinsicFailed") {
        // ...
        unsub();
      }
    });
  }
});

----------------------------------------

TITLE: Basic AppKit Button Component Implementation
DESCRIPTION: Custom button element with support for multiple states, sizes and balance display. Includes namespace support for different blockchain networks including EVM, Solana and Bitcoin.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/components.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<appkit-button />

----------------------------------------

TITLE: Retrieving Active WalletConnect Sessions in Swift
DESCRIPTION: Gets a list of all active WalletConnect sessions. Returns an array of Session objects that represent connections to wallets.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#2025-04-10_snippet_4

LANGUAGE: swift
CODE:
AppKit.instance.getSessions()

----------------------------------------

TITLE: ScopeMap Type Definition for Notification Types
DESCRIPTION: This code defines the TypeScript type for the notification types map. Each scope in the map contains a name, description, and enabled status, representing different notification types available to users.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/javascript.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
type ScopeMap = Record<
  string,
  {
    name: string
    description: string
    enabled: boolean
  }
>

----------------------------------------

TITLE: Configuring Coinbase Smart Wallet with Ethers in TypeScript
DESCRIPTION: Configure AppKit with Ethers adapter to use Coinbase Smart Wallet with preference set to 'smartWalletOnly'. This enables the Smart Wallet popup when using the Ethers adapter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_30

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  enableCoinbase: true, // true by default
  coinbasePreference: "smartWalletOnly",
});

----------------------------------------

TITLE: Implementing AppKit ModalDelegate for Session Management
DESCRIPTION: Implementation of the AppKit.ModalDelegate interface to handle various session-related events. This delegate manages wallet connections, session updates, requests, errors, and connection state changes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
val appKitModalDelegate = object : AppKit.ModalDelegate {
    override fun onSessionApproved(approvedSession: Modal.Model.ApprovedSession) {
        // Triggered when receives the session approval from wallet
    }

    override fun onSessionRejected(rejectedSession: Modal.Model.RejectedSession) {
        // Triggered when receives the session rejection from wallet
    }

    override fun onSessionUpdate(updatedSession: Modal.Model.UpdatedSession) {
        // Triggered when receives the session update from wallet
    }

    override fun onSessionExtend(session: Modal.Model.Session) {
        // Triggered when receives the session extend from wallet
    }

    override fun onSessionEvent(sessionEvent: Modal.Model.SessionEvent) {
        // Triggered when the peer emits events that match the list of events agreed upon session settlement
    }

    override fun onSessionDelete(deletedSession: Modal.Model.DeletedSession) {
        // Triggered when receives the session delete from wallet
    }

    override fun onSessionRequestResponse(response: Modal.Model.SessionRequestResponse) {
        // Triggered when receives the session request response from wallet
    }

    override fun onProposalExpired(proposal: Modal.Model.ExpiredProposal) {
        // Triggered when a proposal becomes expired
    }

    override fun onRequestExpired(request: Modal.Model.ExpiredRequest) {
        // Triggered when a request becomes expired
    }

    override fun onConnectionStateChange(state: Modal.Model.ConnectionState) {
        //Triggered whenever the connection state is changed
    }

    override fun onError(error: Modal.Model.Error) {
        // Triggered whenever there is an issue inside the SDK
    }
}

----------------------------------------

TITLE: Sending Transaction for Signing
DESCRIPTION: Sends unsigned transaction to wallet for signing using WalletConnect.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
const result = await client.request({
  chainId: "polkadot:91b171bb158e2d3848fa23a9f1c25182",
  topic: walletConnectSession.topic,
  request: {
    method: "polkadot_signTransaction",
    params: {
      address: selectedWalletConnectAddress,
      transactionPayload: unsignedTransaction,
    },
  },
});

----------------------------------------

TITLE: Using useWalletInfo with Ethers
DESCRIPTION: Demonstrates how to use the useWalletInfo hook with Ethers integration to retrieve metadata information from the connected wallet. The hook returns a walletInfo object containing wallet details.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_14

LANGUAGE: typescript
CODE:
import { useWalletInfo } from '@reown/appkit-ethers-react-native'

const { walletInfo } = useWalletInfo()

----------------------------------------

TITLE: Switching Networks with AppKit in Vue
DESCRIPTION: Demonstrates how to initialize the AppKit with supported networks and switch to a different network. Requires configuration with adapters, project ID, networks, metadata and optional features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers5/composables.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit/vue";
import { mainnet, arbitrum, polygon } from "@reown/appkit/networks";

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  },
});

modal.switchNetwork(polygon);

----------------------------------------

TITLE: Using Account Information with useAppKitAccount in Vue
DESCRIPTION: The useAppKitAccount hook provides access to the client's blockchain account information including address, connection status, and current state.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/composables.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from "@reown/appkit/vue";

const { address, status, isConnected } = useAppKitAccount();

----------------------------------------

TITLE: Creating AppKit Instance in Vue
DESCRIPTION: Code for initializing the Reown AppKit instance with the EthersAdapter in Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#2025-04-10_snippet_6

LANGUAGE: tsx
CODE:
// Remove the following code line
- createWeb3Modal({ ethersConfig, projectId, chains })

// Add the following code lines
 const modal = createAppKit({
 adapters: [new EthersAdapter()],
 networks: [mainnet, arbitrum],
 metadata,
 projectId,
 features: {
   analytics: true,
 }
})

----------------------------------------

TITLE: Using Account Information with useAppKitAccount in Vue
DESCRIPTION: The useAppKitAccount hook provides access to the client's blockchain account information including address, connection status, and current state.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/composables.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from "@reown/appkit/vue";

const { address, status, isConnected } = useAppKitAccount();

----------------------------------------

TITLE: Implementing Deep Link Handling in Android with EventChannel
DESCRIPTION: Android implementation that captures deep links in a Flutter activity and forwards them to the Flutter layer through an EventChannel. The code handles new intents with ACTION_VIEW and passes the URL data to the Flutter event sink.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#2025-04-10_snippet_9

LANGUAGE: kotlin
CODE:
package dapp.example

import io.flutter.embedding.android.FlutterActivity
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.Bundle
import io.flutter.plugin.common.EventChannel

class MainActivity: FlutterActivity() {
  private val eventsChannel = "com.exampledapp/events"
  private var linksReceiver: BroadcastReceiver? = null

  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)

    EventChannel(flutterEngine?.dartExecutor?.binaryMessenger, eventsChannel).setStreamHandler(
      object : EventChannel.StreamHandler {
        override fun onListen(args: Any?, events: EventChannel.EventSink) {
          linksReceiver = createChangeReceiver(events)
        }
        override fun onCancel(args: Any?) {
          linksReceiver = null
        }
      }
    )
  }

  override fun onNewIntent(intent: Intent) {
    super.onNewIntent(intent)
    if (intent.action === Intent.ACTION_VIEW) {
      linksReceiver?.onReceive(this.applicationContext, intent)
    }
  }

  fun createChangeReceiver(events: EventChannel.EventSink): BroadcastReceiver? {
    return object : BroadcastReceiver() {
      override fun onReceive(context: Context, intent: Intent) {
        val dataString = intent.dataString ?:
        events.error("UNAVAILABLE", "Link unavailable", null)
        events.success(dataString)
      }
    }
  }
}

----------------------------------------

TITLE: Marking All Notifications as Read with Default Parameters
DESCRIPTION: Shows how to mark all notifications as read for the default account and domain using the markAllNotificationsAsRead function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
// mark all notifications as read for default account under default domain
await markAllNotificationsAsRead()

----------------------------------------

TITLE: Creating a New Subscription in React Native
DESCRIPTION: Code for creating a new subscription to a dapp's notifications by providing an account and app domain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_39

LANGUAGE: javascript
CODE:
// Get the domain of the target dapp from the Explorer API response
const appDomain = new URL(fetchedExplorerDapp.platform_browser).hostname;

// Subscribe to `fetchedExplorerDapp` by passing the account to be subscribed and the domain of the target dapp.
await notifyClient.subscribe({
  account,
  appDomain,
});

// -> Success/Failure will be received via the `notify_update` event registered previously.
// -> New subscription will be emitted via the `notify_subscriptions_changed` watcher event.

----------------------------------------

TITLE: Authentication Approval Implementation in Kotlin
DESCRIPTION: Shows how to approve authentication requests by constructing and signing authentication objects.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_33

LANGUAGE: kotlin
CODE:
 val approveAuthenticate = Sign.Params.ApproveAuthenticate(id = sessionAuthenticate.id, auths = auths)
SignClient.approveAuthenticate(approveProposal,
  onSuccess = {
    //Redirect back to the dapp if redirect is set: sessionAuthenticate.participant.metadata?.redirect
  },
  onError = { error ->
      //Handle error
  }
)

----------------------------------------

TITLE: Approving Authentication Session Requests
DESCRIPTION: Demonstrates how to approve authentication requests by calling approveSessionAuthenticate with the request ID and authentication objects.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/one-click-auth.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
 val approveAuthenticate = Wallet.Params.ApproveSessionAuthenticate(id = sessionAuthenticate.id, auths = auths)
WalletKit.approveSessionAuthenticate(approveProposal,
  onSuccess = {
    //Redirect back to the dapp if redirect is set: sessionAuthenticate.participant.metadata?.redirect
  },
  onError = { error ->
      //Handle error
  }
)

----------------------------------------

TITLE: Rejecting Session Proposals in WalletKit
DESCRIPTION: This snippet demonstrates how to reject a session proposal. It includes callbacks for handling success and error states, allowing the wallet to update the UI appropriately when the rejection is processed.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#2025-04-10_snippet_4

LANGUAGE: kotlin
CODE:
 WalletKit.rejectSession(reject,
    onSuccess = {
        //Session rejection response was sent successfully - update your UI
    },
    onError = { error ->
          //Error while sending session rejection - update your UI
    })

----------------------------------------

TITLE: Extending Session Duration in WalletKit
DESCRIPTION: This code demonstrates how to extend a session's duration by an additional 7 days using the extendSession method in WalletKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_9

LANGUAGE: javascript
CODE:
const { acknowledged } = await walletKit.extendSession({ topic });
// if you wish to be notified when the dapp acks the extend
// note that if the dapp is offline `acknowledged` will not resolve until it comes back online
await acknowledged();

----------------------------------------

TITLE: Marking All Notifications as Read with JavaScript
DESCRIPTION: JavaScript example showing how to mark all existing notifications as read using the Notify API. Useful for resetting unread state when first implementing unread status features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`,
  {
    method: "POST",
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    },
  }
);

----------------------------------------

TITLE: Implementing SignClient with AppKit - Full Example
DESCRIPTION: Complete implementation showing both old WalletConnectModal approach and new AppKit integration. Includes client initialization, modal creation, and connection handling with URI management.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/wcm.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
// Old Implementation
import { SignClient } from "@walletconnect/sign-client";
import { WalletConnectModal } from "@walletconnect/modal";

const signClient = await SignClient.init({
  projectId: "YOUR_PROJECT_ID",
  metadata: {
    name: "My Website",
    description: "My Website Description",
    url: "https://mywebsite.com", // origin must match your domain & subdomain
    icons: ["https://avatars.githubusercontent.com/u/37784886"],
  },
});

const modal = new WalletConnectModal({
  projectId: "YOUR_PROJECT_ID",
  chains: ["eip155:1"],
});

// connect signClient and feed uri to modal
const { uri, approval } = await signClient.connect({
  requiredNamespaces: {
    eip155: {
      methods: [
        "eth_sendTransaction",
        "eth_signTransaction",
        "eth_sign",
        "personal_sign",
        "eth_signTypedData",
      ],
      chains: ["eip155:1"],
      events: ["chainChanged", "accountsChanged"],
    },
  },
});

if (uri) {
  modal.openModal({ uri });
  const session = await approval();
  modal.closeModal();
}

LANGUAGE: javascript
CODE:
// New Implementation
import { SignClient } from "@walletconnect/sign-client";
import { createAppKit } from "@reown/appkit";

const signClient = await SignClient.init({
  projectId: "YOUR_PROJECT_ID",
  metadata: {
    name: "My Website",
    description: "My Website Description",
    url: "https://mywebsite.com", // origin must match your domain & subdomain
    icons: ["https://avatars.githubusercontent.com/u/37784886"],
  },
});

const modal = createAppKit({
  projectId: "YOUR_PROJECT_ID",
  networks: [mainnet],
});

// connect signClient and feed uri to modal
const { uri, approval } = await signClient.connect({
  requiredNamespaces: {
    eip155: {
      methods: [
        "eth_sendTransaction",
        "eth_signTransaction",
        "eth_sign",
        "personal_sign",
        "eth_signTypedData",
      ],
      chains: ["eip155:1"],
      events: ["chainChanged", "accountsChanged"],
    },
  },
});

if (uri) {
  modal.open({ uri, view: "ConnectingWalletConnectBasic" });
  const session = await approval();
  modal.close();
}

----------------------------------------

TITLE: Implementing Web3Inbox Registration and Subscription
DESCRIPTION: Main component implementing Web3Inbox registration, subscription handling, and conditional notification display. Uses wagmi for wallet connection and message signing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/react.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
// Index.tsx
import {
  useNotifications,
  usePrepareRegistration,
  useRegister,
  useSubscribe,
  useSubscription,
  useUnsubscribe,
  useWeb3InboxAccount,
  useWeb3InboxClient
} from '@web3inbox/react'
import { useCallback, useEffect } from 'react'
import { useSignMessage, useAccount } from 'wagmi'

import Notifications from './Notifications'

export default function App() {
  // Wagmi Hooks
  const { address } = useAccount()
  const { signMessageAsync } = useSignMessage()

  // W3I Hooks
  const { prepareRegistration } = usePrepareRegistration()
  const { register, isLoading: isRegistering } = useRegister()
  const { data: w3iClient, isLoading: w3iClientIsLoading } = useWeb3InboxClient()
  const { isRegistered } = useWeb3InboxAccount(`eip155:1:${address}`)

  // Registration of your address to allow notifications
  // This is done via a signature of a message (SIWE) and the
  // signMessageAsync function from wagmi
  const handleRegistration = async () => {
    try {
      const { message, registerParams } = await prepareRegistration()
      const signature = await signMessageAsync({ message: message })
      await register({ registerParams, signature })
    } catch (registerIdentityError: any) {
      console.error(registerIdentityError)
    }
  }

  // Subscription to dapp notifications
  // Subscribe can be called as a function post registration
  // Can be moved above but shown for example clarity
  const { subscribe, isLoading: isSubscribing } = useSubscribe()
  const { unsubscribe, isLoading: isUnsubscribing } = useUnsubscribe()
  const { data: subscription } = useSubscription()
  const isSubscribed = Boolean(subscription)

  // Note: We are using AppKit for the dapp <> wallet connection.
  // The <appkit-button /> module is from AppKit. Check AppKit Docs for further info.
  return (
    <>
      <main className={styles.main}>
        {w3iClientIsLoading ? (
          <div>Loading W3I Client</div>
        ) : (
          <div>
            <h1>W3I QuickStart</h1>
            <appkit-button />
            <div className={styles.flexColumn}>
              <button onClick={handleRegistration} disabled={isRegistered}>
                {isRegistered ? 'Registered' : 'Register'}
              </button>
              <button
                onClick={isSubscribed ? unsubscribe : subscribe}
                disabled={isSubscribing || isUnsubscribing}
              >
                {isSubscribed ? 'Unsubscribe' : 'Subscribe'}
              </button>
              <hr />
              {isSubscribed ? <Notifications /> : null}
            </div>
          </div>
        )}
      </main>
    </>
  )

----------------------------------------

TITLE: Setting Theme Variables with useAppKitTheme in Vue
DESCRIPTION: Shows how to set the theme mode and customize theme variables using the useAppKitTheme composable.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_7

LANGUAGE: typescript
CODE:
setThemeMode("dark");

setThemeVariables({
  "--w3m-color-mix": "#00BB7F",
  "--w3m-color-mix-strength": 40,
});

----------------------------------------

TITLE: Initializing DApp with Redirect Support in Kotlin
DESCRIPTION: Kotlin code for setting up a DApp with redirection capabilities using the WalletConnect SDK. This initialization configures the DApp to receive signing request responses from wallets through deep linking.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/mobile-linking.mdx#2025-04-10_snippet_5

LANGUAGE: kotlin
CODE:
val redirect = "kotlin-dapp-wc://request" //should be unique for your Dapp

val appMetaData = Core.Model.AppMetaData(
    name = "Dapp Name",
    description = "Dapp Description",
    url = "Dapp URL",
    icons = listOfIconUrlStrings,
    redirect = redirect
)

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = application, metaData = appMetaData)

val init = Sign.Params.Init(core = CoreClient)
SignClient.initialize(init)

----------------------------------------

TITLE: Initializing CoreClient in Android
DESCRIPTION: Sets up the CoreClient for WalletConnect in Android with project ID, connection type, and application context. Includes optional custom relay configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
val projectId = "" //Get Project ID at https://cloud.reown.com/
val connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL
val application = //Android Application level class
[Optional] val optionalRelay: RelayConnectionInterface? = /*implement interface*/

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = application, relay = optionalRelay)

----------------------------------------

TITLE: Pairing with a dApp in ReownWalletKit
DESCRIPTION: Shows how to initiate a pairing process with a dApp using a scanned URI from a QR code. After parsing the URI, the pair method establishes the connection that triggers session proposal and auth request events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
Uri uri = Uri.parse(scannedUriString);
await _walletKit.pair(uri: uri);

----------------------------------------

TITLE: Using useW3iAccount Hook for Web3Inbox Account Management in TypeScript
DESCRIPTION: This snippet demonstrates how to use the useW3iAccount hook to retrieve and manage a Web3Inbox account. The hook accepts a CAIP-10 account identifier and returns various properties related to the account status and management capabilities.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/setting-account/react.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const {
  data: account,
  isRegistered,
  identityKey,
  setAccount,
  error,
  isLoading
} = useW3iAccount('eip155:1:0x9A...')

----------------------------------------

TITLE: Type Definitions for useAppKitAccount Return Values
DESCRIPTION: Type definitions for the values returned by the useAppKitAccount hook, including embedded wallet info and connection status.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
type EmbeddedWalletInfo {
  user: {
    username: string
    email: string
  },
  accountType: 'eoa' | 'smartAccount',
  authProvider: 'google' | 'apple' | 'facebook' | 'x' | 'discord' | 'farcaster' | 'github' | 'email',
  isSmartAccountDeployed: boolean
}

type ConnectionStatus = 'connected' | 'disconnected' | 'connecting' | 'reconnecting'

type UseAppKitAccountReturnType = {
  isConnected: boolean
  allAccounts: Account[]
  status?: ConnectionStatus
  address?: string
  caipAddress?: `${string}:${string}`
  embeddedWalletInfo?: EmbeddedWalletInfo
}

----------------------------------------

TITLE: Registering Firebase Token with Web3Inbox SDK in TypeScript
DESCRIPTION: This code snippet shows how to obtain a Firebase token using the getToken function and register it with the Web3Inbox SDK using the registerWithPushServer function. It requires Firebase to be initialized and the Web3Inbox client to be set up.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/registering-push/react.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { getToken } from 'firebase/messaging'

const { data: client } = useWeb3InboxClient()

// initialize Firebase's messaging object via Firebase's `getMessaging` function

const firebaseToken = getToken(firebaseMessaging, {
  vapidKey: 'YOUR_FIREBASE_VAPID_KEY'
})

client.registerWithPushServer(firebaseToken)

----------------------------------------

TITLE: Configuring Default Account Types in ReOwn AppKit
DESCRIPTION: Sets the default account type for different blockchain networks, such as using EOA (Externally Owned Account) for EVM chains.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  defaultAccountTypes: { eip155: "eoa" },
});

----------------------------------------

TITLE: Structured Parameters for eth_signTypedData in Ethereum
DESCRIPTION: Example parameters for eth_signTypedData showing the structured format including types definitions, domain separator, and message data according to EIP-712 standard.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
[
  "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826",
  {
    types: {
      EIP712Domain: [
        {
          name: "name",
          type: "string",
        },
        {
          name: "version",
          type: "string",
        },
        {
          name: "chainId",
          type: "uint256",
        },
        {
          name: "verifyingContract",
          type: "address",
        },
      ],
      Person: [
        {
          name: "name",
          type: "string",
        },
        {
          name: "wallet",
          type: "address",
        },
      ],
      Mail: [
        {
          name: "from",
          type: "Person",
        },
        {
          name: "to",
          type: "Person",
        },
        {
          name: "contents",
          type: "string",
        },
      ],
    },
    primaryType: "Mail",
    domain: {
      name: "Ether Mail",
      version: "1",
      chainId: 1,
      verifyingContract: "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC",
    },
    message: {
      from: {
        name: "Cow",
        wallet: "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826",
      },
      to: {
        name: "Bob",
        wallet: "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB",
      },
      contents: "Hello, Bob!",
    },
  },
];

----------------------------------------

TITLE: Preparing Chain Abstraction Transactions in Swift
DESCRIPTION: The prepare method checks if chain abstraction is needed and returns the necessary transactions. It's currently marked as experimental.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/early-access/chain-abstraction.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
@available(*, message: "This method is experimental. Use with caution.")
public func prepare(chainId: String, from: FfiAddress, call: Call, accounts: [String], localCurrency: Currency) async throws -> PrepareDetailedResponse 
}

----------------------------------------

TITLE: Integrating Web3InboxClient for Blockchain Notifications in TypeScript
DESCRIPTION: This code demonstrates the complete workflow for implementing Web3InboxClient, including initialization, account registration, subscription management, and retrieving notifications. It uses the @web3inbox/core library along with @wagmi/core for message signing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/javascript.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { Web3InboxClient } from '@web3inbox/core'
import { signMessage } from '@wagmi/core'

const client = await Web3InboxClient.init({ projectId: '...' })

const account = 'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029'

// Set the account to a CAIP-10 account ID
await client.setAccount(account)

const { message, registerParams } = await client.prepareRegistration({ account })
const { signature } = await signMessage(message)
await client.register({ signature, registerParams })

// Get the current notification subscription or watch for updates
const subscription = client.getSubscription()
client.watchSubscription(subscription => console.log({ subscription }))

// Subscribe to the app
await client.subscribeToDapp()

// Get notification history
const notificationsPerPage = 5
const isInfiniteScroll = true

client.pageNotifications(
  notificationsPerPage,
  isInfiniteScroll
)(notifications => {
  // add logic to display notifications here.
  // if isInfiniteScroll is true, notifications will contain all notifications fetched so far, else it will only fetch current page
  // See API docs for more information on `pageNotifications()` and how to use `notifications`
})

----------------------------------------

TITLE: Installing AppKit with Ethers and Solana Adapters
DESCRIPTION: Installation commands for AppKit with Ethers and Solana adapters using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#2025-04-10_snippet_3

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-ethers @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
bun a @reown/appkit @reown/appkit-adapter-ethers @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-ethers @reown/appkit-adapter-solana

----------------------------------------

TITLE: Importing AppKit and Wagmi Adapter in Vue
DESCRIPTION: This code shows how to import the necessary packages for AppKit and Wagmi adapter in a Vue application. It replaces Web3Modal imports with AppKit imports and adds the WagmiAdapter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_14

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit/vue'
import { arbitrum, mainnet } from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { WagmiPlugin } from '@wagmi/vue';

----------------------------------------

TITLE: Implementing Message Signing Function for EVM Wallet
DESCRIPTION: Function that triggers the wallet's message signing modal with a predefined message. It uses the signMessageAsync function to prompt the user to sign the message.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_6

LANGUAGE: jsx
CODE:
// function to sing a msg
const handleSignMsg = async () => {
    // message to sign
    const msg = "Hello Reown AppKit!"
    const sig = await signMessageAsync({ message: msg, account: address as Address });
}

----------------------------------------

TITLE: Conditional Transaction Sending Based on EIP 5792 Support
DESCRIPTION: Example of conditionally using sendCalls or writeContractAsync based on whether the connected wallet supports EIP 5792 capabilities. This pattern enables dApps to support both smart accounts and traditional EOA wallets.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/switching-to-send-calls.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
if (supported) {
  sendCalls(...)
}
else {
  writeContractAsync(...)
}

----------------------------------------

TITLE: Getting All Subscribers with JavaScript Fetch API
DESCRIPTION: JavaScript example showing how to get a list of all currently subscribed accounts. This is an expensive operation with a low rate limit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,
  {
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    },
  }
);
const subscribers: string[] = await response.json();

----------------------------------------

TITLE: Installing AppKit with Ethers5 and Solana Adapters
DESCRIPTION: Installation commands for AppKit with Ethers5 and Solana adapters using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers5 @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-ethers5 @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
bun a @reown/appkit @reown/appkit-adapter-ethers5 @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-ethers5 @reown/appkit-adapter-solana

----------------------------------------

TITLE: Decrypting Messages with NotifyClient in Kotlin
DESCRIPTION: This snippet shows how to decrypt a message sent by the Push server using NotifyClient.decryptMessage. It requires the topic and encrypted message as parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_32

LANGUAGE: kotlin
CODE:
val params = Notify.Params.DecryptMessage(topic = /*topic*/, encryptedMessage = /*encrypted message*/)

NotifyClient.decryptMessage(
    params,
    onSuccess = { message: Notify.Model.Message ->
        // callback for when the decryption is successful
    },
    onError = { error: Notify.Model.Error ->
        // callback for when the decryption has failed
    }
)

----------------------------------------

TITLE: Unsubscribing from Dapp Notifications in Kotlin
DESCRIPTION: Implements the process of unsubscribing from a dapp's notifications using NotifyClient. Requires active subscription topic and handles success/error scenarios.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#2025-04-10_snippet_7

LANGUAGE: kotlin
CODE:
val topic: String = // active subscription topic
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec
val params = Notify.Params.DeleteSubscription(topic)

NotifyClient.deleteSubscription(params).let { result ->
    when (result) {
        is Notify.Result.DeleteSubscription.Success -> {
          // callback for when the delete request was successful
        }

        is Notify.Result.DeleteSubscription.Error -> {
          // callback for when the delete request has failed
        }
    }
}

----------------------------------------

TITLE: Transaction Parameters for eth_signTransaction in Ethereum
DESCRIPTION: Example parameters for eth_signTransaction showing a complete transaction object with from/to addresses, data, gas parameters, value, and nonce fields.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
[
  {
    from: "0xb60e8dd61c5d32be8058bb8eb970870f07233155",
    to: "0xd46e8dd67c5d32be8058bb8eb970870f07244567",
    data: "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675",
    gas: "0x76c0", // 30400
    gasPrice: "0x9184e72a000", // 10000000000000
    value: "0x9184e72a", // 2441406250
    nonce: "0x117", // 279
  },
];

----------------------------------------

TITLE: wallet_prepareCalls Parameters Format in TypeScript
DESCRIPTION: Definition of the parameters format for the wallet_prepareCalls JSON RPC call, used for executing actions with granted permissions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#2025-04-10_snippet_5

LANGUAGE: tsx
CODE:
type PrepareCallsParams = [{
from: `0x${string}`
chainId: `0x${string}`
calls: {
    to: `0x${string}`
    data: `0x${string}`
    value: `0x${string}`
}[];
capabilities: Record<string, any>
}]

----------------------------------------

TITLE: Implementing DApp Redirection in React Native
DESCRIPTION: Code demonstrates how to handle DApp redirection after session approval using React Native's Linking API. It checks for the presence of a native redirect scheme in the session metadata and opens the URL if available, otherwise prompting for manual return.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/mobile-linking.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { Linking } from "react-native";

async function onApprove(proposal, namespaces) {
  const session = await walletKit.approveSession({
    id: proposal.id,
    namespaces,
  });

  const dappScheme = session.peer.metadata.redirect?.native;

  if (dappScheme) {
    Linking.openURL(dappScheme);
  } else {
    // Inform the user to manually return to the DApp
  }
}

----------------------------------------

TITLE: Using Account Button with ReownAppKit
DESCRIPTION: Implements the AppKitModalAccountButton to display account information and access account screen once connected.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_8

LANGUAGE: javascript
CODE:
AppKitModalAccountButton(appKitModal: _appKitModal)

----------------------------------------

TITLE: Authenticating with Reown API using Bearer Token
DESCRIPTION: This snippet demonstrates how to authenticate API requests using a Bearer token in the Authorization header. The token is obtained through a separate authentication process and must be included in all API calls.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/onboarding/wallet-features.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
curl -X GET "https://api.reown.com/v1/endpoint" \
  -H "Authorization: Bearer YOUR_ACCESS_TOKEN"

----------------------------------------

TITLE: Reading from Smart Contract in Reown AppKit (JavaScript)
DESCRIPTION: This code snippet demonstrates how to read from a smart contract using the Reown AppKit, including creating a DeployedContract object and calling read functions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
Future<List<dynamic>> requestReadContract({
  required String? topic,
  required String chainId,
  required DeployedContract deployedContract,
  required String functionName,
  EthereumAddress? sender,
  List parameters = const [],
});

LANGUAGE: javascript
CODE:
final tetherContract = DeployedContract(
  ContractAbi.fromJson(
    jsonEncode([{.....}]), // ABI object
    'Tether USD',
  ),
  EthereumAddress.fromHex('0xdAC17F958D2ee523a2206206994597C13D831ec7'), // https://etherscan.io/token/0xdAC17F958D2ee523a2206206994597C13D831ec7
);

LANGUAGE: javascript
CODE:
final chainId = _appKitModal.selectedChain!.chainId;
final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);

// Get token decimals
final decimals = await _appKitModal.requestReadContract(
  topic: _appKitModal.session!.topic,
  chainId: chainId,
  deployedContract: tetherContract,
  functionName: 'decimals',
);

// Get balance of wallet
final balanceOf = await _appKitModal.requestReadContract(
  deployedContract: tetherContract,
  topic: _appKitModal.session!.topic,
  chainId: chainId,
  functionName: 'balanceOf',
  parameters: [
    EthereumAddress.fromHex(_appKitModal.session!.getAddress(namespace)),
  ],
);

// Get token total supply
final totalSupply = await _appKitModal.requestReadContract(
  deployedContract: tetherContract,
  topic: _appKitModal.session!.topic,
  chainId: _appKitModal.selectedChain!.chainId,
  functionName: 'totalSupply',
);

----------------------------------------

TITLE: Configuring Link Mode for AppKit in Kotlin
DESCRIPTION: This code demonstrates how to set up Link Mode in AppKit, which enables low-latency authentication requests via universal links. It includes configuring AppMetaData with a valid universal link and initializing AppKit with the Link Mode option.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
val appMetaData = Core.Model.AppMetaData(
    ...
    appLink = "https://example.com/example_dapp",
    linkMode = true
)

CoreClient.initialize(
   metaData: appMetaData,
    ...
)

AppKit.initialize(Modal.Params.Init(core = CoreClient))

----------------------------------------

TITLE: VerifyContext Structure for dApp Verification in Swift
DESCRIPTION: Defines the VerifyContext structure used for domain verification of dApps. It includes information about the origin of a dApp, validation status (unknown, valid, or invalid), and verification URL server.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_6

LANGUAGE: swift
CODE:
public struct VerifyContext: Equatable, Hashable {
   public enum ValidationStatus {
       case unknown
       case valid
       case invalid
   }

   public let origin: String?
   public let validation: ValidationStatus
   public let verifyUrl: String
}

----------------------------------------

TITLE: Getting Active Account from AppKit
DESCRIPTION: Retrieves the current active account connected via AppKit. This method returns the account information for the user currently connected to the application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#2025-04-10_snippet_5

LANGUAGE: kotlin
CODE:
AppKit.getAccount()

----------------------------------------

TITLE: Marking Multiple Notifications as Read with Default Parameters
DESCRIPTION: Shows how to mark a subset of notifications as read for the default account and domain using the markNotificationsAsRead function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
// mark specific notifications as read for default account and under default domain
await markNotificationsAsRead(notifications.slice(2).map(n => n.id))

----------------------------------------

TITLE: Updating Error Handling for SDK Errors
DESCRIPTION: Modify error handling by adding the toSignError() method call to error objects returned by getSdkError.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-flutter.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
/* highlight-delete-start */
Errors.getSdkError(Errors.USER_REJECTED);
/* highlight-delete-end */
/* highlight-add-start */
Errors.getSdkError(Errors.USER_REJECTED).toSignError();
/* highlight-add-end */

----------------------------------------

TITLE: Writing to Contracts with AppKit EVM Module
DESCRIPTION: Methods to write data to smart contracts, requiring gas. Supports both JSON and human-readable ABI formats, with options for custom gas limits, sending ETH value, and using a WriteContractParams object.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_12

LANGUAGE: csharp
CODE:
string contractAbi = "[ /* Your contract ABI */ ]";
// Or use human-readable ABI: "function transfer(address to, uint256 amount) returns (bool)"

// Basic write
string txHash = await AppKit.EVM.WriteContractAsync(
    "0x123...", // contract address
    contractAbi,
    "transfer", // method name
    "0x456...", // recipient
    1000 // amount
);

// Write with custom gas
string txHash = await AppKit.EVM.WriteContractAsync(
    "0x123...", // contract address
    contractAbi,
    "transfer", // method name
    gas: 100000, // custom gas limit
    "0x456...", // recipient
    1000 // amount
);

// Write with value and gas
string txHash = await AppKit.EVM.WriteContractAsync(
    "0x123...", // contract address
    contractAbi,
    "stake", // method name
    value: 1000000000000000000, // 1 ETH in wei
    gas: 100000,
    true // other arguments
);

// Using parameters object
var writeContractParams = new WriteContractParams
{
    ContractAddress = "0x123...",
    ContractAbi = contractAbi,
    MethodName = "transfer",
    Value = 0, // optional value in wei
    Gas = 100000, // optional gas limit
    Arguments = new object[] { "0x456...", 1000 }
};
string txHash = await AppKit.EVM.WriteContractAsync(writeContractParams);

----------------------------------------

TITLE: Parsing Session Request Parameters in Swift
DESCRIPTION: Code to extract and parse parameters from a session request based on the method type. Handles different types of Ethereum signing requests including personal_sign, eth_signTypedData, and eth_sendTransaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_12

LANGUAGE: swift
CODE:
if sessionRequest.method == "personal_sign" {
    let params = try! sessionRequest.params.get([String].self)
} else if method == "eth_signTypedData" {
    let params = try! sessionRequest.params.get([String].self)
} else if method == "eth_sendTransaction" {
    let params = try! sessionRequest.params.get([EthereumTransaction].self)
}

----------------------------------------

TITLE: Handling Session Request Responses
DESCRIPTION: Implementation of session request response handling with loading states and error management across platforms.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_13

LANGUAGE: typescript
CODE:
try {
    await walletKit.respondSessionRequest(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

LANGUAGE: swift
CODE:
do {
    try await WalletKit.instance.respond(requestId: request.id, signature: signature, from: account)
    // update UI -> remove the loader
} catch {
    // present error to the user
}

LANGUAGE: kotlin
CODE:
WalletKit.respondSessionRequest(Wallet.Params.SessionRequestResponse,
  onSuccess = {
      //Session request response was sent successfully - update your UI
  },
  onError = { error ->
      //Error while sending session response - update your UI
  })

----------------------------------------

TITLE: Accessing Wallet Metadata in AppKit Modal
DESCRIPTION: Demonstrates how to retrieve and subscribe to wallet information including name and icon. Shows both subscription pattern and direct getter method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
function handler({ name, icon }) {
  console.log(name, icon);
}

modal.subscribeWalletInfo(handler);

//or

const { name, icon } = modal.getWalletInfo();

----------------------------------------

TITLE: Include Specific Wallets Configuration
DESCRIPTION: Overriding default recommended wallets with specific wallet IDs
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  includeWalletIds: [
    "1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369",
    "4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0",
  ],
});

----------------------------------------

TITLE: Triggering Reown AppKit Modal in React
DESCRIPTION: This snippet shows how to import and use the Reown AppKit in a React component to open a modal. It includes a button that triggers the modal when clicked.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_28

LANGUAGE: tsx
CODE:
/* highlight-delete-start */
- import { useWeb3Modal } from '@web3modal/wagmi/react'
/* highlight-delete-end */
/* highlight-add-start */
+ import { useAppKit } from '@reown/appkit/react'
/* highlight-add-end */

function HomePage() {
  const { open } = useAppKit()

  return <button onClick={open}>Connect</button>
}

----------------------------------------

TITLE: Implementing Solana Balance Fetch Function
DESCRIPTION: Function to fetch and display the balance of a Solana wallet. It creates a PublicKey from the user's address, queries the balance in LAMPORTS, and converts it to SOL for display.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
// function to get the balance
const handleGetBalance = async () => {
  const wallet = new PublicKey(address);
  const balance = await connection?.getBalance(wallet); // get the amount in LAMPORTS

  console.log(`${balance / LAMPORTS_PER_SOL} SOL`);
};

----------------------------------------

TITLE: Using useAppKitAccount with Namespaces for Multi-Chain Access
DESCRIPTION: Hook for accessing account data for specific blockchain namespaces in a multi-chain environment.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

const eip155Account = useAppKitAccount({ namespace: "eip155" }); // for EVM chains
const solanaAccount = useAppKitAccount({ namespace: "solana" });
const bip122Account = useAppKitAccount({ namespace: "bip122" }); // for bitcoin

----------------------------------------

TITLE: Rejecting Authentication Requests in Swift
DESCRIPTION: Code to reject an authentication request from a dApp. Used when the user does not wish to authenticate or when the request cannot be approved.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_20

LANGUAGE: swift
CODE:
try await Sign.instance.rejectSession(requestId: requestId)

----------------------------------------

TITLE: Subscribing to Pairing State in Swift
DESCRIPTION: Shows how to subscribe to the pairing state publisher to update the UI based on whether the wallet is awaiting a session proposal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
WalletKit.instance.pairingStatePublisher
    .receive(on: DispatchQueue.main)
    .sink { [weak self] isPairing in
    self?.showPairingLoading = isPairing
}.store(in: &disposeBag)

----------------------------------------

TITLE: Configuring SIWEConfig Object for AppKit
DESCRIPTION: A comprehensive example of configuring the SIWEConfig object with all required methods including nonce generation, message creation, verification, and session management.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
final _siweConfig = SIWEConfig(
  getNonce: () async {
    // The getNonce method functions as a safeguard
    // against spoofing, akin to a CSRF token.

    return await yourApi.getNonce();
  },
  getMessageParams: () async {
    // Parameters to create the SIWE message internally.
    // More info in https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-222.method

    return SIWEMessageArgs(
      domain: 'yourdomain.com',
      uri: 'https://yourdomain.com/login',
      statement: 'Please sign with your account',
      methods: ['personal_sign', 'eth_sendTransaction'],
    );
  },
  createMessage: (SIWECreateMessageArgs args) {
    // Method for generating an EIP-4361-compatible message.
    // You can use our provided formatMessage() method or implement your own

    return SIWEUtils.formatMessage(args);
  },
  verifyMessage: (SIWEVerifyMessageArgs args) async {
    // This function ensures the message is valid,
    // has not been tampered with, and has been appropriately
    // signed by the wallet address.

    try {
      final isValidMessage = await yourApi.verifyMessage(args.toJson());
      return isValidMessage;
    } catch (error) {
      // error validating message
      return false;
    }
  },
  getSession: () async {
    // Called after verifyMessage() succeeds
    // The backend session should store the associated address and chainId
    // and return it via the `getSession` method.

    try {
      final session = await yourApi.getSession();
      return SIWESession(address: session.address, chains: [session.chainId]);
    } catch (error) {
      // error getting session
      rethrow;
    }
  },
  onSignIn: (SIWESession session) {
    // Called after getSession() succeeds
  },
  signOut: () async {
    // Called when wallet disconnects if `signOutOnDisconnect == true` and/or when
    // `signOutOnAccountChange == true` and/or
    // `signOutOnNetworkChange == true`
    try {
      final success = await yourApi.signOut();
      return success;
    } catch (error) {
      // error signing out
      return false;
    }
  },
  onSignOut: () {
    // Called after signOut() succeeds
  },
  // enabled: true, // OPTIONAL. Enables One-Click Auth + SIWE logic, if `false`, regular session proposal will be used. (default `true`)
  // signOutOnDisconnect: true, // OPTIONAL (default `true`)
  // signOutOnAccountChange: true, // OPTIONAL (default `true`)
  // signOutOnNetworkChange: true, // OPTIONAL (default `true`)
);

----------------------------------------

TITLE: Basic createAppKit Function Signature in TypeScript
DESCRIPTION: The basic function signature for createAppKit showing the main parameters including adapters, projectId, networks, and other options.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
createAppKit({ adapters, projectId, networks, ...options });

----------------------------------------

TITLE: Configuring Supported Chains in AppKit
DESCRIPTION: Sets up supported blockchain networks for the application using both predefined chains from ChainConstants and custom Chain objects with detailed configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#2025-04-10_snippet_2

LANGUAGE: csharp
CODE:
await AppKit.InitializeAsync(new AppKitConfig
{
    supportedChains = new[]
    {
        ChainConstants.Chains.Ethereum,
        ChainConstants.Chains.Polygon,
        ChainConstants.Chains.Ronin,

        new Chain(ChainConstants.Namespaces.Evm,
            chainReference: "713715",
            name: "Sei Devnet",
            nativeCurrency: new Currency("Sei", "SEI", 18),
            blockExplorer: new BlockExplorer("Seitrace", "https://seitrace.com"),
            rpcUrl: "https://evm-rpc-arctic-1.sei-apis.com",
            isTestnet: true,
            imageUrl: $"https://imagedelivery.net/_aTEfDRm7z3tKgu9JhfeKA/692ed6ba-e569-459a-556a-776476829e00/md"
        )
    }
});

----------------------------------------

TITLE: Configuring All Wallets Button Visibility in ReOwn AppKit
DESCRIPTION: Controls the visibility of the 'All Wallets' button in the modal with options to show always, hide completely, or show only on mobile devices.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_25

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  allWallets: "ONLY_MOBILE",
});

----------------------------------------

TITLE: Retrieving Approved Chains in Reown AppKit (JavaScript)
DESCRIPTION: This snippet shows how to get the list of approved chains by the connected wallet using the Reown AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
_appKitModal.getApprovedChains();

----------------------------------------

TITLE: Implementing NetworkButton in Compose
DESCRIPTION: Shows how to add a NetworkButton component in Jetpack Compose, which allows users to select or view the current blockchain network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
import com.reown.appkit.ui.components.button.NetworkButton
import com.reown.appkit.ui.components.button.rememberAppKitState

YourAppScreen(navController: NavController) {
    val appKitState = rememberAppKitState(navController = navController)
    NetworkButton(state = appKitState)
}

----------------------------------------

TITLE: Initializing AppKit with SIWE Configuration in C#
DESCRIPTION: This code snippet shows how to initialize AppKit with a SIWE configuration. It includes setting up project ID, metadata, and assigning the SIWE configuration to enforce address verification.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/siwe.mdx#2025-04-10_snippet_1

LANGUAGE: csharp
CODE:
var appKitConfig = new AppKitConfig
{
    // Project ID from https://cloud.reown.com/
    projectId = "MY_PROJECT_ID",
    metadata = new Metadata(
        "App Name",
        "App Description",
        "https://reown.com",
        "https://raw.githubusercontent.com/reown-com/reown-dotnet/main/media/appkit-icon.png",
        new RedirectData
        {
            // Used by native wallets to redirect back to the app after approving requests
            Native = "my-app://"
        }
    ),
    // Assign the SIWE configuration created above. Can be null if SIWE is not used.
    siweConfig = siweConfig
};

----------------------------------------

TITLE: Accessing Network Data with useAppKitNetwork in Vue
DESCRIPTION: Shows how to use the useAppKitNetwork composable to access network data and methods.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
import { useAppKitNetwork } from "@reown/appkit/vue";

export default Component(){
  const networkData = useAppKitNetwork()
}

----------------------------------------

TITLE: Estimating Gas for Transactions with AppKit EVM Module
DESCRIPTION: Methods to estimate the gas required for transactions. Supports native token transfers and contract interactions, with both direct parameter passing and parameter objects.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_15

LANGUAGE: csharp
CODE:
// Estimate for native token transfer
BigInteger gasLimit = await AppKit.EVM.EstimateGasAsync(
    "0x123...", // recipient address
    1000000000000000000 // 1 ETH in wei
);

// Using parameters object for native transfer
var transferParams = new SendTransactionParams
{
    AddressTo = "0x123...",
    Value = 1000000000000000000, // 1 ETH in wei
    Data = "0x" // optional data
};
BigInteger gasLimit = await AppKit.EVM.EstimateGasAsync(transferParams);

// Estimate for contract interaction
string contractAbi = "[ /* Your contract ABI */ ]";
BigInteger gasLimit = await AppKit.EVM.EstimateGasAsync(
    "0x123...", // contract address
    contractAbi,
    "transfer", // method name
    0, // value in wei
    "0x456...", // method arguments
    1000
);

// Using parameters object for contract interaction
var contractGasParams = new WriteContractParams
{
    ContractAddress = "0x123...",
    ContractAbi = contractAbi,
    MethodName = "transfer",
    Value = 0, // optional value in wei
    Arguments = new object[] { "0x456...", 1000 }
};
BigInteger gasLimit = await AppKit.EVM.EstimateGasAsync(contractGasParams);

----------------------------------------

TITLE: Authentication Request Handling in Kotlin
DESCRIPTION: Demonstrates how to handle incoming authentication requests using SignClient.WalletDelegate.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_31

LANGUAGE: kotlin
CODE:
override val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)
  get() = { sessionAuthenticate, verifyContext ->
      // Triggered when wallet receives the session authenticate sent by a Dapp
      // Process the authentication request here
      // This involves displaying UI to the user
}

----------------------------------------

TITLE: Implementing AppKit with Compose Accompanist in Kotlin
DESCRIPTION: This snippet demonstrates how to set up AppKit using Compose Accompanist. It includes setting up a ModalBottomSheetLayout with a NavHost and integrating the appKitGraph.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
import androidx.compose.material.ExperimentalMaterialApi
import androidx.compose.material.ModalBottomSheetState
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.google.accompanist.navigation.material.BottomSheetNavigator
import com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi
import com.google.accompanist.navigation.material.ModalBottomSheetLayout
import com.google.accompanist.navigation.material.bottomSheet
import com.reown.appkit.ui.appKitGraph

setContent {
    val modalSheetState = rememberModalBottomSheetState(initialValue = ModalBottomSheetValue.Hidden, skipHalfExpanded = true)
    val bottomSheetNavigator = BottomSheetNavigator(modalSheetState)
    val navController = rememberNavController(bottomSheetNavigator)

    ModalBottomSheetLayout(bottomSheetNavigator = bottomSheetNavigator) {
        NavHost(
            navController = navController,
            startDestination = "home"
        ) {
            composable("home") {
                HomeScreen()
            }
            appKitGraph(navController)
        }
    }
}

----------------------------------------

TITLE: Implementing WalletKit Dependencies in App Gradle File
DESCRIPTION: Adds the required WalletKit dependencies to the app/build.gradle.kts file. These dependencies include the Android core library and the WalletKit package, which should be set to the desired release version.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/installation.mdx#2025-04-10_snippet_1

LANGUAGE: gradle
CODE:
implementation("com.reown:android-core:release_version")
implementation("com.reown:walletkit:release_version")

----------------------------------------

TITLE: Creating Advanced SIWE Configuration with Backend in C#
DESCRIPTION: This snippet demonstrates creating a more advanced SIWE configuration in C# for AppKit with backend integration. It includes methods for nonce generation, message creation, verification, session management, and sign-out handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/siwe.mdx#2025-04-10_snippet_2

LANGUAGE: csharp
CODE:
var siweConfig = new SiweConfig
{
    GetNonce = async () =>
    {
        // The getNonce method functions as a safeguard against spoofing,
        // akin to a CSRF token.
        return await yourApi.getNonce();
    },
    // The properties from `SiweMessageParams` be used to generate SIWE message.
    // There's no strict rules on what Domain and Uri parameters have to be
    // on native platforms.
    // In this example we use website domain and app URL scheme.
    GetMessageParams = () =>
    {
        // Returns parameters that are used to create the SIWE message internally.
        return new SiweMessageParams
        {
            Domain = "mywebsite.com",
            Uri = "my-app://",
            // The custom statement that will be prepended to the SIWE message.
            // Optional.
            Statement = "My custom statement."
        };
    },
    CreateMessage = (createMessageArgs) =>
    {
        // Generates an EIP-4361-compatible message.
        // You can use our provided SiweUtils.FormatMessage
        // method (default behaviour if delegate is null) or implement your own.
        return SiweUtils.FormatMessage(createMessageArgs);
    },
    VerifyMessage = async (verifyMessageArgs) =>
    {
        // Ensures the message is valid, has not been tampered with,
        // and has been appropriately signed by the wallet address.
        try {
            var json = JsonConvert.SerializeObject(verifyMessageArgs);
            var isValidMessage = await yourApi.verifyMessage(json);
            return isValidMessage;
        } catch (Exception) {
            return false;
        }
    },
    GetSession = async (getSessionArgs) =>
    {
        // Called after VerifyMessage() succeeds
        // The backend session should store the associated address and chainId
        // and return it via the `getSession` method.
        var session = await yourApi.getSession();
        return new SiweSession
        {
            EthAddress = session.address,
            EthChainIds = session.ChainIdArray,
        };
    },
    SignOut = async () =>
    {
        // Called when the wallet disconnects if SignOutOnWalletDisconnect is true,
        // and/or when the account changes if SignOutOnAccountChange is true,
        // and/or when the network changes if SignOutOnChainChange is true.
        await yourApi.signOut();
    },
    SignOutOnAccountChange = true,
    SignOutOnChainChange = true,
    SignOutOnWalletDisconnect = true,
};

// Called after SiweConfig.GetSession() succeeds
siweConfig.SignInSuccess += _ => Debug.Log("[Dapp] SIWE Sign In Success!");

// Called after SiweConfig.SignOut() succeeds
siweConfig.SignOutSuccess += () => Debug.Log("[Dapp] SIWE Sign Out Success!");

----------------------------------------

TITLE: Sending Notifications using cURL
DESCRIPTION: Example of sending notifications using cURL command with project ID and API secret authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "notification": {
      "type": "a1e53b95-18e5-4af8-9f03-9308ec87b687",
      "title": "The price of Ethereum has risen",
      "body": "The price of Ethereum has gone up 10%",
      "url": "https://app.example.com"
    },
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"
    ]
  }'

----------------------------------------

TITLE: Using useAppKitEvents with Ethers
DESCRIPTION: Demonstrates how to use the useAppKitEvents hook with Ethers integration to track modal events. The hook accepts an optional callback function that executes when an event is triggered.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
import { useAppKitEvents } from '@reown/appkit-ethers-react-native'

const event = useAppKitEvents(event => {
  // your code here
})

----------------------------------------

TITLE: Policy Metadata Configuration for Chain Support and Time Constraints
DESCRIPTION: Shows how to configure the metadata section of a policy to specify which blockchains are supported and set the time window when the policy is active. This is required for a valid and functioning policy.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/paymaster.mdx#2025-04-10_snippet_5

LANGUAGE: json
CODE:
{
  "metadata": {
    "chainIds": [
      1,        // Etheruem
      137,      // Polygon
      11155111  // Sepolia (Testnet)
    ],
    "startTime": "2024-10-23T15:50:00.000Z",
    "endTime": null
  }
}

----------------------------------------

TITLE: Emitting Account Change Event in WalletKit
DESCRIPTION: Example showing how to emit a session event to notify the dapp about account changes. The event updates the active account address that the dapp should switch to.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_11

LANGUAGE: javascript
CODE:
await walletKit.emitSessionEvent({
  topic,
  event: {
    name: "accountsChanged",
    data: ["0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb"],
  },
  chainId: "eip155:1",
});

----------------------------------------

TITLE: Reading Contract Data with Wagmi in JavaScript
DESCRIPTION: Example of using Wagmi actions to read data from a smart contract. This snippet demonstrates how to use the readContract function from @wagmi/core.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#2025-04-10_snippet_6

LANGUAGE: tsx
CODE:
import { readContract } from "@wagmi/core";
import { USDTAbi } from "../abi/USDTAbi";

const USDTAddress = "0x...";

const data = readContract(wagmiConfig, {
  address: USDTAddress,
  abi: USDTAbi,
  functionName: "totalSupply",
  args: [],
});

----------------------------------------

TITLE: Solana-Only Blockchain Support Configuration for AppKit Flutter
DESCRIPTION: Configuration example for ReownAppKitModal when only supporting Solana blockchain. This setup removes EVM network support while enabling Solana-compatible features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
// first remove support for EVM networks
ReownAppKitModalNetworks.removeSupportedNetworks('eip155');

final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect( // OPTIONAL
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: false,
    ),
  ),
  // With only Solana support configuration you can enable Email + Social Login
  featuresConfig: FeaturesConfig(
    email: true,
    socials: [...],
    showMainWallets: true|false,
  ),
);

----------------------------------------

TITLE: Implementing AppKit Button Component in HTML
DESCRIPTION: Basic HTML structure demonstrating the integration of the appkit-button web component. The component is added to the body of an HTML document without requiring any imports as web components are global HTML elements.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>HTML Example</title>
  </head>
  <body>
    <appkit-button />
    <script type="module" src="main.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Uninstalling Solana Wallet Adapter Packages
DESCRIPTION: Command to uninstall the Solana wallet adapter base packages that are no longer needed when migrating to AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm uninstall @solana/wallet-adapter-base @solana/wallet-adapter-react @solana/wallet-adapter-react-ui

----------------------------------------

TITLE: Triggering AppKit Modal in React
DESCRIPTION: This snippet shows how to trigger the AppKit modal in a React application. It imports the necessary hook and demonstrates how to use it within a component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_21

LANGUAGE: jsx
CODE:
import { useAppKit } from '@reown/appkit/react'

function HomePage() {
  const { open } = useAppKit()

  return <button onClick={open}>Connect</button>
}

----------------------------------------

TITLE: Triggering Reown AppKit Modal in JavaScript
DESCRIPTION: This snippet shows how to open the Reown AppKit modal using vanilla JavaScript. It adds a click event listener to a button that triggers the modal opening.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_30

LANGUAGE: js
CODE:
document.getElementById('my-button').addEventListener('click', () => {
    modal.open()
})

<button id="my-button">Connect Wallet</button>

----------------------------------------

TITLE: Configuring WalletKit with Link Mode via Universal Links in Swift
DESCRIPTION: This code demonstrates how to configure a WalletKit application with Link Mode enabled through Universal Links. It shows how to set up AppMetadata with proper redirect configuration and Link Mode activation, which is essential for low-latency communication between dApps and wallets.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/link-mode.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
let metadata = AppMetadata(
    ...
    redirect: try! AppMetadata.Redirect(
        native: "exampleApp://",
        universal: "https://example.com/example_wallet",
        linkMode: true
    )
)

WalletKit.configure(
    metadata: metadata,
    ...
)

----------------------------------------

TITLE: Defining Dapp Metadata Structure in TypeScript
DESCRIPTION: This TypeScript interface specifies the metadata structure for dapps that will be displayed during wallet approval requests. It includes fields for the application name, description, URL, and an array of icon URLs that wallets can use for visual identification.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/metadata.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
metadata: {
  name: string;
  description: string;
  url: string;
  icons: string[];
};

----------------------------------------

TITLE: Initializing WalletKit with Redirect Support in Kotlin
DESCRIPTION: Kotlin code for initializing the WalletKit SDK with a redirect URL. This setup enables the wallet to handle deep linking for receiving signing requests from DApps and redirecting users back to the DApp after completing actions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/mobile-linking.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
val redirect = "examplewallet://request" //should be unique for your wallet

val appMetaData = Core.Model.AppMetaData(
    name = "Wallet Name",
    description = "Wallet Description",
    url = "Wallet Url",
    icons = listOfIconUrlStrings,
    redirect = redirect
)

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = application, metaData = appMetaData)

val init = Wallet.Params.Init(coreClient = CoreClient)
WalletKit.initialize(init)

----------------------------------------

TITLE: Initializing WalletKit Client
DESCRIPTION: Creates and initializes a WalletKit instance with Core configuration and metadata about the application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
import { Core } from "@walletconnect/core";
import { WalletKit } from "@reown/walletkit";

const core = new Core({
  projectId: process.env.PROJECT_ID,
});

const walletKit = await WalletKit.init({
  core, // <- pass the shared `core` instance
  metadata: {
    name: "Demo React Native Wallet",
    description: "Demo RN Wallet to interface with Dapps",
    url: "www.walletconnect.com",
    icons: ["https://your_wallet_icon.png"],
    redirect: {
      native: "yourwalletscheme://",
    },
  },
});

----------------------------------------

TITLE: Rejecting Session Request in JavaScript
DESCRIPTION: Shows how to format a response object to reject a session request with an error code and message.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#2025-04-10_snippet_8

LANGUAGE: javascript
CODE:
const response = {
  id,
  jsonrpc: "2.0",
  error: {
    code: 5000,
    message: "User rejected.",
  },
};

----------------------------------------

TITLE: Approving a Session in TypeScript with WalletKit
DESCRIPTION: Demonstrates how to approve a session proposal using WalletKit, including error handling and UI updates.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
try {
    await walletKit.approveSession(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

----------------------------------------

TITLE: Creating Crypto Polyfill for React Native CLI
DESCRIPTION: JavaScript code for the index.js file that sets up crypto polyfills for React Native CLI projects. It implements the crypto.subtle.digest method using react-native-quick-crypto.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#2025-04-10_snippet_6

LANGUAGE: js
CODE:
import { AppRegistry } from "react-native";
import App from "./App";
import { name as appName } from "./app.json";
import crypto from "react-native-quick-crypto";

const polyfillDigest = async (algorithm, data) => {
  const algo = algorithm.replace("-", "").toLowerCase();
  const hash = crypto.createHash(algo);
  hash.update(data);
  return hash.digest();
};

globalThis.crypto = crypto;
globalThis.crypto.subtle = {
  digest: polyfillDigest,
};

AppRegistry.registerComponent(appName, () => App);

----------------------------------------

TITLE: Implementing AccountButton in XML Views
DESCRIPTION: Shows how to add an AccountButton in traditional Android XML layouts, with configuration for button type.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_8

LANGUAGE: xml
CODE:
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical">

        <com.reown.appkit.ui.components.button.views.AccountButton
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:account_button_type="NORMAL" || "MIXED"
        />
</LinearLayout>

----------------------------------------

TITLE: Selecting Modal Views with open Function
DESCRIPTION: Shows different ways to use the open function to display specific views in the AppKit modal. Options include account view, connect view with different blockchain namespaces (solana, bitcoin, ethereum).
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
open({ view: 'Account' })

// to connect and show multi wallets view
open({ view: 'Connect'})

// to connect and show only solana wallets
open({ view: 'Connect', namespace: 'solana' })

// to connect and show only bitcoin wallets
open({ view: 'Connect', namespace: 'bip122' })

// to connect and show only ethereum wallets
open({ view: 'Connect', namespace: 'eip155' })

----------------------------------------

TITLE: Creating an executeTransaction Request with JSON-RPC
DESCRIPTION: Example JSON-RPC request for the hedera_executeTransaction method, used to submit an already signed transaction to the Hedera network. The method requires a base64-encoded transaction list.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#2025-04-10_snippet_5

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "hedera_executeTransaction",
  "params": {
    "transactionList": "Co8BKowBCocBChoKDAjchKWmBhDW..."
  }
}

----------------------------------------

TITLE: Initializing WalletKit Client in C#
DESCRIPTION: Initializes the WalletKitClient with the Core instance and Metadata created earlier. This client provides methods for managing sessions and handling wallet connections.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_2

LANGUAGE: csharp
CODE:
var sdk = await WalletKitClient.Init(core, metadata, metadata.Name);

----------------------------------------

TITLE: Installing Reown WalletKit Package via NuGet in .NET
DESCRIPTION: This command adds the Reown.WalletKit package to a .NET project using the dotnet CLI. It installs the WalletKit client package, which is necessary for integrating WalletKit functionality into your project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/installation.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
dotnet add package Reown.WalletKit

----------------------------------------

TITLE: Checking and Managing Subscriptions with Reown SDK in TypeScript
DESCRIPTION: This code snippet demonstrates various subscription-related operations using the Reown SDK client. It includes checking subscription status, subscribing to dapps, unsubscribing, and retrieving subscription information. The snippet also shows how to use these functions with different accounts and dapps.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/javascript.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
// check if current account is subscribed to current dapp
const isSubscribed = client.isSubscribedToDapp()

// watch if current account is subscribed to current dapp
client.watchIsSubscribed(isSubbed => console.log({ isSubbed }))

// subscribe to current dapp with current account
await client.subscribeToDapp()

// subscribe to same dapp with different account
await client.subscribeToDapp(differentAccount)

// subscribe to different dapp with current account
await client.subscribeToDapp(undefined, differentDomain)

// subscribe to different dapp with different account
await client.subscribeToDapp(differentAccount, differentDomain)

// unsubscribe from current dapp with current account
await client.unsubscribeFromDapp()

// get current account's subscription to current dapp
const subscription = client.getSubscription()

// watch current account's subscription to current dapp
client.watchSubscription(subscription => console.log({ subscription }))

// get current account's subscriptions
const subscriptions = client.getSubscriptions()

// watch current account's subscriptions
client.watchSubscriptions(subscriptions => console.log({ subscriptions }))

----------------------------------------

TITLE: Disabling Network Switching in ReOwn AppKit
DESCRIPTION: Disables the network switching functionality in the modal which is enabled by default.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_14

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  enableNetworkSwitch: false,
});

----------------------------------------

TITLE: Fetching Error State in TypeScript
DESCRIPTION: Retrieves any error that occurred during wallet connection using the getError method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
const error = modal.getError();

----------------------------------------

TITLE: Registering Identity Key as a Wallet
DESCRIPTION: Code showing how to register an identity key with global scope as a wallet, allowing notifications to be sent and received across all domains using WalletConnect identity.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
const account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`
const domain =  'app.mydomain.com', // pass the domain (i.e. the hostname) where your dapp is hosted.
const allApps =  true // The user will be prompted to authorize this wallet to send and receive messages on their behalf for ALL domains using their WalletConnect identity.

// No need to register and sign message if already registered.
if (notifyClient.isRegistered({ account, domain, allApps })) return;

const {registerParams, message}  = notifyClient.prepareRegistration({
  account,
  domain,
  allApps
});

const signature = await ethersWallet.signMessage(message);

await notifyClient.register({
  registerParams,
  signature,
})

----------------------------------------

TITLE: Handling Session Proposal Expiry Events
DESCRIPTION: Event handlers for managing session proposal expiration across different platforms. Session proposals expire after 5 minutes and require UI updates.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_12

LANGUAGE: typescript
CODE:
walletKit.on("proposal_expire", (event) => {
    // proposal expired and any modal displaying it should be removed
    const { id } = event;
});

LANGUAGE: swift
CODE:
WalletKit.instance.sessionProposalExpirationPublisher.sink { _ in
    // let user know that session proposal has expired, update UI
}.store(in: &publishers)

LANGUAGE: kotlin
CODE:
val walletDelegate = object : WalletKit.WalletDelegate {
  override fun onProposalExpired(proposal: Wallet.Model.ExpiredProposal) {
          // Here this event is triggered when a proposal expires - update your UI
  }
  // ...other callbacks
}
WalletKit.setWalletDelegate(walletDelegate)

----------------------------------------

TITLE: Using Subscription Hooks and Functions in TypeScript
DESCRIPTION: This snippet demonstrates how to use various hooks and functions for managing subscriptions in ReOwn. It includes examples of subscribing, unsubscribing, getting subscription information, and checking subscription status for different accounts and dapps.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/react.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const { subscribe, isLoading: isSubscribing } = useSubscribe()
const { unsubscribe, isLoading: isUnsubscribing } = useUnsubscribe()

// get subscription of current user to current dapp
const { data: subscription, getSubscription } = useSubscription()

// getSubscription can be used to get information about different dapps programmatically
const subscriptionToSameDappFromDifferentAccount = getSubscription(differentAccount)
const subscriptionToDifferentDappFromSameAccount = getSubscription(undefined, differentDappDomain)
const subscriptionToDifferentDappFromDifferentAccount = getSubscription(
  differentAccount,
  differentDappDomain
)

// subscribe to current dapp from current user
subscribe()
// subscribe to current dapp from different user
subscribe(differentAccount)
// subscribe to different dapp from current user
subscribe(undefined, differentDappDomain)
// subscribe to different dapp from different user
subscribe(differentAccount, differentDappDomain)

// unsubscribe from current dapp
unsubscribe()

// get all subscriptions for current account
const subscriptions = useAllSubscriptions()

const isSubscribed = Boolean(subscription)

----------------------------------------

TITLE: Handling Coinbase Wallet Deep Links in AppDelegate (Swift)
DESCRIPTION: This Swift code demonstrates how to handle deep links for Coinbase Wallet in the AppDelegate.swift file. It uses the CoinbaseWalletSDK and calls AppKit's handleDeeplink method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#2025-04-10_snippet_5

LANGUAGE: swift
CODE:
import CoinbaseWalletSDK

override func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
    AppKit.instance.handleDeeplink(url)
}

----------------------------------------

TITLE: Adding Web3Modal Solana Imports
DESCRIPTION: New imports to add for AppKit integration in the App.tsx file, including Web3Modal hooks and Solana chain configurations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#2025-04-10_snippet_3

LANGUAGE: tsx
CODE:
+ import { createWeb3Modal, defaultSolanaConfig, useWeb3ModalAccount, useWeb3ModalProvider } from '@web3modal/solana/react'
+ import { solana, solanaTestnet, solanaDevnet } from '@web3modal/solana/chains'

----------------------------------------

TITLE: Implementing SendCalls Hook in React Component
DESCRIPTION: Sets up the useSendCalls hook with success and error callbacks, displaying toast notifications upon transaction completion or failure. This hook is the core mechanism for sending sponsored transactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
// Inside the Component

const { sendCalls } = useSendCalls({
  mutation: {
    onSuccess: hash => {
      setLoading(false)
      toast({
        title: 'SendCalls Success',
        description: hash,
        type: 'success'
      })
    },
    onError: () => {
      setLoading(false)
      toast({
        title: 'SendCalls Error',
        description: 'Failed to send calls',
        type: 'error'
      })
    }
  }
})

----------------------------------------

TITLE: Registering AppKit in Activity for Coinbase Wallet Integration
DESCRIPTION: This snippet demonstrates how to register the WalletConnect AppKit in an Activity's onCreate method to receive responses from the Coinbase wallet application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#2025-04-10_snippet_4

LANGUAGE: kotlin
CODE:
    fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        AppKit.register(this)
        // Your content
    }

----------------------------------------

TITLE: Flutter WalletConnectModalService Direct Initialization
DESCRIPTION: Direct initialization of WalletConnectModalService in Flutter by providing projectId and metadata. This is the alternative to providing a pre-configured Web3App instance.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#2025-04-10_snippet_12

LANGUAGE: javascript
CODE:
WalletConnectModalService service = WalletConnectModalService(
  projectId: projectId,
  metadata: const PairingMetadata(
    name: 'Flutter Dapp Example',
    description: 'Flutter Dapp Example',
    url: 'https://www.walletconnect.com/',
    icons: ['https://walletconnect.com/walletconnect-logo.png'],
    redirect: Redirect(
      native: 'flutterdapp://',
      universal: 'https://www.walletconnect.com',
    ),
  ),
);

----------------------------------------

TITLE: Enabling Authentication Features in AppKit
DESCRIPTION: Code snippet showing how to enable specific authentication features in the ReOwn AppKit configuration. This includes email authentication, social login options, and wallet display settings.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/email.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
createAppKit({
  projectId,
  wagmiConfig,
  // Add the following code line
  features: {
    email: true, // default to true
    socials: ["x", "discord", "apple"], // default value
    emailShowWallets: true, // default to true
  },
});

----------------------------------------

TITLE: Installing Native Modules for iOS
DESCRIPTION: Uses CocoaPods to install the native modules required for the iOS version of the application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
npx pod-install

----------------------------------------

TITLE: Verifying Message Signatures with AppKit EVM Module
DESCRIPTION: Methods to verify if a message was signed by a specific address. Supports both direct parameter passing and using a VerifyMessageSignatureParams object.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_9

LANGUAGE: csharp
CODE:
// Basic verification
bool isValid = await AppKit.EVM.VerifyMessageSignatureAsync(
    "0x123...", // address
    "Hello World", // original message
    "0xabc..." // signature
);

// Using parameters object
var verifyMessageParams = new VerifyMessageSignatureParams
{
    Address = "0x123...",
    Message = "Hello World",
    Signature = "0xabc..."
};
bool isValid = await AppKit.EVM.VerifyMessageSignatureAsync(verifyMessageParams);

----------------------------------------

TITLE: Configuring WalletConnect Connection Parameters
DESCRIPTION: Sets up connection parameters including required namespaces, methods, chains, and events for Polkadot ecosystem.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
const params = {
  requiredNamespaces: {
    polkadot: {
      methods: ["polkadot_signTransaction", "polkadot_signMessage"],
      chains: [
        "polkadot:91b171bb158e2d3848fa23a9f1c25182", // polkadot
        "polkadot:afdc188f45c71dacbaa0b62e16a91f72", // hydradx
        "polkadot:0f62b701fb12d02237a33b84818c11f6", // turing network
      ],
      events: ['chainChanged", "accountsChanged'],
    },
  },
};

const { uri, approval } = await provider.client.connect(params);

----------------------------------------

TITLE: Handling SIWE Authentication Fallback in Kotlin
DESCRIPTION: This snippet shows how to handle the fallback scenario when a wallet doesn't support One-Click Auth. It processes the SIWE authentication response, including the signed message or potential errors.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
override fun onSIWEAuthenticationResponse(response: Modal.Model.SIWEAuthenticateResponse) {
    if (response is Modal.Model.SIWEAuthenticateResponse.Result) {
        // message and signature
    } else {
        //error
    }
}

----------------------------------------

TITLE: Using useAppKitState Hook for Modal State
DESCRIPTION: Hook for accessing the current state of the modal including open status and selected network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
import { useAppKitState } from "@reown/appkit/react";

const { open, selectedNetworkId } = useAppKitState();

----------------------------------------

TITLE: Configuring Solana Adapter with Custom Wallet Connectors
DESCRIPTION: This code shows how to set up the Reown AppKit with a Solana adapter that includes custom wallet connections for Phantom and Solflare. It configures support for multiple Solana networks and initializes the AppKit with analytics features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/custom-connectors.mdx#2025-04-10_snippet_2

LANGUAGE: ts
CODE:
import { createAppKit } from "@reown/appkit";
import { SolanaAdapter } from "@reown/appkit-adapter-solana";
import { solana, solanaTestnet, solanaDevnet } from "@reown/appkit/networks";

import {
  SolflareWalletAdapter,
  PhantomWalletAdapter,
} from "@solana/wallet-adapter-wallets";

// 0. Set up Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],
});

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Set up the metadata
const metadata = {
  //...
};

// 3. Create modal
const modal = createAppkit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true,
  },
});

----------------------------------------

TITLE: Opening ReOwn Modal Views with TypeScript
DESCRIPTION: This snippet shows how to open different views of the ReOwn modal using the 'open' function. It demonstrates opening the Account view, Connect view for all wallets, and Connect view for specific blockchain namespaces (Solana, Bitcoin, Ethereum).
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/core/open.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
open({ view: "Account" });

// to connect and show multi wallets view
open({ view: "Connect" });

// to connect and show only solana wallets
open({ view: "Connect", namespace: "solana" });

// to connect and show only bitcoin wallets
open({ view: "Connect", namespace: "bip122" });

// to connect and show only ethereum wallets
open({ view: "Connect", namespace: "eip155" });

----------------------------------------

TITLE: Installing Legacy SIWE Dependencies with Package Managers
DESCRIPTION: Commands for installing the required dependencies for legacy SIWE integration using various package managers. This includes @reown/appkit-siwe and siwe packages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwe siwe

LANGUAGE: bash
CODE:
yarn add @reown/appkit-siwe siwe

LANGUAGE: bash
CODE:
bun a @reown/appkit-siwe siwe

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-siwe siwe

----------------------------------------

TITLE: Adding Polkadot to Supported Networks in AppKit Flutter
DESCRIPTION: Code snippet demonstrating how to add Polkadot blockchain to the list of supported networks in ReownAppKitModalNetworks, including both mainnet and testnet configurations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
// Add more non-EVM nor Solana networks, such as Polkadot
ReownAppKitModalNetworks.addSupportedNetworks('polkadot', [
  ReownAppKitModalNetworkInfo(
    name: 'Polkadot',
    chainId: '91b171bb158e2d3848fa23a9f1c25182',
    chainIcon: 'https://cryptologos.cc/logos/polkadot-new-dot-logo.png',
    currency: 'DOT',
    rpcUrl: 'https://rpc.polkadot.io',
    explorerUrl: 'https://polkadot.subscan.io',
  ),
  ReownAppKitModalNetworkInfo(
    name: 'Westend',
    chainId: 'e143f23803ac50e8f6f8e62695d1ce9e',
    currency: 'DOT',
    rpcUrl: 'https://westend-rpc.polkadot.io',
    explorerUrl: 'https://westend.subscan.io',
    isTestNetwork: true,
  ),
]);

----------------------------------------

TITLE: Static Wallet Account Addresses Example
DESCRIPTION: Request and response example for the getAccountAddresses method in a static wallet scenario. Returns a single address that's used for both receiving payments and change, with its derivation path.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/litecoin-rpc.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "getAccountAddresses",
    "params": {
        "account": "ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0"
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": [
        {
            "address": "ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0",
            "path": "m/84'/2'/0'/0/0"
        }
    ]
}

----------------------------------------

TITLE: Updating Notification Types for an Existing Subscription
DESCRIPTION: Code to modify which notification types are enabled for an existing subscription by updating its scope.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_8

LANGUAGE: javascript
CODE:
// `topic` - subscription topic of the subscription that should be updated.
// `scope` - an array of notification types that should be enabled going forward. The current scopes can be found under `subscription.scope`.
await notifyClient.update({
  topic,
  scope: ["alerts"],
});
// -> Success/Failure will be received via the `notify_update` event registered previously.
// -> Updated subscription will be emitted via the `notify_subscriptions_changed` watcher event.

// get notification types by accessing `scope` member of a dapp's subscription
const notificationTypes = notifyClient
  .getActiveSubscriptions({ account })
  .filter((subscription) => subscription.topic === topic).scope;

----------------------------------------

TITLE: Complex JSON Schema for Paymaster Policy
DESCRIPTION: This example illustrates a more complex JSON schema for a Paymaster policy. It shows how to chain multiple conditions using 'ands' and 'ors' to create sophisticated policy logic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/paymaster.mdx#2025-04-10_snippet_2

LANGUAGE: json
CODE:
{
  "params": {
    "key": "callData",
    "op": "callDataToEquals",
    "value": "0xa123cd918..."
  },
  "ands": [
    {
      "params": {
        "key": "callData",
        "op": "callDataMethodEquals",
        "value": "methodFoo"
      },
      "ors": [
        {
          "params": {
            "key": "callData",
            "op": "callDataMethodEquals",
            "value": "methodBar"
          }
        },
        {
          "params": {
            "key": "callData",
            "op": "callDataMethodEquals",
            "value": "methodBaz"
          }
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Extending WalletConnect Session Lifetime in C#
DESCRIPTION: Shows how to extend a session's expiry time to keep it active.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_18

LANGUAGE: csharp
CODE:
var request = await walletClient.Extend(sessionTopic);
await request.Acknowledged();

----------------------------------------

TITLE: Subscription Type Definition in TypeScript
DESCRIPTION: This snippet defines the structure of a subscription object in ReOwn. It includes properties such as topic, account, relay, metadata, scope, expiry, symkey, and unreadCount.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/react.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
{
  topic: string
  account: string
  relay: relayertypes.protocoloptions
  metadata: Metadata
  scope: ScopeMap
  expiry: number
  symkey: string
  unreadCount: number
}

----------------------------------------

TITLE: iOS Wallet Pairing Implementation
DESCRIPTION: Shows how to implement wallet-side pairing in iOS by processing QR code or deep link URI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_11

LANGUAGE: swift
CODE:
let uri WalletConnectURI(string: <String>)
try! await Pair.instance.pair(uri: uri)

----------------------------------------

TITLE: Installing Solana Adapter with npm
DESCRIPTION: npm command to install AppKit with Solana adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_13

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Configuring and Switching Networks with AppKit in React
DESCRIPTION: Shows how to initialize the AppKit modal with multiple networks and then switch to a different network. Uses the createAppKit function to set up supported networks and the switchNetwork method to change the active network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit/react";
import { mainnet, arbitrum, polygon } from "@reown/appkit/networks";

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  },
});

modal.switchNetwork(polygon);

----------------------------------------

TITLE: Retrieving Native Token Balance in AppKit
DESCRIPTION: Method to get the native token balance for a specific blockchain address using the EVM module.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_6

LANGUAGE: csharp
CODE:
BigInteger balance = await AppKit.EVM.GetBalanceAsync("0x123...");

----------------------------------------

TITLE: Switching Networks with useAppKitNetwork in Vue
DESCRIPTION: Demonstrates how to use the switchNetwork function to change the current blockchain network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
import { polygon } from '@reown/appkit/networks'

...

networkData.switchNetwork(polygon)

----------------------------------------

TITLE: Installing WalletConnect Core via Git URL
DESCRIPTION: Git URL for installing WalletConnect Unity Core package via Package Manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_14

LANGUAGE: plaintext
CODE:
https://github.com/WalletConnect/WalletConnectUnity.git?path=Packages/com.walletconnect.core

----------------------------------------

TITLE: Installing AppKit and Uninstalling RainbowKit
DESCRIPTION: Commands for installing AppKit and wagmi adapter packages while removing RainbowKit using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall @rainbow-me/rainbowkit

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-wagmi&& yarn remove @rainbow-me/rainbowkit

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall @rainbow-me/rainbowkit

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-wagmi&& pnpm remove @rainbow-me/rainbowkit

----------------------------------------

TITLE: Registering Accounts with Web3Inbox using wagmi
DESCRIPTION: This snippet demonstrates the complete flow for registering an account with Web3Inbox. It uses hooks from the wagmi library to check registration status, prepare registration parameters, sign messages, and complete the registration process. Error handling is included for potential registration failures.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/registering-accounts/react.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { useSignMessage } from '@wagmi'
const { signMessageAsync } = useSignMessage()

const { isRegistered } = useW3iAccount('eip155:1:0x9A...')

const { prepareRegistration } = usePrepareRegistration()
const { register, isLoading: isRegistering } = useRegister()

const handleRegistration = async () => {
  try {
    const { message, registerParams } = await prepareRegistration()
    const signature = await signMessageAsync({ message: message })
    await register({ registerParams, signature })
  } catch (registerIdentityError: any) {
    console.error(registerIdentityError)
  }
}

----------------------------------------

TITLE: React Native ProjectId Configuration
DESCRIPTION: Defines the projectId parameter in React Native which is required to obtain wallet and chain logos, WalletConnect RPC support, and compatibility with v2 wallets.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#2025-04-10_snippet_1

LANGUAGE: ts
CODE:
projectId: string;

----------------------------------------

TITLE: Implementing AppKit Notifications in React
DESCRIPTION: This example demonstrates how to use AppKit Notifications to subscribe to notifications and receive them in a React application. It includes setting up the Web3Modal provider, connecting a wallet, and managing notification subscriptions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/usage.mdx#2025-04-10_snippet_1

LANGUAGE: jsx
CODE:
import { useManageSubscription, useSubscription, useW3iAccount } from '@web3inbox/react-sdk'
import { useWeb3Modal } from '@web3modal/react'
import { useEffect, useState } from 'react'

export function Component() {
  const { address } = useAccount()
  const { open } = useWeb3Modal()
  const { account, setAccount, isRegistered, isRegistering, register } = useW3iAccount()
  const { subscribe, isSubscribing } = useManageSubscription()
  const { subscription } = useSubscription()

  const [isReady, setIsReady] = useState(false)

  useEffect(() => {
    if (!address) return
    if (!account) {
      setAccount(`eip155:1:${address}`)
      return
    }
    setIsReady(isRegistered && subscription)
  }, [address, account, isRegistered, subscription])

  const handleRegistration = async () => {
    if (!account) return
    try {
      await register()
    } catch (registerIdentityError) {
      console.error({ registerIdentityError })
    }
  }

  const handleSubscribe = async () => {
    if (!account) return
    await subscribe()
  }

  if (!address) {
    return <button onClick={() => open()}>Connect Wallet</button>
  }

  if (!isRegistered) {
    return (
      <button onClick={handleRegistration} disabled={isRegistering}>
        {isRegistering ? 'Signing Up...' : 'Sign Up for Notifications'}
      </button>
    )
  }

  if (!subscription) {
    return (
      <button onClick={handleSubscribe} disabled={isSubscribing}>
        {isSubscribing ? 'Subscribing...' : 'Subscribe to Notifications'}
      </button>
    )
  }

  if (isReady) {
    return <div>Ready to receive notifications</div>
  }

  return null
}

----------------------------------------

TITLE: Signing a Casper Deploy Transaction Request with WalletConnect
DESCRIPTION: Example JSON-RPC request for the casper_sign_deploy method, which asks the user to approve a transaction signature. The request includes the deploy object with header details, payment information, session data for a transfer operation, and the public key address.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/casper-rpc.mdx#2025-04-10_snippet_0

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "casper_sign_deploy",
  "params": {
    "deploy": {
      "hash": "a3301c9da7f0183f1c8904bed7fc72cf563454509462cada378b3f42a92f7b4f",
      "header": {
        "account": "02032E126170e5f28443775330B5B5Fe29dCE1a1dD3269910349525935ccbaf352EA",
        "timestamp": "2024-02-01T08:41:59.207Z",
        "ttl": "30m",
        "gas_price": 1,
        "body_hash": "188d88eedd3dc64b4ac3f8ca9b74be2b2fa588e2d537875d22b7e1a68658d19e",
        "dependencies": [],
        "chain_name": "casper-test"
      },
      "payment": {
        "ModuleBytes": {
          "module_bytes": "",
          "args": [["amount", { "bytes": "0400e1f505", "cl_type": "U512" }]]
        }
      },
      "session": {
        "Transfer": {
          "args": [
            ["amount", { "bytes": "0500f2052a01", "cl_type": "U512" }],
            [
              "target",
              {
                "bytes": "0202e99759649fa63a72c685b72e696b30c90f1deabb02d0d9b1de45eb371a73e5bb",
                "cl_type": "PublicKey"
              }
            ],
            [
              "id",
              { "bytes": "01d204000000000000", "cl_type": { "Option": "U64" } }
            ]
          ]
        }
      },
      "approvals": []
    },
    "address": "casper:casper-test:02032E126170e5f28443775330B5B5Fe29dCE1a1dD3269910349525935ccbaf352EA"
  }
}

----------------------------------------

TITLE: Implementing AppKit UI with Custom Hook Approach
DESCRIPTION: This example demonstrates how to use the useAppKit hook to create a custom trigger for the AppKit modal. This approach offers more flexibility for customizing the connection UI in your application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/implementation.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { Pressable, Text } from "react-native";
import { useAppKit } from "@reown/appkit-wagmi-react-native";

export default function ConnectView() {
  const { open } = useAppKit();

  return (
    <>
      <Pressable onClick={() => open()}>
        <Text>Open Connect Modal</Text>
      </Pressable>
    </>
  );
}

----------------------------------------

TITLE: Extending WalletConnect Session in JavaScript
DESCRIPTION: Demonstrates how to extend the duration of an existing session using the extendSession method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#2025-04-10_snippet_10

LANGUAGE: javascript
CODE:
await walletKit.extendSession({ topic });

----------------------------------------

TITLE: Configuring ABI References in Policy Static Properties
DESCRIPTION: Demonstrates how to store contract ABIs in policyStaticProps and reference them in metadata for callData method validation. This pattern allows policies to decode and validate smart contract method calls.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/paymaster.mdx#2025-04-10_snippet_3

LANGUAGE: json
CODE:
  "policyStaticProps": {
    "contract1": {
      "abi": [...Contract ABI goes here]
    }
  }
  "params": {
    "key": "callData",
    "op": "callDataMethodEquals",
    "value": "methodBaz"
  },
  {
    "metadata": {
      "contractAbi": "<contract1.abi>"
    }
  }

----------------------------------------

TITLE: Unsubscribing from Dapp Notifications in Swift
DESCRIPTION: Allows a user to opt-out of receiving notifications from a specific dapp by unsubscribing from it using the subscription's topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#2025-04-10_snippet_7

LANGUAGE: swift
CODE:
try await Notify.instance.deleteSubscription(topic: String)

----------------------------------------

TITLE: Implementing Custom RPC URLs in AppKit Configuration in TypeScript
DESCRIPTION: Example of configuring AppKit with custom RPC URLs for Ethereum and Polygon networks. This allows using your own RPC endpoints instead of the default ones provided by AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_32

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  customRpcUrls: {
    'eip155:1': [
      {
        url: 'https://your-custom-mainnet-url.com',
        config: {
          // Optional HTTP transport configuration
        }
      }
    ],
    'eip155:137': [
      {
        url: 'https://your-custom-polygon-url.com'
      }
    ]
  }
})

----------------------------------------

TITLE: Removing Solana Networks from AppKit Flutter Support
DESCRIPTION: Snippet demonstrating how to remove Solana networks from the supported networks list when you don't want to support this blockchain in your application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
ReownAppKitModalNetworks.removeSupportedNetworks('solana');
// The same applies for other namespaces

----------------------------------------

TITLE: Opening AppKit using NavController with Kotlin DSL
DESCRIPTION: This snippet demonstrates how to open AppKit using a NavController in a Kotlin DSL context. It includes options for network selection and error handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#2025-04-10_snippet_6

LANGUAGE: kotlin
CODE:
import androidx.navigation.fragment.findNavController
import com.reown.appkit.ui.openAppKit

findNavController().openAppKit(
    shouldOpenChooseNetwork = true | false
    onError = {  }
)

----------------------------------------

TITLE: Implementing AppKit using Kotlin DSL for Navigation
DESCRIPTION: This snippet shows how to set up AppKit using Kotlin DSL for navigation. It creates a navigation graph that includes the AppKit graph.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#2025-04-10_snippet_5

LANGUAGE: kotlin
CODE:
import androidx.navigation.createGraph
import androidx.navigation.fragment.fragment
import com.reown.appkit.ui.appKitGraph

navController.graph = navController.createGraph("Home") {
    fragment<HomeFragment>("Home")
    appKit()
}

----------------------------------------

TITLE: Switching Networks with AppKit in React
DESCRIPTION: This snippet demonstrates how to create an AppKit instance with specific networks and switch to a different network. It uses the createAppKit function to initialize the AppKit with adapters, networks, and features, then calls switchNetwork to change to the Polygon network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit/react";
import { mainnet, arbitrum, polygon } from "@reown/appkit/networks";

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  },
});

modal.switchNetwork(polygon);

----------------------------------------

TITLE: Updating Notification Types on an Existing Subscription
DESCRIPTION: Code for updating the notification types (scope) that should be enabled for an existing subscription.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_40

LANGUAGE: javascript
CODE:
// `topic` - subscription topic of the subscription that should be updated.
// `scope` - an array of notification types that should be enabled going forward. The current scopes can be found under `subscription.scope`.
await notifyClient.update({
  topic,
  scope: ["alerts"],
});

// -> Success/Failure will be received via the `notify_update` event registered previously.
// -> Updated subscription will be emitted via the `notify_subscriptions_changed` watcher event.

// get notification types by accessing `scope` member of a dapp's subscription
const notificationTypes = notifyClient
  .getActiveSubscriptions({ account })
  .filter((subscription) => subscription.topic === topic).scope;

----------------------------------------

TITLE: Defining Transaction Receipt Request Handler in C#
DESCRIPTION: Defines a request class for handling eth_getTransactionReceipt RPC calls with request options for timeout and priority.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_13

LANGUAGE: csharp
CODE:
[RpcMethod("eth_getTransactionReceipt"), RpcRequestOptions(Clock.ONE_MINUTE, 99994)]
public class EthGetTransactionReceipt : List<string>
{
    public EthGetTransactionReceipt(params string[] hashes) : base(hashes)
    {
    }

    // needed for proper json deserialization
    public EthGetTransactionReceipt()
    {
    }
}

----------------------------------------

TITLE: Creating Notify Subscription in iOS
DESCRIPTION: This function creates a Notify subscription for a specific dapp and account. It requires the dapp's metadata, the user's account, and a signing callback for authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_18

LANGUAGE: swift
CODE:
public func subscribe(metadata: AppMetadata, account: Account, onSign: @escaping SigningCallback) async throws {

----------------------------------------

TITLE: Example of WalletKit Error Events in JSON
DESCRIPTION: Illustrates the structure of error events stored by WalletKit for telemetry purposes, including event IDs, timestamps, and error types with associated properties.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_3

LANGUAGE: json
CODE:
[
  {
    "eventId": "69e53f11-fd4b-4efc-8d36-1f60a9ac8207",
    "bundleId": "com.wallet.example",
    "timestamp": 1689611327943,
    "props": {
      "event": "ERROR",
      "type": "pairing_already_exists",
      "properties": {
        "topic": "topic1",
        "trace": [
          "pairing_started",
          "pairing_uri_validation_success",
          "pairing_uri_not_expired",
          "existing_pairing",
          "pairing_not_expired",
          "pairing_not_expired"
        ]
      }
    }
  },
  {
    "eventId": "69e53f11-fd4b-4efc-8d36-2321312fds",
    "bundleId": "com.wallet.example",
    "timestamp": 16896113234323,
    "props": {
      "event": "ERROR",
      "type": "session_approve_namespace_validation_failure",
      "properties": {
        "topic": "topic2",
        "trace": ["session_approve_started", "proposal_not_expired"]
      }
    }
  }
]

----------------------------------------

TITLE: Implementing the Execute Method for Chain Abstraction in Kotlin
DESCRIPTION: This method executes the chain abstraction operation by broadcasting the bridging and initial transactions. It takes signed transactions prepared from the previous step and returns the result of the operation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/early-access/chain-abstraction.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
@ChainAbstractionExperimentalApi
fun execute(
  prepareAvailable: Wallet.Model.PrepareSuccess.Available,
  prepareSignedTxs: List<String>,
  initSignedTx: String,
  onSuccess: (Wallet.Model.ExecuteSuccess) -> Unit,
  onError: (Wallet.Model.Error) -> Unit
)

----------------------------------------

TITLE: Configuring Manual Socket Connection Type for iOS Relay Client
DESCRIPTION: Configuration for manual websocket connection management, allowing developers to control when connections are established and closed rather than relying on the SDK's automatic lifecycle management.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/relay.mdx#2025-04-10_snippet_3

LANGUAGE: swift
CODE:
Networking.configure(projectId: <String>, socketFactory: SocketFactory(), socketConnectionType: .manual)

----------------------------------------

TITLE: Error Events Telemetry Data Format in JSON
DESCRIPTION: This example shows the format of error events collected by the telemetry system. It includes event IDs, bundle IDs, timestamps, and properties related to errors encountered during connection flows, such as pairing and session approval issues.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_1

LANGUAGE: json
CODE:
[
  {
    "eventId": "69e53f11-fd4b-4efc-8d36-1f60a9ac8207",
    "bundleId": "com.wallet.example",
    "timestamp": 1689611327943,
    "props": {
      "event": "ERROR",
      "type": "pairing_already_exists",
      "properties": {
        "topic": "topic1",
        "trace": [
          "pairing_started",
          "pairing_uri_validation_success",
          "pairing_uri_not_expired",
          "existing_pairing",
          "pairing_not_expired",
          "pairing_not_expired"
        ]
      }
    }
  },
  {
    "eventId": "69e53f11-fd4b-4efc-8d36-2321312fds",
    "bundleId": "com.wallet.example",
    "timestamp": 16896113234323,
    "props": {
      "event": "ERROR",
      "type": "session_approve_namespace_validation_failure",
      "properties": {
        "topic": "topic2",
        "trace": ["session_approve_started", "proposal_not_expired"]
      }
    }
  }
]

----------------------------------------

TITLE: Disconnecting Wallet in AppKit Modal
DESCRIPTION: Code snippet showing how to disconnect from a connected wallet using the AppKit modal adapter's connection controller client.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
modal.adapter?.connectionControllerClient?.disconnect();

----------------------------------------

TITLE: Building Authentication Objects in Swift
DESCRIPTION: Code to create authentication objects required for approving authentication requests. Involves creating payloads, formatting messages, and signing them for each supported blockchain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_18

LANGUAGE: swift
CODE:
func buildAuthObjects(request: AuthenticationRequest, account: Account, privateKey: String) throws -> [AuthObject] {
    let requestedChains = Set(request.payload.chains.compactMap { Blockchain($0) })
    let supportedChains: Set<Blockchain> = [Blockchain("eip155:1")!, Blockchain("eip155:137")!, Blockchain("eip155:69")!]
    let commonChains = requestedChains.intersection(supportedChains)
    let supportedMethods = ["personal_sign", "eth_sendTransaction"]

    var authObjects = [AuthObject]()
    for chain in commonChains {
        let accountForChain = Account(blockchain: chain, address: account.address)!
        let supportedAuthPayload = try Sign.instance.buildAuthPayload(
            payload: request.payload,
            supportedEVMChains: Array(commonChains),
            supportedMethods: supportedMethods
        )
        let formattedMessage = try Sign.instance.formatAuthMessage(payload: supportedAuthPayload, account: accountForChain)
        let signature = // Assume `signMessage` is a function you've implemented to sign messages.
            signMessage(message: formattedMessage, privateKey: privateKey)

        let authObject = try Sign.instance.buildSignedAuthObject(
            authPayload: supportedAuthPayload,
            signature: signature,
            account: accountForChain
        )
        authObjects.append(authObject)
    }
    return authObjects
}

----------------------------------------

TITLE: Installing Solana Adapter with Bun
DESCRIPTION: Bun command to install AppKit with Solana adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_15

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Implementing NextAuth.js with AppKit SIWE (One-Click Auth)
DESCRIPTION: This code snippet sets up a NextAuth.js API route using Reown's AppKit SIWE for streamlined authentication. It configures credential providers, session handling, and JWT token management for Sign-In with Ethereum functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
import NextAuth from "next-auth";
import credentialsProvider from "next-auth/providers/credentials";
import {
  type SIWESession,
  verifySignature,
  getChainIdFromMessage,
  getAddressFromMessage,
} from "@reown/appkit-siwe";

declare module "next-auth" {
  interface Session extends SIWESession {
    address: string;
    chainId: number;
  }
}

const nextAuthSecret = process.env.NEXTAUTH_SECRET;
if (!nextAuthSecret) {
  throw new Error("NEXTAUTH_SECRET is not set");
}

const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;
if (!projectId) {
  throw new Error("NEXT_PUBLIC_PROJECT_ID is not set");
}

const providers = [
  credentialsProvider({
    name: "Ethereum",
    credentials: {
      message: {
        label: "Message",
        type: "text",
        placeholder: "0x0",
      },
      signature: {
        label: "Signature",
        type: "text",
        placeholder: "0x0",
      },
    },
    async authorize(credentials) {
      try {
        if (!credentials?.message) {
          throw new Error("SiweMessage is undefined");
        }
        const { message, signature } = credentials;
        const address = getAddressFromMessage(message);
        const chainId = getChainIdFromMessage(message);

        const isValid = await verifySignature({
          address,
          message,
          signature,
          chainId,
          projectId,
        });

        if (isValid) {
          return {
            id: `${chainId}:${address}`,
          };
        }

        return null;
      } catch (e) {
        return null;
      }
    },
  }),
];

const handler = NextAuth({
  // https://next-auth.js.org/configuration/providers/oauth
  secret: nextAuthSecret,
  providers,
  session: {
    strategy: "jwt",
  },
  callbacks: {
    session({ session, token }) {
      if (!token.sub) {
        return session;
      }

      const [, chainId, address] = token.sub.split(":");
      if (chainId && address) {
        session.address = address;
        session.chainId = parseInt(chainId, 10);
      }

      return session;
    },
  },
});

export { handler as GET, handler as POST };

----------------------------------------

TITLE: Using Custom Relay Instance in Android
DESCRIPTION: Demonstrates how to implement and use a custom Relay client with CoreClient initialization in Android.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
...
val optionalRelay: RelayConnectionInterface = /*implement interface*/

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = application, relay = optionalRelay)

----------------------------------------

TITLE: Defining Request Parameters for starknet_requestAddInvokeTransaction Method
DESCRIPTION: Example parameters for the starknet_requestAddInvokeTransaction method, showing how to structure an invoke transaction request with multiple calls and optional ABI information for contract interaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/starknet-rpc.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
{
      "accountAddress": "0x003a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64",
      "executionRequest" : {
            "calls" : [
                {
                  "contractAddress": "0x003a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64",
                  "entrypoint": "0x555278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64",
                  "calldata": ["0x003", "0xa82705a5b27e2bbc4a64"]
                },
                {
                    "contractAddress": "0x00111178a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64",
                    "entrypoint": "0x0022228a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64"
                }
            ],
            "abis" : [{
                "inputs": [{ "name": "amount", "type": "felt" }],
                "name": "set_balance",
                "outputs": [],
                "type": "function"
            }]
      }
}

----------------------------------------

TITLE: Removing an Existing Subscription in React Native
DESCRIPTION: Code for deleting an existing subscription by providing its topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_41

LANGUAGE: javascript
CODE:
// `topic` - subscription topic of the subscription that should be deleted.
await notifyClient.deleteSubscription({ topic });

----------------------------------------

TITLE: Installing native dependencies for iOS
DESCRIPTION: Command to install native dependencies using CocoaPods for iOS. This step is required to properly integrate the native modules with the iOS project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/email.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npx pod-install

----------------------------------------

TITLE: Fetching Active Subscriptions with Notify API in JavaScript
DESCRIPTION: Demonstrates how to fetch the current list of active subscriptions for an account using the Notify API. This function returns all active subscriptions keyed by subscription topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
const accountSubscriptions = notifyClient.getActiveSubscriptions({
  account: `eip155:1:0x63Be...`,
});

----------------------------------------

TITLE: Installing AppKit Wallet Button Package
DESCRIPTION: Commands to install the @reown/appkit-wallet-button package using different package managers including npm, Yarn, Bun, and pnpm.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/components.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit-wallet-button

LANGUAGE: bash
CODE:
yarn add @reown/appkit-wallet-button

LANGUAGE: bash
CODE:
bun a @reown/appkit-wallet-button

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-wallet-button

----------------------------------------

TITLE: Retrieving Wallet Provider with modal.getWalletProvider()
DESCRIPTION: This method returns the active connection provider for the current wallet connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_12

LANGUAGE: javascript
CODE:
modal.getWalletProvider()

----------------------------------------

TITLE: Wagmi Adapter with Both Custom RPC URLs and Transports in TypeScript
DESCRIPTION: Example of configuring WagmiAdapter with both customRpcUrls and Wagmi's transports property. Note that transports will take precedence and override any conflicting RPC URLs defined in customRpcUrls.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_34

LANGUAGE: typescript
CODE:
const wagmiAdapter = new WagmiAdapter({
  //...
  customRpcUrls: {
    'eip155:1': [{ url: 'https://custom-rpc-1.com' }] // This will be overridden
  },
  transports: {
    [mainnet.id]: http('https://transport-rpc-1.com') // This takes precedence
  }
})

----------------------------------------

TITLE: Disconnecting WalletConnect Sessions in C#
DESCRIPTION: Demonstrates how to disconnect a session with optional error reason.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_19

LANGUAGE: csharp
CODE:
var sessionTopic = sessionData.Topic;
await walletClient.Disconnect(sessionTopic);

// or

await walletClient.Disconnect(sessionTopic, Error.FromErrorType(ErrorType.USER_DISCONNECTED));

----------------------------------------

TITLE: Configuring Associated Domains for iOS Universal Links
DESCRIPTION: XML configuration for enabling Associated Domains capability in iOS apps to support Universal Links. This entitlements file defines which domains can deep link to the app, which is essential for AppKit Link Mode functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/link-mode.mdx#2025-04-10_snippet_2

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>com.apple.developer.associated-domains</key>
  <array>
    <string>applinks:your_dapp_universal_link.com</string>
  </array>
</dict>
</plist>

----------------------------------------

TITLE: Disconnecting WalletConnect Sessions in Swift
DESCRIPTION: Shows how to terminate a WalletConnect session when a user wants to disconnect from a dApp. This is an important feature for managing active connections and improving user experience.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_17

LANGUAGE: swift
CODE:
try await WalletKit.instance.disconnect(topic: session.topic)

----------------------------------------

TITLE: Initializing AppKit with SIWE Configuration in TypeScript
DESCRIPTION: TypeScript code snippet demonstrating how to initialize AppKit with SIWE configuration. It shows the usage of createAppKit function with various parameters including siweConfig.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
// Pass your siweConfig inside the createAppKit() function
const modal = createAppKit({
  adapters: [wagmiAdapter], //or your Ethers adapter
  projectId,
  networks: [mainnet, arbitrum],
  defaultNetwork: mainnet,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
  siweConfig: siweConfig, // pass your siweConfig
});

----------------------------------------

TITLE: Defining ENSProvider Component in TypeScript
DESCRIPTION: This code snippet defines the ENSProvider component using React and ethers.js. It sets up the ENS provider context and provides ENS-related functionality to child components.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/onboarding/ens.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import React, { createContext, useContext, useEffect, useState } from 'react';
import { ethers } from 'ethers';

interface ENSContextType {
  provider: ethers.providers.JsonRpcProvider | null;
  ensInstance: ethers.providers.EnsResolver | null;
}

const ENSContext = createContext<ENSContextType>({
  provider: null,
  ensInstance: null,
});

export const useENS = () => useContext(ENSContext);

export const ENSProvider: React.FC = ({ children }) => {
  const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider | null>(null);
  const [ensInstance, setENSInstance] = useState<ethers.providers.EnsResolver | null>(null);

  useEffect(() => {
    const initializeProvider = async () => {
      try {
        const newProvider = new ethers.providers.JsonRpcProvider(
          process.env.NEXT_PUBLIC_ETHEREUM_RPC_URL
        );
        setProvider(newProvider);

        const ensAddress = await newProvider.getNetwork().then((network) => network.ensAddress);
        if (ensAddress) {
          const newENSInstance = await newProvider.getResolver(ensAddress);
          setENSInstance(newENSInstance);
        }
      } catch (error) {
        console.error('Failed to initialize ENS provider:', error);
      }
    };

    initializeProvider();
  }, []);

  return (
    <ENSContext.Provider value={{ provider, ensInstance }}>
      {children}
    </ENSContext.Provider>
  );
};

----------------------------------------

TITLE: Rejecting Authentication Requests
DESCRIPTION: Demonstrates how to handle rejection of authentication requests using walletKit, including specifying rejection reasons.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth-siws.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
import { getSdkError } from "@walletconnect/utils";

await walletKit.rejectSessionAuthenticate({
  id: payload.id,
  reason: getSdkError("USER_REJECTED"), // or choose a different reason if applicable
});

----------------------------------------

TITLE: Authentication Rejection Implementation in Kotlin
DESCRIPTION: Demonstrates how to reject authentication requests with reason.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_34

LANGUAGE: kotlin
CODE:
val rejectParams = Sign.Params.RejectAuthenticate(
    id = sessionAuthenticate.id,
    reason = "Reason"
)

SignClient.rejectAuthenticate(rejectParams,
  onSuccess = {
        //Success
  },
  onError = { error ->
      //Handle error
  }
)

----------------------------------------

TITLE: Triggering Web3Modal in React with TypeScript
DESCRIPTION: Demonstrates how to implement a Web3Modal trigger button in React using TypeScript. Shows migration from @web3modal/react to @web3modal/wagmi/react package.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#2025-04-10_snippet_6

LANGUAGE: tsx
CODE:
/* highlight-delete-start */
- import { useWeb3Modal } from '@web3modal/react'
/* highlight-delete-end */
/* highlight-add-start */
+ import { useWeb3Modal } from '@web3modal/wagmi/react'
/* highlight-add-end */

function HomePage() {
  const { open } = useWeb3Modal()

  return <button onClick={() => open()}>Connect</button>
}

----------------------------------------

TITLE: Managing WalletConnect Sessions in Flutter
DESCRIPTION: These snippets show how to handle session data, request signatures, and respond to events using WalletConnect SignClient in a Flutter application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_20

LANGUAGE: dart
CODE:
final SessionData session = await response.session.future;

LANGUAGE: dart
CODE:
final signature = await signClient.request(
    topic: session.topic,
    chainId: 'eip155:1',
    request: SessionRequestParams(
        method: 'eth_signTransaction',
        params: 'json serializable parameters',
    ),
);

LANGUAGE: dart
CODE:
signClient.onSessionEvent.subscribe((SessionEvent? session) {
    // Do something with the event
});

signClient.registerEventHandler(
    namespace: 'kadena',
    event: 'kadena_transaction_updated',
);

----------------------------------------

TITLE: Responding to WalletConnect Session Requests in Swift
DESCRIPTION: Demonstrates how to send a response to a dApp after processing a session request. This is typically used after signing a transaction or message requested by the dApp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_14

LANGUAGE: swift
CODE:
let response: AnyCodable = sign(request: sessionRequest) // Implement your signing method
try await WalletKit.instance.respond(topic: request.topic, requestId: request.id, response: .response(response))

----------------------------------------

TITLE: Retrieving Subscriber Information using cURL
DESCRIPTION: This bash script shows how to retrieve subscriber information using cURL. It includes the necessary headers and JSON payload for the list of accounts to query.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#2025-04-10_snippet_4

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029",
      "eip155:1:0x0000000000000000000000000000000000000000"
    ]
  }'

----------------------------------------

TITLE: Implementing Push Notification Handling and Decryption
DESCRIPTION: Implementation of notification handling in UNNotificationServiceExtension, including decryption of WalletKit and Notify notifications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/push.mdx#2025-04-10_snippet_3

LANGUAGE: swift
CODE:
override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {
        self.contentHandler = contentHandler
        self.bestAttemptContent = request.content

        if let content = bestAttemptContent,
           let topic = content.userInfo["topic"] as? String,
           let ciphertext = content.userInfo["message"] as? String,
           let tag = content.userInfo["tag"] as? UInt {

            if WalletKitDecryptionService.canHandle(tag: tag) {
                let mutableContent = handleWalletKitNotification(content: content, topic: topic, tag: tag, ciphertext: ciphertext)
                contentHandler(mutableContent)
            } else if NotifyDecryptionService.canHandle(tag: tag) {
                let mutableContent = handleNotifyNotification(content: content, topic: topic, ciphertext: ciphertext)
                contentHandler(mutableContent)
            } else {
                let mutableContent = content.mutableCopy() as! UNMutableNotificationContent
                mutableContent.title = "Error: unknown message tag"
            }
        }
    }

----------------------------------------

TITLE: Filtering Session Requests in WalletConnect using C#
DESCRIPTION: Adds a filter to only handle requests from a specific session topic, ensuring that the wallet only processes requests from the intended session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_48

LANGUAGE: csharp
CODE:
walletClient.Engine.SessionRequestEvents<EthGetTransactionReceipt, TransactionReceipt>()
    .FilterRequests(r => r.Topic == sessionTopic)
    .OnRequest += OnEthTransactionReceiptRequest;

----------------------------------------

TITLE: Listening to Balance Changes in Reown AppKit (JavaScript)
DESCRIPTION: This snippet demonstrates how to subscribe to balance changes using the _appKitModal.balanceNotifier in a ValueListenableBuilder widget.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
ValueListenableBuilder<String>(
  valueListenable: _appKitModal.balanceNotifier,
  builder: (_, balance, __) {
    return Text(balance);
  },
),

----------------------------------------

TITLE: Implementing PushMessagingService for WalletKit (Kotlin)
DESCRIPTION: Implementation of the PushMessagingService class that extends FirebaseMessagingService for handling push notifications. This service decrypts incoming requests and provides callbacks for token management, message reception, and error handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/push.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
class SampleFirebaseService: PushMessagingService() {

    override fun newToken(token: String) {
        // Triggered when Firebase Cloud Messaging creates a new token
    }

    override fun registeringFailed(token: String, throwable: Throwable) {
        // Triggered when Firebase Cloud Messaging if there is an error with registering with the Push Server with a new token
    }

    override fun onMessage(message: Core.Model.Message, originalMessage: RemoteMessage) {
        // Triggered when a message is sent from the Push Server through Firebase Cloud Messaging and the message contains `Core.Model.Message`. The original FCM RemoteMessage is also returned
    }

    override fun onDefaultBehavior(message: RemoteMessage) {
        // Triggered when a message is sent from the Push Server through Firebase Cloud Messaging and the message does not contain `Core.Model.Message` in the payload. The original FCM RemoteMessage returned instead
    }

    override fun onError(throwable: Throwable, defaultMessage: RemoteMessage) {
        // Triggered when there is an error that occurs when a message is received from the Push Server
    }
}

----------------------------------------

TITLE: Smart Contract Interaction using Wagmi in Vue
DESCRIPTION: Vue script example demonstrating how to use Wagmi actions to interact with smart contracts. This example reads data from a USDT contract by calling the symbol function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_21

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { readContract } from "@wagmi/core";
  import { USDTAbi } from "../abi/USDTAbi";

  const USDTAddress = "0x...";

  const data = readContract({
    abi: USDTAbi,
    address: USDTAddress,
    functionName: "symbol",
  });
</script>

----------------------------------------

TITLE: Creating Basic SIWE Configuration in C#
DESCRIPTION: This snippet demonstrates how to create a basic SIWE configuration in C# for AppKit. It includes setting up message parameters and event subscriptions for sign-in and sign-out events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/siwe.mdx#2025-04-10_snippet_0

LANGUAGE: csharp
CODE:
// Create SIWE configuration
var siweConfig = new SiweConfig
{
    // The properties from `SiweMessageParams` be used to generate SIWE message.
    // There're no strict rules on what Domain and Uri parameters have to be on native platforms.
    // In this example we use website domain and app URL scheme.
    GetMessageParams = () => new SiweMessageParams
    {
        Domain = "mywebsite.com",
        Uri = "my-app://"
    },
    // By setting this to false, we disable a requirement to sign a new SIWE message
    // every time the active chain changes in AppKit or wallet.
    SignOutOnChainChange = false
};

// Subscribe to SIWE events
siweConfig.SignInSuccess += _ => Debug.Log("Address verified successfully!");
siweConfig.SignOutSuccess += () => Debug.Log("Address verification canceled or wallet disconnected.");

----------------------------------------

TITLE: Installing Reown AppKit Dependencies
DESCRIPTION: Commands to install the Reown AppKit core and ethers adapter packages across different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-ethers

LANGUAGE: bash
CODE:
bun a @reown/appkit @reown/appkit-adapter-ethers

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-ethers

----------------------------------------

TITLE: Implementing WebSocketFactory with Custom Origin for iOS Relay Client
DESCRIPTION: Custom WebSocketFactory implementation that sets an allowed domain in the Origin header to ensure the connection is accepted by the server when Allowed Domains are restricted in the Reown Cloud Dashboard.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/relay.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
import Starscream

extension WebSocket: WebSocketConnecting { }

struct DefaultSocketFactory: WebSocketFactory {
    func create(with url: URL) -> WebSocketConnecting {
        var urlRequest = URLRequest(url: url)
        urlRequest.addValue("allowed.domain.com", forHTTPHeaderField: "Origin")
        return WebSocket(request: urlRequest)
    }
}

----------------------------------------

TITLE: Registering Identity Key as a DApp
DESCRIPTION: Code demonstrating how to register an identity key for a specific domain as a decentralized application, which allows cross-device account syncing for notification purposes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
const account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`
const domain =  'app.mydomain.com', // pass the domain (i.e. the hostname) where your dapp is hosted.
const allApps =  false // The user will be prompted to authorize this dapp to send and receive messages on their behalf for only this specific domain using their WalletConnect identity.


// No need to register and sign message if already registered.
if (notifyClient.isRegistered({ account, domain, allApps })) return;

const {registerParams, message}  = notifyClient.prepareRegistration({
  account,
  domain,
  allApps
});

const signature = await ethersWallet.signMessage(message);

await notifyClient.register({
  registerParams,
  signature,
})

----------------------------------------

TITLE: Configuring Web3Modal Dependencies in React
DESCRIPTION: Initial setup of imports for Web3Modal integration in React, replacing old imports with new wagmi-based configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { createWeb3Modal } from '@web3modal/wagmi/react'
import { defaultWagmiConfig } from '@web3modal/wagmi/react/config'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

import { WagmiConfig } from 'wagmi'
import { arbitrum, mainnet } from 'viem/chains'

----------------------------------------

TITLE: Processing Incoming Notifications with WalletKit in TypeScript
DESCRIPTION: This snippet demonstrates how to process incoming notifications using WalletKit. It extracts the topic, message, and tag from the notification payload, decrypts the message, and handles metadata for different notification types.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/push.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
import { WalletKit } from '@reown/walletkit';
import messaging from '@react-native-firebase/messaging';

messaging().onMessage(async notification => {
    // get the topic, encrypted message & tag from the notification payload
    const { topic, message, tag } = notification.data;

    // decrypt the message
    // note this is static method and can be called without initializing the walletKit
    const decryptedMessage = await WalletKit.notifications.decryptMessage({
    topic,
    encryptedMessage: message,
  });

    /*
    * `decryptedMessage` is JsonRpcRequest object, with the full payload of the incoming request such as method, params, id, etc.
    * You can use it to emit local push notification with the request to the user and ask for their approval.
    **/

   /*
   * the metadata contains name, description, icon and url of the dapp that initiated the request
   * note that only notifications with tag `1108`(session requests) will have metadata,
   **/
   let metadata

   if(tag == 1108) {
        metadata = await WalletKit.notifications.getMetadata({ topic });
   } else {
        // session proposals contain metadata in the request itself
        metadata = decryptedMessage.params.proposer.metadata
   }

    // with this information you can show a local push notification to the user
   ...
});

----------------------------------------

TITLE: Updating WalletConnect Session Namespaces in C#
DESCRIPTION: Demonstrates how to update session namespaces and wait for acknowledgment.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_17

LANGUAGE: csharp
CODE:
var newNamespaces = new Namespaces(...);
var request = await walletClient.UpdateSession(sessionTopic, newNamespaces);
await request.Acknowledged();

----------------------------------------

TITLE: External Message Broadcasting with ever_broadcastExternalMessage
DESCRIPTION: Broadcasts an external message to a contract without waiting for the transaction. Returns message hash and expiration details.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#2025-04-10_snippet_5

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_broadcastExternalMessage",
  "params": {
        "sourceAddress": "0:695e42...b8d",
        "destAddress": "0:b38d96...708",
        "destPayload": {
            "abi": "",
            "method": "",
            "params": {}
        }
    }
}

----------------------------------------

TITLE: Initializing ReownWalletKit with Core and Metadata in Flutter
DESCRIPTION: Creates a new instance of ReownWalletKit by configuring the core with a project ID and setting wallet metadata including name, description, URL, icons, and redirect URLs. This is the first step in integrating the WalletKit functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
final _walletKit = ReownWalletKit(
  core: ReownCore(
    projectId: '{YOUR_PROJECT_ID}',
  ),
  metadata: PairingMetadata(
    name: 'Example Wallet',
    description: 'Example wallet description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'examplewallet://',
      universal: 'https://reown.com/examplewallet',
    ),
  ),
);

----------------------------------------

TITLE: Installing Legacy SIWE Dependencies with npm
DESCRIPTION: Command to install the required packages for legacy SIWE implementation using npm package manager. Includes viem as an additional dependency.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#2025-04-10_snippet_4

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwe siwe viem

----------------------------------------

TITLE: Extracting Address from SIWE Message
DESCRIPTION: Utility function to extract the Ethereum address from a SIWE message. This can be used to identify the user who signed the authentication message.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
import { getAddressFromMessage } from "@reown/appkit-siwe-react-native";

const address = getAddressFromMessage(message);

----------------------------------------

TITLE: Installing WalletConnect SDK for Android
DESCRIPTION: Instructions for adding WalletConnect SDK to an Android project using Gradle. This includes adding the Maven Central repository and implementing the required dependencies.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#2025-04-10_snippet_2

LANGUAGE: gradle
CODE:
allprojects {
 repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
 }
}

LANGUAGE: gradle
CODE:
implementation("com.walletconnect:android-core:release_version")
implementation("com.walletconnect:sign:release_version")

----------------------------------------

TITLE: Pairing a Wallet with Dapp using WalletKit on Android
DESCRIPTION: This Kotlin code demonstrates pairing a wallet with a dapp on Android devices. It creates pairing parameters and uses WalletKit.pair with success and error callbacks to handle the connection process.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
val pairingParams = Wallet.Params.Pair(pairingUri)
WalletKit.pair(pairingParams,
    onSuccess = {
        //Subscribed on the pairing topic successfully. Wallet should await for a session proposal
    },
    onError = { error ->
        //Some error happens while pairing - check Expected errors section
    }
}

----------------------------------------

TITLE: Approving a Session with Single Address in WalletConnect using C#
DESCRIPTION: Approves a connection proposal with a single wallet address and acknowledges the approval to complete the connection process.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_38

LANGUAGE: csharp
CODE:
string addressToConnect = ...;
var approveData = await walletClient.Approve(proposal, addressToConnect);
await approveData.Acknowledged();

----------------------------------------

TITLE: Mark All Notifications as Read Implementation
DESCRIPTION: JavaScript implementation for marking all notifications as read.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`,
  {
    method: "POST",
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    },
  }
);

----------------------------------------

TITLE: Triggering AppKit Modal with Custom Hook in React Native
DESCRIPTION: This snippet demonstrates how to use the useAppKit hook to programmatically open the AppKit modal in a React Native application. It allows for more customization in terms of UI and triggering logic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/implementation.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { Pressable, Text } from "react-native";
import { useAppKit } from "@reown/appkit-ethers5-react-native";

export default function ConnectView() {
  const { open } = useAppKit();

  return (
    <>
      <Pressable onClick={() => open()}>
        <Text>Open Connect Modal</Text>
      </Pressable>
    </>
  );
}

----------------------------------------

TITLE: Configuring Wagmi Adapter for Reown AppKit
DESCRIPTION: This snippet demonstrates how to set up a Wagmi configuration for Reown AppKit in a separate file. It configures the WagmiAdapter with cookie storage, SSR support, project ID, and networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { cookieStorage, createStorage, http } from '@wagmi/core'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { mainnet, arbitrum } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const networks = [mainnet, arbitrum]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  storage: createStorage({
    storage: cookieStorage
  }),
  ssr: true,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig

----------------------------------------

TITLE: Implementing ERC20 Token Transfer with WalletConnect and Nethereum in C#
DESCRIPTION: This snippet demonstrates how to set up a Web3 instance with a WalletConnect interceptor and perform an ERC20 token transfer. It includes initializing Web3, setting up the WalletConnect interceptor, and calling the transfer method of an ERC20 contract.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_42

LANGUAGE: csharp
CODE:
// Nethereum's Web3 instance
var web3 = new Web3();

// Instance of WalletConnect singleton
var walletConnect = WalletConnect.Instance;

// Interceptor that will route requests requiring signing to the wallet connected with WalletConnect
var walletConnectUnityInterceptor = new WalletConnectUnityInterceptor(walletConnect);

// Assign the interceptor to the Web3 instance
web3.Client.OverridingRequestInterceptor = walletConnectUnityInterceptor;

const string contractAddress = "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984";
const string recipientAddress = "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045";
const BigInteger amount = 1;

// Get ERC20 contract service
var contractService = Web3Modal.Web3.Eth.ERC20.GetContractService(contractAddress);

// Call transfer method of ERC20 contract
await contractService.TransferRequestAsync(recipientAddress, amount);

----------------------------------------

TITLE: Initializing Web3InboxClient in TypeScript
DESCRIPTION: Demonstrates initialization of Web3InboxClient with projectId, domain, and allApps parameters. The projectId is obtained from Reown Cloud, domain defaults to window.location.host, and allApps controls subscription access scope.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/initialization/javascript.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const client = await Web3InboxClient.init({ projectId, domain, allApps })

----------------------------------------

TITLE: Installing Reown AppKit Dependencies
DESCRIPTION: Package installation commands for Reown AppKit and its dependencies across different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query

LANGUAGE: bash
CODE:
bun a @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query

----------------------------------------

TITLE: Opening AppKit Modal with Web Component in Vue
DESCRIPTION: This snippet shows how to use the AppKit web component to open the modal. The <appkit-button> is a global HTML element that doesn't require importing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/ethers5/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Defining Smart Session Permission Request in TypeScript
DESCRIPTION: Example of creating a SmartSessionGrantPermissionsRequest object that defines the permission request parameters including address, chainID, signer, policies, permissions, and expiry time.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
const request: SmartSessionGrantPermissionsRequest = {
  expiry: Math.floor(Date.now() / 1000) + 24 * 60 * 60, // 24 hours
  chainId: toHex(baseSepolia.id),
  address: address,
  signer: {
    type: "keys",
    data: {
      keys: [
        {
          type: "secp256k1",
          publicKey: "0x...", //public key of dapp signer
        },
      ],
    },
  },
  permissions: [
    {
      type: "contract-call",
      data: {
        address: "0x2E65BAfA07238666c3b239E94F32DaD3cDD6498D", // sample donut contract address
        abi: [
          {
            inputs: [
              { internalType: "uint256", name: "amount", type: "uint256" },
            ],
            name: "purchase",
            outputs: [],
            stateMutability: "payable",
            type: "function",
          },
        ],
        functions: [
          {
            functionName: "purchase",
          },
        ],
      },
    },
  ],
  policies: [],
};

----------------------------------------

TITLE: Clipboard Integration Configuration
DESCRIPTION: Setting up clipboard functionality using expo-clipboard or react-native-clipboard
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
import * as Clipboard from 'expo-clipboard'

createAppKit({
  //...
  clipboardClient: {
    setString: async (value: string) => {
      await Clipboard.setStringAsync(value)
    }
  }
})

----------------------------------------

TITLE: Message Broadcasting with ever_broadcastMessage
DESCRIPTION: Broadcasts an internal message without waiting for transaction completion. Returns message hash and expiration details.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#2025-04-10_snippet_4

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_broadcastMessage",
  "params": {
        "sourceAddress": "0:695e42...b8d",
        "value": 1000000000,
        "bounce": False,
        "destAddress": "0:b38d96...708",
        "destPayload": {
            "abi": "",
            "method": "",
            "params": {}
        }
    }
}

----------------------------------------

TITLE: Event Payload Example for bip122_addressesChanged in Litecoin Wallet API
DESCRIPTION: Example payload of a session_event that wallets emit to notify dapps about connected accounts' current Litecoin addresses. The event includes a list of addresses with their derivation paths. This event should be emitted after connection approval and whenever UTXOs change for connected accounts.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/litecoin-rpc.mdx#2025-04-10_snippet_4

LANGUAGE: json
CODE:
{
  "id": 1675759795769537,
  "topic": "95d6aca451b8e3c6d9d176761bf786f1cc0a6d38dffd31ed896306bb37f6ae8d",
  "params": {
    "event": {
      "name": "bip122_addressesChanged",
      "data": [
        {
            "address": "ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0",
            "path": "m/84'/2'/0'/0/0"
        },
        {
            "address": "LXkGhTKmZpviAtYdDaxWbiJsdg4tA6EzrU",
            "path": "m/49'/2'/0'/0/7"
        },
        {
            "address": "ltc1qj4plcuyhuzw0sycf99gcayzhhcddfj6xkcke5g",
            "path": "m/84'/2'/0'/0/2"
        },
        {
            "address": "ltc1qsdxa6pseqekqg5d3uksaxnwrey2s2ujcx03alc",
            "path": "m/84'/2'/0'/0/3"
        },
        {
            "address": "ltc1qhuvt3sq8xmx9ktzdfznkzvjl5zup7mg9zpwllw",
            "path": "m/84'/2'/0'/0/4"
        },
        {
            "address": "ltc1qtjd3y5a2axpwzfjcj4y9zy50qfjuxwzm0vu5fq",
            "path": "m/84'/2'/0'/1/3"
        },
        {
            "address": "ltc1qp7ujtprgl0quvcg0dj335p37r2mc2cxdc8xumq",
            "path": "m/84'/2'/0'/1/4"
        }
      ]
    },
    "chainId": "bip122:12a765e31ffd4059bada1e25190f6e98"
  }
}

----------------------------------------

TITLE: Setting AppKit Delegate for Wallet Updates
DESCRIPTION: Sets a delegate on AppKit to start receiving updates from the connected wallet. This allows the application to respond to wallet-related events through the previously defined delegate.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
AppKit.setDelegate(appKitModalDelegate)

----------------------------------------

TITLE: Setting Up Message Signing Functionality with Wagmi
DESCRIPTION: Code to extract the signMessageAsync function from the useSignMessage hook and get the user's wallet address. This prepares for message signing functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_5

LANGUAGE: jsx
CODE:
// Wagmi hook to sign a message
const { signMessageAsync } = useSignMessage();

// AppKit hook to get the address and check if the user is connected
const { address, isConnected } = useAppKitAccount();

----------------------------------------

TITLE: React Native Provider Metadata Configuration
DESCRIPTION: Defines the providerMetadata object structure for React Native which contains app information including name, description, URL, icons, and redirect paths.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#2025-04-10_snippet_2

LANGUAGE: ts
CODE:
providerMetadata: {
  name: string;
  description: string;
  url: string;
  icons: string[];
  redirect: {
    native: string;
    universal?: string;
  }
};

----------------------------------------

TITLE: Signing Tezos Payloads with tezos_sign in JavaScript
DESCRIPTION: This method signs a provided payload using the keypair corresponding to the requested account address. It requires an account address and the payload to be signed, and returns the signature for the signed payload.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/tezos-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "tezos_sign",
    "params": {
        "account": "tz1VQA4RP4fLjEEMW2FR4pE9kAg5abb5h5GL",
        "payload": "05010000004254",
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result":  {
        "signature": "edsig..."
    }
}

----------------------------------------

TITLE: Defining Supported Namespaces in Kotlin
DESCRIPTION: This code shows examples of defining supported namespaces for EVM and Cosmos chains. It specifies the chains, methods, events, and accounts that a wallet supports for different blockchain ecosystems, which can be used with the Namespace Builder utility.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
 val supportedNamespaces = mapOf(
    "eip155" to Wallet.Model.Namespace.Session(
        chains = listOf("eip155:1", "eip155:137", "eip155:3"),
        methods = listOf("personal_sign", "eth_sendTransaction", "eth_signTransaction"),
        events = listOf("chainChanged"),
        accounts = listOf("eip155:1:0x57f48fAFeC1d76B27e3f29b8d277b6218CDE6092", "eip155:137:0x57f48fAFeC1d76B27e3f29b8d277b6218CDE6092", "eip155:3:0x57f48fAFeC1d76B27e3f29b8d277b6218CDE6092")
    )
)

 val anotherSupportedNamespaces = mapOf(
    "eip155" to Wallet.Model.Namespace.Session(
        chains = listOf("eip155:1", "eip155:2", "eip155:4"),
        methods = listOf("personal_sign", "eth_sendTransaction", "eth_signTransaction"),
        events = listOf("chainChanged", "accountsChanged"),
        accounts = listOf("eip155:1:0x57f48fAFeC1d76B27e3f29b8d277b6218CDE6092", "eip155:2:0x57f48fAFeC1d76B27e3f29b8d277b6218CDE6092", "eip155:4:0x57f48fAFeC1d76B27e3f29b8d277b6218CDE6092")
    ),
    "cosmos" to Wallet.Model.Namespace.Session(
        chains = listOf("cosmos:cosmoshub-4"),
        methods = listOf("cosmos_method"),
        events = listOf("cosmos_event"),
        accounts = listOf("cosmos:cosmoshub-4:cosmos1hsk6jryyqjfhp5dhc55tc9jtckygx0eph6dd02")
    )
)

----------------------------------------

TITLE: Retrieving and Managing Notifications in TypeScript
DESCRIPTION: Demonstrates how to fetch paginated notifications, implement infinite scroll, and manage notification read status. Includes methods for marking individual or multiple notifications as read, with support for limiting results and sorting by unread status.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/javascript.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const notificationsPage = client.getNotificationHistory({
  limit: 3,
  // The `id` of the last notification, for example:
  startingAfter: 'some-notification-id'
})

const notificationsPerPage = 5
const isInfiniteScroll = true
const unreadFirst = true

let notifications = []

const onUpdate = ({notifications: fetchedNotifications}: GetNotificationsReturn) => {
  notifications = fetchedNotifications
}

const {
  nextPage,
  markNotificationAsRead,
  markAllNotificationsAsRead
} = client.pageNotifications(
  notificationsPerPage,
  isInfiniteScroll,
  specifiedAccount // OR undefined,
  specifiedDomain // OR undefined,
  unreadFirst
)(onUpdate)


// marking a single notification as read
await notifications[0].markAsRead();

// mark specific notifications as read
await markNotificationsAsRead(notifications.slice(2).map(n => n.id));

// mark all notifications as read
await markAllNotificationsAsRead();

LANGUAGE: typescript
CODE:
{
  title: string
  sentAt: number
  body: string
  id: string
  isRead: boolean // since 1.3.0
  url: string | null
  type: string
  read: () => Promise<void> // since 1.3.0
}

----------------------------------------

TITLE: Installing Legacy SIWE Dependencies with Bun
DESCRIPTION: Command to install the required packages for legacy SIWE implementation using Bun package manager. Includes viem as an additional dependency.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#2025-04-10_snippet_6

LANGUAGE: bash
CODE:
bun a @reown/appkit-siwe siwe viem

----------------------------------------

TITLE: Creating Authentication Request Parameters in Swift
DESCRIPTION: Creates authentication request parameters with domain, chains, nonce, URI, statement, resources, and methods. The resources field can be used to request authorization with ReCaps.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_10

LANGUAGE: Swift
CODE:
extension AuthRequestParams {
    static func stub(
        domain: String = "yourDappDomain.com",
        chains: [String] = ["eip155:1", "eip155:137"],
        nonce: String = "uniqueNonce",
        uri: String = "https://yourDappDomain.com/login",
        statement: String? = "I accept the Terms of Service: https://yourDappDomain.com/tos",
        resources: [String]? = nil, // here your dapp may request authorization with recaps
        methods: [String]? = ["personal_sign", "eth_sendTransaction"]
    ) -> AuthRequestParams {
        return try! AuthRequestParams(
            domain: domain,
            chains: chains,
            nonce: nonce,
            uri: uri,
            statement: statement,
            resources: resources,
            methods: methods
        )
    }
}

----------------------------------------

TITLE: Using Namespace Builder in Kotlin
DESCRIPTION: This snippet demonstrates how to use the Namespace Builder utility to simplify parsing required and optional namespaces. It takes a session proposal and supported namespaces defined by the wallet, and generates approved namespaces that can be used when approving a session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
val supportedNamespaces: Wallet.Model.Namespaces.Session = /* a map of all supported namespaces created by a wallet */
val sessionProposal: Wallet.Model.SessionProposal =  /* an object received by `fun onSessionProposal(sessionProposal: Wallet.Model.SessionProposal)` in `WalletKit.WalletDelegate` */
val sessionNamespaces = WalletKit.generateApprovedNamespaces(sessionProposal, supportedNamespaces)

val approveParams: Wallet.Params.SessionApprove = Wallet.Params.SessionApprove(proposerPublicKey, sessionNamespaces)
WalletKit.approveSession(approveParams) { error -> /*callback for error while approving a session*/ }

----------------------------------------

TITLE: Implementing NotifyMessageService for Push Notifications in Kotlin
DESCRIPTION: This snippet demonstrates how to implement the NotifyMessageService class, which is a wrapper around FirebaseMessagingService. It handles token generation, message reception, and error handling for push notifications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_21

LANGUAGE: kotlin
CODE:
class CustomFirebaseService: NotifyMessageService() {

    override fun newToken(token: String) {
        // Triggered when Firebase Cloud Messaging creates a new token and that token is registered with the Echo server
    }

    override fun registeringFailed(token: String, throwable: Throwable) {
        // Triggered when Firebase Cloud Messaging if there is an error with registering with the Echo server with a new token
    }

    override fun onMessage(message: Notify.Model.Message, originalMessage: RemoteMessage) {
        // Triggered when a message is sent from the Echo server through Firebase Cloud Messaging and the message contains `Notify.Model.Message`. The original FCM RemoteMessage is also returned
    }

    override fun onDefaultBehavior(message: RemoteMessage) {
        // Triggered when a message is sent from the Echo server through Firebase Cloud Messaging and the message does not contain `Notify.Model.Message`. The original FCM RemoteMessage returned instead
    }

    override fun onError(throwable: Throwable, defaultMessage: RemoteMessage) {
        // Triggered when there is an error that occurs when a message is received from the Echo server
    }
}

----------------------------------------

TITLE: WalletConnect CSS Style Variables
DESCRIPTION: A complete set of CSS custom properties (variables) used to style the WalletConnect interface. These variables control everything from font settings to colors, border-radius values, and other visual elements. They allow for easy customization of the WalletConnect UI components.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/themeVariablesTable.mdx#2025-04-10_snippet_0

LANGUAGE: css
CODE:
--w3m-font-family: Roboto, sans-serif;
--w3m-font-feature-settings: tnum;
--w3m-overlay-background-color: rgba(0, 0, 0, 0.3);
--w3m-overlay-backdrop-filter: blur(5px);
--w3m-z-index: 10;
--w3m-accent-color: #FFFFFF;
--w3m-accent-fill-color: #000000;
--w3m-background-color: #CECECE;
--w3m-background-image-url: https://...;
--w3m-logo-image-url: https://...;
--w3m-background-border-radius: 12px;
--w3m-container-border-radius: 24px;
--w3m-wallet-icon-border-radius: 2em;
--w3m-wallet-icon-large-border-radius: 3em;
--w3m-wallet-icon-small-border-radius: 1em;
--w3m-input-border-radius: 50%;
--w3m-notification-border-radius: 2rem;
--w3m-button-border-radius: 8px;
--w3m-secondary-button-border-radius: 8px;
--w3m-icon-button-border-radius: 50%;
--w3m-button-hover-highlight-border-radius: 2rem;

----------------------------------------

TITLE: Getting Session Topic in WalletConnect using C#
DESCRIPTION: Retrieves the topic of a session from the SessionStruct object, which is required for all sign methods.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_41

LANGUAGE: csharp
CODE:
var sessionTopic = sessionData.Topic;

----------------------------------------

TITLE: Authenticating with WalletConnect SignClient in Kotlin
DESCRIPTION: This snippet shows how to authenticate using WalletConnect SignClient in Kotlin. It includes setting up authentication parameters and handling the authentication response.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_16

LANGUAGE: kotlin
CODE:
val authenticateParams = Sign.Params.Authenticate(
            domain = "your.domain",
            chains = listof("eip155:1", "eip155:137"),
            methods = listOf("personal_sign", "eth_signTypedData"),
            uri = "https://yourDappDomain.com/login",
            nonce = randomNonce,
            statement = "Sign in with wallet.",
            resources = null, // here your dapp may request authorization with recaps
        )

SignClient.authenticate(authenticateParams,
    onSuccess = { url ->
        //Handle authentication URI. Show as a QR code a send via deeplink
    },
    onError = { error ->
        //Handle error
    }
)

LANGUAGE: kotlin
CODE:
fun onSessionAuthenticateResponse(sessionAuthenticateResponse: Sign.Model.SessionAuthenticateResponse) {
        // Triggered when Dapp receives the session authenticate response from wallet

        if (sessionAuthenticateResponse is Sign.Model.SessionAuthenticateResponse.Result) {
            if (sessionAuthenticateResponse.session != null) {
                // Authentication successful, session established
            } else {
                // Authentication successful, but no session created (SIWE-only flow)
            }
        } else {
            // Authentication request was rejected or failed
        }

}

----------------------------------------

TITLE: Rejecting Session Proposals on iOS
DESCRIPTION: This Swift code shows how to reject a session proposal on iOS. It uses WalletKit's reject method with the proposal ID and a reason for rejection. The code includes error handling to update the UI appropriately.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_10

LANGUAGE: swift
CODE:
do {
    try await WalletKit.instance.reject(proposalId: proposal.id, reason: .userRejected)
    // Update UI, remove loader
} catch {
    // present error
}

----------------------------------------

TITLE: Installing Ethers v6 Adapter with Yarn
DESCRIPTION: Yarn command to install AppKit with Ethers v6 adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_10

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-ethers ethers

----------------------------------------

TITLE: Session Extension Implementation in Kotlin
DESCRIPTION: Demonstrates how to extend a WalletConnect session by 7 days using the session topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_29

LANGUAGE: kotlin
CODE:
val sessionTopic: String = /*Topic of Session*/
val extendParams = Sign.Params.Extend(sessionTopic = sessionTopic)

SignClient.extend(extendParams) { error -> /*callback for error while extending a session*/ }

----------------------------------------

TITLE: Installing AppKit and Required Dependencies
DESCRIPTION: Command to install Reown AppKit, the Wagmi adapter for AppKit, and other necessary dependencies for enabling wallet connections and blockchain interactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-wagmi-adapter wagmi @tanstack/react-query

----------------------------------------

TITLE: Rendering Get Public Key Button in React Component
DESCRIPTION: Renders a button that triggers the public key retrieval function when clicked. The button is only rendered if the user is connected to a wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#2025-04-10_snippet_9

LANGUAGE: jsx
CODE:
return (
  isConnected && (
    <div>
      <button onClick={handleGetPublicKey}>Get Public Key</button>
    </div>
  )
);

----------------------------------------

TITLE: Initializing AppKit with Excluded Wallets in Kotlin
DESCRIPTION: This snippet shows how to initialize the WalletConnect AppKit with a list of wallet IDs to exclude from the wallet selection interface. These wallets won't appear in the wallet explorer.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
val excludedWalletIds = listOf<String>(
    "1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369",
    "4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0"
)

val initParams = Modal.Params.Init(core = CoreClient, excludedWalletIds = excludedWalletIds)

AppKit.initialize(
    init = initParams,
    onSuccess = {
        // Callback will be called if initialization is successful
    },
    onError = { error ->
        // Error will be thrown if there's an issue during initialization
    }
)

----------------------------------------

TITLE: Accessing Account Data with useAppKitAccount in Vue
DESCRIPTION: Shows how to use the useAppKitAccount composable to access wallet account data and connection status.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/vue";

const accountData = useAppKitAccount();

----------------------------------------

TITLE: Validating SIWE Message with Signature in JavaScript
DESCRIPTION: This snippet demonstrates how to validate a Sign-In with Ethereum (SIWE) message using the official SIWE package. It creates a new SiweMessage instance with the provided message and then validates it against the user's signature to verify authenticity.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/parameters.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
SiweMessage(message).validate(signature);

----------------------------------------

TITLE: Configuring iOS Wallet Detection in Info.plist
DESCRIPTION: Adds wallet scheme entries to the iOS Info.plist file to enable detection of installed wallets on the device. This allows AppKit to identify which wallets are available for connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#2025-04-10_snippet_1

LANGUAGE: xml
CODE:
<key>LSApplicationQueriesSchemes</key>
<array>
  <string>metamask</string>
  <string>trust</string>
  <string>safe</string>
  <string>rainbow</string>
  <!-- Add other wallet schemes names here -->
</array>

----------------------------------------

TITLE: Configuring Push Notifications with Firebase and Notifee
DESCRIPTION: Complete setup for push notifications including Firebase initialization, token handling, message decryption, and notification display using Notifee. Includes background message handling and app registration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_11

LANGUAGE: javascript
CODE:
import { AppRegistry } from "react-native";
import { name as appName } from "./app.json";
import crypto from "react-native-quick-crypto";

import messaging from "@react-native-firebase/messaging";
import notifee, {
  AndroidImportance,
  AndroidVisibility,
  EventType,
} from "@notifee/react-native";
import { NotifyClient } from "@walletconnect/notify-client";
import { decryptMessage } from "@walletconnect/notify-message-decrypter";

import App from "./src/App";

const polyfillDigest = async (algorithm, data) => {
  const algo = algorithm.replace("-", "").toLowerCase();
  const hash = crypto.createHash(algo);
  hash.update(data);
  return hash.digest();
};

globalThis.crypto = crypto;
globalThis.crypto.subtle = {
  digest: polyfillDigest,
};

notifee.createChannel({
  id: "default",
  name: "Default Channel",
  lights: false,
  vibration: true,
  importance: AndroidImportance.HIGH,
  visibility: AndroidVisibility.PUBLIC,
});

let notifyClient;

const projectId = process.env.ENV_PROJECT_ID;

async function registerAppWithFCM() {
  if (Platform.OS === "android") {
    await messaging().registerDeviceForRemoteMessages();
  }
}

async function registerClient(deviceToken, clientId) {
  const body = JSON.stringify({
    client_id: clientId,
    token: deviceToken,
    type: "fcm",
    always_raw: true,
  });

  const requestOptions = {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body,
  };

  return fetch(
    `https://echo.walletconnect.com/${projectId}/clients`,
    requestOptions
  )
    .then((response) => response.json())
    .then((result) => console.log(">>> registered client", result))
    .catch((error) => console.log(">>> error while registering client", error));
}

async function handleGetToken(token) {
  const status = await messaging().requestPermission();
  const enabled =
    status === messaging.AuthorizationStatus.AUTHORIZED ||
    status === messaging.AuthorizationStatus.PROVISIONAL;

  if (enabled) {
    notifyClient = await NotifyClient.init({ projectId });
    const clientId = await notifyClient.core.crypto.getClientId();
    return registerClient(token, clientId);
  }
}

messaging().getToken().then(handleGetToken);
messaging().onTokenRefresh(handleGetToken);

async function onMessageReceived(remoteMessage) {
  if (!remoteMessage.data?.blob || !remoteMessage.data?.topic) {
    console.log("Missing blob or topic on notification message.");
    return;
  }

  const decryptedMessage = await decryptMessage({
    topic: remoteMessage.data?.topic,
    encryptedMessage: remoteMessage.data?.blob,
  });

  return notifee.displayNotification({
    title: decryptedMessage.title,
    body: decryptedMessage.body,
    id: "default",
    android: {
      channelId: "default",
      importance: AndroidImportance.HIGH,
      visibility: AndroidVisibility.PUBLIC,
      smallIcon: "ic_launcher",
      pressAction: {
        id: "default",
      },
    },
  });
}

messaging().onMessage(onMessageReceived);
messaging().setBackgroundMessageHandler(onMessageReceived);

notifee.onBackgroundEvent(async ({ type, detail }) => {
  const { notification, pressAction } = detail;

  if (type === EventType.ACTION_PRESS && pressAction.id === "mark-as-read") {
    await notifee.cancelNotification(notification.id);
  }
});

function HeadlessCheck({ isHeadless }) {
  if (isHeadless) {
    return null;
  }

  return <App />;
}

AppRegistry.registerComponent(appName, () => HeadlessCheck);

----------------------------------------

TITLE: Defining AuthRequestParams Extension for SIWE Configuration
DESCRIPTION: This code defines an extension on AuthRequestParams to create a stub with default values for SIWE message creation, including domain, chains, nonce, and other parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/one-click-auth.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
extension AuthRequestParams {
    static func stub(
        domain: String = "yourDappDomain.com",
        chains: [String] = ["eip155:1", "eip155:137"],
        nonce: String = "uniqueNonce",
        uri: String = "https://yourDappDomain.com/login",
        statement: String? = "I accept the Terms of Service: https://yourDappDomain.com/tos",
        resources: [String]? = nil, // Here your dapp may request authorization with ReCaps
        methods: [String]? = ["personal_sign", "eth_sendTransaction"]
    ) -> AuthRequestParams {
        return try! AuthRequestParams(
            domain: domain,
            chains: chains,
            nonce: nonce,
            uri: uri,
            statement: statement,
            resources: resources,
            methods: methods
        )
    }
}

----------------------------------------

TITLE: Handling Session Request Expiration in Swift
DESCRIPTION: Shows how to subscribe to the request expiration publisher to handle expired requests and update the UI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#2025-04-10_snippet_7

LANGUAGE: swift
CODE:
WalletKit.instance.requestExpirationPublisher.sink { _ in
    // let user know that request has expired
}.store(in: &publishers)

----------------------------------------

TITLE: Retrieving Active Account in AppKit
DESCRIPTION: Method to get the currently active blockchain account in CAIP-10 format, providing access to the address, chain ID, and full account ID.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_4

LANGUAGE: csharp
CODE:
// Get active account in CAIP-10 format
Account account = AppKit.GetAccountAsync();

Debug.Log(account.Address); // e.g. '0x12345...'
Debug.Log(account.ChainId); // e.g. 'eip155:1'
Debug.Log(account.AccountId); // e.g. 'eip155:1:0x12345...'

----------------------------------------

TITLE: Session Disconnection Implementation in Kotlin
DESCRIPTION: Demonstrates how to disconnect from an established WalletConnect session by providing disconnection reason, code and session topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_25

LANGUAGE: kotlin
CODE:
val disconnectionReason: String = /*The reason for disconnecting the Session*/
val disconnectionCode: String = /*The code for disconnecting the Session*/
val sessionTopic: String = /*Topic from the Session*/
For reference use CAIP-25: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-25.md
val disconnectParams = Sign.Params.Disconnect(sessionTopic, disconnectionReason, disconnectionCode)

SignClient.disconnect(disconnectParams) { error -> /*callback for error while disconnecting a session*/ }

----------------------------------------

TITLE: Subscriber Response Example
DESCRIPTION: Example JSON response from the subscribers endpoint showing account information with subscribed notification types.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#2025-04-10_snippet_5

LANGUAGE: jsonc
CODE:
{
  "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029": {
    "notification_types": ["4d1c97ad-c182-4097-8f2c-8f80c0674df2"]
  }
}

----------------------------------------

TITLE: Updating AppKit Method References
DESCRIPTION: Demonstrates how to update Web3Modal method calls to their AppKit equivalents, including basic operations and transaction handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-unity.mdx#2025-04-10_snippet_3

LANGUAGE: csharp
CODE:
// Remove the following code line
Web3Modal.Open();

// Add the following code line
AppKit.Open();

// Remove the following code line
await Web3Modal.Evm.SendTransactionAsync(address, value);

// Add the following code line
await AppKit.Evm.SendTransactionAsync(address, value);

----------------------------------------

TITLE: Processing Transaction Receipt Requests in C#
DESCRIPTION: Shows how to handle transaction receipt requests asynchronously and return responses.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_16

LANGUAGE: csharp
CODE:
private async Task OnEthTransactionReceiptRequest(RequestEventArgs<EthGetTransactionReceipt, TransactionReceipt> e)
{
    var txHash = e.Request.Params[0];
    var receipt = await EthGetTransactionReceipt(txHash);
    e.Response = receipt;
}

----------------------------------------

TITLE: Importing SiwxIndex Component in Markdown
DESCRIPTION: Imports the SiwxIndex component from a shared snippets directory to display SIWX documentation content.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwx.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
import SiwxIndex from "/snippets/appkit/shared/siwx/index.mdx";

----------------------------------------

TITLE: Sending Requests to Wallet in Swift
DESCRIPTION: Sends a request to the wallet after a session has been established. This example demonstrates how to send a personal_sign request with the specified parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_11

LANGUAGE: Swift
CODE:
let method = "personal_sign"
let walletAddress = "0x9b2055d370f73ec7d8a03e965129118dc8f5bf83" // This should match the connected address
let requestParams = AnyCodable(["0x4d7920656d61696c206973206a6f686e40646f652e636f6d202d2031363533333933373535313531", walletAddress])
let request = Request(topic: session.topic, method: method, params: requestParams, chainId: Blockchain(chainId)!)
try await Sign.instance.request(params: request)

----------------------------------------

TITLE: Initializing and Controlling Android Relay Client
DESCRIPTION: Example of initializing the CoreClient with a manual connection type and methods for manually controlling the websocket connection in Android applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/relay.mdx#2025-04-10_snippet_5

LANGUAGE: kotlin
CODE:
CoreClient.initialize(projectId = projectId, connectionType = ConnectionType.MANUAL, application = application)

CoreClient.Relay.connect() { error -> /*Error when wrong connection type is in use*/}

CoreClient.Relay.disconnect() { error -> /*Error when wrong connection type is in use*/}

----------------------------------------

TITLE: Configuring App Redirection from Wallets
DESCRIPTION: Initializes AppKit with custom URL scheme for redirection back to the app after wallet interactions. This is particularly important for iOS to ensure reliable wallet-to-app navigation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#2025-04-10_snippet_6

LANGUAGE: csharp
CODE:
// AppKit configuration
var appKitConfig = new AppKitConfig
{
    projectId = "884a........2cc",
    metadata = new Metadata(
        "My app",
        "My app",
        "https://example.com",
        "https://..../appkit-icon.png",
        new RedirectData
        {
            // Used by native wallets to redirect back to the app after approving requests
            Native = "my-url-schema://"
        }
    ),
};


await AppKit.InitializeAsync(
    appKitConfig
);

----------------------------------------

TITLE: Android Pairing Disconnection
DESCRIPTION: Demonstrates how to disconnect an existing pairing in Android using the pairing topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_16

LANGUAGE: kotlin
CODE:
CoreClient.Pairing.disconnect(topic = /*Pairing topic*/) { error -> }

----------------------------------------

TITLE: Implementing Web3Button in XML Views
DESCRIPTION: Demonstrates how to add a Web3Button in traditional Android XML layouts, with configuration options for button size and type.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_2

LANGUAGE: xml
CODE:
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical">

        <com.reown.appkit.ui.components.button.views.Web3Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:connect_button_size="NORMAL" || "SMALL"
            app:account_button_type="NORMAL" || "MIXED"
        />
</LinearLayout>

----------------------------------------

TITLE: Setting Connector Images with Solana in ReOwn AppKit
DESCRIPTION: Customizes the images for wallet connectors in the Solana adapter by mapping connector names to image URLs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_12

LANGUAGE: typescript
CODE:
createAppKit({
  connectorImages: {
    coinbaseWallet: "https://images.mydapp.com/coinbase.png",
    phantom: "https://images.mydapp.com/phantom.png",
    walletConnect: "https://images.mydapp.com/walletconnect.png",
  },
});

----------------------------------------

TITLE: Logging Out an Account from Notify API in JavaScript
DESCRIPTION: Shows how to log out an account from the Notify API. This process removes all subscriptions and messages for the account from the client's storage, effectively stopping all notifications for that account.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_9

LANGUAGE: javascript
CODE:
const account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`;

await notifyClient.unregister({
  account,
});

----------------------------------------

TITLE: Querying Connection Status Method
DESCRIPTION: Method that returns a boolean indicating if the selected network adapter is connected. Useful for checking connection status across different blockchain networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#2025-04-10_snippet_12

LANGUAGE: typescript
CODE:
modal.getIsConnected()

----------------------------------------

TITLE: Configuring AppKit for Solana in a Vue.js Application
DESCRIPTION: This code snippet shows how to set up Reown AppKit with Solana blockchain integration in a Vue.js component. It includes importing necessary dependencies, configuring project ID and metadata, setting up Solana adapter with wallet options, and initializing the AppKit modal with required parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { createAppKit, useAppKit } from "@reown/appkit-solana/vue";
  import {
    PhantomWalletAdapter,
    SolflareWalletAdapter,
  } from "@solana/wallet-adapter-wallets";
  import { SolanaAdapter } from "@reown/appkit-adapter-solana/vue";
  import { solana, solanaTestnet, solanaDevnet } from "@reown/appkit/networks";

  // 1. Get projectId from https://cloud.reown.com
  const projectId = "YOUR_PROJECT_ID";

  // 2. Set up metadata
  const metadata = {
    name: "AppKit",
    description: "AppKit Solana Example",
    url: "https://example.com", // origin must match your domain & subdomain
    icons: ["https://avatars.githubusercontent.com/u/179229932"],
  };

  // 3. Set up Solana Adapter
  const solanaWeb3JsAdapter = new SolanaAdapter({
    wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],
  });

  // 4. Create modal
  createAppKit({
    adapters: [solanaWeb3JsAdapter],
    metadata,
    networks: [solana, solanaTestnet, solanaDevnet],
    projectId,
    wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],
  });
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Installing Reown AppKit and Uninstalling ConnectKit
DESCRIPTION: Commands for installing Reown AppKit and its Wagmi adapter while uninstalling ConnectKit using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-connectkit-next.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall connectkit

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-wagmi&& yarn remove connectkit

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall connectkit

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-wagmi&& pnpm remove connectkit

----------------------------------------

TITLE: Handling Pairing Expiry Events in TypeScript
DESCRIPTION: Shows how to listen for and handle pairing expiry events using the WalletKit core. This helps in updating the UI when a pairing expires.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
core.pairing.events.on("pairing_expire", (event) => {
    // pairing expired before user approved/rejected a session proposal
    const { topic } = topic;
});

----------------------------------------

TITLE: Accessing Modal State with useAppKitState in Vue
DESCRIPTION: Shows how to use the useAppKitState composable to get the current value of the modal's state.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
import { useAppKitState } from "@reown/appkit/vue";

const stateData = useAppKitState();

----------------------------------------

TITLE: Installing AppKit with Solana for JavaScript
DESCRIPTION: Commands to install AppKit and its dependencies for use with Solana in JavaScript projects using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#2025-04-10_snippet_3

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-solana

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-solana

----------------------------------------

TITLE: Importing and Rendering Resources Component in MDX
DESCRIPTION: This code imports a Resources component from a shared snippets directory and renders it on the page. The component is likely responsible for displaying documentation about various resources in the application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/resources.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Resources from "/snippets/appkit/shared/resources.mdx";

# Resources

<Resources />

----------------------------------------

TITLE: Managing Current Address
DESCRIPTION: Utility class and methods for handling wallet addresses in CAIP-25 format.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_25

LANGUAGE: csharp
CODE:
public class Caip25Address
{
    public string Address;
    public string ChainId;
}

public Caip25Address GetCurrentAddress(string chain)
{
    if (string.IsNullOrWhiteSpace(chain))
        return null;

    var defaultNamespace = currentSession.Namespaces[chain];

    if (defaultNamespace.Accounts.Length == 0)
        return null;

    var fullAddress = defaultNamespace.Accounts[0];
    var addressParts = fullAddress.Split(":");

    var address = addressParts[2];
    var chainId = string.Join(':', addressParts.Take(2));

    return new Caip25Address()
    {
        Address = address,
        ChainId = chainId,
    };
}

----------------------------------------

TITLE: Configuring Excluded Wallets in AppKit
DESCRIPTION: Initializes AppKit with specific wallet IDs to exclude from being displayed. These wallets are filtered out from the WalletGuide results.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#2025-04-10_snippet_1

LANGUAGE: csharp
CODE:
await AppKit.InitializeAsync(new AppKitConfig
{
    excludedWalletIds = new []
    {
        "c57ca95...74e97267d96",
    }
});

----------------------------------------

TITLE: Connecting to a Wallet with Custom Namespaces in Swift
DESCRIPTION: Establishes a connection to a wallet with specific required and optional namespaces. Can use an existing topic or create a new one.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
try await AppKit.instance.connect(
    requiredNamespaces: [String: ProposalNamespace],
    optionalNamespaces: [String: ProposalNamespace]?,
    sessionProperties: [String: String]?,
    topic: topic // Can be existing topic or nil to create new one
)

// Or without specifying namespaces to stick with default values

try await AppKit.instance.connect(
    topic: topic // Can be existing topic or nil to create new one
)

----------------------------------------

TITLE: Paymaster Service Configuration Example in TypeScript
DESCRIPTION: Shows the proper format for the capabilities object when configuring the paymaster service. This snippet demonstrates how to specify the paymaster URL with appropriate parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
paymasterService: {
  url: 'https://paymaster-api.reown.com/<CHAIN_ID>/rpc?projectId=<YOUR_PROJECT_ID>',
}

----------------------------------------

TITLE: Request Response Implementation in Kotlin
DESCRIPTION: Shows how to respond to JSON-RPC requests from dApps by providing session topic and response data.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_26

LANGUAGE: kotlin
CODE:
val sessionTopic: String = /*Topic of Session*/
val jsonRpcResponse: Sign.Model.JsonRpcResponse.JsonRpcResult = /*Settled Session Request ID along with request data*/
val result = Sign.Params.Response(sessionTopic = sessionTopic, jsonRpcResponse = jsonRpcResponse)

SignClient.respond(result) { error -> /*callback for error while responding session request*/ }

----------------------------------------

TITLE: Authentication with ReCaps Implementation
DESCRIPTION: Example of implementing authentication with ReCaps functionality for enhanced security and authorization.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
const { uri, response } = await signClient.authenticate({
  chains: ['eip155:1', 'eip155:2'],
  domain: 'localhost',
  uri: 'http://localhost/login',
  nonce: '1239812982',
  methods: ['personal_sign', 'eth_chainId', 'eth_signTypedData_v4'],
  resources: ['https://example.com']
})

----------------------------------------

TITLE: Approving WalletKit Session in Swift
DESCRIPTION: Shows how to approve a session proposal using WalletKit and subscribe to session updates using Combine publishers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
WalletKit.instance.approve(
    proposalId: "proposal_id",
    namespaces: sessionNamespaces
)

WalletKit.instance.sessionsPublishers
    .receive(on: DispatchQueue.main)
    .sink { [weak self] _ in
        self?.reloadSessions()
    }.store(in: &publishers)

WalletKit.instance.getSessions()

----------------------------------------

TITLE: Managing WalletConnect Sessions in Kotlin
DESCRIPTION: These snippets demonstrate how to get a list of settled sessions and pending session requests using WalletConnect SignClient in Kotlin.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_17

LANGUAGE: kotlin
CODE:
SignClient.getListOfSettledSessions()

LANGUAGE: kotlin
CODE:
SignClient.getPendingRequests(topic: String)

----------------------------------------

TITLE: Subscribing to Relay-specific Events in JavaScript
DESCRIPTION: These events provide updates about the relay client's connection state, including connect, error, and disconnect events. They allow developers to monitor the underlying communication channel of the AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/events.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
_appKitModal.appKit!.core.relayClient.onRelayClientConnect.subscribe((EventArgs? event) {});

_appKitModal.appKit!.core.relayClient.onRelayClientError.subscribe((EventArgs? event) {});

_appKitModal.appKit!.core.relayClient.onRelayClientDisconnect.subscribe((EventArgs? event) {});

----------------------------------------

TITLE: Extending a WalletConnect Session in Swift
DESCRIPTION: Extends a user's session beyond the default 7-day lifetime. This method will extend the session for an additional week.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_12

LANGUAGE: Swift
CODE:
try await Sign.instance.extend(topic: session.topic)

----------------------------------------

TITLE: Setting Session Parameters in Kotlin for Android
DESCRIPTION: Defines session parameters for WalletConnectModal in Android, including namespaces with chains, methods, and events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_6

LANGUAGE: kotlin
CODE:
val methods: List<String> = listOf("eth_sendTransaction", "personal_sign", "eth_sign", "eth_signTypedData")
val events: List<String> = listOf("chainChanged", "accountsChanged")
val chains: List<String> = listOf("eip155:1")
val namespaces = mapOf(
    "eip155" to Modal.Model.Namespace.Proposal(
        chains = chains,
        methods = methods,
        events = events
    )
)

val sessionParams = Modal.Params.SessionParams(
    requiredNamespaces = namespaces,
    optionalNamespaces = null,
    properties = null
)

WalletConnectModal.setSessionParams(sessionParams)

----------------------------------------

TITLE: Subscribing to Modal Events with useAppKitEvents in Vue
DESCRIPTION: Shows how to use the useAppKitEvents composable to subscribe to and handle modal events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
import { useAppKitEvents } from "@reown/appkit/vue";

const events = useAppKitEvents();

----------------------------------------

TITLE: Handling AppKit Events in C#
DESCRIPTION: Demonstrates how to subscribe to various AppKit events including initialization, account connection/disconnection, account changes, and chain changes. Each event provides specific event arguments that can be used to access relevant data like the active account or chain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/events.mdx#2025-04-10_snippet_0

LANGUAGE: csharp
CODE:
//Invoked after successful initialization of AppKit
AppKit.Initialized += (sender, eventArgs) => { };

// Invoked after successful connection of an account
AppKit.AccountConnected += (sender, eventArgs) => {
    Account activeAccount = eventArgs.GetAccount();
};

// Invoked after successful disconnection of an account
AppKit.AccountDisconnected += (sender, eventArgs) => { };

// Invoked after account has changed
// This happens when the wallet updates a session or the user changes the active chain.
AppKit.AccountChanged += (sender, eventArgs) => {
    Account newAccount = eventArgs.Account;
};

// Invoked after active chain has changed
AppKit.ChainChanged += (sender, eventArgs) => {
    Chain newChain = eventArgs.Chain;
};

----------------------------------------

TITLE: Handling Pairing Expiry Events in TypeScript
DESCRIPTION: Shows how to listen for and handle pairing expiry events using the WalletKit core. This helps in updating the UI when a pairing expires.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
core.pairing.events.on("pairing_expire", (event) => {
    // pairing expired before user approved/rejected a session proposal
    const { topic } = topic;
});

----------------------------------------

TITLE: Handling Session Request Expiry in TypeScript
DESCRIPTION: Demonstrates how to handle session request expiry events using WalletKit, allowing for proper UI updates when a request expires.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
walletKit.on("session_request_expire", (event) => {
    // request expired and any modal displaying it should be removed
    const { id } = event;
});

----------------------------------------

TITLE: Using Network Selection Button with ReownAppKit
DESCRIPTION: Implements the AppKitModalNetworkSelectButton to allow users to select an available blockchain network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
AppKitModalNetworkSelectButton(appKit: _appKitModal)

----------------------------------------

TITLE: Using WalletConnectRouter for Automatic Redirection in Swift
DESCRIPTION: This Swift code snippet demonstrates how to use the WalletConnectRouter to automatically redirect users back to the DApp after wallet interaction. It includes approval of a session proposal and handling of the redirection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/mobile-linking.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
import WalletConnectRouter

try await Sign.instance.approve(proposalId: <proposalId>, namespaces: <namespaces>)

if let uri = proposal.proposer.redirect?.native {
    WalletConnectRouter.goBack(uri: uri)
} else {
    // Inform the user to manually return to the DApp
}

----------------------------------------

TITLE: Formatting a SIWE Message
DESCRIPTION: Example of using the SIWEUtils utility to format an EIP-4361 compliant message for SIWE authentication based on provided arguments.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
SIWEUtils.formatMessage(args);

----------------------------------------

TITLE: UniversalProvider with AppKit Integration
DESCRIPTION: Implementation showing how to configure AppKit with UniversalProvider, including both old and new implementations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/wcm.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
import { UniversalProvider } from "@walletconnect/universal-provider";
import { createAppKit } from "@reown/appkit";

const provider = await UniversalProvider.init({
  projectId: "YOUR_PROJECT_ID",
  metadata: {
    name: "My Website",
    description: "My Website Description",
    url: "https://mywebsite.com",
    icons: ["https://avatars.githubusercontent.com/u/37784886"],
  },
});

const modal = createAppKit({
  projectId: "YOUR_PROJECT_ID",
  networks: [mainnet, solana],
});

provider.on("display_uri", (uri: string) => {
  modal.open({ uri, view: "ConnectingWalletConnectBasic" });
});

await provider.connect({
  optionalNamespaces: {
    eip155: {
      methods: [
        "eth_sendTransaction",
        "eth_signTransaction",
        "eth_sign",
        "personal_sign",
        "eth_signTypedData",
      ],
      chains: ["eip155:1"],
      events: ["chainChanged", "accountsChanged"],
    },
    solana: {
      methods: ["solana_signMessage", "solana_signTransaction"],
      chains: ["solana:mainnet"],
      events: ["chainChanged", "accountsChanged"],
    },
  },
});

----------------------------------------

TITLE: Responding to Session Request in Swift
DESCRIPTION: Demonstrates how to respond to a session request using WalletKit, including error handling and UI updates.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#2025-04-10_snippet_6

LANGUAGE: swift
CODE:
do {
    try await WalletKit.instance.respond(requestId: request.id, signature: signature, from: account)
    // update UI -> remove the loader
} catch {
    // present error to the user
}

----------------------------------------

TITLE: Importing Required Dependencies for EVM Transactions with AppKit and Ethers
DESCRIPTION: Import necessary objects and hooks from Reown AppKit and Ethers library to handle wallet interactions and blockchain operations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import {
  useAppKitAccount,
  useAppKitProvider,
  useAppKitNetworkCore,
  type Provider,
} from "@reown/appkit/react";
import {
  BrowserProvider,
  JsonRpcSigner,
  formatEther,
  parseUnits,
} from "ethers";

----------------------------------------

TITLE: Updating Repository Dependencies for WalletKit Android
DESCRIPTION: Updates the gradle dependencies from Web3Wallet to WalletKit implementation, including BOM version changes and new artifact references.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-android.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
dependencies {
    implementation(platform("com.reown:android-bom:{BOM version}"))
    implementation("com.reown:android-core")
    implementation("com.reown:walletkit")
}

----------------------------------------

TITLE: Accessing Wallet Information with useWalletInfo in Vue
DESCRIPTION: Shows how to use the useWalletInfo composable to access wallet information and metadata.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_10

LANGUAGE: typescript
CODE:
import { useWalletInfo } from '@reown/appkit/vue'


export default Component(){
  const { walletInfo } = useWalletInfo()
}

----------------------------------------

TITLE: Installing Bitcoin Adapter with Bun
DESCRIPTION: Bun command to install AppKit with Bitcoin adapter for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_19

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-bitcoin

----------------------------------------

TITLE: Opening WalletConnect Modal with Android Navigation Component
DESCRIPTION: Code snippet showing how to open the WalletConnect Modal in Android using the Navigation Component and a specific navigation action.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_26

LANGUAGE: kotlin
CODE:
import androidx.navigation.fragment.findNavController
import com.walletconnect.wcmodal.ui.openWalletConnectModal

findNavController().openWalletConnectModal(id = R.id.action_to_bottomSheet)

----------------------------------------

TITLE: Updating Hook Imports for Ethers
DESCRIPTION: Updates to hook imports for Ethers implementation, replacing Web3Modal hooks with equivalent Reown AppKit hooks
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#2025-04-10_snippet_5

LANGUAGE: tsx
CODE:
import {
  useAppKit,
  useAppKitState,
  useAppKitEvents,
  useAppKitAccount,
  useAppKitProvider,
  useAppKitError,
  useWalletInfo,
} from "@reown/appkit-ethers-react-native";

----------------------------------------

TITLE: Configuring Wagmi with Custom Connectors for AppKit
DESCRIPTION: This snippet demonstrates how to set up Wagmi with custom connectors like WalletConnect and Coinbase for use with AppKit. It includes creating connectors, setting up the WagmiAdapter, and configuring the ContextProvider.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/custom-connectors.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

import { http, WagmiProvider, CreateConnectorFn } from 'wagmi'
import { sepolia } from '@reown/appkit/networks'
import { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const queryClient = new QueryClient()

export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID

const metadata = {
  //...
}

// create the connectors (delete the ones you don't need)
const connectors: CreateConnectorFn[] = []
connectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false
connectors.push(injected({ shimDisconnect: true }))
connectors.push(
  coinbaseWallet({
    appName: metadata.name,
    appLogoUrl: metadata.icons[0]
  })
)

export const networks = [sepolia]

export const wagmiAdapter = new WagmiAdapter({
  storage:
  transports: {
    [sepolia.id]: http()
  },
  connectors,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig

createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [sepolia]
})

export function ContextProvider({ children }) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Installing WalletConnect Sign Client for .NET
DESCRIPTION: Command to install the WalletConnect Sign Client package in a .NET project using the dotnet CLI and NuGet package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#2025-04-10_snippet_4

LANGUAGE: shell
CODE:
dotnet add package WalletConnect.Sign

----------------------------------------

TITLE: Presenting WalletConnect Modal from Specific View Controller in iOS Swift
DESCRIPTION: Method to present a WalletConnect modal from a specific view controller in iOS using Swift, providing more control over presentation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_21

LANGUAGE: swift
CODE:
WalletConnectModal.present(from: viewController)

----------------------------------------

TITLE: Initializing WalletConnect SDK in C#
DESCRIPTION: Initializes the WalletConnectSignClient with the previously configured options. This creates the main client instance for handling wallet connections.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_36

LANGUAGE: csharp
CODE:
var walletClient = await WalletConnectSignClient.Init(walletOptions);

----------------------------------------

TITLE: Handling Session Requests in WalletKit
DESCRIPTION: Demonstrates how to respond to JSON-RPC method requests from Dapps within an active session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_7

LANGUAGE: kotlin
CODE:
val sessionTopic: String = /*Topic of Session*/
val jsonRpcResponse: Wallet.Model.JsonRpcResponse.JsonRpcResult = /*Active Session Request ID along with request data*/
val result = Wallet.Params.SessionRequestResponse(sessionTopic = sessionTopic, jsonRpcResponse = jsonRpcResponse)

WalletKit.respondSessionRequest(result) { error -> /*callback for error while responding session request*/ }

----------------------------------------

TITLE: Using useAppKitAccount Hook for Account Data Access
DESCRIPTION: Hook for accessing account data and connection status, providing address, connection status, and embedded wallet information.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

const { address, isConnected, caipAddress, status, embeddedWalletInfo } =
  useAppKitAccount();

----------------------------------------

TITLE: Implementing Deep Link Handling in iOS with FlutterEventChannel
DESCRIPTION: iOS implementation of an AppDelegate that captures deep links and universal links, then forwards them to Flutter through a FlutterEventChannel. The code handles various app launch scenarios and manages a queue of links if Flutter isn't ready to receive them.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#2025-04-10_snippet_8

LANGUAGE: swift
CODE:
import Flutter
import UIKit

@main
@objc class AppDelegate: FlutterAppDelegate {
  private static let EVENTS_CHANNEL = "com.exampledapp/events"
  private var eventsChannel: FlutterEventChannel?
  private let linkStreamHandler = LinkStreamHandler()

  override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
    GeneratedPluginRegistrant.register(with: self)

    let controller = window.rootViewController as! FlutterViewController
    eventsChannel = FlutterEventChannel(name: AppDelegate.EVENTS_CHANNEL, binaryMessenger: controller.binaryMessenger)
    eventsChannel?.setStreamHandler(linkStreamHandler)

    if let userActivityDictionary = launchOptions?[.userActivityDictionary] as? [String: Any],
      let userActivity = userActivityDictionary["UIApplicationLaunchOptionsUserActivityKey"] as? NSUserActivity,
      userActivity.activityType == NSUserActivityTypeBrowsingWeb {

      handleIncomingUniversalLink(userActivity: userActivity)
    }

    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }

  override func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
    return linkStreamHandler.handleLink(url.absoluteString)
  }

  override func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
    if userActivity.activityType == NSUserActivityTypeBrowsingWeb {
      handleIncomingUniversalLink(userActivity: userActivity)
      return true
    }

    return false
  }

  private func handleIncomingUniversalLink(userActivity: NSUserActivity) {
    if let url = userActivity.webpageURL {
      print("App launched with Universal Link: \(url.absoluteString)")
      let _ = linkStreamHandler.handleLink(url.absoluteString)
    }
  }
}

class LinkStreamHandler: NSObject, FlutterStreamHandler {
  var eventSink: FlutterEventSink?
  var queuedLinks = [String]()

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink) -> FlutterError? {
    self.eventSink = events
    queuedLinks.forEach({ events($0) })
    queuedLinks.removeAll()
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    self.eventSink = nil
    return nil
  }

  func handleLink(_ link: String) -> Bool {
    guard let eventSink = eventSink else {
      queuedLinks.append(link)
      return false
    }
    eventSink(link)
    return true
  }
}

----------------------------------------

TITLE: Initializing SignClientOptions in C#
DESCRIPTION: Sets up the initial configuration for WalletConnect client including project ID and metadata. Allows optional storage configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_21

LANGUAGE: csharp
CODE:
var dappOptions = new SignClientOptions()
{
    ProjectId = "39f3dc0a2c604ec9885799f9fc5feb7c",
    Metadata = new Metadata()
    {
        Description = "An example dapp to showcase WalletConnectSharpv2",
        Icons = new[] { "https://walletconnect.com/meta/favicon.ico" },
        Name = "WalletConnectSharpv2 Dapp Example",
        Url = "https://walletconnect.com"
    },
    // Uncomment to disable persistent storage
    // Storage = new InMemoryStorage()
};

----------------------------------------

TITLE: Removing Test Networks from AppKit Flutter
DESCRIPTION: Code snippet showing how to remove all test networks across all supported blockchain namespaces using the removeTestNetworks method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
// Remove every test network
ReownAppKitModalNetworks.removeTestNetworks();

----------------------------------------

TITLE: Subscribing to Authentication Response in AppKit
DESCRIPTION: This snippet demonstrates how to subscribe to the authResponsePublisher to check whether the user has successfully signed a SIWE message.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/one-click-auth.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
AppKit.instance.authResponsePublisher.sink { (id, result) in
    switch result {
    case .success((session, cacaos)):
        // User has authenticated
        ...
    }
}

----------------------------------------

TITLE: Setting Accounts in Web3Inbox using TypeScript
DESCRIPTION: Illustrates the new method for setting and retrieving account information using the useWeb3InboxAccount hook, replacing the previous setAccount function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
- import { useW3iAccount } from "@web3inbox/widget-react"
+ import { useWeb3InboxAccount } from "@web3inbox/react"
- const { setAccount } = useW3iAccount()

setAccount(`eip155:1:0x...`)
+ const { data: account } = useWeb3InboxAccount(`eip155:1:0x...`)

----------------------------------------

TITLE: Handling Session Proposal Expiration in Swift
DESCRIPTION: Shows how to subscribe to the session proposal expiration publisher to handle expired proposals and update the UI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#2025-04-10_snippet_5

LANGUAGE: swift
CODE:
WalletKit.instance.sessionProposalExpirationPublisher.sink { _ in
    // let user know that session proposal has expired, update UI
}.store(in: &publishers)

----------------------------------------

TITLE: Filtering Session Requests by Topic in C#
DESCRIPTION: Demonstrates how to filter session requests by topic before handling them.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_15

LANGUAGE: csharp
CODE:
walletClient.Engine.SessionRequestEvents<EthGetTransactionReceipt, TransactionReceipt>()
    .FilterRequests(r => r.Topic == sessionTopic)
    .OnRequest += OnEthTransactionReceiptRequest;

----------------------------------------

TITLE: Fetching Specific Listings by ID from Explorer API
DESCRIPTION: Example GET request to retrieve specific listings by their IDs, which is useful for allowlisting purposes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#2025-04-10_snippet_5

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/all?projectId=YOUR_PROJECT_ID&ids=be49f0a78d6ea1beed3804c3a6b62ea71f568d58d9df8097f3d61c7c9baf273d,4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0

----------------------------------------

TITLE: Approving Session Proposals on iOS
DESCRIPTION: This Swift code shows how to approve a session proposal on iOS. It uses WalletKit's approve method with the proposal ID, namespaces, and session properties. The code includes error handling to update the UI appropriately.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_7

LANGUAGE: swift
CODE:
do {
    try await WalletKit.instance.approve(proposalId: proposal.id, namespaces: sessionNamespaces, sessionProperties: proposal.sessionProperties)
    // Update UI, remove loader
} catch {
    // present error
}

----------------------------------------

TITLE: Specifying Included Wallet IDs for Reown AppKit Modal
DESCRIPTION: Shows how to explicitly define which wallets should be displayed in the modal. When includedWalletIds is set, only the specified wallets will be shown to users.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/options.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
final Set<String> includedWalletIds = {
  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask
  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0', // Trust
  'fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa', // Coinbase Wallet
}

----------------------------------------

TITLE: Signing Transactions with cosmos_signAmino
DESCRIPTION: This code demonstrates how to use the cosmos_signAmino method to sign a transaction using the Amino encoding format. It requires a signer address and an Amino-formatted signDoc containing chain ID, account number, sequence, and transaction details.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/cosmos-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "cosmos_signAmino",
    "params": {
        "signerAddress": "cosmos1sguafvgmel6f880ryvq8efh9522p8zvmrzlcrq",
        "signDoc": {
            "chain_id": "foochain",
            "account_number": "7",
            "sequence": "54"
            "memo": "hello, world",
            "msgs": [],
            "fee": { "amount": [], "gas": "23" }
        }
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result":  {
        "signature": {
            "pub_key": {
                "type": "tendermint/PubKeySecp256k1",
                "value": "AgSEjOuOr991QlHCORRmdE5ahVKeyBrmtgoYepCpQGOW"
            },
            "signature": "AnTrXtS2lr9CBwhTpRa8ZlKcVR9PeIXGaTpvodyJU05QvRKVjIkQfOZl5JhdkfxCY+a6rhwCOYVcbKQTJlMw4w=="
        },
        "signed": {
            "chain_id": "foochain",
            "account_number": "7",
            "sequence": "54"
            "memo": "hello, world",
            "msgs": [],
            "fee": { "amount": [{"denom": "ufoo", "amount": "10000"}], "gas": "23" }
        }
    }
}

----------------------------------------

TITLE: Defining WalletConnect Namespaces for Session Permissions
DESCRIPTION: Example of defining namespaces to specify accounts, methods, and events for a WalletConnect session. Namespaces define the permissions that will be granted to a dapp during a session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
namespaces: {
  eip155: {
    accounts: ["eip155:1:0x0000000000..., eip155:2:0x0000000000..."],
    methods: ["personal_sign", "eth_sendTransaction"],
    events: ["accountsChanged"]
  },
};

----------------------------------------

TITLE: Updating additional imports for WalletKit migration in JavaScript
DESCRIPTION: Replace additional imports from @walletconnect/web3wallet with their corresponding versions from @reown/walletkit. This step ensures all related imports are updated to use the new WalletKit package.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-web.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
/* highlight-delete-start */
import { IWeb3Wallet } from "@walletconnect/web3wallet";
/* highlight-delete-end */
/* highlight-add-start */
import { IWalletKit } from "@reown/walletkit";
/* highlight-add-end */

----------------------------------------

TITLE: Installing AppKit Wallet Button Package with Package Managers
DESCRIPTION: Commands for installing the AppKit wallet button library using various package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_10

LANGUAGE: bash
CODE:
npm install @reown/appkit-wallet-button

LANGUAGE: bash
CODE:
yarn add @reown/appkit-wallet-button

LANGUAGE: bash
CODE:
bun a @reown/appkit-wallet-button

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-wallet-button

----------------------------------------

TITLE: Installing Wagmi Adapter with Bun
DESCRIPTION: Bun command to install AppKit with Wagmi adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_3

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue viem

----------------------------------------

TITLE: Defining Theme Mode Type in TypeScript
DESCRIPTION: TypeScript type definition that specifies the allowed values for theme mode configuration. The type only accepts 'dark' or 'light' as valid values, which controls the application's appearance mode.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/themeMode.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
themeMode: 'dark' | 'light'

----------------------------------------

TITLE: Implementing EthSendTransaction Request
DESCRIPTION: Defines the request class for eth_sendTransaction RPC method with required attributes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_27

LANGUAGE: csharp
CODE:
[RpcMethod("eth_sendTransaction"), RpcRequestOptions(Clock.ONE_MINUTE, 99997)]
public class EthSendTransaction : List<Transaction>
{
    public EthSendTransaction(params Transaction[] transactions) : base(transactions)
    {
    }
}

----------------------------------------

TITLE: Supported Ethereum Methods and Events in WalletConnect
DESCRIPTION: Lists all the Ethereum methods and events that are supported by default in the @walletconnect/ethereum-provider package. These are used for interaction between dApps and wallets.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
{
  //...
  methods: [
    "eth_accounts",
    "eth_requestAccounts",
    "eth_sendRawTransaction",
    "eth_sign",
    "eth_signTransaction",
    "eth_signTypedData",
    "eth_signTypedData_v3",
    "eth_signTypedData_v4",
    "eth_sendTransaction",
    "personal_sign",
    "wallet_switchEthereumChain",
    "wallet_addEthereumChain",
    "wallet_getPermissions",
    "wallet_requestPermissions",
    "wallet_registerOnboarding",
    "wallet_watchAsset",
    "wallet_scanQRCode",
    "wallet_sendCalls",
    "wallet_getCallsStatus",
    "wallet_showCallsStatus",
    "wallet_getCapabilities",
  ],
  events: [
    "chainChanged",
    "accountsChanged",
    "message",
    "disconnect",
    "connect",
  ]
}

----------------------------------------

TITLE: Retrieving Notifications in Web3Inbox using TypeScript
DESCRIPTION: Shows the new method for retrieving notifications with pagination support and infinite scroll functionality, replacing the previous useMessages hook.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
- import { useMessages } from "@web3inbox/widget-react"
+ import { useNotifications } from "@web3inbox/react"

- const { messages } = useMessages()
+ const notificationsPerPage = 5
+ const isInfiniteScroll = true
+
+ const { data: notifications, nextPage } = useNotifications(
+   notificationsPerPage,
+   isInfiniteScroll
+ )
+
+ const getMoreNotifications = () => {
+   nextPage()
+ }

----------------------------------------

TITLE: Disabling WalletConnect in ReOwn AppKit
DESCRIPTION: Disables the WalletConnect QR feature which is enabled by default.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_13

LANGUAGE: typescript
CODE:
enableWalletConnect: false;

----------------------------------------

TITLE: Installing Web3Inbox SDK with npm
DESCRIPTION: Command to install the Web3Inbox core and React packages using npm package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/react.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @web3inbox/core @web3inbox/react

----------------------------------------

TITLE: Emitting Session Events in WalletKit
DESCRIPTION: Shows how to emit session events such as account changes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_10

LANGUAGE: kotlin
CODE:
val sessionTopic: String = /*Topic of Session*/
val event: Wallet.Model.SessiomEvent = SessionEvent(name = "accountsChanged", data = "0x000000000")

val sessionEmit = Wallet.Params.SessionEmit(topic = sessionTopic, chainId = "eip155:1", event = event)

WalletKit.emitSessionEvent(sessionEmit) { error -> /*callback for error while emiting an event*/ }

----------------------------------------

TITLE: Fetching Subscription Notifications with Notify API in JavaScript
DESCRIPTION: Shows how to fetch notifications for a subscription using the Notify API. This function retrieves the notification history for a given account.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
const notifications = notifyClient.getNotificationHistory(account);

----------------------------------------

TITLE: Adding iOS Platform Version in Podfile
DESCRIPTION: Sets the minimum iOS platform version to 13.0 in your Podfile, which is required for the Reown AppKit to function properly.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#2025-04-10_snippet_0

LANGUAGE: ruby
CODE:
platform :ios, '13.0'

----------------------------------------

TITLE: Handling Session Proposal Expiry in TypeScript
DESCRIPTION: Shows how to handle session proposal expiry events using WalletKit, allowing for proper UI updates when a proposal expires.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
walletKit.on("proposal_expire", (event) => {
    // proposal expired and any modal displaying it should be removed
    const { id } = event;
});

----------------------------------------

TITLE: Subscribing to Universal Provider Events in TypeScript
DESCRIPTION: Examples of subscribing to various events emitted by the Universal Provider, including display_uri, session_ping, session_event, session_update, and session_delete.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/universal.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
// Subscribe for pairing URI
provider.on("display_uri", (uri) => {
  console.log("display_uri", uri);
});

// Subscribe to session ping
provider.on("session_ping", ({ id, topic }) => {
  console.log("session_ping", id, topic);
});

// Subscribe to session event
provider.on("session_event", ({ event, chainId }) => {
  console.log("session_event", event, chainId);
});

// Subscribe to session update
provider.on("session_update", ({ topic, params }) => {
  console.log("session_update", topic, params);
});

// Subscribe to session delete
provider.on("session_delete", ({ id, topic }) => {
  console.log("session_delete", id, topic);
});

----------------------------------------

TITLE: Setting Privacy Policy URL in ReOwn AppKit
DESCRIPTION: Sets a URL for the privacy policy link in the AppKit UI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_18

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  privacyPolicyUrl: "https://www.myprivacypolicy.com",
});

----------------------------------------

TITLE: Monitoring Web Socket Connection State in WalletKit
DESCRIPTION: This snippet shows how to track the connection state with the relay server. The connection state event is emitted whenever the connection status changes, allowing the wallet to update its UI accordingly.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#2025-04-10_snippet_8

LANGUAGE: kotlin
CODE:
val walletDelegate = object : WalletKit.WalletDelegate {
    override fun onConnectionStateChange(state: Wallet.Model.ConnectionState) {
        //Here this event is triggered when a connection state has changed
    }
    ...other callbacks
}
WalletKit.setWalletDelegate(walletDelegate)

----------------------------------------

TITLE: Adding Custom Chain Preset in Swift for AppKit
DESCRIPTION: This code snippet demonstrates how to add a custom chain preset to AppKit using the static method addChainPreset(). The method takes a Chain object as a parameter, allowing developers to extend the default set of chain options available in the application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/custom-chains.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
AppKit.addChainPreset(_ chain: Chain)

----------------------------------------

TITLE: Importing Theming Component in MDX
DESCRIPTION: Imports a theming component from the appkit shared snippets directory for use in the documentation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/theming.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
import Theming from "/snippets/appkit/shared/theming.mdx";

<Theming />

----------------------------------------

TITLE: Creating Wagmi and Solana Adapters for Multi-Chain Support in AppKit
DESCRIPTION: This snippet demonstrates how to create adapters for Wagmi (EVM chains) and Solana in AppKit. It shows the setup for multi-chain support, allowing one instance to support multiple networks simultaneously.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-w3m-to-reown.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
// 1. Create the Wagmi adapter
export const wagmiAdapter = new WagmiAdapter({
  ssr: true,
  projectId,
  networks,
});

// 2. Create Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],
});

----------------------------------------

TITLE: Accessing Theme Colors
DESCRIPTION: Shows how to access the current theme colors object.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
final colors = ReownAppKitModalTheme.colorsOf(context);

----------------------------------------

TITLE: Sending Messages with ever_sendMessage
DESCRIPTION: Creates and sends a message to the network, monitoring its processing and returning the transaction ID. Includes value transfer and payload specifications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#2025-04-10_snippet_1

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_sendMessage",
  "params": {
        "source_address": "0:695e42...b8d",
        "value": 1000000000,
        "bounce": False,
        "destAddress": "0:b38d96...708",
        "destPayload": {
            "abi": "",
            "method": "",
            "params": {}
        }
    }
}

----------------------------------------

TITLE: Request Rejection Implementation in Kotlin
DESCRIPTION: Demonstrates how to reject JSON-RPC requests from dApps by providing session topic and error data.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_27

LANGUAGE: kotlin
CODE:
val sessionTopic: String = /*Topic of Session*/
val jsonRpcResponseError: Sign.Model.JsonRpcResponse.JsonRpcError = /*Session Request ID along with error code and message*/
val result = Sign.Params.Response(sessionTopic = sessionTopic, jsonRpcResponse = jsonRpcResponseError)

SignClient.respond(result) { error -> /*callback for error while responding session request*/ }

----------------------------------------

TITLE: Using useAppKitEventSubscription with Wagmi
DESCRIPTION: Demonstrates how to use the useAppKitEventSubscription hook with Wagmi integration to subscribe to specific modal events like MODAL_OPEN. The hook accepts an event name and a callback function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_10

LANGUAGE: typescript
CODE:
import { useAppKitEventSubscription } from '@reown/appkit-wagmi-react-native'

useAppKitEventSubscription('MODAL_OPEN', newEvent => {
  // your code here
});

----------------------------------------

TITLE: Installing Ethers v5 Adapter with Bun
DESCRIPTION: Bun command to install AppKit with Ethers v5 adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_7

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

----------------------------------------

TITLE: Handling Pairing Expiry Events on Web and React Native
DESCRIPTION: This TypeScript code sets up an event listener for pairing expiration on Web or React Native. It responds to 'pairing_expire' events from the core.pairing API, which occur when a pairing expires after being inactive or active for a specific period.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
core.pairing.events.on("pairing_expire", (event) => {
    // pairing expired before user approved/rejected a session proposal
    const { topic } = topic;
});

----------------------------------------

TITLE: Setting Up ConnectOptions in Unity (C#)
DESCRIPTION: This code snippet shows how to configure ConnectOptions for a WalletConnect session in Unity. It defines required namespaces, methods, chains, and events for the Ethereum network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#2025-04-10_snippet_14

LANGUAGE: csharp
CODE:
ConnectOptions = new ConnectOptions
{
    RequiredNamespaces = new RequiredNamespaces
    {
        {
            "eip155", new ProposedNamespace
            {
                Methods = new[]
                {
                    "eth_sendTransaction",
                    "personal_sign",
                    "eth_signTypedData"
                },
                Chains = new[]
                {
                    "eip155:1"
                },
                Events = new[]
                {
                    "chainChanged",
                    "accountsChanged"
                },
            }
        }
    }
}

----------------------------------------

TITLE: Overriding AppKit CSS Styles with Theme Variables in TypeScript
DESCRIPTION: This code snippet illustrates how to customize AppKit's appearance by setting theme variables. It specifically shows how to change the font family and accent color. Additional variables can be set using the same pattern.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/themeVariables.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
themeVariables: {
  "--w3m-font-family": "Roboto, sans-serif",
  "--w3m-accent-color": "#F5841F",
  // ...
};

----------------------------------------

TITLE: Integrating Basic AppKit Configuration
DESCRIPTION: TypeScript implementation for a basic AppKit configuration without specific adapters. This basic setup still supports multiple networks from both EVM and non-EVM chains.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#2025-04-10_snippet_9

LANGUAGE: typescript
CODE:
import { createAppKit } from "@reown/appkit";
import { solana, solanaTestnet, solanaDevnet } from "@reown/appkit/networks";
import { mainnet, arbitrum, sepolia } from "@reown/appkit/networks";

// 1. Get projectId from https://cloud.reown.com
const projectId = "YOUR_PROJECT_ID";

// 2. Set up the metadata - Optional
const metadata = {
  name: "AppKit",
  description: "AppKit Example",
  url: "https://example.com", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
};

// 3. Create the AppKit instance
const modal = createAppKit({
  networks: [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true,
  },
});

----------------------------------------

TITLE: Installing @reown/appkit-siwx Package
DESCRIPTION: Commands for installing the @reown/appkit-siwx package using different package managers (npm, Yarn, Bun, pnpm).
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-cloud-auth.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwx

LANGUAGE: bash
CODE:
yarn add @reown/appkit-siwx

LANGUAGE: bash
CODE:
bun a @reown/appkit-siwx

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-siwx

----------------------------------------

TITLE: Configuring Optional Namespaces for Multiple Blockchain Support
DESCRIPTION: Code showing how to set up optional namespaces in ReownAppKitModal to support EVM, Solana, and Polkadot chains. This configuration specifies chains, methods, and events for each blockchain network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
optionalNamespaces: {
  'eip155': RequiredNamespace.fromJson({
    'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
      namespace: 'eip155',
    ).map((chain) => '${chain.chainId}').toList(),
    'methods': NetworkUtils.defaultNetworkMethods['eip155']!.toList(),
    'events': NetworkUtils.defaultNetworkEvents['eip155']!.toList(),
  }),
  'solana': RequiredNamespace.fromJson({
    'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
      namespace: 'solana',
    ).map((chain) => '${chain.chainId}').toList(),
    'methods': NetworkUtils.defaultNetworkMethods['solana']!.toList(),
    'events': [],
  }),
  'polkadot': RequiredNamespace.fromJson({
    'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
      namespace: 'polkadot',
    ).map((chain) => '${chain.chainId}').toList(),
    'methods': [
      'polkadot_signMessage',
      'polkadot_signTransaction',
    ],
    'events': []
  }),
},

----------------------------------------

TITLE: Fetching Active Subscriptions for an Account
DESCRIPTION: Demonstrates how to retrieve all active notification subscriptions for a blockchain account. The method returns a map with topics as keys and subscription objects as values.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
val account: String = // CAIP-10 account
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec
val params = Notify.Params.GetActiveSubscriptions(account, timeout)

try {
  val result: Map<String, Notify.Model.Subscription> = NotifyClient.getActiveSubscriptions(params)
} catch (e: Exception) {
  // callback for when the get active subscriptions request has failed
}

----------------------------------------

TITLE: Configuring AppKit Authentication with Ethers
DESCRIPTION: Example of setting up AppKit authentication using Ethers adapter. Note that ethers v5 does not support social logins and requires upgrading to v6 for full functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/socials.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata,
  features: {
    email: true, // default to true
    socials: [
      "google",
      "x",
      "github",
      "discord",
      "apple",
      "facebook",
      "farcaster",
    ],
    emailShowWallets: true, // default to true
  },
  allWallets: "SHOW", // default to SHOW
});

----------------------------------------

TITLE: Disconnecting from a WalletConnect Session in Swift
DESCRIPTION: Terminates an active wallet connection by disconnecting from the specified topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
try await AppKit.instance.disconnect(topic: topic)

----------------------------------------

TITLE: Rendering Transaction Button with Conditional Display
DESCRIPTION: JSX code that renders a button to trigger the transaction sending function. The button is only displayed when the user is connected to their wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_11

LANGUAGE: jsx
CODE:
return (
  isConnected && (
    <div>
      <button onClick={handleSendTx}>Send Transaction</button>
    </div>
  )
);

----------------------------------------

TITLE: Setting Custom Font in CSS
DESCRIPTION: This CSS snippet shows how to override the default font in the AppKit by referencing a custom font resource.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/customization.mdx#2025-04-10_snippet_2

LANGUAGE: css
CODE:
@import url("/Packages/com.reown.appkit.unity/UI Toolkit/AppKit Base Theme.tss");

* {
    -unity-font-definition: resource("Custom Fonts/Comic Sans SDF Regular");
}

----------------------------------------

TITLE: Rejecting Session Proposals with WalletKit in TypeScript
DESCRIPTION: Demonstrates how to reject a session proposal using WalletKit, including error handling and UI feedback.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
try {
    await walletKit.rejectSession(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

----------------------------------------

TITLE: Switching Networks with AppKit in Vue
DESCRIPTION: Demonstrates how to initialize AppKit with multiple networks and then switch to a different network. The example configures AppKit with mainnet and arbitrum, then switches to polygon.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/composables.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit/vue";
import { mainnet, arbitrum, polygon } from "@reown/appkit/networks";

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  },
});

modal.switchNetwork(polygon);

----------------------------------------

TITLE: Opening WalletConnect Modal with Android Navigation DSL
DESCRIPTION: Code snippet showing how to open the WalletConnect Modal in Android when using the Kotlin DSL for navigation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_28

LANGUAGE: kotlin
CODE:
import androidx.navigation.fragment.findNavController
import com.walletconnect.wcmodal.ui.openWalletConnectModal

findNavController().openWalletConnectModal()

----------------------------------------

TITLE: Defining ProjectId Parameter in TypeScript for Reown AppKit
DESCRIPTION: This snippet defines the projectId parameter type in TypeScript for Reown AppKit. The projectId is a string that enables wallet/chain logos, WalletConnect RPC, support for WalletGuide wallets, and WalletConnect v2 functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/projectId.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
projectId: string

----------------------------------------

TITLE: Retrieving Past Messages for a Subscription
DESCRIPTION: Code for getting the notification history for a specific subscription topic, keyed by messageId.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_43

LANGUAGE: javascript
CODE:
// Will return all past Notify messages for the provided subscription topic, keyed by messageId.
const messageHistory = notifyClient.getNotificationHistory({ topic });

----------------------------------------

TITLE: Configuring Android Wallet Detection in AndroidManifest.xml
DESCRIPTION: Adds wallet package queries to the Android manifest file to enable detection of installed wallets on the device. This configuration allows AppKit to identify which wallets are available for connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#2025-04-10_snippet_2

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <queries>
        <package android:name="io.metamask"/>
        <package android:name="com.wallet.crypto.trustapp"/>
        <package android:name="io.gnosis.safe"/>
        <package android:name="me.rainbow"/>
        <!-- Add other wallet schemes names here -->
    </queries>

    <application>
        ...
    </application>
</manifest>

----------------------------------------

TITLE: Unsubscribing from a Dapp with Notify API in JavaScript
DESCRIPTION: Demonstrates how to unsubscribe from a dapp using the Notify API. This function allows a user to opt-out of receiving notifications from a specific dapp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#2025-04-10_snippet_8

LANGUAGE: javascript
CODE:
notifyClient.deleteSubscription({
  topic: "subscription_topic_to_unsubscribe_from",
});

----------------------------------------

TITLE: Signing a Single Transaction with near_signTransaction in NEAR
DESCRIPTION: This method signs a single encoded NEAR transaction. It leverages near-api-js for interoperability with dApps, requiring a transaction encoded via transactions.Transaction.encode() and returning a signed transaction encoded via transactions.SignedTransaction.encode().
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/near-rpc.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "near_signTransaction",
  "params": {
    "transaction": {
    "type": "Buffer",
      "data": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 51, 56, 55, 51, 57, 56 ...]
    }
  }
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
  "type": "Buffer",
    "data": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 51, 56, 55, 51, 57, 56 ...]
  }
}

----------------------------------------

TITLE: Configuring Included Wallets in AppKit
DESCRIPTION: Initializes AppKit with specific wallet IDs to prioritize from WalletGuide. The order of wallets in the array is respected in the UI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#2025-04-10_snippet_0

LANGUAGE: csharp
CODE:
await AppKit.InitializeAsync(new AppKitConfig
{
    includedWalletIds = new []
    {
        "c57ca95...74e97267d96",
    }
});

----------------------------------------

TITLE: Creating Authentication Payload and Message
DESCRIPTION: Demonstrates how to create and populate authentication payloads with supported chains and methods, and format authentication messages using walletKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth-siws.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { populateAuthPayload } from "@walletconnect/utils";

// Solana chains that your wallet supports
const supportedChains = [ "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp", "solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ" ]
// Solana methods that your wallet supports
const supportedMethods = ["solana_signMessage", "solana_signTransaction"];
// Populate the authentication payload with the supported chains and methods
const authPayload = populateAuthPayload({
  authPayload: payload.params.authPayload,
  chains: supportedChains,
  methods: supportedMethods,
});
// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format
const iss = `solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp:8nJ694gNrHx76L2eyJzQw7JBGRoW8Fdtrxf588pEqyYh`;
// Now you can use the authPayload to format the authentication message
const message = walletKit.formatAuthMessage({
  request: authPayload,
  iss
});

// Present the authentication message to the user
...

----------------------------------------

TITLE: Configuring AppKit Modal with Link Mode in Flutter
DESCRIPTION: This code snippet demonstrates how to initialize ReownAppKitModal with Link Mode enabled by setting the linkMode property to true in the PairingMetadata configuration. It includes the project ID and other required metadata properties.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/link-mode.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: true,
    ),
  ),
);

----------------------------------------

TITLE: Installing Web3Inbox Widget with pnpm
DESCRIPTION: Command to install Web3Inbox core and React widget packages using pnpm package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/embedded-widget/about.mdx#2025-04-10_snippet_3

LANGUAGE: bash
CODE:
pnpm add @web3inbox/core @web3inbox/widget-react

----------------------------------------

TITLE: Using useWalletInfo with Ethers v5
DESCRIPTION: Demonstrates how to use the useWalletInfo hook with Ethers v5 integration to retrieve metadata information from the connected wallet. The hook returns a walletInfo object containing wallet details.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_15

LANGUAGE: typescript
CODE:
import { useWalletInfo } from '@reown/appkit-ethers5-react-native'

const { walletInfo } = useWalletInfo()

----------------------------------------

TITLE: Installing Solana Adapter with Yarn
DESCRIPTION: Yarn command to install AppKit with Solana adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_14

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Registering Device Token for Push Notifications in WalletKit
DESCRIPTION: Demonstrates how to register a device token for Firebase Cloud Messaging push notifications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#2025-04-10_snippet_14

LANGUAGE: kotlin
CODE:
val firebaseAccessToken: String = //FCM access token received through the Firebase Messaging SDK

WalletKit.registerDeviceToken(
    firebaseAccessToken,
    onSuccess = {
        // callback triggered once registered successfully with the Push Server
    },
    onError = { error: Wallet.Model.Error ->
        // callback triggered if there's an exception thrown during the registration process
    })

----------------------------------------

TITLE: Extracting Chain ID from SIWE Message
DESCRIPTION: Example of using the SIWEUtils utility to extract the chain ID from a SIWE message.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
SIWEUtils.getChainIdFromMessage(message);

----------------------------------------

TITLE: Defining CSS Custom Properties for Text Styling in Web3Modal
DESCRIPTION: This snippet showcases the CSS custom properties used for granular text styling in Web3Modal. It includes variables for font size, weight, line height, letter spacing, text transform, and font family for different text variants.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/themeVariablesTable.mdx#2025-04-10_snippet_1

LANGUAGE: CSS
CODE:
--w3m-text-big-bold-size: 2rem;
--w3m-text-big-bold-weight: bold;
--w3m-text-big-bold-line-height: 14px;
--w3m-text-big-bold-letter-spacing: 1px;
--w3m-text-big-bold-text-transform: uppercase;
--w3m-text-big-bold-font-family: Helvetica, sans-serif;

--w3m-text-medium-regular-size: 1rem;
--w3m-text-medium-regular-weight: normal;
--w3m-text-medium-regular-line-height: 14px;
--w3m-text-medium-regular-letter-spacing: 1px;
--w3m-text-medium-regular-text-transform: capitalize;
--w3m-text-medium-regular-font-family: Arial, sans-serif;

--w3m-text-small-regular-size: 0.75rem;
--w3m-text-small-regular-weight: normal;
--w3m-text-small-regular-line-height: 14px;
--w3m-text-small-regular-letter-spacing: 1px;
--w3m-text-small-regular-text-transform: capitalize;
--w3m-text-small-regular-font-family: Helvetica, sans-serif;

--w3m-text-small-thin-size: 0.65rem;
--w3m-text-small-thin-weight: lighter;
--w3m-text-small-thin-line-height: 0.8rem;
--w3m-text-small-thin-letter-spacing: 0.01em;
--w3m-text-small-thin-text-transform: none;
--w3m-text-small-thin-font-family: Arial, sans-serif;

--w3m-text-xsmall-bold-size: 0.5rem;
--w3m-text-xsmall-bold-weight: bold;
--w3m-text-xsmall-bold-line-height: 10px;
--w3m-text-xsmall-bold-letter-spacing: -0.03em;
--w3m-text-xsmall-bold-text-transform: uppercase;
--w3m-text-xsmall-bold-font-family: Arial, sans-serif;

--w3m-text-xsmall-regular-size: 0.5rem;
--w3m-text-xsmall-regular-weight: normal;
--w3m-text-xsmall-regular-line-height: 10px;
--w3m-text-xsmall-regular-letter-spacing: 0.1em;
--w3m-text-xsmall-regular-text-transform: none;
--w3m-text-xsmall-regular-font-family: Helvetica, sans-serif;

----------------------------------------

TITLE: Initializing Reown AppKit Modal with Configuration Options
DESCRIPTION: Shows how to create a ReownAppKitModal instance with required parameters like context and projectId, and optional configurations including metadata, analytics settings, and wallet customizations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/options.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect( // OPTIONAL
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: false,
    ),
  ),
  // disconnectOnDispose: false,
  // enableAnalytics: true, // OPTIONAL - null by default
  // siweConfig: SIWEConfig(...), // OPTIONAL - null by default
  // featuresConfig: FeaturesConfig(
  //   email: true, // OPTIONAL - false by default
  //   socials: [...], // OPTIONAL - empty by default
  //   showMainWallets: true, // OPTIONAL - true by default
  // ),
  // getBalanceFallback: () async { }, OPTIONAL - null by default
  // requiredNamespaces: {}, OPTIONAL - null by default
  // optionalNamespaces: {}, OPTIONAL - null by default
  // featuredWalletIds: {}, OPTIONAL - null by default
  // includedWalletIds: {}, OPTIONAL - null by default
  // excludedWalletIds: {}, OPTIONAL - null by default
);

----------------------------------------

TITLE: Removing an Existing Subscription
DESCRIPTION: Code to delete a notification subscription using its topic identifier.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_9

LANGUAGE: javascript
CODE:
// `topic` - subscription topic of the subscription that should be deleted.
await notifyClient.deleteSubscription({ topic });

----------------------------------------

TITLE: Checking Dark Mode Status
DESCRIPTION: Shows how to check if the current theme is in dark mode using context methods.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
final isDarkMode = ReownAppKitModalTheme.of(context).isDarkMode;
final isMaybeDarkMode = ReownAppKitModalTheme.maybeOf(context)?.isDarkMode;

----------------------------------------

TITLE: Enabling Legal Checkbox in ReOwn AppKit
DESCRIPTION: Enables the terms of service and/or privacy policy checkbox in the UI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_23

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  features: {
    legalCheckbox: true,
  },
});

----------------------------------------

TITLE: Enabling Legal Checkbox in ReOwn AppKit
DESCRIPTION: Enables the terms of service and/or privacy policy checkbox in the UI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_23

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  features: {
    legalCheckbox: true,
  },
});

----------------------------------------

TITLE: Implementing Custom SIWXConfig for AppKit in TypeScript
DESCRIPTION: This example demonstrates how to implement a custom SIWXConfig interface and use it with createAppKit function. It includes placeholder implementations for each required method in the SIWXConfig interface.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-custom.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { createAppKit, type SIWXConfig } from '@reown/appkit'

const siwx: SIWXConfig = {
  createMessage: async (input) => {
    // Implement your logic to create a message
    return 'my message'
  }
  addSession: async (session) => {
    // Implement your logic to add a session
  },
  revokeSession: async (chainId, address) => {
    // Implement your logic to revoke a session
  },
  setSessions: async (sessions) => {
    // Implement your logic to set sessions
  },
  getSessions: async (chainId, address) => {
    // Implement your logic to get sessions
    return []
  }
}

createAppKit({
  // ... your configuration
  siwx
})

----------------------------------------

TITLE: Using AppKit Provider Hook for Wallet Integration
DESCRIPTION: React hook that provides wallet provider functionality for signing messages using Ethers.js integration
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { BrowserProvider } from "ethers";
import { useAppKitProvider } from "@reown/appkit/react";

function Components() {
  const { walletProvider } = useAppKitProvider("eip155");

  async function onSignMessage() {
    const provider = new BrowserProvider(walletProvider);
    const signer = await provider.getSigner();
    const signature = await signer?.signMessage("Hello AppKit Ethers");
    console.log(signature);
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>;
}

----------------------------------------

TITLE: ColorPalette Data Class Definition
DESCRIPTION: Data class defining the color palette structure for theme customization
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#2025-04-10_snippet_5

LANGUAGE: kotlin
CODE:
    data class ColorPalette(
        val color100: Color,
        val color125: Color,
        val color150: Color,
        val color175: Color,
        val color200: Color,
        val color225: Color,
        val color250: Color,
        val color275: Color,
        val color300: Color,
    )

----------------------------------------

TITLE: Using useAppKit Hook for Modal Control in React
DESCRIPTION: This hook allows controlling the AppKit modal with open and close functions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { useAppKit } from "@reown/appkit/react";

export default function Component() {
  const { open, close } = useAppKit();
}

----------------------------------------

TITLE: Using AppKit Provider Hook for Message Signing
DESCRIPTION: Implementation of message signing functionality using the AppKit provider hook with Solana wallet integration. Demonstrates getting the wallet provider, signing a message, and handling errors.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { useAppKitAccount, useAppKitProvider } from "@reown/appkit/react";
import type { Provider } from "@reown/appkit-adapter-solana";

function SignMessage() {
  // 0. Get account and provider
  const { address } = useAppKitAccount();
  const { walletProvider } = useAppKitProvider<Provider>("solana");

  // 1. Create a function to sign a message
  async function onSignMessage() {
    try {
      if (!walletProvider || !address) {
        throw Error("user is disconnected");
      }

      // 2. Encode message and sign it
      const encodedMessage = new TextEncoder().encode("Hello from AppKit");
      const signature = await walletProvider.signMessage(encodedMessage);

      console.log(signature);
    } catch (err) {
      // Handle Error Here
    }
  }

  // 3. Create a button to trigger the function
  return <button onClick={onSignMessage}>Sign Message</button>;
}

----------------------------------------

TITLE: Implementing AppKit with Plain JavaScript
DESCRIPTION: Code example showing how to use Reown AppKit with plain JavaScript. It demonstrates adding a click event listener to a button element to open the AppKit modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_6

LANGUAGE: js
CODE:
document.getElementById('my-button').addEventListener('click', () => {
    modal.open()
})

<button id="my-button">Connect Wallet</button>

----------------------------------------

TITLE: Registering an Identity Key as a Wallet in React Native
DESCRIPTION: Code for registering an identity key for all domains (wallet) to enable cross-device account syncing in WalletConnect NotifyClient.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_38

LANGUAGE: javascript
CODE:
const account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`
const domain =  'app.mydomain.com', // pass the domain (i.e. the hostname) where your dapp is hosted.
const allApps =  true // The user will be prompted to authorize this wallet to send and receive messages on their behalf for ALL domains using their WalletConnect identity.



// No need to register and sign message if already registered.
if (notifyClient.isRegistered({ account, domain, allApps })) return;

const {registerParams, message}  = notifyClient.prepareRegistration({
  account,
  domain,
  allApps
});

const signature = await ethersWallet.signMessage(message);

await notifyClient.register({
  registerParams,
  signature,
})

----------------------------------------

TITLE: Configuring Deep Link Intent Filter for Android
DESCRIPTION: Adds intent filter to Android manifest to enable deep linking, allowing wallets to redirect back to your app after connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_5

LANGUAGE: xml
CODE:
<intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <!-- your own custom scheme -->
    <!-- Should be the same you set on Redirect.native on Flutter side -->
    <!-- Be mind of removing :// for this step -->
    <data android:scheme="exampleapp" />
</intent-filter>

----------------------------------------

TITLE: Importing Theming Component in JSX
DESCRIPTION: This snippet imports a Theming component from a shared MDX file. It demonstrates how to include external theming documentation in the current page.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/theming.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Theming from "/snippets/appkit/shared/theming.mdx";

<Theming />

----------------------------------------

TITLE: Defining SignPSBTParams Type in TypeScript
DESCRIPTION: This snippet defines the SignPSBTParams type, which includes the PSBT to be signed, sign inputs details, and an optional broadcast flag.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
export type SignPSBTParams = {
  /**
   * The PSBT to be signed, string base64 encoded
   */
  psbt: string
  signInputs: {
    /**
     * The address whose private key to use for signing.
     */
    address: string
    /**
     * Specifies which input to sign
     */
    index: number
    /**
     * Specifies which part(s) of the transaction the signature commits to
     */
    sighashTypes: number[]
  }[]

  /**
   * If `true`, the PSBT will be broadcasted after signing. Default is `false`.
   */
  broadcast?: boolean
}

----------------------------------------

TITLE: Approving WalletConnect Session in JavaScript
DESCRIPTION: Handles session proposals by setting up an event listener and approving the session with the given namespaces.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
walletKit.on(
  "session_proposal",
  async (proposal: WalletKitTypes.SessionProposal) => {
    const session = await walletKit.approveSession({
      id: proposal.id,
      namespaces,
    });
  }
);
await walletKit.pair({ uri });

----------------------------------------

TITLE: Enabling Coinbase Wallet in Info.plist (XML)
DESCRIPTION: This XML code shows how to add the Coinbase Wallet scheme to the Info.plist file for enabling Coinbase Wallet support in AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#2025-04-10_snippet_4

LANGUAGE: xml
CODE:
<key>LSApplicationQueriesSchemes</key>
<array>
  <string>cbwallet</string>
  <!-- Any other scheme previously added -->
</array>

----------------------------------------

TITLE: Token Asset Management with ever_addTokenAsset
DESCRIPTION: Adds TIP-3 or native tokens to a selected account. Returns boolean indicating if asset was newly added.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#2025-04-10_snippet_6

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_addTokenAsset",
  "params": {
        "sourceAddress": "0:695e42...b8d",
        "rootContract": "0:b38d96...708"
    }
}

----------------------------------------

TITLE: Creating and Configuring Custom Network in Reown AppKit
DESCRIPTION: This code snippet demonstrates how to define a custom network using the defineChain function and configure it in the AppKit. It includes setting up network properties such as ID, name, native currency, RPC URLs, and block explorers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/custom-networks.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import { defineChain } from '@reown/appkit/networks';

// Define the custom network
const customNetwork = defineChain({
  id: 123456789,
  caipNetworkId: 'eip155:123456789',
  chainNamespace: 'eip155',
  name: 'Custom Network',
  nativeCurrency: {
    decimals: 18,
    name: 'Ether',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: {
      http: ['RPC_URL'],
      webSocket: ['WS_RPC_URL'],
    },
  },
  blockExplorers: {
    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },
  },
  contracts: {
    // Add the contracts here
  }
})

// Then pass it to the AppKit
createAppKit({
    adapters: [...],
    networks: [customNetwork],
    chainImages: { // Customize networks' logos
      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'
    }
})

----------------------------------------

TITLE: Importing React Native Compatibility Layer
DESCRIPTION: Required import for React Native polyfills that must be done before any @reown/* dependencies.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import "@walletconnect/react-native-compat";
// Other imports

----------------------------------------

TITLE: Creating Custom Buttons with ReownAppKit
DESCRIPTION: Shows how to override the default AppKit buttons with custom button implementations while maintaining the core functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_13

LANGUAGE: javascript
CODE:
AppKitModalConnectButton(
  appKit: _appKitModal,
  custom: MyCustomButton(
    onPressed: () {
      _appKitModal.openModalView();
    },
    child: const Text('CONNECT WALLET'),
  ),
),

----------------------------------------

TITLE: Installing Basic AppKit Package
DESCRIPTION: Installation commands for the core AppKit package using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#2025-04-10_snippet_4

LANGUAGE: bash
CODE:
npm install @reown/appkit

LANGUAGE: bash
CODE:
yarn add @reown/appkit

LANGUAGE: bash
CODE:
bun a @reown/appkit

LANGUAGE: bash
CODE:
pnpm add @reown/appkit

----------------------------------------

TITLE: React Native Clipboard Copy Handler
DESCRIPTION: Implementation of the onCopyClipboard function in React Native that allows copying a value to the clipboard, used for the Copy button in QR Code view.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#2025-04-10_snippet_4

LANGUAGE: ts
CODE:
onCopyClipboard: (value: string) => void;

//example
const onCopyClipboard = (value: string) => {
  Clipboard.setString(value);
};

----------------------------------------

TITLE: Closing a WalletConnect Modal in JavaScript
DESCRIPTION: Example showing how to close an open WalletConnect modal using the closeModal method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_15

LANGUAGE: javascript
CODE:
modal.closeModal();

----------------------------------------

TITLE: Closing Modal in Unity AppKit
DESCRIPTION: Method to close the currently open modal view in the AppKit interface.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_1

LANGUAGE: csharp
CODE:
AppKit.CloseModal();

----------------------------------------

TITLE: Web3Inbox Notification Interface Definition in TypeScript
DESCRIPTION: This code defines the interface for the notification object received from Web3Inbox. It specifies the structure with properties including title, body, timestamp, ID, URL, and notification type.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/events/react.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
interface NotifyNotification {
  title: string
  sentAt: number
  body: string
  id: string
  url: string | null
  type: string
}

----------------------------------------

TITLE: Adding Reown Dependencies to App Module
DESCRIPTION: Adds the required Reown SDK dependencies to the app/build.gradle.kts file, including the android-bom platform, android-core, and notify packages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/installation.mdx#2025-04-10_snippet_1

LANGUAGE: gradle
CODE:
implementation(platform("com.reown:android-bom:release_version"))
implementation("com.reown:android-core")
implementation("com.reown:notify")

----------------------------------------

TITLE: Adding AppKit Dependencies to Android App
DESCRIPTION: Configuration for the app-level build.gradle.kts file to implement AppKit and Android Core dependencies using the BOM version management.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/installation.mdx#2025-04-10_snippet_1

LANGUAGE: gradle
CODE:
implementation(platform("com.reown:android-bom:$BOM_VERSION"))
implementation("com.reown:android-core")
implementation("com.reown:appkit")

----------------------------------------

TITLE: Enabling Coinbase Integration in WalletConnect AppKit
DESCRIPTION: This snippet shows how to initialize WalletConnect AppKit with Coinbase Wallet integration enabled. This feature is currently in Beta and may have breaking changes in future releases.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
val initParams = Modal.Params.Init(core = CoreClient, coinbaseEnabled = true)

AppKit.initialize(
    init = initParams,
    onSuccess = {
        // Callback will be called if initialization is successful
    },
    onError = { error ->
        // Error will be thrown if there's an issue during initialization
    }
)

----------------------------------------

TITLE: Installing AppKit with Ethers v5 for JavaScript
DESCRIPTION: Commands to install AppKit and its dependencies for use with Ethers v5 in JavaScript projects using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

----------------------------------------

TITLE: Color Attributes Definition in XML
DESCRIPTION: XML attributes definition for theme colors in View implementation
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#2025-04-10_snippet_6

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>

<resources>
    <attr name="modalAccent100" format="color"/>
    <attr name="modalAccent90" format="color"/>
    <attr name="modalAccent80" format="color"/>
    <attr name="modalForeground100" format="color"/>
    <attr name="modalForeground125" format="color"/>
    <attr name="modalForeground150" format="color"/>
    <attr name="modalForeground175" format="color"/>
    <attr name="modalForeground200" format="color"/>
    <attr name="modalForeground225" format="color"/>
    <attr name="modalForeground250" format="color"/>
    <attr name="modalForeground275" format="color"/>
    <attr name="modalForeground300" format="color"/>
    <attr name="modalBackground100" format="color"/>
    <attr name="modalBackground125" format="color"/>
    <attr name="modalBackground150" format="color"/>
    <attr name="modalBackground175" format="color"/>
    <attr name="modalBackground200" format="color"/>
    <attr name="modalBackground225" format="color"/>
    <attr name="modalBackground250" format="color"/>
    <attr name="modalBackground275" format="color"/>
    <attr name="modalBackground300" format="color"/>
    <attr name="modalGrayGlass" format="color"/>
    <attr name="modalSuccess" format="color"/>
    <attr name="modalError" format="color"/>

</resources>

----------------------------------------

TITLE: Using AppKit Wallet Button Component
DESCRIPTION: Example of implementing the wallet button component with the MetaMask wallet option.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/components.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
<appkit-wallet-button wallet="metamask" />

----------------------------------------

TITLE: Custom Theme Configuration
DESCRIPTION: Shows how to create custom light and dark themes by modifying ReownAppKitModalThemeData parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
final _themeData = ReownAppKitModalThemeData(
  lightColors: ReownAppKitModalColors.lightMode.copyWith(
    accent100: Colors.red,
    background125: Colors.yellow.shade300,
  ),
  darkColors: ReownAppKitModalColors.darkMode.copyWith(
    accent100: Colors.green,
    background125: Colors.brown,
  ),
);

----------------------------------------

TITLE: Using useAppKitProvider Hook with Ethers.js
DESCRIPTION: This hook returns the walletProvider and WalletProviderType. It demonstrates how to integrate with Ethers.js to create a provider, get a signer, and sign messages in a React Native application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/hooks.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { BrowserProvider } from "ethers";
import { useAppKitProvider } from "@reown/appkit-ethers-react-native";

function Components() {
  const { walletProvider } = useAppKitProvider();

  async function onSignMessage() {
    const ethersProvider = new BrowserProvider(walletProvider);
    const signer = await ethersProvider.getSigner();
    const message = "hello appkit rn + ethers";
    const signature = await signer.signMessage(message);
    console.log(signature.toString());
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>;
}

----------------------------------------

TITLE: Opening On-Ramp Modal using JavaScript API
DESCRIPTION: This code snippet demonstrates how to programmatically open the On-Ramp modal using the modal.open() method. It specifies the 'OnRampProviders' view to be displayed in the modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/transactions/onramp.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
modal.open({ view: 'OnRampProviders' })

----------------------------------------

TITLE: Installing AppKit CLI for Quick Setup
DESCRIPTION: Command to install the Reown AppKit CLI tool which provides a guided setup process for creating a new project with your preferred framework and blockchain library.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npx @reown/appkit-cli

----------------------------------------

TITLE: Handling Push Notifications with Notification Channels in Android
DESCRIPTION: Implementation of the onMessage method that creates notification channels based on message type for granular notification control. It builds notification channels per dapp and notification type, allowing users to manage notification preferences by type.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_33

LANGUAGE: kotlin
CODE:
override fun onMessage(message: Notify.Model.Message, originalMessage: RemoteMessage) {
    val appMetadata = NotifyClient.getActiveSubscriptions()[message.topic]?.metadata ?: throw IllegalStateException("No active subscription for topic: ${message.topic}")
    val appDomain = URI(appMetadata.url).host ?: throw IllegalStateException("Unable to parse domain from $appMetadata.url")

    val typeName = NotifyClient.getNotificationTypes(Notify.Params.NotificationTypes(appDomain))[message.type]?.name
        ?: throw IllegalStateException("No notification type for topic:${message.topic} and type: ${message.type}")

    val channelId = message.type
    val channelName = (appMetadata.name + ": " + typeName)

    val notificationBuilder = NotificationCompat.Builder(this, channelId)
        .setContentTitle(message.title)
        .setSmallIcon(android.R.drawable.ic_popup_reminder) // specify icon for notification
        .setContentText(message.body)
        .setAutoCancel(true) // clear notification after click
        .setSound(defaultSoundUri) // specify sound for notification
        .setContentIntent(pendingIntent) // specify pendingIntent

    // Since android Oreo notification channel is needed.
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_HIGH)
        notificationManager.createNotificationChannel(channel)
    }

    notificationManager.notify(message.hashCode(), notificationBuilder.build()) // specify id of notification
}

----------------------------------------

TITLE: Configuring Android Manifest for Installed Wallet Detection
DESCRIPTION: This XML snippet demonstrates how to configure the Android Manifest to detect installed wallets on the device. The <queries> element specifies which wallet packages should be detectable by the app.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#2025-04-10_snippet_2

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <queries>
        <package android:name="..."/>
    </queries>

    <application>
        ...
    </application>
</manifest>

----------------------------------------

TITLE: Creating a Custom SIWX Storage
DESCRIPTION: Example of implementing the SIWXStorage interface to create a custom storage solution for SIWX sessions, handling addition, retrieval, updating, and deletion of sessions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
import type { SIWXSession } from "@reown/appkit-core";
import type { SIWXStorage } from "@reown/appkit-siwx";

export class MyStorage implements SIWXStorage {
  add(session: SIWXSession): Promise<void> {
    // Implement your logic to add a session
  }

  set(sessions: SIWXSession[]): Promise<void> {
    // Implement your logic to set sessions
  }

  get(chainId: CaipNetworkId, address: string): Promise<SIWXSession[]> {
    // Implement your logic to get sessions
    return [];
  }

  delete(chainId: string, address: string): Promise<void> {
    // Implement your logic to delete a session
  }
}

----------------------------------------

TITLE: React Native Pairing API Methods
DESCRIPTION: Comprehensive example of all public Pairing API methods in React Native including creation, pairing, activation, and management.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_17

LANGUAGE: typescript
CODE:
const {topic, uri} = await sdkClient.core.pairing.create()

await sdkClient.core.pairing.pair({ uri: "wc:1b3eda3f4..." })

await sdkClient.core.pairing.activate({ topic: "1b3eda3f4..." })

await sdkClient.core.pairing.updateExpiry({ topic: "1b3eda3f4...", expiry: 60 })

await sdkClient.core.pairing.updateMetadata({ topic: "1b3eda3f4...", metadata: { name: "MyDapp", ... } })

const pairings = sdkClient.core.pairing.getPairings()

await sdkClient.core.pairing.ping({ topic: "1b3eda3f4..." })

await sdkClient.core.pairing.disconnect({ topic: "1b3eda3f4..." })

----------------------------------------

TITLE: Opening and Closing WalletConnectModal in JavaScript
DESCRIPTION: Demonstrates how to trigger the WalletConnectModal to open with a connection URI and later close it programmatically.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
await modal.openModal({
  uri: "YOUR_CONNECTION_URI",
});

// Do some work...

modal.closeModal();

----------------------------------------

TITLE: Installing Ethereum Provider using package managers
DESCRIPTION: Commands for installing the @walletconnect/ethereum-provider package using npm, Yarn, Bun, or pnpm.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/ethereum.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @walletconnect/ethereum-provider

LANGUAGE: bash
CODE:
yarn add @walletconnect/ethereum-provider

LANGUAGE: bash
CODE:
bun add @walletconnect/ethereum-provider

LANGUAGE: bash
CODE:
pnpm add @walletconnect/ethereum-provider

----------------------------------------

TITLE: Initializing AppKit with Metadata and Configuration
DESCRIPTION: Setting up metadata and creating an AppKit modal instance with the wagmi adapter and project configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#2025-04-10_snippet_6

LANGUAGE: tsx
CODE:
const client = new QueryClient()

// Set up metadata
const metadata = {
  //this is optional
  name: 'appkit-example',
  description: 'AppKit Example',
  url: 'https://exampleapp.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/37784886']
}

// Create modal
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

----------------------------------------

TITLE: Data Decryption with ever_decryptData
DESCRIPTION: Decrypts encrypted data using ChaCha20Poly1305 algorithm. Returns base64 encoded decrypted data.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#2025-04-10_snippet_8

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_decryptData",
  "params": {
       "sourceAddress": "0:695e42...b8d",
       "algorithm": "ChaCha20Poly1305",
       "recipientPublicKey": "0x6e74...4e95",
       "data": "ZW5jRGF0YTE=",
       "nonce": "bm9uY2Ux"
  }
}

----------------------------------------

TITLE: Configuring Featured Wallet IDs in Reown AppKit
DESCRIPTION: Demonstrates how to override default recommended wallets with a prioritized list of wallet IDs. This configuration allows customizing which wallets are prominently displayed to users.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/options.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
final Set<String> featuredWalletIds = {
  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask
  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0', // Trust
  'fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa', // Coinbase Wallet
}

----------------------------------------

TITLE: Installing AppKit SIWX Package
DESCRIPTION: Commands for installing the AppKit SIWX package using different package managers. This is a prerequisite for implementing SIWX functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/travel-rule.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwx

LANGUAGE: bash
CODE:
yarn add @reown/appkit-siwx

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-siwx

LANGUAGE: bash
CODE:
bun add @reown/appkit-siwx

----------------------------------------

TITLE: Adding a Signature to a Multi-signed Payment Transaction with xrpl_signTransactionFor in XRPL
DESCRIPTION: This example shows how to use the xrpl_signTransactionFor method to add a signature to a multi-signed payment transaction on the XRP Ledger. The transaction already has signatures from three signers, and this request adds a fourth signature, completing the required signatures. The request includes the signer address and transaction details, and the response contains the fully signed transaction ready for submission.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/xrpl-rpc.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "xrpl_signTransactionFor",
    "params": {
        "submit": true,
        "tx_signer": "rJ4wmkgK8n93UjtaqQTaj1vxBwQWdLrBjP",
        "tx_json": {
            "Account": "rh2EsAe2xVE71ZBjx7oEL2zpD4zmSs3sY9",
            "TransactionType": "Payment",
            "Amount": "400000000000000",
            "Destination": "r9NpyVfLfUG8hatuCCHKzosyDtKnBdsEN3",
            "Fee": "5000",
            "Flags": 2147483648,
            "LastLedgerSequence": 73541531,
            "Sequence": 38,
            "Signers": [
                {
                    "Signer": {
                        "Account": "re3LGjhrCvthtWWwrfKbVJjXN9PYDeQDJ",
                        "SigningPubKey": "0320ECD5569CAFA4E23147BE238DBFB268DB3B5A502ED339387AC7DCA0ADC6FB90",
                        "TxnSignature": "3045022100EC2BF025E748A028187EDB3C350D518F91F05BC201EAFC9C92566DE9E48AA1B7022018847D172386E93679630E3905BD30481359E5766931944F79F1BA6D910F5C01"
                    }
                },
                {
                    "Signer": {
                        "Account": "rpcL6T32dYb6FDgdm4CnC1DZQSoMvvkLRd",
                        "SigningPubKey": "030BF97DA9A563A9A0679DD527F615CF8EA6B2DB55543075B72822B8D39910B5E1",
                        "TxnSignature": "304402201A891AF3945C81E2D6B95213B79E9A31635209AF0FB94DA8C0983D15F454179B0220388679E02CE6DE2AAC904A9C2F42208418BEF60743A7F9F76FC36D519902DA8C"
                    }
                },
                {
                    "Signer": {
                        "Account": "r3vw3FnkXn2L7St45tzpySZsXVgG75seNk",
                        "SigningPubKey": "030BE281F6DFF9AFD260003375B64235DDBCD5B7A54511BE3DA1FEF1ADE4A85D87",
                        "TxnSignature": "3044022049D36ACE39F1208B4C78A1550F458E54E21161FA4B52B3763C8FA9C4FE45B52C022003BE3579B5B5558A27BB7DC6A8ED163999A451665974138298469C1FDACA615F"
                    }
                }
            ],
            "SigningPubKey": ""
        }
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "tx_json": {
            "Account": "rh2EsAe2xVE71ZBjx7oEL2zpD4zmSs3sY9",
            "TransactionType": "Payment",
            "Amount": "400000000000000",
            "Destination": "r9NpyVfLfUG8hatuCCHKzosyDtKnBdsEN3",
            "Fee": "5000",
            "Flags": 2147483648,
            "LastLedgerSequence": 73541531,
            "Sequence": 38,
            "Signers": [
                {
                    "Signer": {
                        "Account": "re3LGjhrCvthtWWwrfKbVJjXN9PYDeQDJ",
                        "SigningPubKey": "0320ECD5569CAFA4E23147BE238DBFB268DB3B5A502ED339387AC7DCA0ADC6FB90",
                        "TxnSignature": "3045022100EC2BF025E748A028187EDB3C350D518F91F05BC201EAFC9C92566DE9E48AA1B7022018847D172386E93679630E3905BD30481359E5766931944F79F1BA6D910F5C01"
                    }
                },
                {
                    "Signer": {
                        "Account": "rpcL6T32dYb6FDgdm4CnC1DZQSoMvvkLRd",
                        "SigningPubKey": "030BF97DA9A563A9A0679DD527F615CF8EA6B2DB55543075B72822B8D39910B5E1",
                        "TxnSignature": "304402201A891AF3945C81E2D6B95213B79E9A31635209AF0FB94DA8C0983D15F454179B0220388679E02CE6DE2AAC904A9C2F42208418BEF60743A7F9F76FC36D519902DA8C"
                    }
                },
                {
                    "Signer": {
                        "Account": "r3vw3FnkXn2L7St45tzpySZsXVgG75seNk",
                        "SigningPubKey": "030BE281F6DFF9AFD260003375B64235DDBCD5B7A54511BE3DA1FEF1ADE4A85D87",
                        "TxnSignature": "3044022049D36ACE39F1208B4C78A1550F458E54E21161FA4B52B3763C8FA9C4FE45B52C022003BE3579B5B5558A27BB7DC6A8ED163999A451665974138298469C1FDACA615F"
                    }
                },
                {
                    "Signer": {
                        "Account": "rJ4wmkgK8n93UjtaqQTaj1vxBwQWdLrBjP",
                        "SigningPubKey": "02D5D616D4005B91DE02BF6E29157B514C667810860F389CF36DC9E4D5E73BFE79",
                        "TxnSignature": "304402207589FA73E72F85A2C8F82BBCB3C7C67C455D4C14A946BA427A4735F4ED106123022069845499A9DE50F26765F097BA0EA3C96E56A1304B380E0533514AEEF29363D7"
                    }
                }
            ],
            "SigningPubKey": "",
            "hash": "BA2AF0C652F46C97B85C1D17080EEC7422C092B0BD906DCA344B42EF30FA8285"
        }
    }
}

----------------------------------------

TITLE: Getting Wallet Provider Type in TypeScript
DESCRIPTION: Retrieves the type of wallet or protocol being used by the wallet provider.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
const walletProviderType = modal.getWalletProviderType();

----------------------------------------

TITLE: Installing Reown AppKit and Core Dependencies
DESCRIPTION: Installs the Reown AppKit package along with wagmi, viem, and react-query using Yarn. These are the core dependencies required for integrating Reown AppKit in a React Native project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/installation.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
yarn add @reown/appkit-wagmi-react-native wagmi viem @tanstack/react-query

----------------------------------------

TITLE: Installing Wagmi Adapter with npm
DESCRIPTION: npm command to install AppKit with Wagmi adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue viem

----------------------------------------

TITLE: Configuring Environment Variables for AppKit and Tenderly
DESCRIPTION: Environment variable setup for storing the Reown project ID and Tenderly Virtual TestNet RPC URL, which are needed for configuring the application to work with both services.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#2025-04-10_snippet_2

LANGUAGE: jsx
CODE:
NEXT_PUBLIC_PROJECT_ID = <YOUR_PROJECT_ID_HERE>
TENDERLY_VIRTUAL_TESTNET_RPC = <YOUR_TENDERLY_VIRTUAL_TESTNET_RPC_URL>

----------------------------------------

TITLE: Implementing ConnectButton in XML Views
DESCRIPTION: Shows how to add a ConnectButton in traditional Android XML layouts, with configuration for button size.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_6

LANGUAGE: xml
CODE:
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical">

        <com.reown.appkit.ui.components.button.views.ConnectButton
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:connect_button_size="NORMAL" || "SMALL"
        />
</LinearLayout>

----------------------------------------

TITLE: Importing and Rendering Verify Component in MDX
DESCRIPTION: This code imports a Verify component from the snippets/cloud directory and renders it within the documentation page. The component likely contains verification-related documentation or functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Installing Solana Adapter with pnpm
DESCRIPTION: pnpm command to install AppKit with Solana adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_16

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Presenting AppKit Modal in SwiftUI Applications
DESCRIPTION: Shows how to present the AppKit modal interface in a SwiftUI application. This method automatically traverses the view hierarchy to find the appropriate presenting controller.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#2025-04-10_snippet_3

LANGUAGE: swift
CODE:
AppKit.present()

----------------------------------------

TITLE: Configuring Terms of Service URL in ReOwn Modal
DESCRIPTION: This code snippet demonstrates how to set the URL to a terms of service page as a configuration parameter for a ReOwn modal. When specified, this URL will append a special "legal info" footer to the modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/termsOfServiceUrl.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
termsOfServiceUrl: 'https://example.com/terms-and-conditions'

----------------------------------------

TITLE: Configuring AppKit Basic in React
DESCRIPTION: Implementation of AppKit Basic configuration in React with WalletConnect QR functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/wcm.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
import { createAppKit } from '@reown/appkit/react'
import { mainnet } from '@reown/appkit/networks'

const modal = createAppKit({
adapters: [], //pass an empty array to only use WalletConnect QR
projectId: 'YOUR_PROJECT_ID',
metadata: {
name: 'My Website',
description: 'My Website Description',
url: 'https://mywebsite.com',
icons: ['https://avatars.githubusercontent.com/u/37784886']
},
networks: [mainnet]
})

----------------------------------------

TITLE: Initiating Social Login Programmatically with AppKit
DESCRIPTION: This snippet shows different approaches to programmatically initiate social login authentication flows. It demonstrates both async-await and event-based approaches for connecting users with social providers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/socials.mdx#2025-04-10_snippet_1

LANGUAGE: csharp
CODE:
// Async-await approach
await SocialLogin.Google.ConnectAsync();

// You can also pass a CancellationToken to the method to cancel the connection
await SocialLogin.Google.ConnectAsync(cancellationToken: myCancellationToken);


// Event-based approach
AppKit.AccountConnected += (_, args) => {
    // Handle the event
    // Also triggered when user connects an external wallet
};
SocialLogin.Google.Open();

----------------------------------------

TITLE: Getting Chain ID in TypeScript
DESCRIPTION: Retrieves the current blockchain network ID that the wallet is connected to.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
const chainId = modal.getChainId();

----------------------------------------

TITLE: Sending RPC Request in Reown AppKit (JavaScript)
DESCRIPTION: This code snippet shows how to send an RPC request using the Reown AppKit, specifically for signing a message.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
final bytes = utf8.encode(message);
final encodedMessage = hex.encode(bytes);

final chainId = _appKitModal.selectedChain!.chainId;
final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);

final result = await _appKitModal.request(
  topic: _appKitModal.session!.topic,
  chainId: chainId,
  request: SessionRequestParams(
    method: 'personal_sign',
    params: [
      '0x$encodedMessage',
      _appKitModal.session!.getAddress(namespace)!;
    ],
  ),
);

----------------------------------------

TITLE: Registering Blockchain Account with NotifyClient in Kotlin
DESCRIPTION: This snippet shows how to register a blockchain account using NotifyClient.register. It requires a CAIP-10 compatible account ID and a message signing function to verify ownership of the account.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_24

LANGUAGE: kotlin
CODE:
val params = Notify.Params.Registration(
    account = /*[CAIP-10](https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md) compatible accountId*/,
    onSign = {
        // Message to be signed. When user decides to sign message use CacaoSigner to sign message.
        // CacaoSigner is a util for easy message signing.
        return CacaoSigner.sign(message, /*privateKey*/, SignatureType.EIP191)
        // When users decides to not sign message return null
        return null
    }
)

NotifyClient.register(
      params,
      onSuccess = {
          // callback for when the subscription request was successfully sent
      },
      onError = { error: Notify.Model.Error ->
          // callback for when the subscription request has failed
      }
  )

----------------------------------------

TITLE: Implementing AppKit Button Web Component in HTML
DESCRIPTION: This snippet demonstrates how to use the <appkit-button> web component in an HTML template. Web components are global HTML elements that don't require importing, making them easy to integrate into any project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/solana/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Configuring Flutter Dark Mode Theme
DESCRIPTION: Detailed configuration of WalletConnectModalThemeData for dark mode in Flutter, including colors and dimensions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
WalletConnectModalThemeData(
  primary100: Color(0xFF47A1FF),
  primary090: Color(0xFF59AAFF),
  primary080: Color(0xFF6CB4FF),
  overlay002: Color.fromARGB(5, 255, 255, 255),
  overlay005: Color.fromARGB(13, 255, 255, 255),
  overlay010: Color.fromARGB(26, 255, 255, 255),
  overlay020: Color.fromARGB(51, 255, 255, 255),
  overlay030: Color.fromARGB(77, 255, 255, 255),
  foreground100: Color(0xFFE4E7E7),
  foreground200: Color(0xFF949E9E),
  foreground275: Color(0xFF788181),
  foreground300: Color(0xFF6E7777),
  background100: Color(0xFF141414),
  background200: Color(0xFF272A2A),
  background300: Color(0xFF3B4040),
  inverse000: Color(0xFF000000),
  inverse100: Color(0xFFFFFFFF),
  error: Color(0xFFF25A67),
  success: Color(0xFF26D962),
  fontFamily: 'roboto',
  radius4XS: 6.0,
  radius3XS: 8.0,
  radius2XS: 12.0,
  radiusXS: 16.0,
  radiusS: 20.0,
  radiusM: 28.0,
  radiusL: 36.0,
  radius3XL: 80.0,
);

----------------------------------------

TITLE: Signing a Message Request with Casper WalletConnect
DESCRIPTION: Example JSON-RPC request for the casper_sign_message method, which asks the user to sign a message. The request includes a human-readable login message and the user's Casper public key address. The wallet will prefix the message with "Casper Message:\n" before signing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/casper-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "casper_sign_message",
  "params": {
    "message": "CSPR.studio wants you to sign in with your Casper account:\n0x01953...808f3 \n\nIssued At: 07/21/2023 10:07:25\nnonce: 428b62e4",
    "address": "casper:casper-test:0202a8e3e5E32800792F37F738d95BF2610d86E97922D13ab97945bb062824ed9E8A"
  }
}

----------------------------------------

TITLE: Implementing Web3Button in Compose
DESCRIPTION: Shows how to add a Web3Button component in Jetpack Compose, including required imports and configuration options for button size and type.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
import com.reown.appkit.ui.components.button.Web3Button
import com.reown.appkit.ui.components.button.ConnectButtonSize
import com.reown.appkit.ui.components.button.AccountButtonType
import com.reown.appkit.ui.components.button.rememberAppKitState

YourAppScreen(navController: NavController) {
    val appKitState = rememberAppKitState(navController = navController)
    Web3Button(
        state = appKitState,
        accountButtonType = AccountButtonType.NORMAL || AccountButtonType.MIXED,
        connectButtonSize = ConnectButtonSize.NORMAL || ConnectButtonSize.SMALL
    )
}

----------------------------------------

TITLE: Responding to Session Requests in WalletKit
DESCRIPTION: This snippet demonstrates how to respond to a session request from a dapp. It includes callbacks for handling success and error states, allowing the wallet to update the UI appropriately when the response is processed.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#2025-04-10_snippet_6

LANGUAGE: kotlin
CODE:
WalletKit.respondSessionRequest(Wallet.Params.SessionRequestResponse,
    onSuccess = {
        //Session request response was sent successfully - update your UI
    },
    onError = { error ->
        //Error while sending session response - update your UI
    })

----------------------------------------

TITLE: Configuring Swap Feature in AppKit
DESCRIPTION: Example configuration for creating an AppKit instance with the swap feature disabled. The swap feature is enabled by default and can be toggled using the swaps flag in the features configuration object.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/swaps.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    swaps: false // Optional - true by default
  }
})

----------------------------------------

TITLE: Importing and Using Shared Options Component in MDX
DESCRIPTION: This snippet demonstrates how to import and include a shared options component from the snippets directory. The file uses MDX syntax to include reusable documentation components.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/options.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
---
title: Options
---

import Options from "/snippets/appkit/shared/options.mdx";

<Options />

----------------------------------------

TITLE: Implementing Dark Mode Toggle
DESCRIPTION: Demonstrates how to switch between light and dark themes using the isDarkMode parameter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
return ReownAppKitModalTheme(
  isDarkMode: _isDarkMode,
  child: MaterialApp(
    ...
  ),
);

----------------------------------------

TITLE: Configuring Android Wallet Detection Plugin for Expo
DESCRIPTION: JavaScript plugin implementation for enabling wallet detection in Expo Android projects.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
const {
  AndroidConfig,
  withAndroidManifest,
  createRunOncePlugin,
} = require("expo/config-plugins");

const queries = {
  package: [
    { $: { "android:name": "com.wallet.crypto.trustapp" } },
    { $: { "android:name": "io.metamask" } },
    { $: { "android:name": "me.rainbow" } },
    { $: { "android:name": "io.zerion.android" } },
    { $: { "android:name": "io.gnosis.safe" } },
    { $: { "android:name": "com.uniswap.mobile" } },
  ],
};

const withAndroidManifestService = (config) => {
  return withAndroidManifest(config, (config) => {
    config.modResults.manifest = {
      ...config.modResults.manifest,
      queries,
    };
    return config;
  });
};

module.exports = createRunOncePlugin(
  withAndroidManifestService,
  "withAndroidManifestService",
  "1.0.0"
);

----------------------------------------

TITLE: Importing and Rendering Sponsored Transactions Component in MDX
DESCRIPTION: This snippet imports a shared MDX component for sponsored transactions documentation and renders it within the current page. It demonstrates how to include reusable documentation content across multiple pages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/transactions/sponsored-transactions.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SponsoredTransactions from "/snippets/appkit/shared/sponsored-transactions.mdx";

<SponsoredTransactions />

----------------------------------------

TITLE: Adding WalletConnect Notify Pod to Podfile
DESCRIPTION: This code snippet shows how to add the WalletConnect Notify pod to a Podfile for installation via Cocoapods. It specifies the pod name and, optionally, the exact repository path and version tag.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/installation.mdx#2025-04-10_snippet_0

LANGUAGE: ruby
CODE:
pod 'WalletConnectSwiftV2/WalletConnectNotify'

LANGUAGE: ruby
CODE:
pod 'WalletConnectSwiftV2/WalletConnectNotify', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.8.0'

----------------------------------------

TITLE: Prioritizing Specific Wallets in WalletConnect Explorer
DESCRIPTION: Example configuration that prioritizes MetaMask, Rainbow, and TrustWallet in a specific order when using WalletConnect explorer. This demonstrates how to use the explorerRecommendedWalletIds option to set wallet display priorities.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/customisation/customExplorerWallets.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
explorerRecommendedWalletIds: [
  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask
  '1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369', // Rainbow
  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0'  // Trust Wallet
]

----------------------------------------

TITLE: Installing SIWE Dependencies with Bun
DESCRIPTION: Command to install the required packages for SIWE One-Click Auth implementation using Bun package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
bun a @reown/appkit-siwe siwe

----------------------------------------

TITLE: Enabling Network View Option in ConnectKit Configuration
DESCRIPTION: This code shows how to enable the network selection view in ConnectKit configuration. When set to true, users will be shown a network selection view before selecting a wallet if more than one chain was provided in modal or wagmi configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/enableNetworkView.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
enableNetworkView: true

----------------------------------------

TITLE: Session Ping Implementation in Kotlin
DESCRIPTION: Shows how to implement session ping functionality to check connection status with peer.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_30

LANGUAGE: kotlin
CODE:
val sessionTopic: String = /*Topic of Session*/
val pingParams = Sign.Params.Ping(sessionTopic)
val listener = object : Sign.Listeners.SessionPing {
    override fun onSuccess(pingSuccess: Model.Ping.Success) {
        // Topic being pinged
    }

    override fun onError(pingError: Model.Ping.Error) {
        // Error
    }
}

SignClient.ping(pingParams, listener)

----------------------------------------

TITLE: Retrieving Injected Wallets from Explorer API
DESCRIPTION: Example GET request to fetch only injected wallets from the Explorer API using platform filtering.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#2025-04-10_snippet_1

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/wallets?projectId=YOUR_PROJECT_ID&platforms=injected

----------------------------------------

TITLE: Triggering AppKit Modal in Vue
DESCRIPTION: This code demonstrates how to trigger the AppKit modal in a Vue application. It shows how to create a button component that opens the modal when clicked.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_22

LANGUAGE: vue
CODE:
<template>
  <div>
    <button @click="openAppKit">Open</button>
  </div>
</template>

  <script>
  import { useAppKit } from "@reown/appkit/vue";

  export default {
    name: "AppKitButton",
    setup() {
      const { open } = useAppKit();
      const openAppKit = () => open();

      return {
        openAppKit,
      };
    },
  };
  </script>

----------------------------------------

TITLE: Configuring Wagmi Custom Connectors with AppKit
DESCRIPTION: Implementation of custom Wagmi connectors including WalletConnect, Coinbase Wallet, and injected providers. Shows configuration with network setup and AppKit integration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/custom-connectors.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit/vue'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

import { http, WagmiProvider, CreateConnectorFn } from 'wagmi'
import { sepolia } from '@reown/appkit/networks'
import { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'

const projectId = 'YOUR_PROJECT_ID'

const metadata = {
  //....
}

// create the connectors (delete the ones you don't need)
const connectors: CreateConnectorFn[] = []
connectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false
connectors.push(injected({ shimDisconnect: true }))
connectors.push(
  coinbaseWallet({
    appName: metadata.name,
    appLogoUrl: metadata.icons[0]
  })
)

const export networks = [sepolia]

export const wagmiAdapter = new WagmiAdapter({
  transports: {
    [sepolia.id]: http()
  },
  connectors,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig

createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [sepolia]
})

----------------------------------------

TITLE: Importing AppKit and Wagmi Adapter in JavaScript
DESCRIPTION: This code demonstrates how to import the necessary packages for AppKit and Wagmi adapter in a JavaScript application. It replaces Web3Modal imports with AppKit imports and adds the WagmiAdapter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_18

LANGUAGE: javascript
CODE:
import { createAppKit } from '@reown/appkit'
import { arbitrum, mainnet } from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

----------------------------------------

TITLE: Installing Ethers v6 Adapter with pnpm
DESCRIPTION: pnpm command to install AppKit with Ethers v6 adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_12

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-ethers ethers

----------------------------------------

TITLE: Using useAppKitAccount Hook in React for Client Information
DESCRIPTION: This hook provides access to the client's account information including address, CAIP address format, and connection status. It's imported from the @reown/appkit/react package and used to access wallet connection details in React components.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/wagmi/hooks.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Launching Connected Wallet in Reown AppKit (JavaScript)
DESCRIPTION: This code snippet shows how to launch the currently connected wallet app using the Reown AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
_appKitModal.launchConnectedWallet();

----------------------------------------

TITLE: Installing Supporting Dependencies for React Native
DESCRIPTION: Adds required additional packages for React Native including shims, async storage, random values generation, SVG support, modals, network information, and WalletConnect compatibility.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/installation.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
yarn add @ethersproject/shims@5.7.0 @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat

----------------------------------------

TITLE: Managing Notify Subscriptions and Messages in iOS
DESCRIPTION: These functions handle subscription management and message retrieval in the Notify system.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_19

LANGUAGE: swift
CODE:
Notify.instance.getActiveSubscriptions()

try await Notify.instance.deleteSubscription(topic: String)

Notify.instance.getMessageHistory(topic: subscription.topic)

----------------------------------------

TITLE: Implementing WalletDelegate in Android
DESCRIPTION: Code to implement the SignClient.WalletDelegate interface in Android. Handles various events from dApps including session proposals, requests, deletions, and errors.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_22

LANGUAGE: kotlin
CODE:
val walletDelegate = object : SignClient.WalletDelegate {
    override fun onSessionProposal(sessionProposal: Sign.Model.SessionProposal, verifyContext: Sign.Model.VerifyContext) {
        // Triggered when wallet receives the session proposal sent by a Dapp
    }

    val onSessionAuthenticate: ((Sign.Model.SessionAuthenticate, Sign.Model.VerifyContext) -> Unit)? get() = null
    // Triggered when wallet receives the session authenticate sent by a Dapp

    override fun onSessionRequest(sessionRequest: Sign.Model.SessionRequest, verifyContext: Sign.Model.VerifyContext) {
        // Triggered when a Dapp sends SessionRequest to sign a transaction or a message
    }

    override fun onSessionDelete(deletedSession: Sign.Model.DeletedSession) {
        // Triggered when the session is deleted by the peer
    }

    override fun onSessionSettleResponse(settleSessionResponse: Sign.Model.SettledSessionResponse) {
        // Triggered when wallet receives the session settlement response from Dapp
    }

    override fun onSessionUpdateResponse(sessionUpdateResponse: Sign.Model.SessionUpdateResponse) {
        // Triggered when wallet receives the session update response from Dapp
    }

    override fun onConnectionStateChange(state: Sign.Model.ConnectionState) {
        //Triggered whenever the connection state is changed
    }

    override fun onError(error: Sign.Model.Error) {
        // Triggered whenever there is an issue inside the SDK
    }
}
SignClient.setWalletDelegate(walletDelegate)

----------------------------------------

TITLE: Sending Notifications with cURL
DESCRIPTION: cURL command example for sending a notification to a specified account using the Notify API. Requires project ID and API secret for authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "notification": {
      "type": "a1e53b95-18e5-4af8-9f03-9308ec87b687",
      "title": "The price of Ethereum has risen",
      "body": "The price of Ethereum has gone up 10%",
      "url": "https://app.example.com"
    },
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"
    ]
  }'

----------------------------------------

TITLE: Fetching Non-Testnet Chains from Explorer API
DESCRIPTION: Example GET request to retrieve only mainnet chains by excluding testnets from the results.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#2025-04-10_snippet_7

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/chains?projectId=YOUR_PROJECT_ID&testnets=false

----------------------------------------

TITLE: Installing Solana Wallet Adapter Package
DESCRIPTION: This snippet shows the commands to install the Solana wallet adapter package using different package managers (npm, Yarn, Bun, pnpm).
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/custom-connectors.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
yarn add @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
bun a @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
pnpm add @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Approving Session Proposals on Android
DESCRIPTION: This Kotlin code demonstrates approving a session proposal on Android. It uses WalletKit.approveSession with success and error callbacks to handle the session approval process and update the UI accordingly.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_8

LANGUAGE: kotlin
CODE:
WalletKit.approveSession(approveProposal,
  onSuccess = {
    //Session approval response was sent successfully - update your UI
  }
    onError = { error ->
      //Error while sending session approval - update your UI
  })

----------------------------------------

TITLE: Configuring AppKit Client for SIWE Authentication in Kotlin
DESCRIPTION: This snippet shows how to set up authentication request parameters for the AppKit client to enable Sign In With Ethereum (SIWE) functionality. It includes configuring chains, domain, URI, and other required parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#2025-04-10_snippet_0

LANGUAGE: kotlin
CODE:
AppKit.setAuthRequestParams(authPayloadParams)

LANGUAGE: kotlin
CODE:
val authParams = Modal.Model.AuthPayloadParams(
    chains = ["eip155:1", "eip155:137"],
    domain = "yourDappDomain.com",
    uri = "https://yourDappDomain.com/login",
    nonce = //uniqueNonce,
    statement = "I accept the Terms of Service: https://yourDappDomain.com/",
    methods = ["personal_sign", "eth_sendTransaction"],
    resources = null //// Here your dapp may request authorization with ReCaps
)

----------------------------------------

TITLE: Importing and Displaying Smart Accounts MDX Snippet in JSX
DESCRIPTION: This code snippet imports a Smart Accounts MDX documentation component from a shared snippets directory and renders it on the page. This pattern allows for reuse of documentation across multiple pages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/smart-accounts.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SmartAccount from "/snippets/appkit/shared/smart-accounts.mdx";

<SmartAccount />

----------------------------------------

TITLE: Adding AppKit Dependencies in Package.swift Manifest
DESCRIPTION: This snippet shows how to add AppKit to the dependencies array in a Package.swift manifest file. It specifies the package URL and version requirements using semantic versioning.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/installation.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
dependencies: [
  .package(
    name: "AppKit",
    url: "https://github.com/reown-com/reown-swift",
    .upToNextMajor(from: "1.0.0")
  ),

  // Any other dependencies you have...
],

----------------------------------------

TITLE: Configuring Android Wallet Detection in AndroidManifest.xml
DESCRIPTION: XML configuration for enabling wallet detection on Android by adding supported wallet package names to queries section.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#2025-04-10_snippet_1

LANGUAGE: xml
CODE:
<queries>
  <package android:name="io.metamask"/>
  <package android:name="com.wallet.crypto.trustapp"/>
  <package android:name="io.gnosis.safe"/>
  <package android:name="me.rainbow"/>
  <!-- Add other wallet package names here -->
</queries>

----------------------------------------

TITLE: Using AppKit in Vue.js Component
DESCRIPTION: Example of implementing the Reown AppKit in a Vue.js component. It shows how to create a button that opens the AppKit modal using the useAppKit hook from the Vue implementation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_5

LANGUAGE: js
CODE:
<template>
  <div>
    <button @click="openAppKit">Open</button>
  </div>
</template>

  <script>
  import { useAppKit } from "@reown/appkit/vue";

  export default {
    name: "AppKitButton",
    setup() {
      const { open } = useAppKit();
      const openAppKit = () => open();

      return {
        openAppKit,
      };
    },
  };
  </script>

----------------------------------------

TITLE: Replacing Web3Modal with Reown AppKit in React
DESCRIPTION: Code example showing how to replace Web3Modal import with Reown AppKit in a React application. The example demonstrates updating the import statement and using the useAppKit hook to access the open function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_4

LANGUAGE: tsx
CODE:
/* highlight-delete-start */
- import { useWeb3Modal } from '@web3modal/wagmi/react'
/* highlight-delete-end */
/* highlight-add-start */
+ import { useAppKit } from '@reown/appkit/react'
/* highlight-add-end */

function HomePage() {
  const { open } = useAppKit()

  return <button onClick={open}>Connect</button>
}

----------------------------------------

TITLE: Pinging a Session in WalletConnect using C#
DESCRIPTION: Sends a ping to the session to verify the connection is still active, then acknowledges the ping to complete the process.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_44

LANGUAGE: csharp
CODE:
var request = await walletClient.Ping(sessionTopic);
await request.Acknowledged();

----------------------------------------

TITLE: Configuring App Links in Android Manifest
DESCRIPTION: XML configuration for Android's AndroidManifest.xml to enable App Links functionality. This intent filter with autoVerify set to true allows the app to handle deep links from specified URLs, which is required for AppKit Link Mode on Android.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/link-mode.mdx#2025-04-10_snippet_3

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
  <action android:name="android.intent.action.VIEW" />

  <category android:name="android.intent.category.DEFAULT" />
  <category android:name="android.intent.category.BROWSABLE" />

  <data android:scheme="https" />
  <data android:host="your_wallet_universal_link.com" />
  <data android:pathPattern="/open" />
</intent-filter>

----------------------------------------

TITLE: Installing Web3Inbox Packages with pnpm
DESCRIPTION: Command to install the required Web3Inbox core and React widget packages using pnpm package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/about.mdx#2025-04-10_snippet_3

LANGUAGE: bash
CODE:
pnpm add @web3inbox/core @web3inbox/widget-react

----------------------------------------

TITLE: Configuring URL Types for Deep Linking in iOS
DESCRIPTION: This code snippet shows how to add a custom URL scheme to the Info.plist file for enabling deep linking in an iOS wallet app. It sets up the CFBundleURLTypes key with the necessary configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/mobile-linking.mdx#2025-04-10_snippet_0

LANGUAGE: ruby
CODE:
<key>CFBundleURLTypes</key>
<array>
	<dict>
		<key>CFBundleTypeRole</key>
		<string>Editor</string>
		<key>CFBundleURLName</key>
		<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
		<key>CFBundleURLSchemes</key>
		<array>
			<string>examplewallet</string> <!-- your custom scheme goes here -->
		</array>
	</dict>
</array>

----------------------------------------

TITLE: Installing Ethers v5 Adapter with npm
DESCRIPTION: npm command to install AppKit with Ethers v5 adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_5

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

----------------------------------------

TITLE: Disconnecting with WalletConnect Modal in Android
DESCRIPTION: Example showing how to disconnect from a WalletConnect session in Android, using a topic to identify the session to disconnect from.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_31

LANGUAGE: kotlin
CODE:
val disconnectParams = WalletConnectModal.Params.Disconnect(topic)

WalletConnectModal.disconnect(
    disconnect = disconnectParams,
    onSuccess = {
    /* callback that letting you know that you have successfully disconnected */
    },
    onError = { error ->
    /* callback for error while trying to disconnection with a peer */
    }
)

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install all project dependencies after migrating to AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#2025-04-10_snippet_11

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Installing Bitcoin Adapter with Yarn
DESCRIPTION: Yarn command to install AppKit with Bitcoin adapter for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_18

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-bitcoin

----------------------------------------

TITLE: Error Response from executeTransaction
DESCRIPTION: Example of an error response from the hedera_executeTransaction method. The error includes a code, message, and data field with the ResponseCodeEnum value.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#2025-04-10_snippet_7

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "error": {
    "code": 9000,
    "message": "The transaction failed with precheck code...",
    "data": 6
  }
}

----------------------------------------

TITLE: Implementing Real-time Notification Listener with Web3InboxClient in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Web3InboxClient to subscribe to real-time notification messages. It shows how to register an event listener for 'notify_message' events and access notification properties.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/events/react.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const { data: client } = useWeb3InboxClient()

client.on('notify_message', ({ message }) => {
  console.log(notification.title)
})

----------------------------------------

TITLE: Example Namespace Configuration in JSON
DESCRIPTION: Shows example JSON configuration for proposal namespaces including chain specifications, methods, and events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_10

LANGUAGE: json
CODE:
{
  "eip155": {
    "chains": ["eip155:137", "eip155:1"],
    "methods": ["eth_sign"],
    "events": ["accountsChanged"]
  },
  "cosmos": {
    "chains": ["cosmos:cosmoshub-4"],
    "methods": ["cosmos_signDirect"],
    "events": ["someCosmosEvent"]
  }
}

----------------------------------------

TITLE: Implementing AppKit Web Components in HTML
DESCRIPTION: Shows how to add AppKit buttons using web components. These components are global HTML elements that don't require importing and can be directly used in the HTML markup.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
  <body>
    <div id="app">
      <appkit-button />
      <appkit-network-button />
    </div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Bitcoin getAccountAddresses Dynamic Wallet Example
DESCRIPTION: Example of retrieving addresses from a dynamic wallet implementation, showing multiple addresses with their respective public keys and derivation paths.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/bitcoin-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "getAccountAddresses",
    "params": {
        "account": "bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu"
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": [
        {
            "address": "bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu",
            "publicKey": "0330d54fd0dd420a6e5f8d3624f5f3482cae350f79d5f0753bf5beef9c2d91af3c",
            "path": "m/84'/0'/0'/0/0"
        },
        {
            "address": "3KHhcgwPgYF9hE77zaKy2G36dpkcNtvQ33",
            "publicKey": "03b90230ca20150142bc2849a3df4517073978f32466214a0ebc00cac52f996989",
            "path": "m/49'/0'/0'/0/7"
        },
        {
            "address": "bc1qp59yckz4ae5c4efgw2s5wfyvrz0ala7rgvuz8z",
            "publicKey": "038ffea936b2df76bf31220ebd56a34b30c6b86f40d3bd92664e2f5f98488dddfa",
            "path": "m/84'/0'/0'/0/2"
        },
        {
            "address": "bc1qgl5vlg0zdl7yvprgxj9fevsc6q6x5dmcyk3cn3",
            "publicKey": "03de7490bcca92a2fb57d782c3fd60548ce3a842cad6f3a8d4e76d1f2ff7fcdb89",
            "path": "m/84'/0'/0'/0/3"
        },
        {
            "address": "bc1qm97vqzgj934vnaq9s53ynkyf9dgr05rargr04n",
            "publicKey": "03995137c8eb3b223c904259e9b571a8939a0ec99b0717684c3936407ca8538c1b",
            "path": "m/84'/0'/0'/0/4"
        },
        {
            "address": "bc1qv6vaedpeke2lxr3q0wek8dd7nzhut9w0eqkz9z",
            "publicKey": "03d0d243b6a3176fa20fa95cd7fb0e8e0829b83fc2b52053633d088c1a4ba91edf",
            "path": "m/84'/0'/0'/1/3"
        },
        {
            "address": "bc1qetrkzfslk0d4kqjnu29fdh04tkav9vj3k36vuh",
            "publicKey": "02a8dee7573bcc7d3c1e9b9e267dbf0cd717343c31d322c5b074a3a97090a0d952",
            "path": "m/84'/0'/0'/1/4"
        }
    ]
}

----------------------------------------

TITLE: Updating Network Switching Function in AppKit
DESCRIPTION: Example showing the difference between Web3Modal v5 and Reown AppKit v1 when switching networks. In AppKit, you need to import the network object rather than using a chain ID.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_7

LANGUAGE: tsx
CODE:
/* highlight-delete-start */
modal.switchNetwork(137);
/* highlight-delete-end */
/* highlight-add-start */
import { polygon } from "@reown/appkit/networks";
modal.switchNetwork(polygon);
/* highlight-add-end */

----------------------------------------

TITLE: Setting Default Chain Configuration in Wagmi TypeScript
DESCRIPTION: Sets the default blockchain network to Polygon in Wagmi configuration. When users connect their wallet, they will be prompted to switch to Polygon if they are on a different network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/defaultChain.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
defaultChain: polygon

----------------------------------------

TITLE: Using useWalletInfo Hook for Wallet Information Access
DESCRIPTION: Hook for accessing wallet information.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#2025-04-10_snippet_9

LANGUAGE: typescript
CODE:
import { useWalletInfo } from '@reown/appkit/react'


export default Component(){
  const { walletInfo } = useWalletInfo()
}

----------------------------------------

TITLE: Initializing AppKit with Advanced SIWE Configuration in C#
DESCRIPTION: This code snippet demonstrates how to initialize AppKit with an advanced SIWE configuration that includes backend integration. It sets up project ID, metadata, and assigns the SIWE configuration for comprehensive authentication handling.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/siwe.mdx#2025-04-10_snippet_3

LANGUAGE: csharp
CODE:
var appKitConfig = new AppKitConfig
{
    // Project ID from https://cloud.reown.com/
    projectId = "MY_PROJECT_ID",
    metadata = new Metadata(
        "App Name",
        "App Description",
        "https://reown.com",
        "https://raw.githubusercontent.com/reown-com/reown-dotnet/main/media/appkit-icon.png",
        new RedirectData
        {
            // Used by native wallets to redirect back to the app after approving requests
            Native = "my-app://"
        }
    ),
    // Assign the SIWE configuration created above. Can be null if SIWE is not used.
    siweConfig = siweConfig
};

----------------------------------------

TITLE: Documentation Landing Page Structure in Markdown
DESCRIPTION: Structured markdown content defining a migration guide overview page with navigation cards for different library migrations to Reown AppKit. Uses CardGroup and Card components for layout.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/index.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
---
title: Migrate from Alternative Libraries
sidebarTitle: "Overview"
---


## Migrate from

<CardGroup cols={2}>
  <Card title="RainbowKit" href="./from-rainbowkit-next">
    Migrate from RainbowKit to Reown AppKit.
  </Card>

  <Card title="ConnectKit" href="./from-connectkit-next">
    Migrate from ConnectKit to Reown AppKit.
  </Card>

  <Card title="Anza Adapter" href="./from-anza-adapter-react">
    Migrate from Solana Anza Adapter to Reown AppKit.
  </Card>
</CardGroup>

----------------------------------------

TITLE: Adding AppKit via CocoaPods in Podfile
DESCRIPTION: This snippet demonstrates how to add the Reown AppKit to a project using CocoaPods. It specifies the pod name, git repository URL, and version tag to use.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/installation.mdx#2025-04-10_snippet_2

LANGUAGE: ruby
CODE:
pod 'reown-swift/ReownAppKit', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.0.4'

----------------------------------------

TITLE: Configuring iOS Wallet Detection in Info.plist
DESCRIPTION: XML configuration for enabling wallet detection on iOS by adding supported wallet schemes to LSApplicationQueriesSchemes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#2025-04-10_snippet_0

LANGUAGE: xml
CODE:
<key>LSApplicationQueriesSchemes</key>
<array>
  <string>metamask</string>
  <string>trust</string>
  <string>safe</string>
  <string>rainbow</string>
  <string>uniswap</string>
  <!-- Add other wallet schemes names here -->
</array>

----------------------------------------

TITLE: Listing Wallet Call API Methods in Markdown
DESCRIPTION: This snippet enumerates the four main JSON-RPC methods provided by the Wallet Call API. Each method is briefly described, outlining its purpose in managing batched onchain calls and querying wallet capabilities.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/eip5792.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
- `wallet_sendCalls`: Requests that a wallet submits a batch of calls.
- `wallet_getCallsStatus`: Returns the status of a call batch that was sent via wallet_sendCalls.
- `wallet_showCallsStatus`: Requests that a wallet shows information about a given call bundle that was sent with wallet_sendCalls.
- `wallet_getCapabilities`: This RPC allows an application to request capabilities from a wallet (e.g. batch transactions, paymaster communication).

----------------------------------------

TITLE: Adding WalletConnect Android Core Dependency
DESCRIPTION: Implements the WalletConnect Android Core library in an app's build.gradle file.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_1

LANGUAGE: gradle
CODE:
implementation("com.walletconnect:android-core:release_version")

----------------------------------------

TITLE: iOS Pairing Configuration in Swift
DESCRIPTION: Demonstrates how to configure WalletConnect pairing in iOS by creating AppMetadata and setting up the Pair instance with proper redirect configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_10

LANGUAGE: swift
CODE:
let metadata = AppMetadata(name: <String>,
                           description: <String>,
                           url: <String>,
                           icons: <[String]>,
                           redirect: AppMetadata.Redirect(native: "example://", universal: nil))

Pair.configure(metadata: metadata)

----------------------------------------

TITLE: Updating Instance Access for WalletKit
DESCRIPTION: Replace Web3Wallet.instance references with WalletKit.instance in your code for accessing SDK functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-ios.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
/* highlight-delete-start */
- Web3Wallet.instance.authRequestPublisher.sink { (id, result) in
-    // Your code here
- }
/* highlight-delete-end */
/* highlight-add-start */
+ WalletKit.instance.authRequestPublisher.sink { (id, result) in
+     // Your code here
+ }
/* highlight-add-end */

----------------------------------------

TITLE: Configuring ConnectOptions with Constructor
DESCRIPTION: Defines the blockchain requirements, RPC methods, and events for the dapp using constructor-style initialization.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_22

LANGUAGE: csharp
CODE:
var dappConnectOptions = new ConnectOptions()
{
    RequiredNamespaces = new RequiredNamespaces()
    {
        {
            "eip155", new RequiredNamespace()
            {
                Methods = new[]
                {
                    "eth_sendTransaction",
                    "eth_signTransaction",
                    "eth_sign",
                    "personal_sign",
                    "eth_signTypedData",
                },
                Chains = new[]
                {
                    "eip155:1"
                },
                Events = new[]
                {
                    "chainChanged",
                    "accountsChanged",
                }
            }
        }
    }
};

----------------------------------------

TITLE: Configuring Associated Domains for iOS Universal Links
DESCRIPTION: This XML snippet shows the configuration for Associated Domains in the iOS project's entitlements file. It specifies the domain for which Universal Links should be enabled.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/link-mode.mdx#2025-04-10_snippet_2

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>com.apple.developer.associated-domains</key>
  <array>
    <string>applinks:example.com</string>
  </array>
</dict>
</plist>

----------------------------------------

TITLE: Implementing Event Emission
DESCRIPTION: Example of emitting events in a WalletConnect session for account changes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
await signClient.emit({
  topic,
  event: {
    name: "accountsChanged",
    data: ["AZBEwbZhYeiofodZnM2iAoshP3pXRPNSJEKFqEPDmvv1mY7"],
  },
  chainId: "polkadot:91b171bb158e2d3848fa23a9f1c25182",
});

----------------------------------------

TITLE: Signing Out from NEAR dApps with near_signOut
DESCRIPTION: This method deletes FunctionCall access keys previously created with signIn. It allows users to explicitly sign out from a dApp's smart contract, requiring an array of accounts with their accountId and publicKey.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/near-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "near_signOut",
  "params": {
    "accounts": [{
      "accountId": "alice.near",
      "publicKey": "ed25519:DmnRVNb89cLKZY1cH1Zcr3rxMVD9r1cVfnDac7RFwM94"
    }]
  }
}

----------------------------------------

TITLE: Tracking WalletConnect Sessions in Swift
DESCRIPTION: Sets up a subscription to track active WalletConnect sessions. This code listens for changes in session status and allows the wallet to update the UI accordingly.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_10

LANGUAGE: swift
CODE:
WalletKit.instance.sessionsPublisher
    .receive(on: DispatchQueue.main)
    .sink { [weak self] sessions in
        // Reload UI
    }.store(in: &publishers)

----------------------------------------

TITLE: Installing Reown AppKit via OpenUPM CLI
DESCRIPTION: Command to install the Reown AppKit Unity package using the OpenUPM CLI tool. Requires Node.js and openupm-cli to be installed as prerequisites.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/installation.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
openupm add com.reown.appkit.unity

----------------------------------------

TITLE: Configuring Next.js for AppKit Compatibility
DESCRIPTION: Configuration to be added to next.config.js file to ensure AppKit works properly with Next.js SSR.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#2025-04-10_snippet_4

LANGUAGE: ts
CODE:
// Path: next.config.js
const nextConfig = {
  webpack: (config) => {
    config.externals.push("pino-pretty", "lokijs", "encoding");
    return config;
  },
};

----------------------------------------

TITLE: Smart Contract Interaction with Wagmi
DESCRIPTION: Example of using Wagmi hooks to interact with smart contracts in a React component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { useReadContract } from "wagmi";
import { USDTAbi } from "../abi/USDTAbi";

const USDTAddress = "0x...";

function App() {
  const result = useReadContract({
    abi: USDTAbi,
    address: USDTAddress,
    functionName: "totalSupply",
  });
}

----------------------------------------

TITLE: Retrieving Account Addresses from a Dynamic Wallet
DESCRIPTION: Example JSON-RPC request and response for the getAccountAddresses method from a dynamic wallet, showing multiple addresses with their derivation paths.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/dogecoin-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "getAccountAddresses",
    "params": {
        "account": "DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ"
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": [
        {
            "address": "DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ",
            "path": "m/44'/3'/0'/0/0"
        },
        {
            "address": "DA6rZ9aV3mkz9uxNvddzzbXEEcSPN8SCUS",
            "path": "m/44'/3'/0'/0/2"
        },
        {
            "address": "DDtQfA541GQU2KDrY3ofF5F5hsKxkFiUuG",
            "path": "m/44'/3'/0'/0/3"
        },
        {
            "address": "D5A6wPFhCNChUiQHGXftD8DiNgc2G7yT1L",
            "path": "m/44'/3'/0'/0/4"
        },
        {
            "address": "DFG9R8ENG4mK5gUiU1VRr3FBT13LfWJ4Fb",
            "path": "m/44'/3'/0'/1/3"
        },
        {
            "address": "D7rakaGgZvaBH1vGTxnsQ3ZdV7ejX57hRy",
            "path": "m/44'/3'/0'/1/4"
        }
    ]
}

----------------------------------------

TITLE: Pushing Changes to Fork - Bash
DESCRIPTION: Command to push documentation changes to a forked repository
SOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
git push origin feature/your-feature-name

----------------------------------------

TITLE: Installing Crypto Dependencies for React Native CLI
DESCRIPTION: Command to install the necessary crypto-related dependencies for React Native CLI projects using Yarn.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#2025-04-10_snippet_4

LANGUAGE: sh
CODE:
yarn add react-native-quick-crypto react-native-quick-base64 stream-browserify @craftzdog/react-native-buffer babel-plugin-module-resolver

----------------------------------------

TITLE: Approving Authentication Requests in TypeScript
DESCRIPTION: This snippet demonstrates two approaches for approving authentication requests: signing a single SIWE message or signing multiple messages for each requested chain/address pair.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/one-click-auth.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
// Approach 1
// Sign the authentication message(s) to create a verifiable authentication object(s)
const signature = await cryptoWallet.signMessage(message, privateKey);
// Build the authentication object(s)
const auth = buildAuthObject(
  authPayload,
  {
    t: "eip191",
    s: signature,
  },
  iss
);

// Approve
await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths: [auth],
});

// Approach 2
// Note that you can also sign multiple messages for every requested chain/address pair
const auths = [];
authPayload.chains.forEach(async (chain) => {
  const message = walletKit.formatAuthMessage({
    request: authPayload,
    iss: `${chain}:${cryptoWallet.address}`,
  });
  const signature = await cryptoWallet.signMessage(message);
  const auth = buildAuthObject(
    authPayload,
    {
      t: "eip191", // signature type
      s: signature,
    },
    `${chain}:${cryptoWallet.address}`
  );
  auths.push(auth);
});

// Approve
await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths,
});

----------------------------------------

TITLE: Updating Repository Dependencies from Web3Modal to AppKit in Android
DESCRIPTION: Updates the gradle dependencies from Web3Modal to Reown AppKit, replacing the walletconnect libraries with reown equivalents.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-android.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
// Remove the following code lines
- dependencies {
-    implementation(platform("com.walletconnect:android-bom:{BOM version}"))
-    implementation("com.walletconnect:android-core")
-    implementation("com.walletconnect:web3modal")
- }

+ dependencies {
+    implementation(platform("com.reown:android-bom:{BOM version}"))
+    implementation("com.reown:android-core")
+    implementation("com.reown:appkit")
+ }


----------------------------------------

TITLE: Pairing with dApp via WalletConnect URI in Swift
DESCRIPTION: Initiates a pairing with a dApp using a URI derived from scanning a QR code. This is the first step in establishing a WalletConnect session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_4

LANGUAGE: swift
CODE:
try await WalletKit.instance.pair(uri: uri)

----------------------------------------

TITLE: Initializing WalletConnect in Android
DESCRIPTION: Code to initialize the WalletConnect Core and Sign clients in an Android application. Sets up the connection type, application metadata, and handles initialization errors.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_21

LANGUAGE: kotlin
CODE:
val projectId = "" // Get Project ID at https://cloud.reown.com/
val connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL
val appMetaData = Core.Model.AppMetaData(
    name = "Wallet Name",
    description = "Wallet Description",
    url = "Wallet URL",
    icons = /*list of icon url strings*/,
    redirect = "kotlin-wallet-wc:/request" // Custom Redirect URI
)

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)

val init = Sign.Params.Init(core = CoreClient)

SignClient.initialize(init) { error ->
    // Error will be thrown if there's an issue during initialization
}

----------------------------------------

TITLE: Dapp Implementation with Universal Provider
DESCRIPTION: Example of implementing WalletConnect in a dapp using the Universal Provider with namespace configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
const proposalNamespace = {
  requiredNamespaces: {
    polkadot: {
      methods: ["polkadot_signTransaction", "polkadot_signMessage"],
      chains: ["polkadot:91b171bb158e2d3848fa23a9f1c25182"],
      events: ["chainChanged", "accountsChanged"],
    },
  },
};

// call connect on the universal provider passing the proposal namespace

const { uri, approval } = await provider.client.connect(proposalNamespace);

----------------------------------------

TITLE: Registering Custom Modal View in C#
DESCRIPTION: This C# snippet demonstrates how to register a custom modal view presenter with the RouterController, replacing the default Account view implementation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/customization.mdx#2025-04-10_snippet_4

LANGUAGE: csharp
CODE:
var modalController = (ModalControllerUtk)AppKit.ModalController;
if (modalController != null)
{
    var routerController = modalController.RouterController;

    var customAccountPresenter = new CustomAccountPresenter(routerController, routerController.RootVisualElement);
    routerController.RegisterModalView(ViewType.Account, customAccountPresenter);
}

----------------------------------------

TITLE: Configuring iOS Info.plist for Wallet Detection
DESCRIPTION: XML configuration for the Info.plist file to enable wallet detection in an iOS application by adding wallet URL schemes to the LSApplicationQueriesSchemes array.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_8

LANGUAGE: xml
CODE:
<key>LSApplicationQueriesSchemes</key>
<array>
  <string>metamask</string>
  <string>trust</string>
  <string>safe</string>
  <string>rainbow</string>
  <string>uniswap</string>
  <!-- Add other wallet schemes names here -->
</array>

----------------------------------------

TITLE: Implementing NetworkButton in XML Views
DESCRIPTION: Shows how to add a NetworkButton in traditional Android XML layouts for network selection or display.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_4

LANGUAGE: xml
CODE:
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical">

        <com.reown.appkit.ui.components.button.views.NetworkButton
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
        />
</LinearLayout>

----------------------------------------

TITLE: WalletConnect EIP-5792 RPC Methods
DESCRIPTION: Core JSON-RPC methods defined by EIP-5792 for batch transaction processing and wallet capabilities. Methods include sending call batches, checking status, displaying call information, and querying wallet capabilities.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/eip5792.mdx#2025-04-10_snippet_0

LANGUAGE: json-rpc
CODE:
wallet_sendCalls
wallet_getCallsStatus
wallet_showCallsStatus
wallet_getCapabilities

----------------------------------------

TITLE: Importing SIWX Documentation Component in MDX
DESCRIPTION: MDX code that imports and renders a SIWX documentation component from a snippets directory.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwx.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
import SiwxIndex from "/snippets/appkit/shared/siwx/index.mdx";

<SiwxIndex />

----------------------------------------

TITLE: Configuring Coinbase Smart Wallet with Custom Wagmi Adapter in TypeScript
DESCRIPTION: Custom configuration of the Wagmi adapter with Coinbase Smart Wallet preference. This approach offers more granular control over the connector configuration when using Wagmi.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_29

LANGUAGE: typescript
CODE:
import { WagmiAdapter } from "@reown/appkit-adapter-wagmi";

const adapter = new WagmiAdapter({
  //...
  connectors: [
    coinbaseWallet({
      //...
      preference: "smartWalletOnly",
    }),
    projectId,
    networks,
  ],
});

export const config = wagmiAdapter.wagmiConfig;

----------------------------------------

TITLE: Defining Notification Scope Type in TypeScript
DESCRIPTION: This snippet defines a TypeScript type 'ScopeMap' which represents a record of notification scopes. Each scope has a name, description, and an enabled status.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/react.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
type ScopeMap = Record<
  string,
  {
    name: string
    description: string
    enabled: boolean
  }
>

----------------------------------------

TITLE: Updating Swift Package Manager Repository URL for AppKit
DESCRIPTION: Instructions for changing the repository URL in Package.swift from the WalletConnect organization to the reown-com organization.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-ios.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
// Remove the following code line
- .package(url: "https://github.com/WalletConnect/web3modal-swift", from: "1.0.0"),

+ .package(url: "https://github.com/reown-com/reown-swift", from: "1.0.0"),

----------------------------------------

TITLE: Invoking the grantPermissions Method in TypeScript
DESCRIPTION: Example of calling the grantPermissions function with the request object to trigger the permission request via the connected wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#2025-04-10_snippet_3

LANGUAGE: tsx
CODE:
const response = await grantPermissions(request);

----------------------------------------

TITLE: Importing and Displaying Theming Documentation in MDX
DESCRIPTION: This snippet shows how to import and render a shared theming documentation component in an MDX documentation page. It imports the Theming component from a snippets directory and renders it directly.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/theming.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Theming from "/snippets/appkit/shared/theming.mdx";

<Theming />

----------------------------------------

TITLE: Retrieving Tezos Accounts with tezos_getAccounts in JavaScript
DESCRIPTION: This method returns an array of public keys corresponding to keypairs available in the wallet for signing. It requires no parameters and returns account data including algorithm, address, and public key for each keypair.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/tezos-rpc.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "tezos_getAccounts",
    "params": {}
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result":  [
        {
            "algo": "ed25519",
            "address": "tz1VQA4RP4fLjEEMW2FR4pE9kAg5abb5h5GL",
            "pubkey": "edpku4US3ZykcZifjzSGFCmFr3zRgCKndE82estE4irj4d5oqDNDvf"
        }
    ]
}

----------------------------------------

TITLE: Get All Subscribers using cURL
DESCRIPTION: Example of fetching all subscribers using cURL command.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#2025-04-10_snippet_7

LANGUAGE: bash
CODE:
curl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Installing Ethers v6 Adapter with Bun
DESCRIPTION: Bun command to install AppKit with Ethers v6 adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_11

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-ethers ethers

----------------------------------------

TITLE: Sending Notification using cURL
DESCRIPTION: This bash script shows how to send a notification using cURL. It includes the necessary headers and JSON payload for the notification details and recipient account.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "notification": {
      "type": "a1e53b95-18e5-4af8-9f03-9308ec87b687",
      "title": "The price of Ethereum has risen",
      "body": "The price of Ethereum has gone up 10%",
      "url": "https://app.example.com"
    },
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"
    ]
  }'

----------------------------------------

TITLE: Disconnecting Session with useDisconnect in Vue
DESCRIPTION: Demonstrates how to use the useDisconnect composable to disconnect the current wallet session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#2025-04-10_snippet_9

LANGUAGE: typescript
CODE:
import { useDisconnect } from "@reown/appkit/vue";

const { disconnect } = useDisconnect();

await disconnect();

----------------------------------------

TITLE: Installing Ethers v5 Adapter with Yarn
DESCRIPTION: Yarn command to install AppKit with Ethers v5 adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_6

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

----------------------------------------

TITLE: Mark All Notifications as Read using cURL
DESCRIPTION: Example of marking all notifications as read using cURL command.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#2025-04-10_snippet_9

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Including Specific Wallet IDs in ReOwn AppKit
DESCRIPTION: Overrides default recommended wallets by specifying exact wallet IDs to be shown in the UI, limiting visibility to only these wallets.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_26

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  includeWalletIds: [
    "1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369",
    "4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0",
  ],
});

----------------------------------------

TITLE: Using useAppKitEventSubscription with Ethers v5
DESCRIPTION: Demonstrates how to use the useAppKitEventSubscription hook with Ethers v5 integration to subscribe to specific modal events like MODAL_OPEN. The hook accepts an event name and a callback function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#2025-04-10_snippet_12

LANGUAGE: typescript
CODE:
import { useAppKitEventSubscription } from '@reown/appkit-ethers5-react-native'

useAppKitEventSubscription('MODAL_OPEN', newEvent => {
  // your code here
});

----------------------------------------

TITLE: Customizing Theme Variables in AppKit
DESCRIPTION: Configure custom theme variables for AppKit to modify its appearance. This example demonstrates setting a custom mix color and mix strength to adjust the UI's color scheme.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/theming.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  themeVariables: {
    "--w3m-color-mix": "#00BB7F",
    "--w3m-color-mix-strength": 40,
  },
});

----------------------------------------

TITLE: Updating Import Statements in Vue
DESCRIPTION: Code changes for import statements when migrating from Web3Modal to Reown AppKit in Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#2025-04-10_snippet_5

LANGUAGE: tsx
CODE:
// Remove the following imports
- import { createWeb3Modal, defaultConfig } from "@web3modal/ethers/vue";

// Add the following imports
+ import { createAppKit } from "@reown/appkit/vue";
+ import { arbitrum, mainnet } from "@reown/appkit/networks";
+ import { EthersAdapter } from "@reown/appkit-adapter-ethers";

----------------------------------------

TITLE: Creating Namespaces from RequiredNamespaces in C#
DESCRIPTION: Demonstrates how to create a Namespaces object from RequiredNamespaces in a session proposal. This automatically populates methods, events, and chains, requiring only account information to be added.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_5

LANGUAGE: csharp
CODE:
sdk.SessionProposed += async (sender, @event) =>
{
    var proposal = @event.Proposal;
    var requiredNamespaces = proposal.RequiredNamespaces;
    var approvedNamespaces = new Namespaces(requiredNamespaces);
    approvedNamespaces["eip155"].WithAccount("eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb");
};

----------------------------------------

TITLE: Setting up Legacy SIWE Configuration
DESCRIPTION: Demonstrates legacy implementation of SIWE authentication using the siwe package. Creates a configuration that includes message creation, session management, and verification. This approach is more manual compared to the one-click auth method but provides similar functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/code.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
import { SiweMessage } from 'siwe'
import type { SIWECreateMessageArgs, SIWEVerifyMessageArgs } from '@reown/appkit-siwe'

/* Function that creates a SIWE message */
function createMessage({ nonce, address, chainId }: SIWECreateMessageArgs){
  const message = new SiweMessage({
    version: '1',
    domain: window.location.host,
    uri: window.location.origin,
    address,
    chainId,
    nonce,
    statement: 'Sign in With Ethereum.'
  })

  return message.prepareMessage()
}

/* Function that returns the user's session */
async function getSession(){
  //...
}

/* Use your SIWE server to verify if the message and the signature are valid */
async function verifyMessage({ message, signature }: SIWEVerifyMessageArgs){
  try {
    const isValid = await validateMessage({ message, signature })

    return isValid
  } catch (error) {
    return false
  }
},

/* Create a SIWE configuration object */
export const siweConfig = createSIWEConfig({
  createMessage,
  getNonce: async () => { //This is only an example, substitute it with your actual nonce getter.
    const nonce = "YOUR_NONCE_GETTER"
    if (!nonce) {
      throw new Error('Failed to get nonce!')
    }
    return nonce
  },
  getSession,
  verifyMessage,
  signOut: async () => { //Example
    // Implement your Sign out function
  }
})

----------------------------------------

TITLE: wallet_prepareCalls Example Usage in TypeScript
DESCRIPTION: Example of using the wallet_prepareCalls RPC method with sample values, including how to pass the permissions context.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#2025-04-10_snippet_6

LANGUAGE: tsx
CODE:
wallet_prepareCalls([{
    from: '0x...',
    chainId: '0x...',
    calls: [{
        to: '0x...'
        data: '0x...'
        value: '0x...'
    }],
    capabilities: {
        permissions: {
        context: '...' // Importantly for session keys, wallets will likely need the ERC-7715 (https://eip.tools/eip/7715) permissions context for userOp construction
        }
    }
}])

----------------------------------------

TITLE: Signing Typed Data with AppKit EVM Module
DESCRIPTION: Method to sign typed data following the EIP-712 standard for structured data signing in Ethereum.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_8

LANGUAGE: csharp
CODE:
string typedData = "{ /* Your EIP-712 typed data structure */ }";
string signature = await AppKit.EVM.SignTypedDataAsync(typedData);

----------------------------------------

TITLE: Android Manifest Configuration for Wallet Detection
DESCRIPTION: Android Manifest XML configuration to enable the 'INSTALLED' label feature for wallets. Requires adding query elements for wallet packages you want to detect.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#2025-04-10_snippet_10

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <queries>
        <package android:name="..."/>
    </queries>

    <application>
        ...
    </application>
</manifest>

----------------------------------------

TITLE: Initializing ReownAppKitModal with ReownAppKit Instance
DESCRIPTION: Alternative initialization approach using a separate ReownAppKit instance passed to ReownAppKitModal constructor, which allows for more modular configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// AppKit instance
final appKit = ReownAppKit.createInstance(
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: true|false,
    ),
  ),
);

// AppKit Modal instance
final _appKitModal = ReownAppKitModal(
  context: context,
  appKit: appKit,
);

// Register here the event callbacks on the service you'd like to use. See `Events` section.

await _appKitModal.init();

----------------------------------------

TITLE: Importing and Displaying Smart Sessions MDX Component
DESCRIPTION: This code imports the Smart Sessions MDX component from the snippets directory and renders it on the page. The component likely contains detailed documentation about Smart Sessions functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/early-access/smart-session.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Smart Sessions
---

import SmartSessions from "/snippets/appkit/shared/smart-sessions.mdx";

<SmartSessions />

----------------------------------------

TITLE: Triggering AppKit Modal in JavaScript
DESCRIPTION: This snippet shows how to trigger the AppKit modal in a JavaScript application. It demonstrates how to add an event listener to a button that opens the modal when clicked.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_23

LANGUAGE: javascript
CODE:
document.getElementById('my-button').addEventListener('click', () => {
    modal.open()
})

<button id="my-button">Connect Wallet</button>

----------------------------------------

TITLE: Importing and Rendering Swaps Component in Markdown
DESCRIPTION: This code snippet imports a Swaps component from a shared directory and renders it within a Markdown document. It uses MDX syntax to combine Markdown with JSX.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/transactions/swaps.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
---
title: Swaps
---

import Swaps from "/snippets/appkit/shared/swaps.mdx";

<Swaps />

----------------------------------------

TITLE: Setting Terms & Conditions URL in ReOwn AppKit
DESCRIPTION: Sets a URL for the terms and conditions link in the AppKit UI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_17

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  termsConditionsUrl: "https://www.mytermsandconditions.com",
});

----------------------------------------

TITLE: Fetching Hybrid Listings from Explorer API
DESCRIPTION: Example GET request to retrieve hybrid application listings from the Explorer API with pagination parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#2025-04-10_snippet_3

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/hybrid?projectId=YOUR_PROJECT_ID&entries=5&page=1

----------------------------------------

TITLE: Updating imports and initialization for WalletKit in React Native
DESCRIPTION: This snippet demonstrates how to update the import statements and initialization code when migrating from Web3Wallet to WalletKit. It shows the changes needed in the JavaScript code to use the new package.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-react-native.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
/* highlight-delete-start */
import { Web3Wallet } from "@walletconnect/web3wallet";
/* highlight-delete-end */
/* highlight-add-start */
import { WalletKit } from "@reown/walletkit";
/* highlight-add-end */

LANGUAGE: javascript
CODE:
/* highlight-delete-start */
await Web3Wallet.init()
/* highlight-delete-end */
/* highlight-add-start */
await WalletKit.init()
/* highlight-add-end */

----------------------------------------

TITLE: Importing and Rendering Smart Sessions Documentation Component in MDX
DESCRIPTION: This snippet demonstrates how to import and render a Smart Sessions documentation component in an MDX file. It imports the SmartSessions component from the /snippets/appkit/shared/ directory and renders it within the document.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/early-access/smart-session.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SmartSessions from "/snippets/appkit/shared/smart-sessions.mdx";

<SmartSessions />

----------------------------------------

TITLE: Dynamic Wallet Account Addresses Example
DESCRIPTION: Request and response example for the getAccountAddresses method in a dynamic wallet scenario. Returns multiple addresses including the first external address, addresses with UTXOs, and unused change and receive addresses.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/litecoin-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "getAccountAddresses",
    "params": {
        "account": "ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0"
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": [
        {
            "address": "ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0",
            "path": "m/84'/2'/0'/0/0"
        },
        {
            "address": "LXkGhTKmZpviAtYdDaxWbiJsdg4tA6EzrU",
            "path": "m/49'/2'/0'/0/7"
        },
        {
            "address": "ltc1qj4plcuyhuzw0sycf99gcayzhhcddfj6xkcke5g",
            "path": "m/84'/2'/0'/0/2"
        },
        {
            "address": "ltc1qsdxa6pseqekqg5d3uksaxnwrey2s2ujcx03alc",
            "path": "m/84'/2'/0'/0/3"
        },
        {
            "address": "ltc1qhuvt3sq8xmx9ktzdfznkzvjl5zup7mg9zpwllw",
            "path": "m/84'/2'/0'/0/4"
        },
        {
            "address": "ltc1qtjd3y5a2axpwzfjcj4y9zy50qfjuxwzm0vu5fq",
            "path": "m/84'/2'/0'/1/3"
        },
        {
            "address": "ltc1qp7ujtprgl0quvcg0dj335p37r2mc2cxdc8xumq",
            "path": "m/84'/2'/0'/1/4"
        }
    ]
}

----------------------------------------

TITLE: Installing AppKit CLI
DESCRIPTION: Command to install Reown AppKit CLI tool for quick project setup
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npx @reown/appkit-cli

----------------------------------------

TITLE: Getting Subscribers with cURL
DESCRIPTION: cURL command example for retrieving information about subscribers using the Notify API. Can check up to 100 accounts in a single request.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#2025-04-10_snippet_4

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029",
      "eip155:1:0x0000000000000000000000000000000000000000"
    ]
  }'

----------------------------------------

TITLE: Implementing NotifyClient.Delegate for Subscription Handling in Kotlin
DESCRIPTION: This code snippet demonstrates how to implement the NotifyClient.Delegate interface to handle subscription-related events such as new subscriptions, messages, deletions, and updates.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_23

LANGUAGE: kotlin
CODE:
val walletDelegate = object : NotifyClient.Delegate {

    override fun onNotifySubscription(notifySubscribe: Notify.Event.Subscription) {
        // Triggered when a wallet initiated subscription has been created
    }

    override fun onNotifyMessage(notifyMessage: Notify.Event.Message) {
        // Triggered when a message has been sent by the Dapp. The message contains the title, body, icon, and url
    }

    override fun onNotifyDelete(notifyDelete: Notify.Event.Delete) {
        // Triggered when the Dapp deletes the subscription. The notifyDelete contains the topic that was deleted
    }

    override fun onNotifyUpdate(notifyUpdate: Notify.Event.Update) {
        // Triggered after updating a subscription was successful. The notifyUpdate will either contain the updated subscription details or an error
    }

    override fun onError(error: Notify.Model.Error) {
        // Triggered when there's an error inside the SDK
    }
}

NotifyClient.setDelegate(walletDelegate)

----------------------------------------

TITLE: Updating Web3Provider Component for Reown AppKit
DESCRIPTION: Changes required in the Web3Provider.tsx file to replace ConnectKit configuration with Reown AppKit setup. This includes importing necessary modules, setting up networks, creating a Wagmi adapter, and configuring the AppKit modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-connectkit-next.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import React from 'react';

import { WagmiProvider, createConfig } from 'wagmi';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';

import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

// Include networks from AppKit
import { mainnet, arbitrum } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit';
export const networks = [mainnet, arbitrum]

// If you were already using WalletConnect with ConnectKit, you can use the same projectId.
// If not, then get projectId from https://cloud.reown.com
export const projectId = "YOUR_PROJECT_ID";

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  networks,
  projectId
})

const queryClient = new QueryClient();

// Create the modal
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  }
})

export const Web3Provider = ({ children }: { children: React.ReactNode }) => {
  return (   
    <WagmiProvider config={wagmiAdapter.wagmiConfig}> 
      <QueryClientProvider client={queryClient}>    
        {children}    
      </QueryClientProvider>
    </WagmiProvider>
  );
};

----------------------------------------

TITLE: Importing and Rendering Shared Resources Component in MDX
DESCRIPTION: This snippet imports a shared Resources component from a specific path and renders it on the page. It demonstrates how to reuse common components across documentation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/resources.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Resources
---

import Resources from "/snippets/appkit/shared/resources.mdx";

<Resources />

----------------------------------------

TITLE: Configuring Custom Wallets in ReOwn AppKit
DESCRIPTION: Adds custom wallets to the modal by providing specific information for each wallet including ID, name, homepage, image, and various linking options.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_24

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  customWallets: [
    {
      id: "myCustomWallet",
      name: "My Custom Wallet",
      homepage: "www.mycustomwallet.com", // Optional
      image_url: "my_custom_wallet_image", // Optional
      mobile_link: "mobile_link", // Optional - Deeplink or universal
      desktop_link: "desktop_link", // Optional - Deeplink
      webapp_link: "webapp_link", // Optional
      app_store: "app_store", // Optional
      play_store: "play_store", // Optional
    },
  ],
});

----------------------------------------

TITLE: Checking Connection Status in TypeScript
DESCRIPTION: Determines whether a wallet is currently connected using the getIsConnected method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
const isConnected = modal.getIsConnected();

----------------------------------------

TITLE: Rendering AppKit Notification Components
DESCRIPTION: Shows the placement of Installation and Example components within the documentation page
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/frontend-integration/usage.mdx#2025-04-10_snippet_1

LANGUAGE: mdx
CODE:
<Installation />

<Example />

----------------------------------------

TITLE: Implementing AppKit UI with Component-Based Approach
DESCRIPTION: This code shows how to use the pre-built AppKitButton component to trigger the AppKit modal in a React Native view. This is the simplest approach for implementing the connection UI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/implementation.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { AppKitButton } from "@reown/appkit-wagmi-react-native";

export default function ConnectView() {
  return (
    <>
      ...rest of your view
      <AppKitButton />
    </>
  );
}

----------------------------------------

TITLE: WalletConnect closeModal TypeScript Interface Definition
DESCRIPTION: TypeScript interface definition for the closeModal function, showing it takes no parameters and returns void.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_16

LANGUAGE: typescript
CODE:
closeModal: () => void

----------------------------------------

TITLE: Marking All Notifications as Read with JavaScript
DESCRIPTION: JavaScript example for marking all existing notifications as read. This is useful when initially implementing unread notification states to provide a better user experience by resetting the unread state of existing notifications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`,
  {
    method: "POST",
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    },
  }
);

----------------------------------------

TITLE: Rendering Send Transaction Button in React Component
DESCRIPTION: Renders a button that triggers the transaction sending function when clicked. The button is only rendered if the user is connected to a wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#2025-04-10_snippet_5

LANGUAGE: jsx
CODE:
return (
  isConnected && (
    <div>
      <button onClick={handleSendTx}>Send Transaction</button>
    </div>
  )
);

----------------------------------------

TITLE: Approving a Session with Multiple Addresses in WalletConnect using C#
DESCRIPTION: Approves a connection proposal with multiple wallet addresses and acknowledges the approval to complete the connection process.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_39

LANGUAGE: csharp
CODE:
string[] addressesToConnect = ...;
var approveData = await walletClient.Approve(proposal, addressesToConnect);
await approveData.Acknowledged();

----------------------------------------

TITLE: Disconnecting from Wallet with AppKit
DESCRIPTION: Method to disconnect from the currently connected wallet. Provides callbacks for successful disconnection and error handling during the disconnection process.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
AppKit.disconnect(
    onSuccess = {
    /* callback that letting you know that you have successfully disconnected */
    },
    onError = { error ->
    /* callback for error while trying to disconnection with a peer */
    }
)

----------------------------------------

TITLE: Installing WalletConnectModal for Flutter
DESCRIPTION: Command for installing the WalletConnectModal package in a Flutter project using the flutter pub command.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_12

LANGUAGE: javascript
CODE:
flutter pub add walletconnect_modal_flutter

----------------------------------------

TITLE: Unity WalletConnect Connection and Events Setup
DESCRIPTION: Implementation of WalletConnect Modal initialization and event handling in Unity, including session management and namespace configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_38

LANGUAGE: csharp
CODE:
private void Start()
{
    WalletConnectModal.Ready += (sender, args) =>
    {
        if (args.SessionResumed)
        {
            // Session has been resumed, proceed to the game
        }
        else
        {
            // Session hasn't been resumed

            // Define required namespaces for new session
            var requiredNamespaces = new RequiredNamespaces
            {
                {
                    "eip155", new ProposedNamespace
                    {
                        Methods = new[]
                        {
                            "eth_sendTransaction",
                            "personal_sign",
                            "eth_signTypedData"
                        },
                        Chains = new[]
                        {
                            "eip155:1"
                        },
                        Events = new[]
                        {
                            "chainChanged",
                            "accountsChanged"
                        }
                    }
                }
            };

            var connectOptions = new ConnectOptions
            {
                RequiredNamespaces = requiredNamespaces
            };

            // Open the modal
            WalletConnectModal.Open(new WalletConnectModalOptions
            {
                ConnectOptions = connectOptions
            });
        }
    };
}

----------------------------------------

TITLE: Installing AppKit in React Project
DESCRIPTION: Installation commands for adding Reown AppKit to a React project using different package managers. These commands install the core AppKit library and the Wagmi adapter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_8

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-wagmi

LANGUAGE: bash
CODE:
bun a @reown/appkit @reown/appkit-adapter-wagmi

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-wagmi

----------------------------------------

TITLE: Using SIWX Cloud Auth Component
DESCRIPTION: Demonstrates the usage of the imported SIWX cloud authentication component in the documentation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwx-cloud-auth.mdx#2025-04-10_snippet_1

LANGUAGE: mdx
CODE:
<SiwxCloudAuth />

----------------------------------------

TITLE: Network Button Component Implementation
DESCRIPTION: Simple network status/selection button with toggle functionality through disabled state.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/components.mdx#2025-04-10_snippet_3

LANGUAGE: html
CODE:
<appkit-network-button />

----------------------------------------

TITLE: Configuring Coinbase Wallet Support in Android Manifest
DESCRIPTION: Adds the Coinbase Wallet package to the Android manifest queries section to enable integration with Coinbase Wallet on Android devices.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#2025-04-10_snippet_6

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <queries>
        <package android:name="org.toshi"/>
        <!-- Any other scheme previously added -->
    </queries>

    <application>
        ...
    </application>
</manifest>

----------------------------------------

TITLE: Updating Class References from Web3Modal to AppKit in Android
DESCRIPTION: Replaces Web3Modal singleton class references with AppKit equivalents for method calls like initialize and request.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-android.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
// Remove the following code lines
- Web3Modal.initialize(Wallet.Params.Init(core = CoreClient), onSuccess, onError)
- Web3Modal.request(request, onSuccess, onError)

+ AppKit.initialize(Wallet.Params.Init(core = CoreClient), onSuccess, onError)
+ AppKit.request(request, onSuccess, onError)

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX
DESCRIPTION: This snippet imports a Verify component from a specific path and renders it within the page. The component is likely responsible for handling user identity verification functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Connecting to WalletConnect SignClient in Kotlin
DESCRIPTION: This snippet demonstrates how to connect to WalletConnect SignClient using Kotlin. It includes setting up namespace, chains, methods, events, and required/optional namespaces for establishing a session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_15

LANGUAGE: kotlin
CODE:
val namespace: String = /*Namespace identifier, see for reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md#syntax*/
val chains: List<String> = /*List of chains that wallet will be requested for*/
val methods: List<String> = /*List of methods that wallet will be requested for*/
val events: List<String> = /*List of events that wallet will be requested for*/
val requiredNamespaces: Map<String, Sign.Model.Namespaces.Proposal> = mapOf(namespace, Sign.Model.Namespaces.Proposal(accounts, methods, events)) /*Required namespaces to setup a session*/
val optionalNamespaces: Map<String, Sign.Model.Namespaces.Proposal> = mapOf(namespace, Sign.Model.Namespaces.Proposal(accounts, methods, events)) /*Optional namespaces to setup a session*/
val pairing: Core.Model.Pairing = /*Either an active or inactive pairing*/
val connectParams = Sign.Params.Connect(requiredNamespaces, optionalNamespaces, pairing)

fun SignClient.connect(connectParams,
    { onSuccess ->
        /*callback that returns letting you know that you have successfully initiated connecting*/
    },
    { error ->
        /*callback for error while trying to initiate a connection with a peer*/
    }
)

----------------------------------------

TITLE: Defining Notification Request Type in TypeScript
DESCRIPTION: TypeScript interface defining the structure of a notification request body. Includes optional notification_id, notification object with type/title/body/url, and accounts array.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
type RequestBody = {
  notification_id?: string | null;
  notification: {
    type: string;
    title: string;
    body: string;
    url?: string | null;
  };
  accounts: string[];
};

----------------------------------------

TITLE: Installing Additional Dependencies for React Native with Expo
DESCRIPTION: This command installs various additional packages required for async storage, polyfills, SVGs, modals, network information, and WalletConnect compatibility in a React Native Expo project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation-expo.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npx expo install @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat expo-application

----------------------------------------

TITLE: Sending Notifications using JavaScript Fetch API
DESCRIPTION: Example of sending notifications using the JavaScript Fetch API with project ID and API secret authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/${PROJECT_ID}/notify`,
  {
    method: "POST",
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      notification: {
        type: "a1e53b95-18e5-4af8-9f03-9308ec87b687",
        title: "The price of Ethereum has risen",
        body: "The price of Ethereum has gone up 10%",
        url: "https://app.example.com",
      },
      accounts: ["eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"],
    }),
  }
);

----------------------------------------

TITLE: Defining a Transaction Receipt Response Type in C#
DESCRIPTION: Creates a class for eth_getTransactionReceipt responses with proper JSON property mapping. This demonstrates how to create typed objects for RPC responses with attributes for method identification and timing options.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_12

LANGUAGE: csharp
CODE:
using Newtonsoft.Json;
using System.Numerics;

[RpcMethod("eth_getTransactionReceipt"), RpcRequestOptions(Clock.ONE_MINUTE, 99995)]
public class TransactionReceipt
{
    [JsonProperty("transactionHash")]
    public string TransactionHash;

    [JsonProperty("transactionIndex")]
    public BigInteger TransactionIndex;

    [JsonProperty("blockHash")]
    public string BlockHash;

    [JsonProperty("blockNumber")]
    public BigInteger BlockNumber;

    [JsonProperty("from")]
    public string From;

    [JsonProperty("to")]
    public string To;

    [JsonProperty("cumulativeGasUsed")]
    public BigInteger CumulativeGasUsed;

    [JsonProperty("effectiveGasPrice ")]
    public BigInteger EffectiveGasPrice ;

    [JsonProperty("gasUsed")]
    public BigInteger GasUsed;

    [JsonProperty("contractAddress")]
    public string ContractAddress;

    [JsonProperty("logs")]
    public object[] Logs;

    [JsonProperty("logsBloom")]
    public string LogBloom;

    [JsonProperty("type")]
    public BigInteger Type;

    [JsonProperty("status")]
    public BigInteger Status;
}

----------------------------------------

TITLE: Installing AppKit with Wagmi for Next.js
DESCRIPTION: npm command to install AppKit with Wagmi and its dependencies for a Next.js project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query

----------------------------------------

TITLE: Customizing Connect Methods Order in ReOwn AppKit
DESCRIPTION: Changes the order of connection methods displayed in the modal interface. Default order is ['wallet', 'email', 'social'].
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_22

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  features: {
    connectMethodsOrder: ["social", "email", "wallet"],
  },
});

----------------------------------------

TITLE: Configuring CAIP-2 Compliant Chains Array in TypeScript
DESCRIPTION: An array of CAIP-2 compliant chain identifiers to be used with a modal component. Each identifier follows the format 'namespace:reference' where namespace is the blockchain family and reference is the specific network identifier.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/chains.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
chains: [
  'eip155:1',
  'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp',
  'cosmos:cosmoshub-4',
  'polkadot:91b171bb158e2d3848fa23a9f1c25182'
]

----------------------------------------

TITLE: Installing WalletConnect Solana Adapter
DESCRIPTION: Package installation commands for different package managers to add the WalletConnect Solana adapter dependency.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/solana-adapter.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @walletconnect/solana-adapter

LANGUAGE: bash
CODE:
yarn add @walletconnect/solana-adapter

LANGUAGE: bash
CODE:
bun add @walletconnect/solana-adapter

LANGUAGE: bash
CODE:
pnpm add @walletconnect/solana-adapter

----------------------------------------

TITLE: Importing Transaction Hooks from Wagmi for EVM
DESCRIPTION: Import statements for hooks related to transaction functionality, including gas estimation and transaction sending, from Wagmi and Viem libraries.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_8

LANGUAGE: jsx
CODE:
import { useEstimateGas, useSendTransaction } from "wagmi";
import { parseGwei, type Address } from "viem";

----------------------------------------

TITLE: Retrieving Past Notification Messages
DESCRIPTION: Code to fetch notification history for a specific subscription topic with options for pagination and sorting by read status.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_11

LANGUAGE: javascript
CODE:
// Will return all past Notify messages for the provided subscription topic, keyed by messageId.
const messageHistory = notifyClient.getNotificationHistory({
  topic,
  limit: 10,
  startingAfter: "notification-id",
  unreadFirst: true,
});

----------------------------------------

TITLE: Enabling Fullscreen in WebGL with AppKit Modal Support
DESCRIPTION: JavaScript code to properly enable fullscreen mode in WebGL applications with AppKit by targeting the canvas container instead of the canvas itself, ensuring the modal stays visible.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
// Use this instead of unityInstance.SetFullscreen(1) to enable full screen
document.querySelector("#canvas-container").requestFullscreen();

----------------------------------------

TITLE: Subscribing to Notifications from a Dapp
DESCRIPTION: Shows the process of subscribing to notifications from a dapp. This opt-in process allows the dapp to send notifications to the user's blockchain account. By default, users are subscribed to all notification types defined by the dapp.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
val appDomain: Uri = // Dapp uri. e.g. gm.walletconnect.com
val account: String = // CAIP-10 account
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec
val params = Notify.Params.Subscribe(appDomain, account, timeout)

NotifyClient.subscribe(params = params).let { result ->
    when (result) {
        is Notify.Result.Subscribe.Success -> {
          // callback for when the subscription request was successful
        }

        is Notify.Result.Subscribe.Error -> {
          // callback for when the subscription request has failed
        }

    }
}

----------------------------------------

TITLE: Configuring AppKit Client with AuthRequestParams for SIWE
DESCRIPTION: This snippet shows how to configure the AppKit client with AuthRequestParams, which are required to create a SIWE message for user authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/one-click-auth.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
AppKit.configure(
    ...
    authRequestParams: authRequestParams,
    ...
)

----------------------------------------

TITLE: Handling Deep Links in AppKit for Link Mode in Kotlin
DESCRIPTION: This snippet shows how to handle incoming deep links in AppKit when using Link Mode. It processes the URL and handles any potential errors that may occur during the deep link handling process.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#2025-04-10_snippet_4

LANGUAGE: kotlin
CODE:
AppKit.handleDeepLink(url) { error ->
    //handle error

}

----------------------------------------

TITLE: Installing WalletConnect SDK via Cocoapods in Ruby
DESCRIPTION: This snippet shows how to add the WalletConnect SDK to a Podfile for installation via Cocoapods. It includes both the standard installation method and an alternative method specifying the exact repository path and version tag.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/installation.mdx#2025-04-10_snippet_0

LANGUAGE: ruby
CODE:
pod 'reown-swift'

LANGUAGE: ruby
CODE:
pod 'reown-swift', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.0.0'

----------------------------------------

TITLE: Adding AppKit as a Target Dependency in Package.swift
DESCRIPTION: This code shows how to add AppKit as a dependency to a specific target in your Package.swift file. It demonstrates how to reference the AppKit product from the previously defined package dependency.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/installation.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
.target(
  name: "MyTargetName",
  dependencies: [
    // The product(s) you want (most likely AppKit).
    .product(name: "AppKit", package: "AppKit"),
  ]
),

----------------------------------------

TITLE: Importing and Rendering ExplorerSubmission Component in JSX
DESCRIPTION: This code imports the ExplorerSubmission component from a shared snippet file and renders it within the page. It's likely part of a larger documentation system using MDX or a similar technology.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/cloud/explorer-submission.mdx#2025-04-10_snippet_0

LANGUAGE: JSX
CODE:
import ExplorerSubmission from "/snippets/cloud/explorer-submission.mdx";

<ExplorerSubmission />

----------------------------------------

TITLE: Importing and Rendering Analytics Component in Markdown
DESCRIPTION: This snippet imports an Analytics component from a specific path and renders it within the markdown document. It utilizes MDX syntax to combine markdown with JSX.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/cloud/analytics.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
---
title: Analytics
---

import Analytics from "/snippets/cloud/analytics.mdx";

<Analytics />

----------------------------------------

TITLE: Installing Reown AppKit packages
DESCRIPTION: Commands to install @reown/appkit and @reown/appkit-adapter-ethers5 packages using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers5

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-ethers5

LANGUAGE: bash
CODE:
bun a @reown/appkit @reown/appkit-adapter-ethers5

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-ethers5

----------------------------------------

TITLE: Importing and Displaying Relay Documentation in MDX
DESCRIPTION: This code imports the Relay component from a snippets directory and renders it within the current page. The file uses MDX syntax to combine Markdown with JSX components.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/cloud/relay.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Relay
---

import Relay from "/snippets/cloud/relay.mdx";

<Relay />

----------------------------------------

TITLE: Installing @web3inbox/core with Yarn
DESCRIPTION: This snippet demonstrates the installation of @web3inbox/core using Yarn package manager. Yarn is an alternative to npm and uses a similar syntax for package installation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/javascript.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
yarn add @web3inbox/core

----------------------------------------

TITLE: Configuring ConnectOptions with Builder Pattern
DESCRIPTION: Alternative approach to define blockchain requirements using builder pattern style functions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_23

LANGUAGE: csharp
CODE:
var dappConnectOptions1 = new ConnectOptions()
    .RequireNamespace("eip155", new RequiredNamespace()
        .WithMethod("eth_sendTransaction")
        .WithMethod("eth_signTransaction")
        .WithMethod("eth_sign")
        .WithMethod("personal_sign")
        .WithMethod("eth_signTypedData")
        .WithChain("eip155:1")
        .WithEvent("chainChanged")
        .WithEvent("accountsChanged")
    );

----------------------------------------

TITLE: Handling Pairing Expiry Events on Android
DESCRIPTION: This Kotlin code implements a delegate for handling pairing expiration on Android. It creates a CoreClient.CoreDelegate object with an onPairingExpired method to respond when pairings expire, then registers it with the CoreClient.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_5

LANGUAGE: kotlin
CODE:
val coreDelegate = object : CoreClient.CoreDelegate {
    override fun onPairingExpired(expiredPairing: Core.Model.ExpiredPairing) {
        // Here a pairing expiry is triggered
    }
    // ...other callbacks
}

CoreClient.setDelegate(coreDelegate)

----------------------------------------

TITLE: Installing Main Reown AppKit with Ethers.js for React Native
DESCRIPTION: Installs the core Reown AppKit package for React Native along with ethers.js v5.7.2 using Yarn package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/installation.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
yarn add @reown/appkit-ethers5-react-native ethers@5.7.2

----------------------------------------

TITLE: Get All Subscribers Implementation
DESCRIPTION: JavaScript implementation for fetching all subscribers of an application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,
  {
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    },
  }
);
const subscribers: string[] = await response.json();

----------------------------------------

TITLE: Error Handling in AppKit
DESCRIPTION: Function to retrieve error information from the AppKit modal instance
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/hooks.mdx#2025-04-10_snippet_3

LANGUAGE: ts
CODE:
function Components() {
  const error = modal.getError();
  //...
}

----------------------------------------

TITLE: Installing AppKit in JavaScript Project
DESCRIPTION: Installation commands for adding Reown AppKit to a JavaScript project using different package managers. These commands install the core AppKit library and the Wagmi adapter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_9

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-wagmi

LANGUAGE: bash
CODE:
bun a @reown/appkit @reown/appkit-adapter-wagmi

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-wagmi

----------------------------------------

TITLE: Importing and Rendering Analytics Component in MDX
DESCRIPTION: This code imports an Analytics component from a snippets directory and renders it on the page. The component likely contains documentation or UI elements related to analytics functionality within a cloud environment.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/cloud/analytics.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Analytics from "/snippets/cloud/analytics.mdx";

<Analytics />

----------------------------------------

TITLE: Installing @web3inbox/core with npm
DESCRIPTION: This snippet shows how to install the @web3inbox/core package using npm (Node Package Manager). It's a simple one-line command that adds the package to your project's dependencies.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/javascript.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @web3inbox/core

----------------------------------------

TITLE: Configuring Associated Domains in iOS Entitlements
DESCRIPTION: XML configuration for iOS entitlements file that enables associated domains for universal links. This should be added to your project's entitlements file to allow the app to handle universal links from your domain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/link-mode.mdx#2025-04-10_snippet_2

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>com.apple.developer.associated-domains</key>
  <array>
    <string>applinks:example.com</string>
  </array>
</dict>
</plist>

----------------------------------------

TITLE: Defining Session Data Interfaces for Universal Provider in TypeScript
DESCRIPTION: Type definitions for the session data object, including namespaces and metadata interfaces used in the Universal Provider.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/universal.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
interface Namespaces {
  chains?: string[];
  accounts: string[];
  methods: string[];
  events: string[];
}

interface Metadata {
  name: string;
  description: string;
  url: string;
  icons: string[];
  verifyUrl?: string;
  redirect?: {
    native?: string;
    universal?: string;
  };
}

----------------------------------------

TITLE: Referencing themeMode Configuration in Markdown
DESCRIPTION: This snippet shows how the themeMode option is referenced in documentation. By default, it uses the system settings (light or dark), but developers can override this setting to match their DApp design.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/themeMode.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
`themeMode`

----------------------------------------

TITLE: Preparing Authentication Payloads in TypeScript with WalletConnect
DESCRIPTION: Code demonstrating how to populate an authentication payload with supported chains and methods, and format an authentication message using the CAIP10 standard for the user's address. This prepares the necessary data for user authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { populateAuthPayload } from "@walletconnect/utils";

// EVM chains that your wallet supports
const supportedChains = ["eip155:1", "eip155:2", 'eip155:137'];
// EVM methods that your wallet supports
const supportedMethods = ["personal_sign", "eth_sendTransaction", "eth_signTypedData"];
// Populate the authentication payload with the supported chains and methods
const authPayload = populateAuthPayload({
  authPayload: payload.params.authPayload,
  chains: supportedChains,
  methods: supportedMethods,
});
// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format
const iss = `eip155:1:0x0Df6d2a56F90e8592B4FfEd587dB3D5F5ED9d6ef`;
// Now you can use the authPayload to format the authentication message
const message = walletKit.formatAuthMessage({
  request: authPayload,
  iss
});

// Present the authentication message to the user
...

----------------------------------------

TITLE: Adding SendCalls Button in React JSX
DESCRIPTION: Renders a button that triggers the sendCalls function when clicked, with disabled state handling. This provides the user interface element for initiating sponsored transactions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
return (
  <Button
    onClick={onSendCalls}
    disabled={!sendCalls}
  >
    SendCalls w/ Paymaster Service
  </Button>
)

----------------------------------------

TITLE: Importing and Displaying Analytics Component in MDX
DESCRIPTION: This code imports an Analytics component from a cloud snippets directory and renders it within an MDX document. The import statement references a relative path to the component file.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/cloud/analytics.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Analytics
---

import Analytics from "/snippets/cloud/analytics.mdx";

<Analytics />

----------------------------------------

TITLE: Implementing Coinbase Response Handler
DESCRIPTION: TypeScript implementation for handling Coinbase wallet responses using deep linking.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
import { handleResponse } from "@coinbase/wallet-mobile-sdk";

useEffect(() => {
  const sub = Linking.addEventListener("url", ({ url }) => {
    const handledBySdk = handleResponse(new URL(url));
    if (!handledBySdk) {
      // Handle other deeplinks
    }
  });

  return () => sub.remove();
}, []);

----------------------------------------

TITLE: Installing TypeScript Development Dependencies
DESCRIPTION: Adds recommended TypeScript type definitions for WalletConnect JSON-RPC to improve developer experience when using WalletKit with TypeScript.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/installation.mdx#2025-04-10_snippet_3

LANGUAGE: sh
CODE:
yarn add @walletconnect/jsonrpc-types --dev

----------------------------------------

TITLE: Importing Blockchain Networks for AppKit
DESCRIPTION: Shows how to import specific blockchain networks from Reown AppKit's network module, which uses Viem networks under the hood for EVM chain support.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/wagmi/about/implementation.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
import { createAppKit } from '@reown/appkit/vue'
import { mainnet, arbitrum, base, scroll, polygon } from '@reown/appkit/networks'

----------------------------------------

TITLE: Updating Package Dependencies in manifest.json
DESCRIPTION: Shows how to replace Web3Modal dependencies with Reown AppKit in the Unity project's manifest.json file. Demonstrates removing old WalletConnect packages and adding new Reown packages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-unity.mdx#2025-04-10_snippet_0

LANGUAGE: json
CODE:
{
  "dependencies": {
    // Remove the following code lines
    "com.walletconnect.web3modal": "1.0.0",

    // Add the following code lines
    "com.reown.appkit": "0.4.2"
  },
  "scopedRegistries": [
    {
      "name": "package.openupm.com",
      "url": "https://package.openupm.com",
      "scopes": [
        // Remove the following code lines
        "com.walletconnect",

        // Add the following code lines
        "com.reown"
      ]
    }
  ]
}

----------------------------------------

TITLE: Importing and Rendering Relay Documentation Component in MDX
DESCRIPTION: This snippet shows how to import a Relay documentation component from the snippets directory and render it within an MDX page. The file uses JSX syntax within MDX to display the Relay documentation content.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/cloud/relay.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Relay from "/snippets/cloud/relay.mdx";

<Relay />

----------------------------------------

TITLE: Installing WalletConnect NotifyClient Package for React Native
DESCRIPTION: Installation commands for adding the WalletConnect NotifyClient package and React Native compatibility library using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_34

LANGUAGE: bash
CODE:
npm install @walletconnect/notify-client @walletconnect/react-native-compat

LANGUAGE: bash
CODE:
yarn add @walletconnect/notify-client @walletconnect/react-native-compat

LANGUAGE: bash
CODE:
bun a @walletconnect/notify-client @walletconnect/react-native-compat

LANGUAGE: bash
CODE:
pnpm add @walletconnect/notify-client @walletconnect/react-native-compat

----------------------------------------

TITLE: Importing Message Signing Hook from Wagmi
DESCRIPTION: Import statement for the useSignMessage hook from Wagmi, which provides functionality for signing messages with a connected wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#2025-04-10_snippet_4

LANGUAGE: jsx
CODE:
import { useSignMessage } from "wagmi";

----------------------------------------

TITLE: Android Active Pairings Retrieval
DESCRIPTION: Shows how to get a list of active pairings in Android.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_15

LANGUAGE: kotlin
CODE:
val listOfActivePairings: List<Core.Model.Pairing> = CoreClient.Pairing.getPairings()

----------------------------------------

TITLE: Importing and Rendering Social Media Component in MDX
DESCRIPTION: Demonstrates how to import a reusable social media component from a snippets directory and render it in an MDX documentation page.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/socials.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
import Socials from "/snippets/appkit/shared/socials.mdx";

<Socials />

----------------------------------------

TITLE: Importing Migration Guide Component in MDX
DESCRIPTION: Imports a Migration component from a specified path to be used in the documentation. This component likely contains the detailed migration instructions for the notification service.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/frontend-integration/migration-guide.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Migration from "/snippets/appkit/shared/notifications/frontend-integration/migration/javascript.mdx";

----------------------------------------

TITLE: Defining Custom RPC URLs Type Structure in TypeScript
DESCRIPTION: Type definitions for configuring custom RPC URLs in AppKit. This shows the data structure required for overriding default network RPC URLs for native RPC calls.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_31

LANGUAGE: typescript
CODE:
type CustomRpcUrl = {
  url: string
  config?: HttpTransportConfig // Optional transport configuration
}

type CustomRpcUrlMap = Record<CaipNetworkId, CustomRpcUrl[]>

----------------------------------------

TITLE: Pairing a Wallet with Dapp using WalletKit on Web and React Native
DESCRIPTION: This code demonstrates how to pair a wallet with a dapp using the WalletKit client. The pairing establishes a connection with fixed permissions that allows the dapp to propose sessions. Error handling is included to manage potential pairing failures.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
const uri = 'xxx'; // pairing uri
try {
    await walletKit.pair({ uri });
} catch (error) {
    // some error happens while pairing - check Expected errors section
}

----------------------------------------

TITLE: Configuring AppKit Bitcoin Provider in Vue.js
DESCRIPTION: Setup code for initializing AppKit Bitcoin provider with necessary configuration including project ID, networks, Bitcoin adapter, and metadata. The configuration enables Bitcoin wallet connectivity and customizable features like analytics and social integrations.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/bitcoin/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
<script setup lang="ts">

import { createAppKit } from '@reown/appkit/react'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { bitcoin } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set the networks
const networks = [bitcoin]

// 3. Set up Bitcoin Adapter
const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

// 4. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Bitcoin Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 5. Create modal
createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration,
    email: false,
    socials: []
  }
})
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Overriding AppKit CSS Variables
DESCRIPTION: This CSS snippet demonstrates how to override default AppKit variables to customize colors and border properties. It changes the accent color to orange and modifies modal border properties.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/customization.mdx#2025-04-10_snippet_1

LANGUAGE: css
CODE:
@import url("/Packages/com.reown.appkit.unity/UI Toolkit/AppKit Base Theme.tss");

* {
    --ro-color-accent-100: rgb(156, 81, 65);

    --ro-accent-glass-090: rgba(156, 81, 65, 0.9);
    --ro-accent-glass-080: rgba(156, 81, 65, 0.8);
    --ro-accent-glass-020: rgba(156, 81, 65, 0.2);
    --ro-accent-glass-015: rgba(156, 81, 65, 0.15);
    --ro-accent-glass-010: rgba(156, 81, 65, 0.1);
    --ro-accent-glass-005: rgba(156, 81, 65, 0.05);
    --ro-accent-glass-002: rgba(156, 81, 65, 0.02);
}

Modal {
    --ro-modal-border-color: #9a9085;
    --ro-modal-border-width: 3px;
}

----------------------------------------

TITLE: ProGuard Rules for Chain Abstraction Integration in Kotlin
DESCRIPTION: Required ProGuard rules to prevent minification issues when implementing Chain Abstraction. These rules preserve necessary classes, annotations, and native methods required by the functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/early-access/chain-abstraction.mdx#2025-04-10_snippet_4

LANGUAGE: proguard
CODE:
-keepattributes *Annotation*

-keep class com.sun.jna.** { *; }
-keepclassmembers class com.sun.jna.** {
    native <methods>;
    *;
}

-keep class uniffi.** { *; }

# Preserve all public and protected fields and methods
-keepclassmembers class ** {
    public *;
    protected *;
}

-dontwarn uniffi.**
-dontwarn com.sun.jna.**

----------------------------------------

TITLE: Available WalletKit Publishers in Swift
DESCRIPTION: Lists all available publisher streams that can be subscribed to in the WalletKit. These publishers provide updates about various WalletConnect events such as session proposals, requests, and connection status changes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_18

LANGUAGE: swift
CODE:
public var sessionProposalPublisher: AnyPublisher<(proposal: Session.Proposal, context: VerifyContext?), Never>
public var sessionRequestPublisher: AnyPublisher<(request: Request, context: VerifyContext?), Never>
public var authRequestPublisher: AnyPublisher<(request: AuthRequest, context: VerifyContext?), Never>
public var sessionPublisher: AnyPublisher<[Session], Never>
public var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>
public var sessionSettlePublisher: AnyPublisher<Session, Never>
public var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>
public var sessionResponsePublisher: AnyPublisher<Response, Never>

----------------------------------------

TITLE: Setting Connector Images with Ethers in ReOwn AppKit
DESCRIPTION: Customizes the images for wallet connectors in the Ethers adapter by mapping connector names to image URLs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_11

LANGUAGE: typescript
CODE:
createAppKit({
  connectorImages: {
    coinbaseWallet: "https://images.mydapp.com/coinbase.png",
    walletConnect: "https://images.mydapp.com/walletconnect.png",
  },
});

----------------------------------------

TITLE: Updating Instance Access for AppKit
DESCRIPTION: Instructions for replacing Web3Modal.instance with AppKit.instance in method calls and publishers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-ios.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
// Remove the following code line
- Web3Modal.instance.authResponsePublisher.sink { (id, result) in
-     // Your code here
- }

+ AppKit.instance.authResponsePublisher.sink { (id, result) in
+     // Your code here
+ }

----------------------------------------

TITLE: Logging Out Account from Notify API in Swift
DESCRIPTION: Unregisters an account from the Notify API, removing all subscriptions and messages for this account from the client's storage. This is useful when an account is removed or no longer wants to receive notifications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#2025-04-10_snippet_8

LANGUAGE: swift
CODE:
public func unregister(account: Account) async throws

----------------------------------------

TITLE: Configuring On-Ramp in AppKit
DESCRIPTION: Example showing how to configure the On-Ramp feature in AppKit using the createAppKit function. The onramp flag can be set to false to disable the feature, though it's enabled by default. This configuration works for both EVM and Solana networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/onramp.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    onramp: false // Optional - true by default
  }
})

----------------------------------------

TITLE: .NET Dapp Pairing Implementation
DESCRIPTION: Demonstrates how to generate a pairing URI from the dapp side in .NET.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_19

LANGUAGE: csharp
CODE:
var pairData = await core.Pairing.Create();
string topic = pairData.Topic;
string uri = pairData.Uri;

----------------------------------------

TITLE: Installing Reown AppKit and Ethers.js in React Native Expo
DESCRIPTION: This command installs the Reown AppKit package for React Native along with Ethers.js version 5.7.2 using the Expo CLI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/installation-expo.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npx expo install @reown/appkit-ethers5-react-native ethers@5.7.2

----------------------------------------

TITLE: AppKitButton Component Props Table in Markdown
DESCRIPTION: Detailed table of props available for the AppKitButton component, including types and descriptions for disabled, balance, size, label, and loadingLabel properties.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/components.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
| Variable       | Description                                          | Type               |
| -------------- | ---------------------------------------------------- | ------------------ |
| `disabled`     | Enable or disable the button.                        | `boolean`          |
| `balance`      | Show or hide the user's balance.                     | `'show' \| 'hide'` |
| `size`         | Default size for the button.                         | `'md' \| 'sm'`     |
| `label`        | The text shown in the button.                        | `string`           |
| `loadingLabel` | The text shown in the button when the modal is open. | `string`           |

----------------------------------------

TITLE: Enabling Authentication Features
DESCRIPTION: Configure authentication features in createAppKit including email and social login options. Specifies which social platforms to enable and email wallet visibility settings.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/email.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
createAppKit({
  projectId,
  chains,
  config,
  features: {
    email: true, // default to true
    socials: ["x", "discord", "apple"], // default value
    emailShowWallets: true, // default to true
  },
});

----------------------------------------

TITLE: Installing Expo Crypto Package
DESCRIPTION: Command to install the Expo crypto package for providing cryptographic functionality in Expo environments.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#2025-04-10_snippet_1

LANGUAGE: sh
CODE:
yarn add expo-crypto

----------------------------------------

TITLE: Using Balance Display Button with ReownAppKit
DESCRIPTION: Implements the AppKitModalBalanceButton to show the wallet balance on the currently selected network.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_10

LANGUAGE: javascript
CODE:
AppKitModalBalanceButton(appKitModal: _appKitModal)

----------------------------------------

TITLE: Importing and Rendering Socials Component in MDX
DESCRIPTION: Demonstrates how to import a Socials component from a shared snippet directory and render it within an MDX document.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/socials.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
import Socials from "/snippets/appkit/shared/socials.mdx";

<Socials />

----------------------------------------

TITLE: Implementing WalletConnectModal in React Native
DESCRIPTION: Sets up WalletConnectModal in a React Native application with React Native compat layer, project ID, and provider metadata. Requires a valid project ID from WalletConnect.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_11

LANGUAGE: javascript
CODE:
import "@walletconnect/react-native-compat";
import { WalletConnectModal } from "@walletconnect/modal-react-native";

const projectId = "YOUR_PROJECT_ID";

const providerMetadata = {
  name: "YOUR_PROJECT_NAME",
  description: "YOUR_PROJECT_DESCRIPTION",
  url: "https://your-project-website.com/",
  icons: ["https://your-project-logo.com/"],
  redirect: {
    native: "YOUR_APP_SCHEME://",
    universal: "YOUR_APP_UNIVERSAL_LINK.com",
  },
};

function App() {
  return (
    <>
      <WalletConnectModal
        projectId={projectId}
        providerMetadata={providerMetadata}
      />
    </>
  );
}

----------------------------------------

TITLE: OpenUPM CLI Package Management Commands
DESCRIPTION: CLI commands for removing the old Web3Modal package and adding the new Reown AppKit package using OpenUPM package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-unity.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
# Remove the old package
openupm remove com.walletconnect.web3modal

# Add the new package
openupm add com.reown.appkit

----------------------------------------

TITLE: Configuring Expo app.json for iOS Wallet Detection
DESCRIPTION: JSON configuration for the app.json file in an Expo project to enable wallet detection on iOS by adding wallet URL schemes to the LSApplicationQueriesSchemes array.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_11

LANGUAGE: json
CODE:
{
  "expo": {
    "ios": {
      "bundleIdentifier": "com.your.app",
      "infoPlist": {
        "LSApplicationQueriesSchemes": [
          "metamask",
          "trust",
          "safe",
          "rainbow",
          "uniswap"
          // Add other wallet schemes names here
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Updating App.tsx Import Statements for AppKit
DESCRIPTION: Changes to import statements in the main App component when migrating from RainbowKit to AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#2025-04-10_snippet_5

LANGUAGE: tsx
CODE:
import '../styles/globals.css';
- import '@rainbow-me/rainbowkit/styles.css';

import type { AppProps } from 'next/app';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';

- import { WagmiProvider } from 'wagmi';
- import { config } from '../wagmi';

+ import { wagmiAdapter, projectId } from '@/config'

- import { RainbowKitProvider } from '@rainbow-me/rainbowkit';

+ import { createAppKit } from "@reown/appkit/react"


----------------------------------------

TITLE: Flutter Web3App Initialization with ProjectId
DESCRIPTION: Creates a Web3App instance for Flutter with projectId and metadata. This approach allows registering callbacks on the Web3App before providing it to WalletConnectModalService.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#2025-04-10_snippet_11

LANGUAGE: javascript
CODE:
final Web3App web3App = await Web3App.createInstance(
  projectId: 'YOUR_PROJECT_ID',
  metadata: const PairingMetadata(
    name: 'Flutter Dapp Example',
    description: 'Flutter Dapp Example',
    url: 'https://www.walletconnect.com/',
    icons: ['https://walletconnect.com/walletconnect-logo.png'],
    redirect: Redirect(
      native: 'flutterdapp://',
      universal: 'https://www.walletconnect.com',
    ),
  ),
);

// Register callbacks on the Web3App you'd like to use

WalletConnectModalService service = WalletConnectModalService(
  web3App: web3App,
);

----------------------------------------

TITLE: Retrieving Active Sessions
DESCRIPTION: Gets the currently active wallet sessions using the getActiveSessions function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
const activeSessions = walletKit.getActiveSessions();

----------------------------------------

TITLE: Sending Notifications with JavaScript Fetch API
DESCRIPTION: JavaScript example demonstrating how to send a notification to a specified account using the Notify API with the fetch method. Requires project ID and API secret for authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/${PROJECT_ID}/notify`,
  {
    method: "POST",
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      notification: {
        type: "a1e53b95-18e5-4af8-9f03-9308ec87b687",
        title: "The price of Ethereum has risen",
        body: "The price of Ethereum has gone up 10%",
        url: "https://app.example.com",
      },
      accounts: ["eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"],
    }),
  }
);

----------------------------------------

TITLE: Importing AppKit Base Theme in CSS
DESCRIPTION: This CSS snippet shows how to import the AppKit Base Theme into a custom TSS Theme File. It's the first step in customizing the AppKit's appearance.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/customization.mdx#2025-04-10_snippet_0

LANGUAGE: css
CODE:
@import url("/Packages/com.reown.appkit.unity/UI Toolkit/AppKit Base Theme.tss");

----------------------------------------

TITLE: Color Interface Definition for Compose
DESCRIPTION: Interface defining customizable colors in AppKitTheme for Compose implementation
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#2025-04-10_snippet_4

LANGUAGE: kotlin
CODE:
    interface Colors {
        val accent100: Color
        val accent90: Color
        val accent80: Color
        val foreground: ColorPalette
        val background: ColorPalette
        val grayGlass: Color
        val success: Color
        val error: Color
    }

----------------------------------------

TITLE: Setting up AppKit with Ethers Adapter
DESCRIPTION: This code snippet shows how to configure AppKit using the Ethers adapter. It includes setting up the adapter, defining networks, and creating the AppKit instance with analytics features.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/custom-connectors.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { createAppKit } from "@reown/appkit/react";
import { EthersAdapter } from "@reown/appkit-adapter-ethers";
import { sepolia } from "@reown/appkit/networks";

const projectId = "YOUR_PROJECT_ID";

// Create a metadata object
const metadata = {
  //...
};

// Create Ethers adapter
const ethersAdapter = new EthersAdapter();

// Create a AppKit instance
createAppKit({
  adapters: [ethersAdapter],
  networks: [sepolia],
  metadata,
  projectId,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  },
});

// Now, you can render connect button
ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <appkit-button />
  </React.StrictMode>
);

----------------------------------------

TITLE: Installing AppKit Notifications for React
DESCRIPTION: This snippet shows how to install the necessary dependencies for using AppKit Notifications in a React project using npm or yarn.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/usage.mdx#2025-04-10_snippet_0

LANGUAGE: shell
CODE:
npm install @web3inbox/react-sdk ethers@5.7.2 @web3modal/ethereum @web3modal/react

LANGUAGE: shell
CODE:
yarn add @web3inbox/react-sdk ethers@5.7.2 @web3modal/ethereum @web3modal/react

----------------------------------------

TITLE: Setting Custom Wallet Logo Mappings in TypeScript
DESCRIPTION: Configuration object that maps wallet identifiers to their corresponding logo image paths. This allows overriding default wallet logos with custom images. Supports various wallet ID formats including WalletGuide IDs, custom mobile/desktop wallet IDs, and wagmi connector IDs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/walletImages.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
walletImages: {
  rainbow: "/images/rainbow.webp",
  metaMask: "/images/metamask.webp",
};

----------------------------------------

TITLE: Updating Dependencies in Flutter pubspec.yaml
DESCRIPTION: Shows how to replace the web3modal_flutter dependency with reown_appkit in the pubspec.yaml file.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#2025-04-10_snippet_0

LANGUAGE: dart
CODE:
// Remove the code line below
web3modal_flutter: ^X.Y.Z

reown_appkit: ^1.0.0

----------------------------------------

TITLE: Triggering Web3Modal in JavaScript
DESCRIPTION: Shows how to trigger Web3Modal using vanilla JavaScript with a custom button. Includes migration from web3modal.openModal() to modal.open() method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
document.getElementById('my-button').addEventListener('click', () => {
/* highlight-delete-start */
-   web3modal.openModal()
/* highlight-delete-end */
/* highlight-add-start */
+   modal.open()
/* highlight-add-end */
})

<button id="my-button">Connect Wallet</button>

----------------------------------------

TITLE: Pairing with WalletKit in Swift
DESCRIPTION: Demonstrates how to pair a wallet with a dapp using WalletKit. It parses a WalletConnect URI and initiates the pairing process asynchronously.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
let uri = WalletConnectURI(string: urlString)

if let uri {
Task {
try await WalletKit.instance.pair(uri: uri)
}
}

----------------------------------------

TITLE: RainbowKit App Component Before Migration
DESCRIPTION: The structure of a typical App component using RainbowKit, which needs to be updated for AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#2025-04-10_snippet_7

LANGUAGE: tsx
CODE:
function MyApp({ Component, pageProps }: AppProps) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={client}>
        
        <RainbowKitProvider>
          
          <Component {...pageProps} />
          
        </RainbowKitProvider>
        
      </QueryClientProvider>
    </WagmiProvider>
  )
}

export default MyApp

----------------------------------------

TITLE: Handling Session Request Expiry in WalletKit
DESCRIPTION: This code shows how to detect when a session request expires. The expiry time is defined by the dapp and must be between 5 minutes and 7 days from creation. This callback allows the wallet to update its UI to reflect the expired state.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#2025-04-10_snippet_7

LANGUAGE: kotlin
CODE:
val walletDelegate = object : WalletKit.WalletDelegate {
    override fun onRequestExpired(request: Wallet.Model.ExpiredRequest) {
        //Here this event is triggered when a session request expires - update your UI
    }
    ...other callbacks
}
WalletKit.setWalletDelegate(walletDelegate)

----------------------------------------

TITLE: Importing AppKit and Wagmi Adapter in React
DESCRIPTION: This snippet shows how to import the necessary packages for AppKit and Wagmi adapter in a React application. It replaces Web3Modal imports with AppKit imports and adds the WagmiAdapter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_11

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit/react'
import { arbitrum, mainnet } from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { WagmiProvider } from 'wagmi'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

----------------------------------------

TITLE: Importing and Rendering the Verify Component in Markdown with JSX
DESCRIPTION: This snippet demonstrates importing a Verify component from a snippets directory and rendering it in a Markdown document with JSX syntax. The component likely contains documentation about verification processes for cloud services.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Opening AppKit with Web Component in React
DESCRIPTION: This snippet shows how to use the AppKit web component to create a connect button in a React component. The web component is a global HTML element that doesn't require importing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />;
}

----------------------------------------

TITLE: Installing AppKit Notifications for React
DESCRIPTION: This snippet shows how to install the necessary dependencies for using AppKit Notifications in a React project using npm or yarn.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/usage.mdx#2025-04-10_snippet_0

LANGUAGE: shell
CODE:
npm install @web3inbox/react-sdk ethers@5.7.2 @web3modal/ethereum @web3modal/react

LANGUAGE: shell
CODE:
yarn add @web3inbox/react-sdk ethers@5.7.2 @web3modal/ethereum @web3modal/react

----------------------------------------

TITLE: Retrieving Errors from AppKit Modal
DESCRIPTION: Shows how to access error information from the AppKit modal using the getError method. This can be used for error handling and displaying error messages to users.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: ts
CODE:
function Components() {
  const error = modal.getError();
  //...
}

----------------------------------------

TITLE: DefaultAccountTypes Type Definition in ReOwn AppKit
DESCRIPTION: Type definition showing all available options for default account types across different blockchain networks including EVM, Solana, Bitcoin, and Polkadot.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_7

LANGUAGE: typescript
CODE:
type DefaultAccountTypes = {
  eip155: "eoa" | "smartAccount";
  solana: "eoa";
  bip122: "payment" | "ordinal" | "stx";
  polkadot: "eoa";
};

----------------------------------------

TITLE: Updating Dependencies for Wagmi Implementation
DESCRIPTION: Package.json updates showing the replacement of Web3Modal dependencies with Reown AppKit dependencies for Wagmi implementation
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#2025-04-10_snippet_0

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@reown/appkit-wagmi-react-native": "1.0.0",
    "@reown/appkit-auth-wagmi-react-native": "1.0.0",
    "@reown/appkit-coinbase-wagmi-react-native": "1.0.0",
    "@reown/appkit-siwe-react-native": "1.0.0"
  }
}

----------------------------------------

TITLE: Installing @wagmi/core for Blockchain Interaction in JavaScript
DESCRIPTION: Commands to install @wagmi/core for interacting with smart contracts using Wagmi in JavaScript projects with different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#2025-04-10_snippet_5

LANGUAGE: bash
CODE:
npm install @wagmi/core

LANGUAGE: bash
CODE:
yarn add @wagmi/core

LANGUAGE: bash
CODE:
bun a @wagmi/core

LANGUAGE: bash
CODE:
pnpm add @wagmi/core

----------------------------------------

TITLE: Importing and Using Verify Component in MDX
DESCRIPTION: Imports a Verify component from the cloud snippets directory and renders it on the page using MDX syntax.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Adding Event Listeners for NotifyClient in React Native
DESCRIPTION: Implementation of event listeners for handling subscription responses, incoming notifications, subscription updates, and subscription changes in a React Native application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_36

LANGUAGE: javascript
CODE:
// Handle response to a `notifyClient.subscribe(...)` call
notifyClient.on("notify_subscription", async ({ params }) => {
  const { error } = params;

  if (error) {
    // Setting up the subscription failed.
    // Inform the user of the error and/or clean up app state.
    console.error("Setting up subscription failed: ", error);
  } else {
    // New subscription was successfully created.
    // Inform the user and/or update app state to reflect the new subscription.
    console.log(`Subscribed successfully.`);
  }
});

// Handle an incoming notification
notifyClient.on("notify_message", ({ params }) => {
  const { message } = params;
  // e.g. build a notification using the metadata from `message` and show to the user.
});

// Handle response to a `notifyClient.update(...)` call
notifyClient.on("notify_update", ({ params }) => {
  const { error } = params;

  if (error) {
    // Updating the subscription's scope failed.
    // Inform the user of the error and/or clean up app state.
    console.error("Setting up subscription failed: ", error);
  } else {
    // Subscription's scope was updated successfully.
    // Inform the user and/or update app state to reflect the updated subscription.
    console.log(`Successfully updated subscription scope.`);
  }
});

// Handle a change in the existing subscriptions (e.g after a subscribe or update)
notifyClient.on("notify_subscriptions_changed", ({ params }) => {
  const { subscriptions } = params;
  // `subscriptions` will contain any *changed* subscriptions since the last time this event was emitted.
  // To get a full list of subscriptions for a given account you can use `notifyClient.getActiveSubscriptions({ account: 'eip155:1:0x63Be...' })`
});

----------------------------------------

TITLE: Installing Web3Inbox SDK with Yarn
DESCRIPTION: Command to install the Web3Inbox core and React packages using Yarn package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/react.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
yarn add @web3inbox/core @web3inbox/react

----------------------------------------

TITLE: Installing Web3Inbox Packages with Yarn
DESCRIPTION: Command to install the required Web3Inbox core and React widget packages using Yarn package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/about.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
yarn add @web3inbox/core @web3inbox/widget-react

----------------------------------------

TITLE: Installing expo-crypto Package
DESCRIPTION: Command to install the expo-crypto package using npx expo install.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/expo/additional-expo48.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npx expo install expo-crypto

----------------------------------------

TITLE: Theme Mode Definition in Compose
DESCRIPTION: Enum class definition for theme modes in Compose implementation
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
    enum class Mode {
        LIGHT, DARK, AUTO
    }

----------------------------------------

TITLE: Account Button Component Implementation
DESCRIPTION: Specialized button component for account-related actions with balance display options and disable state support.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/components.mdx#2025-04-10_snippet_1

LANGUAGE: html
CODE:
<appkit-account-button />

----------------------------------------

TITLE: Setting Privacy Policy URL Parameter
DESCRIPTION: Demonstrates how to configure the privacy policy URL parameter that enables a legal information footer in the modal. The URL should point to a valid privacy policy page.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/privacyPolicyUrl.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
privacyPolicyUrl: 'https://example.com/privacy-policy'

----------------------------------------

TITLE: Updating Class References to WalletKit
DESCRIPTION: Replaces Web3Wallet class references with WalletKit in method calls and initialization code.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-android.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
WalletKit.initialize(Wallet.Params.Init(core = CoreClient), onSuccess, onError)
WalletKit.approveSession(approveProposal, onSuccess, onError)

----------------------------------------

TITLE: Creating AppKit Instance in React
DESCRIPTION: Code for initializing the Reown AppKit instance with the EthersAdapter in React applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#2025-04-10_snippet_4

LANGUAGE: tsx
CODE:
// Remove the following code line
-createWeb3Modal({ ethersConfig, projectId, chains })

// Add the following code lines
  createAppKit({
    adapters: [new EthersAdapter()],
    networks: [mainnet, arbitrum],
    metadata,
    projectId,
    features: {
      analytics: true,
    },
  });

----------------------------------------

TITLE: Updating Web3App Instance Usage
DESCRIPTION: Demonstrates how to update the web3App instance usage to the new appKit syntax.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#2025-04-10_snippet_3

LANGUAGE: tsx
CODE:
// Remove the code line below
_w3mService.web3App!.getActiveSessions();

_appKitModal.appKit!.getActiveSessions();

----------------------------------------

TITLE: Configuring SIWE Client for One-Click Auth
DESCRIPTION: TypeScript code for configuring the SIWE client with One-Click Auth, including message creation, nonce retrieval, session management, and signature verification.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { getCsrfToken, signIn, signOut, getSession } from "next-auth/react";
import type {
  SIWEVerifyMessageArgs,
  SIWECreateMessageArgs,
  SIWESession,
} from "@reown/appkit-siwe";
import { createSIWEConfig, formatMessage } from "@reown/appkit-siwe";
import { mainnet, sepolia } from "@reown/appkit/networks";

export const siweConfig = createSIWEConfig({
  getMessageParams: async () => ({
    domain: typeof window !== "undefined" ? window.location.host : "",
    uri: typeof window !== "undefined" ? window.location.origin : "",
    chains: [mainnet.id, sepolia.id],
    statement: "Please sign with your account",
  }),
  createMessage: ({ address, ...args }: SIWECreateMessageArgs) =>
    formatMessage(args, address),
  getNonce: async () => {
    const nonce = await getCsrfToken();
    if (!nonce) {
      throw new Error("Failed to get nonce!");
    }

    return nonce;
  },
  getSession: async () => {
    const session = await getSession();
    if (!session) {
      return null;
    }

    // Validate address and chainId types
    if (
      typeof session.address !== "string" ||
      typeof session.chainId !== "number"
    ) {
      return null;
    }

    return {
      address: session.address,
      chainId: session.chainId,
    } satisfies SIWESession;
  },
  verifyMessage: async ({ message, signature }: SIWEVerifyMessageArgs) => {
    try {
      const success = await signIn("credentials", {
        message,
        redirect: false,
        signature,
        callbackUrl: "/protected",
      });

      return Boolean(success?.ok);
    } catch (error) {
      return false;
    }
  },
  signOut: async () => {
    try {
      await signOut({
        redirect: false,
      });

      return true;
    } catch (error) {
      return false;
    }
  },
});

----------------------------------------

TITLE: Installing Ethers v6 Adapter with npm
DESCRIPTION: npm command to install AppKit with Ethers v6 adapter and required dependencies for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_9

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers ethers

----------------------------------------

TITLE: Installing SIWE Dependencies
DESCRIPTION: Package installation commands for SIWE and AppKit SIWE integration across different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/siwe.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwe siwe

LANGUAGE: bash
CODE:
yarn add @reown/appkit-siwe siwe

LANGUAGE: bash
CODE:
bun a @reown/appkit-siwe siwe

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-siwe siwe

----------------------------------------

TITLE: Initializing ReownAppKitModal with SIWE Configuration
DESCRIPTION: Example showing how to initialize the ReownAppKitModal component with your SIWE configuration to enable Sign In With Ethereum functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
    ),
  ),
  siweConfig: SIWEConfig(...),
);

----------------------------------------

TITLE: Defining General Style Variables for WalletConnect Modal (CSS)
DESCRIPTION: CSS variables for customizing the general appearance of the WalletConnect modal, including font family, colors, border radii, and z-index.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/wcModalThemeVariablesTable.mdx#2025-04-10_snippet_0

LANGUAGE: css
CODE:
--wcm-font-family: Roboto, sans-serif;
--wcm-font-feature-settings: tnum;
--wcm-overlay-background-color: rgba(0, 0, 0, 0.3);
--wcm-overlay-backdrop-filter: blur(5px);
--wcm-z-index: 10;
--wcm-accent-color: #FFFFFF;
--wcm-accent-fill-color: #000000;
--wcm-background-color: #CECECE;
--wcm-background-border-radius: 12px;
--wcm-container-border-radius: 24px;
--wcm-wallet-icon-border-radius: 2em;
--wcm-wallet-icon-large-border-radius: 3em;
--wcm-wallet-icon-small-border-radius: 1em;
--wcm-input-border-radius: 50%;
--wcm-notification-border-radius: 2rem;
--wcm-button-border-radius: 8px;
--wcm-secondary-button-border-radius: 8px;
--wcm-icon-button-border-radius: 50%;
--wcm-button-hover-highlight-border-radius: 2rem;

----------------------------------------

TITLE: Setting Connector Images with Wagmi in ReOwn AppKit
DESCRIPTION: Customizes the images for wallet connectors in the Wagmi adapter by providing a mapping of connector IDs to image URLs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_10

LANGUAGE: typescript
CODE:
createAppKit({
  connectorImages: {
    coinbaseWallet: "https://images.mydapp.com/coinbase.png",
    metaMask: "https://images.mydapp.com/metamask.png",
  },
});

----------------------------------------

TITLE: Using WalletConnect Modal Hook in React Native
DESCRIPTION: Implementation of the useWalletConnectModal hook showing available methods and properties for controlling the modal and managing wallet connections.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_36

LANGUAGE: tsx
CODE:
import { useWalletConnectModal } from "@walletconnect/modal-react-native";

const { isOpen, open, close, provider, isConnected, address } = useWalletConnectModal();

// Modal's open state
isOpen;

// Open modal
interface Options {
  route?: 'ConnectWallet' | 'Qrcode' | 'WalletExplorer';
}
await open(options?: Options);

// Close modal
close();

// Initialized provider
provider;

// Wallet connection state
isConnected;

// Connected account's address
address;

----------------------------------------

TITLE: Importing and Rendering Blockchain API Documentation in MDX
DESCRIPTION: This snippet imports a reusable MDX component containing Blockchain API documentation and renders it on the page. The approach allows for maintaining API documentation in a central location while including it in relevant documentation pages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/cloud/blockchain-api.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Blockchain API
---

import BlockchainAPI from "/snippets/cloud/blockchain-api.mdx";

<BlockchainAPI />

----------------------------------------

TITLE: Installing Additional React Native Dependencies
DESCRIPTION: Installs additional packages for async storage, polyfills, SVGs, modals, network information, and WalletConnect compatibility. These packages enhance the functionality and compatibility of the React Native app with Reown AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/installation.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
yarn add @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat

----------------------------------------

TITLE: Installing Reown AppKit Package
DESCRIPTION: Commands to install the @reown/appkit package using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/wcm.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit

LANGUAGE: bash
CODE:
yarn add @reown/appkit

LANGUAGE: bash
CODE:
bun a @reown/appkit

LANGUAGE: bash
CODE:
pnpm add @reown/appkit

----------------------------------------

TITLE: Installing Bitcoin Adapter with npm
DESCRIPTION: npm command to install AppKit with Bitcoin adapter for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_17

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-bitcoin

----------------------------------------

TITLE: Creating a New Notification Subscription
DESCRIPTION: Code to subscribe an account to notifications from a specific decentralized application by its domain. The process uses API data to identify notify-enabled dapps.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
// Get the domain of the target dapp from the Explorer API response
const appDomain = new URL(fetchedExplorerDapp.platform_browser).hostname;

// Subscribe to `fetchedExplorerDapp` by passing the account to be subscribed and the domain of the target dapp.
await notifyClient.subscribe({
  account,
  appDomain,
});

// -> Success/Failure will be received via the `notify_update` event registered previously.
// -> New subscription will be emitted via the `notify_subscriptions_changed` watcher event.

----------------------------------------

TITLE: Getting Subscribers with cURL
DESCRIPTION: cURL command for checking which accounts are subscribed to notifications. This example shows how to construct a POST request to the subscribers endpoint with the necessary authorization and JSON payload listing accounts to check.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#2025-04-10_snippet_4

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029",
      "eip155:1:0x0000000000000000000000000000000000000000"
    ]
  }'

----------------------------------------

TITLE: Importing Migration Guide Component in React MDX
DESCRIPTION: Imports a React component containing migration instructions for the Reown AppKit notifications system. This component likely contains detailed code examples and specific migration steps.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/migration-guide.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Migration from "/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx";

----------------------------------------

TITLE: Updating Package Imports in Dart
DESCRIPTION: Demonstrates how to update the import statements from web3modal_flutter to reown_appkit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#2025-04-10_snippet_1

LANGUAGE: dart
CODE:
// Remove the code line below
import 'package:web3modal_flutter/web3modal_flutter.dart';

import 'package:reown_appkit/reown_appkit.dart';

----------------------------------------

TITLE: Deleting Subscription with NotifyClient in Kotlin
DESCRIPTION: This snippet demonstrates how to delete a subscription using NotifyClient.deleteSubscription. It requires the subscription topic as a parameter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_28

LANGUAGE: kotlin
CODE:
val topic = // active subscription topic
val params = Notify.Params.DeleteSubscription(topic)

NotifyClient.deleteSubscription(params) { error ->
    // callback for when the delete has failed
}

----------------------------------------

TITLE: Installing Native Modules on iOS
DESCRIPTION: Uses CocoaPods to install the native modules in the iOS project. This step is necessary for ensuring that all native dependencies are properly linked in the iOS environment.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/installation.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
npx pod-install

----------------------------------------

TITLE: Configuring Wallet Exclusions in TypeScript
DESCRIPTION: Shows how to exclude specific wallets using their IDs or exclude all wallets except recommended ones. The exclusion can be done by either providing an array of wallet IDs or using the 'ALL' keyword.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/explorerExcludedWalletIds.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
explorerExcludedWalletIds: [
  '1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369',
  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0'
]
// -- or -- //
explorerExcludedWalletIds: 'ALL'

----------------------------------------

TITLE: Updating Main Page Component for Reown AppKit
DESCRIPTION: Changes required in the index.tsx file to replace the ConnectKitButton with the Reown AppKit w3m-button component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-connectkit-next.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import type { NextPage } from 'next';

const Home: NextPage = () => {
  return (
    <div
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
      }}
    >
      <w3m-button />   
    </div>
  );
};
export default Home;

----------------------------------------

TITLE: Importing Polyfills in Expo Root File
DESCRIPTION: Code for importing necessary polyfills in the root index.js file of an Expo project to enable WalletConnect functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#2025-04-10_snippet_3

LANGUAGE: js
CODE:
import "@walletconnect/react-native-compat";
import "./expo-crypto-shim.js";

----------------------------------------

TITLE: Updating WalletConnect Session in JavaScript
DESCRIPTION: Shows how to update an existing session with new namespaces using the updateSession method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#2025-04-10_snippet_9

LANGUAGE: javascript
CODE:
await walletKit.updateSession({ topic, namespaces: newNs });

----------------------------------------

TITLE: Connector Images Configuration
DESCRIPTION: Customizing connector images for different wallet connections
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#2025-04-10_snippet_12

LANGUAGE: typescript
CODE:
createAppKit({
  connectorImages: {
    coinbaseWallet: "https://images.mydapp.com/coinbase.png",
    walletConnect: "https://images.mydapp.com/walletconnect.png",
    appKitAuth: "https://images.mydapp.com/auth.png",
  },
});

----------------------------------------

TITLE: Fetching Notification Types with NotifyClient in Kotlin
DESCRIPTION: Demonstrates how to retrieve available notification types from a dapp using the NotifyClient. Requires app metadata and domain information, with optional timeout configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#2025-04-10_snippet_5

LANGUAGE: kotlin
CODE:
val appMetadata: Core.Model.AppMetaData = // App Metadata could be fetched from NotifyClient.getActiveSubscriptions()
val appDomain: String = URI(appMetadata.url).host
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec

val params = Notify.Params.NotificationTypes(appDomain, timeout)
try {
  val result: Map<String, Notify.Model.NotificationType> = NotifyClient.getNotificationTypes(params)
} catch (e: Exception) {
  // callback for when the get notification types request has failed
}

----------------------------------------

TITLE: Installing SIWE Dependencies with pnpm
DESCRIPTION: Command to install the required packages for SIWE One-Click Auth implementation using pnpm package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#2025-04-10_snippet_3

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-siwe siwe

----------------------------------------

TITLE: Importing Blockchain API Component in MDX
DESCRIPTION: Imports a BlockchainAPI component from a snippets directory and renders it in the documentation page using MDX syntax.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/cloud/blockchain-api.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Blockchain API
---

import BlockchainAPI from "/snippets/cloud/blockchain-api.mdx";

<BlockchainAPI />

----------------------------------------

TITLE: Configuring Token Contract Addresses in TypeScript
DESCRIPTION: Defines a mapping of blockchain chain IDs to their respective token contract addresses. Chain ID 1 represents Ethereum mainnet and 137 represents Polygon network. This configuration allows customization of which token balances are displayed in the account view interface.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/tokenContracts.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
tokenContracts: {
  1: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
  137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'
}

----------------------------------------

TITLE: Setting ThemeMode in AppKit Configuration
DESCRIPTION: Override the default theme mode in AppKit which normally follows the user's system settings. This example shows how to explicitly set the theme to light mode.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/theming.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  themeMode: "light",
});

----------------------------------------

TITLE: Installing AppKit SIWX Package
DESCRIPTION: Commands to install the @reown/appkit-siwx package using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwx

LANGUAGE: bash
CODE:
yarn add @reown/appkit-siwx

LANGUAGE: bash
CODE:
bun a @reown/appkit-siwx

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-siwx

----------------------------------------

TITLE: Installing Reown AppKit and Ethers for React Native with Expo
DESCRIPTION: This command installs the Reown AppKit for React Native along with the ethers library using Expo's package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation-expo.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npx expo install @reown/appkit-ethers-react-native ethers

----------------------------------------

TITLE: Applying Custom Theme Data
DESCRIPTION: Demonstrates how to apply custom theme data to ReownAppKitModalTheme.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
return ReownAppKitModalTheme(
  isDarkMode: _isDarkMode,
  themeData: _themeData,
  child: MaterialApp(
    ...
  ),
);

----------------------------------------

TITLE: Customizing Chain Images in ReOwn AppKit
DESCRIPTION: Overrides default network images by providing custom image URLs mapped to chain IDs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_9

LANGUAGE: typescript
CODE:
createAppKit({
  // ...
  chainImages: {
    1: "https://my.images.com/eth.png",
  },
});

----------------------------------------

TITLE: Installing expo-crypto Package for Expo SDK 48
DESCRIPTION: Command to install the expo-crypto package using npx expo, which is required to create a crypto polyfill for WalletConnect in Expo SDK 48.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/expo/additional-expo48.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npx expo install expo-crypto

----------------------------------------

TITLE: Importing SIWX Cloud Auth Component in Markdown/JSX
DESCRIPTION: This snippet demonstrates how to import a shared component for SIWX Cloud Authentication implementation. The component is likely to contain reusable code for implementing SIWX in a cloud environment.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/authentication/siwx/siwx-cloud-auth.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SiwxCloudAuth from "/snippets/appkit/shared/siwx/siwx-cloud-auth.mdx";

----------------------------------------

TITLE: Using Pairing API Methods in Web Applications
DESCRIPTION: Demonstrates the various Pairing API methods available in Web SDKs, including creating, activating, and managing pairings between peers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
 // Creates a new (inactive) pairing. Returns the URI for a peer to consume via `pair`, as well as the pairing topic.
const {topic, uri} = await sdkClient.core.pairing.create()

// Pair with a peer's proposed pairing, extracted from the provided `uri` parameter.
await sdkClient.core.pairing.pair({ uri: "wc:1b3eda3f4..." })

// Activate a previously created pairing (e.g. after the peer has paired), by providing the pairing topic.
await sdkClient.core.pairing.activate({ topic: "1b3eda3f4..." })

// Updates the expiry of an existing pairing, by providing the pairing topic and an `expiry` in seconds (e.g. `60` for one minute from now)
await sdkClient.core.pairing.updateExpiry({ topic: "1b3eda3f4...", expiry: 60 })

// Updates a pairing's metadata, by providing the pairing topic and the desired metadata.
await sdkClient.core.pairing.updateMetadata({ topic: "1b3eda3f4...", metadata: { name: "MyDapp", ... } })

// Returns an array of all existing pairings.
const pairings = sdkClient.core.pairing.getPairings()

// Pings a pairing's peer, by providing the pairing topic.
await sdkClient.core.pairing.ping({ topic: "1b3eda3f4..." })

// Disconnects/Removes a pairing, by providing the pairing topic.
await sdkClient.core.pairing.disconnect({ topic: "1b3eda3f4..." })

----------------------------------------

TITLE: Signed Message Response with Casper WalletConnect
DESCRIPTION: Example JSON-RPC response for the casper_sign_message method, containing the signature of the prefixed message. The signature can be used to verify that the message was signed by the owner of the specified Casper account.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/casper-rpc.mdx#2025-04-10_snippet_3

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "casper_sign_message",
  "result": {
    "signature": "b52482afd2392b715cc43d9ad9f1f7067752a10ba5b49b89bc61b398e478841e6d8a4a224aeb944a34f23d98a232cdab6e5a60a5e886e8b0719d7b84277c405f"
  }
}

----------------------------------------

TITLE: Listening for Real-time Notifications with ReOwn Client in TypeScript
DESCRIPTION: Sets up an event listener for 'notify_message' events on the client. When a notification is received, it logs the notification title to the console.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/events/javascript.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
client.on('notify_message', ({ notification }) => {
  console.log(notification.title)
})

----------------------------------------

TITLE: Initializing Solana Connection and Account Hooks
DESCRIPTION: Initializes the hooks to get the Solana connection object and the user's connection status and address, which are required for interacting with the Solana blockchain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
const { connection } = useAppKitConnection();
const { isConnected, address } = useAppKitAccount();

----------------------------------------

TITLE: Updating Subscription with NotifyClient in Kotlin
DESCRIPTION: This code shows how to update an existing subscription using NotifyClient.update. It requires the subscription topic and a list of notification types to update.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_27

LANGUAGE: kotlin
CODE:
val topic = // active subscription topic
val scope = // list of notification types
val params = Notify.Params.Update(topic, scope)

NotifyClient.update(params) { error ->
    // callback for when the update has failed
}

----------------------------------------

TITLE: Importing Additional Expo Configuration Component
DESCRIPTION: This code imports an external component that likely contains additional Expo-related configuration or information for version 48.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation-expo.mdx#2025-04-10_snippet_2

LANGUAGE: jsx
CODE:
import AdditionalExpo from "/snippets/appkit/react-native/expo/additional-expo48.mdx";

----------------------------------------

TITLE: Importing Smart Session Methods in JavaScript
DESCRIPTION: Code snippet showing how to import the grantPermissions method and its type definition from the @reown/appkit-experimental/smart-session package.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
import {
  grantPermissions,
  type SmartSessionGrantPermissionsRequest,
} from "@reown/appkit-experimental/smart-session";

----------------------------------------

TITLE: Accessing Theme Data
DESCRIPTION: Shows how to access the current theme data object.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
final data = ReownAppKitModalTheme.getDataOf(context);

----------------------------------------

TITLE: Retrieving Approved Events in Reown AppKit (JavaScript)
DESCRIPTION: This snippet shows how to get the list of approved events by the connected wallet using the Reown AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#2025-04-10_snippet_6

LANGUAGE: javascript
CODE:
_appKitModal.getApprovedEvents();

----------------------------------------

TITLE: Configuring AppKit with Solana in Vue.js App.vue
DESCRIPTION: This snippet demonstrates how to set up AppKit in a Vue.js application with Solana blockchain integration. It includes importing necessary modules, defining constants, creating a Wagmi configuration, initializing a Solana adapter, and creating an AppKit instance with support for multiple Solana networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/solana/about/implementation.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<script setup>
  
  import { createAppKit } from '@reown/appkit/vue'
  import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
  import { reconnect } from '@wagmi/core'

  // 1. Define constants
  const projectId = process.env.VUE_APP_PROJECT_ID // get it from cloud.reown.com

  // 2. Create wagmiConfig
  const metadata = {
    name: 'Appkit Solana',
    description: 'Appkit Solana Example',
    url: 'https://example.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

  // 3. Create Wagmi Adapter
  const solanaWeb3JsAdapter = new SolanaAdapter({
    wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]
  })

  reconnect(solanaConfig)

  // 3. Create modal
  createAppKit({
    projectId,
    metadata,
    networks: [solana, solanaTestnet, solanaDevnet],
    adapters: [solanaWeb3JsAdapter],
  })
</script>

<template>
  // Rest of your app ...
</template>

----------------------------------------

TITLE: Installing Required Packages with Yarn
DESCRIPTION: Install React Native WebView and Reown AppKit authentication packages using Yarn package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/email.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
yarn add react-native-webview @reown/appkit-auth-ethers-react-native

----------------------------------------

TITLE: Adding JitPack Repository to Root Gradle File
DESCRIPTION: Adds the JitPack Maven repository to the root build.gradle.kts file to enable dependency resolution for Reown packages. This step is required before implementing the WalletKit dependencies.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/installation.mdx#2025-04-10_snippet_0

LANGUAGE: gradle
CODE:
allprojects {
 repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
 }
}

----------------------------------------

TITLE: Importing SIWX Default Component in MDX
DESCRIPTION: This snippet shows how to import the SIWX default implementation from a shared snippets directory and include it in an MDX documentation file.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwx-default.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SiwxDefault from "/snippets/appkit/shared/siwx/siwx-default.mdx";

<SiwxDefault />

----------------------------------------

TITLE: Installing Solana Wallet Adapter Package
DESCRIPTION: Package installation commands for Solana wallet adapter across different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/custom-connectors.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
yarn add @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
bun a @solana/wallet-adapter-wallets

LANGUAGE: bash
CODE:
pnpm add @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Disabling Modal Account View in TypeScript
DESCRIPTION: This code snippet shows how to disable the account view in a modal component. The 'enableAccountView' property is set to false, overriding the default true setting.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/enableAccountView.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
enableAccountView: false

----------------------------------------

TITLE: Importing and Rendering Relay Component in MDX
DESCRIPTION: A MDX file that imports a Relay component from the cloud snippets directory and renders it on the page. Uses relative path import with .mdx extension.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/cloud/relay.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Relay from "/snippets/cloud/relay.mdx";

<Relay />

----------------------------------------

TITLE: Importing SIWX Default Snippet in Markdown
DESCRIPTION: This code snippet imports a shared MDX file containing the default SIWX implementation details. It uses the import statement to include the snippet from a specific path.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwx-default.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
import SiwxDefault from "/snippets/appkit/shared/siwx/siwx-default.mdx";

----------------------------------------

TITLE: Updating Import Statements for WalletKit
DESCRIPTION: Replace Web3Wallet import statements with WalletKit import statements throughout your codebase.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-ios.mdx#2025-04-10_snippet_1

LANGUAGE: swift
CODE:
/* highlight-delete-start */
- import Web3Wallet
/* highlight-delete-end */
/* highlight-add-start */
+ import WalletKit
/* highlight-add-end */

----------------------------------------

TITLE: Creating WalletConnect Modal
DESCRIPTION: Instantiates a WalletConnect modal for QR code display using project ID.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
const walletConnectModal = new WalletConnectModal({
  projectId: "2ea3f3ghubh32b8ie2f2",
});

----------------------------------------

TITLE: Setting Up Flutter Theme Wrapper
DESCRIPTION: Example showing how to wrap a MaterialApp with WalletConnectModalTheme for custom theming in Flutter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
return WalletConnectModalTheme(
  data: WalletConnectModalThemeData.darkMode,
  child: MaterialApp(
    title: 'Flutter Demo',
    theme: ThemeData(
      colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      useMaterial3: true,
    ),
    home: const MyHomePage(title: 'WalletConnectModal Sign Example'),
  ),
);

----------------------------------------

TITLE: Installing SIWE Dependencies with Package Managers
DESCRIPTION: Commands for installing the required dependencies for SIWE integration using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwe next-auth

LANGUAGE: bash
CODE:
yarn add @reown/appkit-siwe next-auth

LANGUAGE: bash
CODE:
bun a @reown/appkit-siwe next-auth

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-siwe next-auth

----------------------------------------

TITLE: .NET Wallet Pairing Implementation
DESCRIPTION: Shows how to implement wallet-side pairing in .NET by processing QR code or deep link URI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_18

LANGUAGE: csharp
CODE:
var uri = "...";
PairingStruct pairingData = await core.Pairing.Pair(uri);

----------------------------------------

TITLE: Decrypting Push Notifications in iOS
DESCRIPTION: This code snippet demonstrates how to decrypt push notifications using a UNNotificationServiceExtension. It requires setting up a shared keychain group and importing the WalletConnectNotify module.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_20

LANGUAGE: swift
CODE:
override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {
    bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)
    if let bestAttemptContent = bestAttemptContent {
        let topic = bestAttemptContent.userInfo["topic"] as! String
        let ciphertext = bestAttemptContent.userInfo["blob"] as! String
        do {
            let service = NotifyDecryptionService()
            let pushMessage = try service.decryptMessage(topic: topic, ciphertext: ciphertext)
            bestAttemptContent.title = pushMessage.title
            bestAttemptContent.body = pushMessage.body
            contentHandler(bestAttemptContent)
            return
        }
    ...
}

----------------------------------------

TITLE: Sending Notifications with cURL
DESCRIPTION: cURL command for sending notifications using the WalletConnect Notify API. This example demonstrates how to construct the POST request with authorization header and JSON payload for the notification details.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "notification": {
      "type": "a1e53b95-18e5-4af8-9f03-9308ec87b687",
      "title": "The price of Ethereum has risen",
      "body": "The price of Ethereum has gone up 10%",
      "url": "https://app.example.com"
    },
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"
    ]
  }'

----------------------------------------

TITLE: Rendering Sign Message Button in React Component
DESCRIPTION: Renders a button that triggers the message signing function when clicked. The button is only rendered if the user is connected to a wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#2025-04-10_snippet_3

LANGUAGE: jsx
CODE:
return (
  isConnected && (
    <div>
      <button onClick={handleSignMsg}>Sign Message</button>
    </div>
  )
);

----------------------------------------

TITLE: Retrieving Message History with NotifyClient in Kotlin
DESCRIPTION: This code demonstrates how to get the message history for a specific subscription topic using NotifyClient.getMessageHistory. It returns a map with request IDs as keys and Notify.Model.MessageRecord as values.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_31

LANGUAGE: kotlin
CODE:
val subscriptionTopic =/*Subscription Topic*/
val messageHistoryParams = Notify.Params.MessageHistory(subscriptionTopic)
val mapOfMessages: Map<Long, Notify.Model.MessageRecord> = NotifyClient.getMessageHistory(messageHistoryParams)

----------------------------------------

TITLE: Updating CocoaPods Podspec for WalletKit
DESCRIPTION: Update your Podfile to use the WalletKit pod instead of Web3Wallet for CocoaPods dependency management.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-ios.mdx#2025-04-10_snippet_4

LANGUAGE: swift
CODE:
/* highlight-delete-start */
- pod 'Web3Wallet', '~> 1.0'
/* highlight-delete-end */
/* highlight-add-start */
+ pod 'WalletKit', '~> 1.0'
/* highlight-add-end */

----------------------------------------

TITLE: Basic SIWX Implementation with DefaultSIWX
DESCRIPTION: Basic code to enable the SIWX feature in an AppKit instance using the DefaultSIWX implementation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
import { createAppKit } from "@reown/appkit";
// Add the following code line
import { DefaultSIWX } from "@reown/appkit-siwx";

const appkit = createAppKit({
  projectId,
  networks,
  metadata,
  // Add the following code line
  siwx: new DefaultSIWX(), // add this line to enable SIWX
});

----------------------------------------

TITLE: Installing WalletConnect UI via Git URL
DESCRIPTION: Git URL for installing WalletConnect Unity UI package via Package Manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_15

LANGUAGE: plaintext
CODE:
https://github.com/WalletConnect/WalletConnectUnity.git?path=Packages/com.walletconnect.ui

----------------------------------------

TITLE: Installing WalletConnect Core in .NET
DESCRIPTION: Command to add the WalletConnect.Core package to a .NET project using the dotnet CLI.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_4

LANGUAGE: shell
CODE:
dotnet add package WalletConnect.Core

----------------------------------------

TITLE: Creating a Basic ReownAppKit UI with Multiple Buttons
DESCRIPTION: Combines multiple AppKit buttons in a Column layout to create a functional wallet connection interface with network selection, connection, and account information.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_11

LANGUAGE: javascript
CODE:
Column(
  mainAxisAlignment: MainAxisAlignment.center,
  children: [
    AppKitModalNetworkSelectButton(appKit: _appKitModal),
    AppKitModalConnectButton(appKit: _appKitModal),
    Visibility(
      visible: _appKitModal.isConnected,
      child: AppKitModalAccountButton(appKit: _appKitModal),
    )
  ],
),

----------------------------------------

TITLE: Defining Token Image Mappings in TypeScript
DESCRIPTION: A TypeScript object that maps token symbols (as keys) to their respective logo image file paths (as values). This configuration is used to display appropriate logos for different cryptocurrency tokens in the UI, with examples for ETH and AVAX tokens.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/tokenImages.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
tokenImages: {
  ETH: "/images/eth.webp",
  AVAX: "/images/avax.webp",
};

----------------------------------------

TITLE: ConnectButton Component Props Table in Markdown
DESCRIPTION: Props table for the ConnectButton component, listing size, label, and loadingLabel properties with their types and descriptions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/components.mdx#2025-04-10_snippet_2

LANGUAGE: markdown
CODE:
| Variable       | Description                                          | Type           |
| -------------- | ---------------------------------------------------- | -------------- |
| `size`         | Default size for the button.                         | `'md' \| 'sm'` |
| `label`        | The text shown in the button.                        | `string`       |
| `loadingLabel` | The text shown in the button when the modal is open. | `string`       |

----------------------------------------

TITLE: Enabling Onramp Feature in ReOwn AppKit
DESCRIPTION: Explicitly enables the onramp feature in AppKit, which is enabled by default.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_21

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  features: {
    onramp: true,
  },
});

----------------------------------------

TITLE: Importing and Rendering Resources Component in Markdown
DESCRIPTION: This code snippet imports a shared Resources component from a specific path and renders it within the Markdown document. It demonstrates how to integrate React components into Markdown for dynamic content generation in documentation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/resources.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
---
title: Resources
---

import Resources from "/snippets/appkit/shared/resources.mdx";

# Resources

<Resources />

----------------------------------------

TITLE: Importing and Rendering Web Component Documentation in MDX
DESCRIPTION: This snippet imports a shared component documentation file and renders it within the current MDX document. It demonstrates how to modularize and reuse documentation across the project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/components.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Components
---

import Components from "/snippets/appkit/shared/components.mdx";

# Web Components

<Components />

----------------------------------------

TITLE: Subscribing to WalletConnect Modal State Changes in JavaScript
DESCRIPTION: Example showing how to subscribe to modal state changes using the subscribeModal method with a callback function.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_17

LANGUAGE: javascript
CODE:
modal.subscribeModal((state) => console.log(state));

----------------------------------------

TITLE: Migrating Registration Process in @web3inbox/core SDK in TypeScript
DESCRIPTION: Shows the changes to the registration process which is now split into two separate steps: preparing registration and then registering with a signature. This avoids the previous opinionated approach of passing an onSign callback.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/javascript.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { useSignMessage } from '@wagmi'
const { signMessageAsync } = useSignMessage()

client.register(signMessageAsync)
+ const { registerParams, message } = client.prepareRegistration({ account: 'eip155:1:0x..' })
+ const signature = await signMessageAsync(message)
+ client.register({ registerParams, signature })

----------------------------------------

TITLE: Updating Repository URL for Swift Package Manager
DESCRIPTION: Replace the Web3Wallet repository URL with the new reown-swift repository URL in your Package.swift file.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-ios.mdx#2025-04-10_snippet_0

LANGUAGE: swift
CODE:
/* highlight-delete-start */
- .package(url: "https://github.com/WalletConnect/WalletConnectSwiftV2", from: "1.0.0"),
/* highlight-delete-end */
/* highlight-add-start */
+ .package(url: "https://github.com/reown-com/reown-swift", from: "1.0.0"),
/* highlight-add-end */

----------------------------------------

TITLE: Session Namespaces Example in JavaScript
DESCRIPTION: Example of session namespaces response from a wallet that complies with the requested proposal namespaces, providing account addresses for each requested chain and additionally granting access to methods and events not explicitly requested.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/glossary.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
{
  "eip155": {
    "accounts": [
      "eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb",
      "eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb"
    ],
    "methods": ["eth_sign"],
    "events": ["accountsChanged"]
  },
  "cosmos": {
    "accounts": [
      "cosmos:cosmoshub-4:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0"
    ],
    "methods": ["cosmos_signDirect", "personal_sign"],
    "events": ["someCosmosEvent", "proofFinalized"]
  }
}

----------------------------------------

TITLE: Proposal Namespaces Example in JavaScript
DESCRIPTION: Example of proposal namespaces sent by a dApp to request access to Ethereum Mainnet, Polygon, and Cosmos Mainnet chains, specifying the required methods and events for each chain namespace.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/glossary.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
{
  "eip155": {
    "chains": ["eip155:137", "eip155:1"],
    "methods": ["eth_sign"],
    "events": ["accountsChanged"]
  },
  "cosmos": {
    "chains": ["cosmos:cosmoshub-4"],
    "methods": ["cosmos_signDirect"],
    "events": ["someCosmosEvent"]
  }
}

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX
DESCRIPTION: This code snippet imports a Verify component from a specific path and renders it within the page. It uses JSX syntax, indicating it's likely part of a React-based documentation system.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Handling Captured Links in WalletKit
DESCRIPTION: This code snippet shows how to process links captured by your app by passing them to WalletKit's dispatchEnvelope method. This is necessary for WalletKit to handle requests coming through Universal Links.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/link-mode.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
void _onLinkCaptured(String link) async {
  await _walletKit.dispatchEnvelope(link);
}

----------------------------------------

TITLE: Installing WalletConnect NotifyClient Package
DESCRIPTION: Command to install the WalletConnect NotifyClient package along with React Native compatibility library using Yarn.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#2025-04-10_snippet_0

LANGUAGE: sh
CODE:
yarn add @walletconnect/notify-client @walletconnect/react-native-compat

----------------------------------------

TITLE: Getting Subscribers with cURL
DESCRIPTION: cURL command example for fetching subscriber information with proper authentication headers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#2025-04-10_snippet_4

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029",
      "eip155:1:0x0000000000000000000000000000000000000000"
    ]
  }'

----------------------------------------

TITLE: Installing AppKit v5 and Dependencies for JavaScript
DESCRIPTION: This code snippet demonstrates how to install AppKit v5 and its dependencies for a JavaScript environment using different package managers. It includes installing @web3modal/wagmi, @wagmi/connectors, @wagmi/core, and viem.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npm install @web3modal/wagmi@latest @wagmi/connectors @wagmi/core@2.x viem@2.x

LANGUAGE: bash
CODE:
yarn add @web3modal/wagmi@latest @wagmi/connectors @wagmi/core@2.x viem@2.x

LANGUAGE: bash
CODE:
bun a @web3modal/wagmi@latest @wagmi/connectors @wagmi/core@2.x viem@2.x

LANGUAGE: bash
CODE:
pnpm add @web3modal/wagmi@latest @wagmi/connectors @wagmi/core@2.x viem@2.x

----------------------------------------

TITLE: Retrieving Active Subscriptions for an Account
DESCRIPTION: Code for getting all active subscriptions for a specific account, keyed by subscription topic.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_42

LANGUAGE: javascript
CODE:
// Will return all active subscriptions for the provided account, keyed by subscription topic.
const accountSubscriptions = notifyClient.getActiveSubscriptions({
  account: `eip155:1:0x63Be...`,
});

----------------------------------------

TITLE: Updating ProGuard Rules for WalletKit
DESCRIPTION: Updates ProGuard rules to maintain proper class preservation for WalletKit implementation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-android.mdx#2025-04-10_snippet_3

LANGUAGE: swift
CODE:
-keep class com.reown.walletkit.client.Wallet$Model { *; }
-keep class com.reown.walletkit.client.Wallet { *; }

----------------------------------------

TITLE: Installing ReOwn AppKit Auth packages for React Native
DESCRIPTION: Command to install the necessary ReOwn AppKit authentication packages for React Native using Yarn. This includes the main auth package and the webview dependency required for authentication flows.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/email.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
yarn add @reown/appkit-auth-wagmi-react-native react-native-webview

----------------------------------------

TITLE: .NET Message Handling Implementation
DESCRIPTION: Shows how to implement message handling and responses in .NET after pairing is established.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#2025-04-10_snippet_20

LANGUAGE: csharp
CODE:
core.MessageHandler.MessageEventHandler<MyRequest, MyResponse>()
    .FilterRequests(r => r.Topic == pairingData.Topic)
    .OnRequest +=
		async delegate(RequestEventArgs<MyRequest, MyResponse> eventArgs)
		{
		    Console.WriteLine(eventArgs.Request);
		    eventArgs.Response = new MyResponse()
		    {
		        // ...
		    };
		};

----------------------------------------

TITLE: Custom Session Parameters Configuration in Swift
DESCRIPTION: Configures WalletConnectModal in iOS with custom session parameters instead of using the defaults.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_4

LANGUAGE: swift
CODE:
let metadata = AppMetadata(...)

let sessionParams = SessionParams(...)

WalletConnectModal.configure(
    projectId: PROJECT_ID,
    metadata: metadata,
    sessionParams: sessionParams
)

----------------------------------------

TITLE: JSON-RPC Response Format Example for Hedera
DESCRIPTION: Shows the format of a JSON-RPC response with a signature map. This is a typical result returned by a Hedera controller after processing a request.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#2025-04-10_snippet_10

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
    "signatureMap": "CAAQABjMrxoYABIGCAAQABgHGIDIr..."
  }
}

----------------------------------------

TITLE: Subscribing to AppKit Provider State Changes
DESCRIPTION: Demonstrates the modal.subscribeProvider callback that monitors changes to wallet connection state including address, chainId, connection status, and provider details. The callback receives updates whenever these values change.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
modal.subscribeProvider(callback)

----------------------------------------

TITLE: Error Response from signAndExecuteTransaction
DESCRIPTION: Example of an error response from the hedera_signAndExecuteTransaction method. The error provides a code, message, and data field containing the ResponseCodeEnum value from the Hedera Node.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#2025-04-10_snippet_2

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "error": {
    "code": 9000,
    "message": "The transaction failed with precheck code...",
    "data": 6
  }
}

----------------------------------------

TITLE: Disconnecting Sessions in WalletConnect using C#
DESCRIPTION: Disconnects a session using the session topic. Optionally allows providing a reason for the disconnection using a standard error type.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_50

LANGUAGE: csharp
CODE:
await walletClient.Disconnect(sessionTopic);

// or

await walletClient.Disconnect(sessionTopic, Error.FromErrorType(ErrorType.USER_DISCONNECTED));

----------------------------------------

TITLE: Installing AppKit in Vue.js Project
DESCRIPTION: Installation commands for adding Reown AppKit to a Vue.js project using different package managers. These commands install the core AppKit library, Wagmi adapter, and required Vue query dependencies.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_10

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue

LANGUAGE: bash
CODE:
bun a @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue

----------------------------------------

TITLE: Importing SIWX Component in MDX
DESCRIPTION: Demonstrates how to import and use the SIWX (Sign In With X) component index file in an MDX documentation page
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/siwx.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
import SiwxIndex from "/snippets/appkit/shared/siwx/index.mdx";

# Sign In With X

<SiwxIndex />

----------------------------------------

TITLE: Implementing AccountButton in Compose
DESCRIPTION: Shows how to add an AccountButton component in Jetpack Compose, which displays account information with configurable display types.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_7

LANGUAGE: kotlin
CODE:
import com.reown.appkit.ui.components.button.AccountButton
import com.reown.appkit.ui.components.button.AccountButtonType
import com.reown.appkit.ui.components.button.rememberAppKitState

YourAppScreen(navController: NavController) {
    val appKitState = rememberAppKitState(navController = navController)
    AccountButton(
        state = appKitState,
        buttonSize = AccountButtonType.NORMAL || AccountButtonType.MIXED
    )
}

----------------------------------------

TITLE: Installing Bitcoin Adapter with pnpm
DESCRIPTION: pnpm command to install AppKit with Bitcoin adapter for Vue applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#2025-04-10_snippet_20

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-bitcoin

----------------------------------------

TITLE: Importing and Rendering Analytics Component in JSX
DESCRIPTION: This code imports an Analytics component from a snippets directory and renders it on the page. The component likely contains documentation or usage examples for analytics functionality in a cloud environment.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/cloud/analytics.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Analytics from "/snippets/cloud/analytics.mdx";

<Analytics />

----------------------------------------

TITLE: Replacing RainbowKit Configuration with AppKit Wagmi Adapter
DESCRIPTION: Example of a RainbowKit configuration that needs to be replaced when migrating to AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#2025-04-10_snippet_3

LANGUAGE: tsx
CODE:
- export const config = getDefaultConfig({
-  appName: 'RainbowKit App',
-  projectId: 'YOUR_PROJECT_ID',
-  chains: [
-    mainnet,
-    polygon,
-    optimism,
-    arbitrum,
-    base,
-    ...(process.env.NEXT_PUBLIC_ENABLE_TESTNETS === 'true' ? [sepolia] : []),
-  ],
-  ssr: true,
- });

----------------------------------------

TITLE: Default Chain Configuration - Ethers
DESCRIPTION: Configuring default chain using Ethers with custom chain object
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
const mainnet = {
  chainId: 1,
  name: 'Ethereum',
  currency: 'ETH',
  explorerUrl: 'https://etherscan.io',
  rpcUrl: 'https://cloudflare-eth.com',
};

createAppKit({
  //...
  defaultChain: mainnet
})

----------------------------------------

TITLE: Get Subscribers Implementation in TypeScript
DESCRIPTION: TypeScript implementation for fetching subscriber information including type definitions and API call.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const requestBody: RequestBody = {
  accounts: [
    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',
    'eip155:1:0x0000000000000000000000000000000000000000'
  ]
}

const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
  body: JSON.stringify(requestBody)
})

const subscribers: ResponseBody = await response.json()

type RequestBody = {
  // Max 100 accounts
  accounts: string[]
}
type ResponseBody = {
  [account: string]: Subscriber
}
type Subscriber = {
  notification_types: string[]
}

----------------------------------------

TITLE: Implementing Session Authentication in WalletKit
DESCRIPTION: Code for handling session authentication requests and managing redirections for one-click authentication flow.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
// If your wallet supports One-Click Auth
_walletKit!.onSessionAuthRequest.subscribe(_onSessionAuthRequest);
//
void _onSessionAuthRequest(SessionAuthRequest? event) async {
  if (event != null) {
    // Process session authentication
    // ....
    // Redirect back to proposer dapp
    try {
      await _walletKit.redirectToDapp(
        topic: topic,
        redirect: event.params.proposer.metadata.redirect,
      );
    } catch (e) {
      ...
    }
  }
}

----------------------------------------

TITLE: Opening Backpack Connect Modal with Different Views in TypeScript
DESCRIPTION: This code demonstrates how to call the open function with different view parameters to control which screen of the modal is displayed. Options include showing the Account view, Connect view for all wallets, or Connect view with specific blockchain namespaces (solana, bitcoin, or ethereum).
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/core/open.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
open({ view: "Account" });

// to connect and show multi wallets view
open({ view: "Connect" });

// to connect and show only solana wallets
open({ view: "Connect", namespace: "solana" });

// to connect and show only bitcoin wallets
open({ view: "Connect", namespace: "bip122" });

// to connect and show only ethereum wallets
open({ view: "Connect", namespace: "eip155" });

----------------------------------------

TITLE: Getting All Subscribers with JavaScript
DESCRIPTION: JavaScript implementation for fetching all subscribers using the Fetch API.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,
  {
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    },
  }
);
const subscribers: string[] = await response.json();

----------------------------------------

TITLE: Updating initialization for WalletKit in JavaScript
DESCRIPTION: Replace the initialization code for Web3Wallet with the new initialization for WalletKit. This step updates the code to initialize the new WalletKit package instead of the old Web3Wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-web.mdx#2025-04-10_snippet_2

LANGUAGE: javascript
CODE:
/* highlight-delete-start */
await Web3Wallet.init()
/* highlight-delete-end */
/* highlight-add-start */
await WalletKit.init()
/* highlight-add-end */

----------------------------------------

TITLE: Creating a signMessage Request with JSON-RPC
DESCRIPTION: Example JSON-RPC request for the hedera_signMessage method, which signs a plain text message. The method requires the signer's account ID and the message to be signed.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#2025-04-10_snippet_8

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "hedera_signMessage",
  "params": {
    "signerAccountId": "hedera:testnet:0.0.12345"
    "message": "Co8BKowBCocBChoKDAjchKWmBhDW..."
  }
}

----------------------------------------

TITLE: Notification Request Body Type Definition in TypeScript
DESCRIPTION: TypeScript interface defining the request body structure for sending notifications using the Notify API. Includes fields for notification_id, notification details, and target accounts.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
type RequestBody = {
  notification_id?: string | null;
  notification: {
    type: string;
    title: string;
    body: string;
    url?: string | null;
  };
  accounts: string[];
};

----------------------------------------

TITLE: Configuring Auth Provider in DefaultConfig
DESCRIPTION: Setup and configuration of the Reown authentication provider in the default configuration. Includes importing the provider and adding it to extra connectors.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/email.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
// Add the following code lines
import { AuthProvider } from "@reown/appkit-auth-ethers-react-native";

const authProvider = new AuthProvider({ projectId, metadata });

const config = defaultConfig({
  metadata,
  // Add the following code line
  extraConnectors: [authProvider],
});

----------------------------------------

TITLE: Importing Migration Documentation Component
DESCRIPTION: MDX import statement for the notification system migration documentation component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/frontend-integration/migration-guide.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
import Migration from "/snippets/appkit/shared/notifications/frontend-integration/migration/javascript.mdx";

----------------------------------------

TITLE: Initializing WalletKit with Link Mode in Kotlin
DESCRIPTION: Sets up WalletKit with Link Mode enabled by configuring AppMetaData with a universal link and initializing the core client. The appLink parameter must be a valid universal link and linkMode must be set to true.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/link-mode.mdx#2025-04-10_snippet_0

LANGUAGE: kotlin
CODE:
val appMetaData = Core.Model.AppMetaData(
    ...
    appLink = "https://example.com/example_wallet",
    linkMode = true
)

CoreClient.initialize(
   metaData: appMetaData,
    ...
)

WalletKit.initialize(Wallet.Params.Init(core = CoreClient))

----------------------------------------

TITLE: Defining BitcoinConnector Interface in TypeScript
DESCRIPTION: This snippet defines the BitcoinConnector interface which extends ChainAdapterConnector and Provider. It includes methods for getting account addresses, signing messages, sending transfers, and signing PSBTs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
export interface BitcoinConnector extends ChainAdapterConnector, Provider {
  getAccountAddresses(): Promise<BitcoinConnector.AccountAddress[]>;
  signMessage(params: BitcoinConnector.SignMessageParams): Promise<string>;
  sendTransfer(params: BitcoinConnector.SendTransferParams): Promise<string>;
  signPSBT(
    params: BitcoinConnector.SignPSBTParams
  ): Promise<BitcoinConnector.SignPSBTResponse>;
}

----------------------------------------

TITLE: Getting All Subscribers with cURL
DESCRIPTION: cURL command for fetching all subscribers with proper authentication.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#2025-04-10_snippet_7

LANGUAGE: bash
CODE:
curl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Configuring Reown AppKit for React
DESCRIPTION: Setting up Ethers5Adapter and passing parameters to createAppKit function in React.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_3

LANGUAGE: tsx
CODE:
// Remove the following code line
- createWeb3Modal({ ... })

// Add the following code lines
+ createAppKit({
 adapters: [new Ethers5Adapter()],
 networks: [mainnet, arbitrum],
 metadata,
 projectId,
 features: {
   analytics: true,
 }
})

----------------------------------------

TITLE: Creating SendCalls Event Handler in TypeScript
DESCRIPTION: Implements an event handler function that triggers the sendCalls method with the test transaction and paymaster service configuration. This function provides the connection between the UI and the blockchain transaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#2025-04-10_snippet_4

LANGUAGE: typescript
CODE:
const onSendCalls = useCallback(() => {
  setLoading(true)
  if (!paymasterServiceUrl) {
    throw Error('paymasterServiceUrl not set')
  }
  sendCalls({
    calls: [TEST_TX],
    capabilities: {
      paymasterService: {
        url: paymasterServiceUrl,
        context
      }
    } 
  })
}, [sendCalls, paymasterServiceUrl])

----------------------------------------

TITLE: Importing and Rendering SIWX Documentation Component in MDX
DESCRIPTION: This snippet demonstrates how to import and display the SIWX documentation component from a shared snippets directory. The file uses the MDX format which allows for importing and rendering React components within markdown documentation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwx.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SiwxIndex from "/snippets/appkit/shared/siwx/index.mdx";

<SiwxIndex />

----------------------------------------

TITLE: Updating imports for Vue implementation
DESCRIPTION: Changes required in import statements when migrating from Web3Modal to Reown AppKit in Vue.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_4

LANGUAGE: tsx
CODE:
// Remove the following imports
- import { createWeb3Modal, defaultConfig } from "@web3modal/ethers5/vue";

// Add the following imports
+ import { createAppKit } from "@reown/appkit/vue";
+ import { arbitrum, mainnet } from "@reown/appkit/networks";
+ import { Ethers5Adapter } from "@reown/appkit-adapter-ethers5";

----------------------------------------

TITLE: React Native Explorer Recommended Wallet IDs Configuration
DESCRIPTION: Configuration for prioritizing specific wallets from WalletGuide in React Native. Allows overriding default wallet recommendations with specified wallet IDs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#2025-04-10_snippet_5

LANGUAGE: ts
CODE:
explorerRecommendedWalletIds: string[] | 'NONE'

//example
explorerRecommendedWalletIds={[
  '1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369',
  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0'
]}

----------------------------------------

TITLE: React Native WalletConnect Implementation Example
DESCRIPTION: Complete example showing how to implement WalletConnect Modal in a React Native application with project configuration and basic connection functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_37

LANGUAGE: tsx
CODE:
import { Pressable, Text } from "react-native";
import "@walletconnect/react-native-compat";
import {
  WalletConnectModal,
  useWalletConnectModal,
} from "@walletconnect/modal-react-native";

const projectId = "YOUR_PROJECT_ID";

const providerMetadata = {
  name: "YOUR_PROJECT_NAME",
  description: "YOUR_PROJECT_DESCRIPTION",
  url: "https://your-project-website.com/",
  icons: ["https://your-project-logo.com/"],
  redirect: {
    native: "YOUR_APP_SCHEME://",
    universal: "YOUR_APP_UNIVERSAL_LINK.com",
  },
};

function App() {
  const { open, isConnected, provider } = useWalletConnectModal();

  const onPress = () => {
    if (isConnected) {
      provider.disconnect();
    } else {
      open();
    }
  };

  return (
    <>
      <Pressable onPress={onPress}>
        <Text>{isConnected ? "Disconnect" : "Connect"}</Text>
      </Pressable>
      <WalletConnectModal
        projectId={projectId}
        providerMetadata={providerMetadata}
      />
    </>
  );
}

----------------------------------------

TITLE: Importing SIWX Cloud Auth Component in MDX
DESCRIPTION: Shows the import statement for including the SIWX cloud authentication component from a shared snippets directory.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwx-cloud-auth.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
import SiwxCloudAuth from "/snippets/appkit/shared/siwx/siwx-cloud-auth.mdx";

----------------------------------------

TITLE: Running the AppKit Application with Tenderly Integration
DESCRIPTION: Command to start the development server for an AppKit application integrated with Tenderly Virtual TestNet. The note explains alternative package managers that can be used.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#2025-04-10_snippet_6

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Rendering Web3Inbox Notifications Component
DESCRIPTION: Component for displaying Web3Inbox notifications, including unread count and individual notification details with read/unread status management.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/react.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
// Notifications.tsx
import { useNotifications } from '@web3inbox/react'
import React from 'react'
import styles from '@/styles/Notifications.module.css'

function Notifications() {
  const { data: subscription } = useSubscription()
  const { data: notifications } = useNotifications(5)

  return (
    <div>
      <h2 className={styles.heading}>Notifications</h2>
      <p>You have {subscription.unreadCount} unread notifications.</p>
      <div className={styles.notificationsContainer}>
        {!notifications?.length ? (
          <p className={styles.fallbackText}>No notifications yet.</p>
        ) : (
          notifications.map(({ id, ...message }) => (
            <div key={id} className={styles.message}>
              <h3>{message.title}</h3>
              <p>{message.body}</p>
              <p>{message.isRead ? 'Read' : 'Unread'}</p>
              <button onClick={message.markAsRead}>Mark as read</button>
            </div>
          ))
        )}
      </div>
      <button onClick={nextPage}>Next page</button>
    </div>
  )
}

export default Notifications

----------------------------------------

TITLE: Creating Namespaces with Builder Style in C#
DESCRIPTION: Alternative approach to define namespaces using the builder pattern. This creates the same namespace configuration as the constructor style but with more readable method chaining.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_4

LANGUAGE: csharp
CODE:
var TestNamespaces = new Namespaces()
  .WithNamespace("eip155", new Namespace()
      .WithChain("eip155:1")
      .WithMethod("eth_signTransaction")
      .WithEvent("chainChanged")
      .WithAccount("eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb")
  );

----------------------------------------

TITLE: Data Encryption with ever_encryptData
DESCRIPTION: Encrypts data using ChaCha20Poly1305 algorithm for specified recipients. Returns encrypted data with nonce for each recipient.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#2025-04-10_snippet_7

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_encryptData",
  "params": {
       "sourceAddress": "0:695e42...b8d",
       "recipientPublicKeys": ["0x6e74...4e95", "0x9532...403f"],
       "algorithm": "ChaCha20Poly1305",
       "data": "ZGF0YQ=="
  }
}

----------------------------------------

TITLE: Get Subscribers using cURL
DESCRIPTION: Example of fetching subscriber information using cURL command.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#2025-04-10_snippet_4

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029",
      "eip155:1:0x0000000000000000000000000000000000000000"
    ]
  }'

----------------------------------------

TITLE: Replacing Package Dependencies in Project File - XML
DESCRIPTION: Shows how to update the package references in a .NET project file by removing WalletConnect.Web3Wallet and adding Reown.WalletKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-unity.mdx#2025-04-10_snippet_0

LANGUAGE: xml
CODE:
<Project Sdk="Microsoft.NET.Sdk">

    <!-- ... -->

  <ItemGroup>
/* highlight-delete-start */
    <PackageReference Include="WalletConnect.Web3Wallet" Version="2.4.2" />
/* highlight-delete-end */
/* highlight-add-start */
    <PackageReference Include="Reown.WalletKit" Version="1.0.0" />
/* highlight-add-end */
  </ItemGroup>

</Project>

----------------------------------------

TITLE: Defining Account Structure in Litecoin BIP Derivation Paths
DESCRIPTION: Illustrates the hierarchical derivation path structure used in Litecoin accounts following BIP44/49/84/86 standards. Shows the path format with purpose, coin type, account, change, and address index components.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/litecoin-rpc.mdx#2025-04-10_snippet_0

LANGUAGE: plaintext
CODE:
m / purpose' / coin_type' / account' / change / address_index

----------------------------------------

TITLE: Importing and Rendering Smart Sessions Component in MDX
DESCRIPTION: This code imports a SmartSessions MDX component from the shared snippets directory and renders it on the page. The component likely contains documentation about smart session functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/experimental/smart-session.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SmartSessions from "/snippets/appkit/shared/smart-sessions.mdx";

<SmartSessions />

----------------------------------------

TITLE: Using the AppKit Button Component in React Native
DESCRIPTION: This snippet demonstrates how to use the pre-built AppKitButton component to open the AppKit modal. This is a straightforward approach that leverages the built-in UI components from the library.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/implementation.mdx#2025-04-10_snippet_1

LANGUAGE: tsx
CODE:
import { AppKitButton } from "@reown/appkit-ethers-react-native";

export default function ConnectView() {
  return (
    <>
      ...rest of your view
      <AppKitButton />
    </>
  );
}

----------------------------------------

TITLE: Importing and Rendering Smart Sessions Documentation in MDX
DESCRIPTION: This code imports the Smart Sessions documentation component from a shared snippets directory and renders it within the current page. This approach allows for reusing documentation across multiple pages in the project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/experimental/smart-session.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SmartSessions from "/snippets/appkit/shared/smart-sessions.mdx";

<SmartSessions />

----------------------------------------

TITLE: Configuring Android App Links in Manifest
DESCRIPTION: XML configuration for the Android Manifest to enable app links with auto-verification. Defines the intent filter for handling HTTPS URLs with a specific host.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/link-mode.mdx#2025-04-10_snippet_2

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />

    <data
        android:host="your_host"
        android:scheme="https">
</intent-filter>

----------------------------------------

TITLE: Extending Session Lifetime in Swift
DESCRIPTION: Code to extend a session's lifetime beyond the default 7-day expiration. Useful for maintaining user connections with frequently used dApps.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_15

LANGUAGE: swift
CODE:
try await Sign.instance.extend(topic: session.topic)

----------------------------------------

TITLE: Importing Blockchain API Documentation Component
DESCRIPTION: Imports a reusable documentation component for blockchain API from snippets directory using MDX syntax.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/cloud/blockchain-api.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Blockchain API
---

import BlockchainAPI from "/snippets/cloud/blockchain-api.mdx";

<BlockchainAPI />

----------------------------------------

TITLE: Implementing AppKit with Web Component in React
DESCRIPTION: A simple React component that renders the AppKit button using the web component approach. Web components are global HTML elements that don't require importing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />;
}

----------------------------------------

TITLE: Configuring WalletKit with Link Mode in Flutter
DESCRIPTION: This snippet demonstrates how to initialize ReownWalletKit with Link Mode enabled. It requires setting up the PairingMetadata with proper redirect URLs and enabling the linkMode property.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/link-mode.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
final _walletKit = ReownWalletKit(
  core: ReownCore(
    projectId: '{YOUR_PROJECT_ID}',
  ),
  metadata: PairingMetadata(
    name: 'Example Wallet',
    description: 'Example wallet description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'examplewallet://',
      universal: 'https://example.com/wallet',
      linkMode: true,
    ),
  ),
);

----------------------------------------

TITLE: Importing SIWX Custom Component in React
DESCRIPTION: This snippet demonstrates how to import a custom SIWX component from a shared snippet file and include it in a React component or page.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwx-custom.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SiwxCustom from "/snippets/appkit/shared/siwx/siwx-custom.mdx";

<SiwxCustom />

----------------------------------------

TITLE: Updating Network Configuration in Flutter
DESCRIPTION: Shows how to update the network configuration code from W3MChainPresets to ReownAppKitModalNetworks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
// Remove the code lines below
W3MChainPresets.chains.addAll(W3MChainPresets.extraChains);
W3MChainPresets.chains.addAll(W3MChainPresets.testChains);

final testNetworks = ReownAppKitModalNetworks.test['eip155'] ?? [];
final extraNetworks = ReownAppKitModalNetworks.extra['eip155'] ?? [];
ReownAppKitModalNetworks.addNetworks('eip155', testNetworks);
ReownAppKitModalNetworks.addNetworks('eip155', extraNetworks);

----------------------------------------

TITLE: Updating Import Statements for AppKit Configuration
DESCRIPTION: Changes to import statements needed when switching from RainbowKit's configuration to AppKit with the wagmi adapter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
- import { getDefaultConfig } from '@rainbow-me/rainbowkit';
+ import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'


----------------------------------------

TITLE: Subscriber Response Example
DESCRIPTION: Example JSON response showing the structure of subscriber data returned by the API.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#2025-04-10_snippet_5

LANGUAGE: jsonc
CODE:
{
  "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029": {
    "notification_types": ["4d1c97ad-c182-4097-8f2c-8f80c0674df2"]
  }
}

----------------------------------------

TITLE: Importing Analytics Component in MDX
DESCRIPTION: Imports and renders an Analytics component from the cloud snippets directory using MDX syntax.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/cloud/analytics.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Analytics
---

import Analytics from "/snippets/cloud/analytics.mdx";

<Analytics />

----------------------------------------

TITLE: Adding Transaction Button
DESCRIPTION: Adding a button component that triggers the Solana transaction function when clicked.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#2025-04-10_snippet_10

LANGUAGE: tsx
CODE:
<button onClick={handleSendTransaction}>Send Transaction</button>

----------------------------------------

TITLE: Importing Verify Component in MDX
DESCRIPTION: Imports a Verify component from the cloud snippets directory and renders it on the page. Uses MDX syntax to combine Markdown with JSX.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Initializing Core Client in C#
DESCRIPTION: Sets up a Core instance with a specific Name and ProjectId, which are required for WalletKit initialization. Optional parameters like RelayUrl and Storage can also be specified.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_0

LANGUAGE: csharp
CODE:
var options = new CoreOptions()
{
    ProjectId = "...",
    Name = "my-app",
}

var core = new CoreClient(options);

----------------------------------------

TITLE: TypeScript Types for Chain Abstraction in WalletKit
DESCRIPTION: Definition of TypeScript types used for chain abstraction operations, including transaction types, funding source information, response formats for availability checks, and fulfillment status responses.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/early-access/chain-abstraction.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
namespace ChainAbstractionTypes {
  type FundingFrom = {
    tokenContract: string;
    amount: string;
    chainId: string;
    symbol: string;
  };

  type Transaction = {
    from: string;
    to: string;
    value: string;
    chainId: string;
    gas?: string;
    gasPrice?: string;
    data?: string;
    nonce?: string;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
  };

  type CanFulfilResponse =
    | {
        status: "not_required";
      }
    | {
        status: "available";
        data: {
          fulfilmentId: string;
          checkIn: number;
          transactions: Transaction[];
          funding: FundingFrom[];
        };
      }
    | {
        status: "error";
        reason: string; // reason can be insufficientFunds | insufficientGasFunds | noRoutesAvailable
      };

  type FulfilmentStatusResponse = {
    createdAt: number;
  } & (
    | {
        status: "completed";
      }
    | { status: "pending"; checkIn: number }
  );
}

----------------------------------------

TITLE: Importing and Rendering Relay Component in JSX
DESCRIPTION: This code snippet imports a Relay component from a specific path and renders it within the current file. It demonstrates how to include modular documentation components in a React-based documentation system.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/cloud/relay.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Relay from "/snippets/cloud/relay.mdx";

<Relay />

----------------------------------------

TITLE: Initializing Web3Inbox Client in TypeScript
DESCRIPTION: Demonstrates the new method for initializing the Web3Inbox client using a function call instead of a hook. It also shows the deprecated hook method for comparison.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
import { useInitWeb3InboxClient } from '@web3inbox/widget-react'
import { initWeb3InboxClient } from '@web3inbox/react'

useInitWeb3inboxClient({ projectId, domain, isLimited })
initWeb3InboxClient({ projectId, domain, allApps })

----------------------------------------

TITLE: Basic Implementation Example of SIWE without a Backend
DESCRIPTION: A comprehensive example demonstrating a minimal configuration for trying out SIWE functionality without requiring a backend implementation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#2025-04-10_snippet_8

LANGUAGE: javascript
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
    ),
  ),
  siweConfig: SIWEConfig(
    getNonce: () async {
      return SIWEUtils.generateNonce();
    },
    getMessageParams: () async {
      return SIWEMessageArgs(
        domain: Uri.parse(_appKitModal.appKit!.metadata.url).authority,
        uri: _appKitModal.appKit!.metadata.url,
        statement: '{Your custom message here}',
        methods: MethodsConstants.allMethods,
      );
    },
    createMessage: (SIWECreateMessageArgs args) {
      return SIWEUtils.formatMessage(args);
    },
    verifyMessage: (SIWEVerifyMessageArgs args) async {
      final chainId = SIWEUtils.getChainIdFromMessage(args.message);
      final address = SIWEUtils.getAddressFromMessage(args.message);
      final cacaoSignature = args.cacao != null
          ? args.cacao!.s
          : CacaoSignature(
              t: CacaoSignature.EIP191,
              s: args.signature,
            );
      return await SIWEUtils.verifySignature(
        address,
        args.message,
        cacaoSignature,
        chainId,
        DartDefines.projectId,
      );
    },
    getSession: () async {
      final chainId = _appKitModal.selectedChain?.chainId ?? '1';
      final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(
        chainId,
      );
      final address = _appKitModal.session!.getAddress(namespace)!;
      return SIWESession(address: address, chains: [chainId]);
    },
    signOut: () async {
      return true;
    },
  ),
);

----------------------------------------

TITLE: Retrieving Notification Types in Web3Inbox using TypeScript
DESCRIPTION: Demonstrates how to retrieve notification types and associated images using the new useNotificationTypes hook, replacing the previous useSubscriptionScopes hook.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
- import { useSubscriptionScopes } from "@web3inbox/widget-react"
+ import { useNotificationTypes } from "@web3inbox/react"

- const { scopes } = useSubscriptionScopes()
+ const { data: notificationTypes } = useNotificationTypes()
+ const notificationImageUrl = notificationTypes[notification.type].imageUrls.md;

----------------------------------------

TITLE: Retrieving Wallet Address with Reown AppKit in TypeScript
DESCRIPTION: This snippet demonstrates how to get the current wallet address using the getAddress method of the Reown AppKit modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const address = modal.getAddress();

----------------------------------------

TITLE: Retrieving Wallet Address with Reown AppKit in TypeScript
DESCRIPTION: This snippet demonstrates how to get the current wallet address using the getAddress method of the Reown AppKit modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const address = modal.getAddress();

----------------------------------------

TITLE: Importing and Rendering Analytics Component in MDX
DESCRIPTION: Imports an Analytics component from the snippets/cloud directory and renders it on the page using MDX syntax.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/cloud/analytics.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Analytics
---

import Analytics from "/snippets/cloud/analytics.mdx";

<Analytics />

----------------------------------------

TITLE: Emitting bip122_addressesChanged Event in JSON
DESCRIPTION: Example of a session_event payload for the bip122_addressesChanged event. This event notifies dapps about connected accounts' current addresses, including those with UTXOs and unused addresses.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/bitcoin-rpc.mdx#2025-04-10_snippet_4

LANGUAGE: json
CODE:
{
  "id": 1675759795769537,
  "topic": "95d6aca451b8e3c6d9d176761bf786f1cc0a6d38dffd31ed896306bb37f6ae8d",
  "params": {
    "event": {
      "name": "bip122_addressesChanged",
      "data": [
        {
          "address": "bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu",
          "publicKey": "0330d54fd0dd420a6e5f8d3624f5f3482cae350f79d5f0753bf5beef9c2d91af3c",
          "path": "m/84'/0'/0'/0/0"
        },
        {
          "address": "3KHhcgwPgYF9hE77zaKy2G36dpkcNtvQ33",
          "publicKey": "03b90230ca20150142bc2849a3df4517073978f32466214a0ebc00cac52f996989",
          "path": "m/49'/0'/0'/0/7"
        },
        {
          "address": "bc1qp59yckz4ae5c4efgw2s5wfyvrz0ala7rgvuz8z",
          "publicKey": "038ffea936b2df76bf31220ebd56a34b30c6b86f40d3bd92664e2f5f98488dddfa",
          "path": "m/84'/0'/0'/0/2"
        },
        {
          "address": "bc1qgl5vlg0zdl7yvprgxj9fevsc6q6x5dmcyk3cn3",
          "publicKey": "03de7490bcca92a2fb57d782c3fd60548ce3a842cad6f3a8d4e76d1f2ff7fcdb89",
          "path": "m/84'/0'/0'/0/3"
        },
        {
          "address": "bc1qm97vqzgj934vnaq9s53ynkyf9dgr05rargr04n",
          "publicKey": "03995137c8eb3b223c904259e9b571a8939a0ec99b0717684c3936407ca8538c1b",
          "path": "m/84'/0'/0'/0/4"
        },
        {
          "address": "bc1qv6vaedpeke2lxr3q0wek8dd7nzhut9w0eqkz9z",
          "publicKey": "03d0d243b6a3176fa20fa95cd7fb0e8e0829b83fc2b52053633d088c1a4ba91edf",
          "path": "m/84'/0'/0'/1/3"
        },
        {
          "address": "bc1qetrkzfslk0d4kqjnu29fdh04tkav9vj3k36vuh",
          "publicKey": "02a8dee7573bcc7d3c1e9b9e267dbf0cd717343c31d322c5b074a3a97090a0d952",
          "path": "m/84'/0'/0'/1/4"
        }
      ]
    },
    "chainId": "bip122:000000000019d6689c085ae165831e93"
  }
}

----------------------------------------

TITLE: Importing and Rendering Verify Component in MDX
DESCRIPTION: This snippet shows how to import a Verify component from the snippets directory and render it in an MDX documentation page. The file imports the Verify component from a specific path and renders it within the page content.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Importing and Using the Verify Component in MDX
DESCRIPTION: This snippet imports the Verify component from the cloud snippets directory and renders it in the current document. The component likely contains verification-related documentation or functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Session Rejection Implementation in Kotlin
DESCRIPTION: Shows how to reject a WalletConnect session proposal by providing the proposer's public key along with rejection reason and code following CAIP-25 standard.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_24

LANGUAGE: kotlin
CODE:
val proposerPublicKey: String = /*Proposer publicKey from SessionProposal object*/
val rejectionReason: String = /*The reason for rejecting the Session Proposal*/
val rejectionCode: String = /*The code for rejecting the Session Proposal*/
For reference use CAIP-25: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-25.md

val rejectParams: Sign.Params.Reject = Reject(proposerPublicKey, rejectionReason, rejectionCode)
SignClient.rejectSession(rejectParams) { error -> /*callback for error while rejecting a session*/ }

----------------------------------------

TITLE: Getting All Subscribers with JavaScript
DESCRIPTION: JavaScript example for retrieving all subscriber accounts for your application. This code demonstrates making a GET request to the subscribers endpoint and handling the response as an array of account identifiers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,
  {
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    },
  }
);
const subscribers: string[] = await response.json();

----------------------------------------

TITLE: Creating AppKit Instance in JavaScript
DESCRIPTION: Code for initializing the Reown AppKit instance with the EthersAdapter in JavaScript applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#2025-04-10_snippet_8

LANGUAGE: ts
CODE:
// Remove the following code line
- const modal = createWeb3Modal({
  ethersConfig,
  projectId,
  enableAnalytics: true
})

// Add the following code lines
+ const modal = createAppKit({
  adapters: [new EthersAdapter()],
  networks: [mainnet, arbitrum],
  metadata,
  projectId,
  features: {
    analytics: true
  }
})

----------------------------------------

TITLE: Creating Namespaces with Constructor Style in C#
DESCRIPTION: Defines namespaces for blockchain interactions using the constructor approach. This example sets up an EIP-155 namespace with accounts, chains, methods, and events.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_3

LANGUAGE: csharp
CODE:
var TestNamespaces = new Namespaces()
{
    {
        "eip155", new Namespace()
            {
                Accounts = new [] { "eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb" },
                Chains = new []{ "eip155:1" },
                Methods = new[] { "eth_signTransaction" },
                Events = new[] { "chainChanged" }
            }
    },
};

----------------------------------------

TITLE: Importing SIWX Custom Component in Markdown
DESCRIPTION: This snippet demonstrates how to import a custom SIWX component documentation snippet in MDX format. It's likely used to include detailed usage instructions and examples for customizing the SIWX component in AppKit Vue.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/siwx-custom.mdx#2025-04-10_snippet_0

LANGUAGE: markdown
CODE:
import SiwxCustom from "/snippets/appkit/shared/siwx/siwx-custom.mdx";

----------------------------------------

TITLE: Importing Smart Account MDX Snippet in React
DESCRIPTION: This code imports a shared MDX component for Smart Accounts and renders it within the current page. It demonstrates the use of modular documentation components in a React-based documentation system.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/smart-accounts.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SmartAccount from "/snippets/appkit/shared/smart-accounts.mdx";

<SmartAccount />

----------------------------------------

TITLE: Importing and Displaying Relay Component in MDX
DESCRIPTION: This code demonstrates how to import a Relay component from the snippets directory and render it within an MDX documentation page. The pattern shows the standard way to include reusable component-based documentation in the Reown docs system.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/cloud/relay.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Relay from "/snippets/cloud/relay.mdx";

<Relay />

----------------------------------------

TITLE: Creating Crypto Polyfill for Expo
DESCRIPTION: JavaScript code for creating a crypto polyfill in Expo environment. This snippet creates a shim that implements the crypto.subtle.digest method using expo-crypto.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#2025-04-10_snippet_2

LANGUAGE: js
CODE:
import { digest } from "expo-crypto";

// eslint-disable-next-line no-undef
const webCrypto = typeof crypto !== "undefined" ? crypto : new Crypto();
webCrypto.subtle = {
  digest: (algo, data) => {
    const buf = Buffer.from(data);
    return digest(algo, buf);
  },
};
(() => {
  if (typeof crypto === "undefined") {
    Object.defineProperty(window, "crypto", {
      configurable: true,
      enumerable: true,
      get: () => webCrypto,
    });
  }
})();

----------------------------------------

TITLE: Adding Network Client Permissions in MacOS Entitlements
DESCRIPTION: This XML configuration needs to be added to both DebugProfile.entitlements and Release.entitlements files in MacOS projects to enable WebSocket connections for the reown_walletkit package.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/installation.mdx#2025-04-10_snippet_0

LANGUAGE: xml
CODE:
<key>com.apple.security.network.client</key>
<true/>

----------------------------------------

TITLE: Importing and Displaying Verify Component in MDX
DESCRIPTION: This code imports a Verify component from a snippets directory and renders it in the current MDX page. The component likely contains documentation about verification processes or APIs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
---
title: Verify
---

import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Installing Web3Inbox SDK with Bun
DESCRIPTION: Command to install the Web3Inbox core and React packages using Bun package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/react.mdx#2025-04-10_snippet_2

LANGUAGE: bash
CODE:
bun a @web3inbox/core @web3inbox/react

----------------------------------------

TITLE: Android Manifest Configuration for WalletConnect in Flutter
DESCRIPTION: XML configuration for Android manifest to enable deep linking to wallet apps, internet permissions, and handling callbacks from wallets back to your Flutter application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_10

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Intent so you can deep link to wallets -->
    <queries>
        <intent>
            <action android:name="android.intent.action.VIEW" />
            <category android:name="android.intent.category.BROWSABLE" />
            <data android:scheme="https" />
        </intent>
        <package android:name="io.metamask"/>
        <package android:name="com.wallet.crypto.trustapp"/>
        <package android:name="io.gnosis.safe"/>
        <package android:name="me.rainbow"/>
        <package android:name="io.zerion.android"/>
        <package android:name="com.imtoken.app"/>
        <!-- Add other wallets you would like to launch from within the app -->
    </queries>
    <!-- Permission to access the internet -->
    <uses-permission android:name="android.permission.INTERNET"/>
    <!-- Update your activity to handle the deep linking from other apps -->
    <activity
            ...>
            <intent-filter>
                <action android:name="android.intent.action.VIEW" />
                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />

                <!-- Accepts URIs that begin with "flutterdapp://", change this to be your deep link -->
                <data android:scheme="flutterdapp" />
            </intent-filter>
        </activity>
    ...
</manifest>

----------------------------------------

TITLE: Importing and Displaying Swaps Component in MDX
DESCRIPTION: This code snippet imports a Swaps MDX component from the snippets directory and renders it on the current page. This pattern allows for reusable documentation components across the Reown documentation system.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/transactions/swaps.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Swaps from "/snippets/appkit/shared/swaps.mdx";

<Swaps />

----------------------------------------

TITLE: Accessing Account Data with getAccount in Wagmi
DESCRIPTION: This snippet demonstrates how to use the getAccount action from Wagmi core to access the current connected account data and connection status.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/wagmi/composables.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
import { getAccount } from "@wagmi/core";

const account = getAccount();

----------------------------------------

TITLE: Importing and Rendering Verify Component in MDX
DESCRIPTION: Imports a Verify component from the snippets/cloud directory and renders it in the MDX documentation page.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Disconnecting a Session in Swift
DESCRIPTION: Code to terminate a connection between a wallet and a dApp. Allows users to disconnect from unwanted or unused sessions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_16

LANGUAGE: swift
CODE:
try await Sign.instance.disconnect(topic: session.topic)

----------------------------------------

TITLE: Enabling Debug Mode in ReOwn AppKit
DESCRIPTION: Enables debug mode to see UI alerts when debugging, which is disabled by default.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_15

LANGUAGE: typescript
CODE:
debug: true;

----------------------------------------

TITLE: ConnectParams Interface Definition
DESCRIPTION: Interface definition for the connect method parameters in WalletConnect.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
interface ConnectParams {
  requiredNamespaces?: ProposalTypes.RequiredNamespaces;
  optionalNamespaces?: ProposalTypes.OptionalNamespaces;
  sessionProperties?: ProposalTypes.SessionProperties;
  pairingTopic?: string;
  relays?: RelayerTypes.ProtocolOptions[];
}

----------------------------------------

TITLE: Importing and Rendering Socials Component in JSX
DESCRIPTION: This snippet imports a Socials component from a shared directory and renders it within the current page. It's commonly used in documentation sites to include reusable social media elements across multiple pages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/socials.mdx#2025-04-10_snippet_0

LANGUAGE: JSX
CODE:
import Socials from "/snippets/appkit/shared/socials.mdx";

<Socials />

----------------------------------------

TITLE: Implementing AppKit Button Web Component in HTML
DESCRIPTION: Basic implementation of the AppKit button using the global web component. The component is available globally and doesn't require explicit imports.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/wagmi/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Defining SIWXConfig Interface for Custom SIWX Implementation in TypeScript
DESCRIPTION: This code snippet defines the SIWXConfig interface that needs to be implemented for creating a custom SIWX feature in AppKit. It includes methods for creating messages, managing sessions, and retrieving stored sessions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-custom.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
interface SIWXConfig {
  createMessage: (input: SIWXMessage.Input) => Promise<SIWXMessage>
  addSession: (session: SIWXSession) => Promise<void>
  revokeSession: (chainId: CaipNetworkId, address: string) => Promise<void>
  setSessions: (sessions: SIWXSession[]) => Promise<void>
  getSessions: (chainId: CaipNetworkId, address: string) => Promise<SIWXSession[]>
}

----------------------------------------

TITLE: Getting All Subscribers with cURL
DESCRIPTION: cURL command for retrieving all subscriber accounts for your application. This example demonstrates a simple GET request to the subscribers endpoint with the required authorization header.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#2025-04-10_snippet_7

LANGUAGE: bash
CODE:
curl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Updating Network Switching Logic
DESCRIPTION: Code changes for the switchNetwork function when migrating from Web3Modal to Reown AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#2025-04-10_snippet_11

LANGUAGE: tsx
CODE:
// Remove the following code line
modal.switchNetwork(137);

// Add the following code lines
import { polygon } from "@reown/appkit/networks";
modal.switchNetwork(polygon);

----------------------------------------

TITLE: Using solana_getAccounts Method in TypeScript
DESCRIPTION: Example request and response for the solana_getAccounts method, which returns an array of public keys available to sign from the wallet. The method takes no parameters and returns an array of account objects containing public keys.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "solana_getAccounts",
  "params": {}
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": [{ "pubkey": "722RdWmHC5TGXBjTejzNjbc8xEiduVDLqZvoUGz6Xzbp" }]
}

----------------------------------------

TITLE: Getting Wallet Provider Method
DESCRIPTION: Method that returns the currently active wallet connection provider.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#2025-04-10_snippet_13

LANGUAGE: typescript
CODE:
modal.getWalletProvider()

----------------------------------------

TITLE: Using solana_signAndSendTransaction Method in TypeScript
DESCRIPTION: Example of the solana_signAndSendTransaction method, which signs and sends a transaction to the Solana network. It takes a base64-encoded serialized transaction and optional send options, returning a signature that can be used as a transaction ID.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#2025-04-10_snippet_5

LANGUAGE: typescript
CODE:
// Request
{
	"id": 1,
	"jsonrpc": "2.0",
	"method": "solana_signAndSendTransaction",
	"params": {
    "transaction": string,
    "sendOptions": {
	    "skipPreflight"?: boolean,
	    "preflightCommitment"?: 'processed' | 'confirmed' | 'finalized' | 'recent' | 'single' | 'singleGossip' | 'root' | 'max',
	    "maxRetries"?: number,
	    "minContextSlot"?: number,
    }
	}
}

// Response
{
	"id": 1,
	"jsonrpc": "2.0",
	"result":  {
	  "signature": string
	}
}

----------------------------------------

TITLE: Importing and Displaying Smart Account Documentation with MDX
DESCRIPTION: This snippet shows how to import a shared MDX file containing Smart Account documentation and display it within the current page. The code uses JSX syntax within an MDX document to include reusable documentation components.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/smart-accounts.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SmartAccount from "/snippets/appkit/shared/smart-accounts.mdx";

<SmartAccount />

----------------------------------------

TITLE: Adding WalletConnectModal Dependencies for Android
DESCRIPTION: Gradle configuration for the app build.gradle.kts file to add WalletConnectModal dependencies for Android applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_5

LANGUAGE: gradle
CODE:
implementation(platform("com.walletconnect:android-bom:$BOM_VERSION"))
implementation("com.walletconnect:android-core")
implementation("com.walletconnect:walletconnect-modal")

----------------------------------------

TITLE: Updating imports for JavaScript implementation
DESCRIPTION: Changes required in import statements when migrating from Web3Modal to Reown AppKit in JavaScript.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_6

LANGUAGE: ts
CODE:
// Remove the following imports
- import { createWeb3Modal, defaultConfig } from '@web3modal/ethers5'

// Add the following imports
+ import { createAppKit } from '@reown/appkit'
+ import { arbitrum, mainnet } from '@reown/appkit/networks'
+ import { EthersAdapter } from '@reown/appkit-adapter-ethers5'

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX
DESCRIPTION: This code imports a Verify component from the snippets/cloud directory and renders it within the current page. This pattern is commonly used in documentation sites to modularize content.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Using Custom Components with DefaultSIWX
DESCRIPTION: Example of configuring DefaultSIWX with a custom storage implementation while using default components for other aspects.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
import { DefaultSIWX, type SIWXStorage } from "@reown/appkit-siwx";

class MyDatabaseStorage implements SIWXStorage {
  // ...
}

const siwx = new DefaultSIWX({
  storage: new MyDatabaseStorage(),
});

----------------------------------------

TITLE: Configuring Recommended Wallet IDs in JavaScript/Dart
DESCRIPTION: This snippet demonstrates how to override default recommended wallets by specifying an array of wallet IDs. These IDs are used to prioritize certain wallets in the WalletConnect integration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#2025-04-10_snippet_13

LANGUAGE: javascript
CODE:
final Set<String> recommendedWalletIds = {
  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask
  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0', // Trust
}

----------------------------------------

TITLE: Importing Multichain Component in MDX
DESCRIPTION: This snippet imports a Multichain component from a shared snippets directory. The component is likely used to display or manage multichain functionality in the documentation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/multichain.mdx#2025-04-10_snippet_0

LANGUAGE: MDX
CODE:
import Multichain from "/snippets/appkit/shared/multichain.mdx";

<Multichain />

----------------------------------------

TITLE: Verifying Typed Data Signatures with AppKit EVM Module
DESCRIPTION: Methods to verify if typed data was signed by a specific address. Supports both direct parameter passing and using a VerifyTypedDataSignatureParams object.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#2025-04-10_snippet_10

LANGUAGE: csharp
CODE:
// Basic verification
bool isValid = await AppKit.EVM.VerifyTypedDataSignatureAsync(
    "0x123...", // address
    "{ /* Your typed data */ }", // original typed data
    "0xabc..." // signature
);

// Using parameters object
var verifyTypedDataParams = new VerifyTypedDataSignatureParams
{
    Address = "0x123...",
    Data = "{ /* Your typed data */ }",
    Signature = "0xabc..."
};
bool isValid = await AppKit.EVM.VerifyTypedDataSignatureAsync(verifyTypedDataParams);

----------------------------------------

TITLE: Initializing SignClient with Custom Relay URL in JavaScript
DESCRIPTION: This code snippet demonstrates how to initialize a SignClient with a custom relay URL to bypass blocked default endpoints. It sets the relay URL to 'wss://relay.walletconnect.org' and requires a project ID and metadata.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/faq.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
const signClient = await SignClient.init({
  projectId: "<YOUR PROJECT ID>",
  relayUrl: "wss://relay.walletconnect.org",
  metadata: {},
});

----------------------------------------

TITLE: Importing Viem Networks for Reown AppKit
DESCRIPTION: Example of importing various network configurations from Reown AppKit's networks module, which uses Viem networks under the hood.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/wagmi/about/implementation.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
import { createAppKit } from '@reown/appkit'
import { mainnet, arbitrum, base, scroll, polygon } from '@reown/appkit/networks'

----------------------------------------

TITLE: Updating WalletConnect Session Namespaces in Swift
DESCRIPTION: Shows how to update an existing session's namespaces, which can include modifying chains, accounts, methods, or events that the wallet supports for a particular dApp connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#2025-04-10_snippet_15

LANGUAGE: swift
CODE:
try await WalletKit.instance.update(topic: session.topic, namespaces: newNamespaces)

----------------------------------------

TITLE: Rejecting Authentication Requests
DESCRIPTION: Shows how to reject authentication requests using the rejectSessionAuthenticate method with appropriate parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/one-click-auth.mdx#2025-04-10_snippet_3

LANGUAGE: kotlin
CODE:
val rejectParams = Wallet.Params.RejectSessionAuthenticate(
    id = sessionAuthenticate.id,
    reason = "Reason"
)

WalletKit.rejectSessionAuthenticate(rejectParams,
  onSuccess = {
        //Success
  },
  onError = { error ->
      //Handle error
  }
)

----------------------------------------

TITLE: Importing Wagmi SendCalls Hook in TypeScript
DESCRIPTION: Imports the useSendCalls hook from the Wagmi experimental package. This hook provides the functionality needed to send blockchain transactions through AppKit's smart account system.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#2025-04-10_snippet_2

LANGUAGE: typescript
CODE:
import { useSendCalls } from 'wagmi/experimental'

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX
DESCRIPTION: This code imports a Verify component from the snippets/cloud directory and renders it within the current page. This pattern is commonly used in documentation sites to modularize content.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Theme and Event Management Methods
DESCRIPTION: Lists available methods for managing modal theme and event subscriptions including setThemeMode, getThemeMode, setThemeVariables, subscribeTheme, and event subscription methods.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
modal.subscribeState
modal.setThemeMode
modal.getThemeMode
modal.setThemeVariables
modal.getThemeVariables
modal.subscribeTheme
modal.getEvent
modal.subscribeEvents

----------------------------------------

TITLE: Configuring Android Manifest for Wallet Detection
DESCRIPTION: XML configuration for the AndroidManifest.xml file to enable wallet detection in an Android application by adding wallet package names to the queries section.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_9

LANGUAGE: xml
CODE:
<queries>
  <package android:name="io.metamask"/>
  <package android:name="com.wallet.crypto.trustapp"/>
  <package android:name="io.gnosis.safe"/>
  <package android:name="me.rainbow"/>
  <!-- Add other wallet package names here -->
</queries>

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX
DESCRIPTION: This code imports a Verify component from the snippets directory and renders it in the current page. The component likely contains documentation or UI elements related to verification functionality in a cloud service.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Installing Mintlify CLI - Bash
DESCRIPTION: Command to install Mintlify CLI globally using npm
SOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#2025-04-10_snippet_5

LANGUAGE: bash
CODE:
npm install -g mintlify

----------------------------------------

TITLE: Installing Web3Inbox Widget with npm
DESCRIPTION: Command to install Web3Inbox core and React widget packages using npm package manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/embedded-widget/about.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @web3inbox/core @web3inbox/widget-react

----------------------------------------

TITLE: Updating WalletKit Session
DESCRIPTION: Updates an existing session with new accounts, chains, or methods by providing the topic and updated namespaces.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
await _walletKit.updateSession(topic: 'topic', namespaces: '{}')

----------------------------------------

TITLE: Installing WalletConnect Sign Client for Web
DESCRIPTION: Commands to install the WalletConnect Sign Client package using different package managers for web applications. For Node.js, additional installation of lokijs is required.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @walletconnect/sign-client

LANGUAGE: bash
CODE:
yarn add @walletconnect/sign-client

LANGUAGE: bash
CODE:
bun add @walletconnect/sign-client

LANGUAGE: bash
CODE:
pnpm add @walletconnect/sign-client

LANGUAGE: bash
CODE:
npm install --save @walletconnect/sign-client lokijs@1.x

LANGUAGE: bash
CODE:
yarn add @walletconnect/sign-client lokijs@1.x

LANGUAGE: bash
CODE:
bun add --save @walletconnect/sign-client lokijs@1.x

LANGUAGE: bash
CODE:
pnpm add @walletconnect/sign-client lokijs@1.x

----------------------------------------

TITLE: Subscribing to Provider Changes with modal.subscribeProvider()
DESCRIPTION: This method creates a listener that detects changes to the AppKit state, including address, chainId, connection status, provider, and provider type changes. It accepts a callback function that will be executed when state changes occur.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_14

LANGUAGE: javascript
CODE:
modal.subscribeProvider(callback)

----------------------------------------

TITLE: Subscribing to Provider Changes with modal.subscribeProvider()
DESCRIPTION: This method creates a listener that detects changes to the AppKit state, including address, chainId, connection status, provider, and provider type changes. It accepts a callback function that will be executed when state changes occur.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#2025-04-10_snippet_14

LANGUAGE: javascript
CODE:
modal.subscribeProvider(callback)

----------------------------------------

TITLE: Configuring Babel for React Native CLI
DESCRIPTION: JavaScript configuration for babel.config.js that sets up module resolution aliases for crypto, stream, and buffer in React Native CLI projects.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#2025-04-10_snippet_7

LANGUAGE: js
CODE:
module.exports = {
  presets: ['module:metro-react-native-babel-preset'],
  plugins: [
   [
     'module-resolver',
     {
       alias: {
         'crypto': 'react-native-quick-crypto',
         'stream': 'stream-browserify',
         'buffer': '@craftzdog/react-native-buffer',
       },
     },
   ],
    ...
  ],
};

----------------------------------------

TITLE: Accessing Solana Connection with useAppKitConnection in Vue
DESCRIPTION: This snippet illustrates how to use the useAppKitConnection hook to obtain the Solana connection object. The connection object provides access to various Solana blockchain functionalities.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/composables.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { useAppKitConnection } from '@reown/appkit-adapter-solana/vue'

...

const { connection } = useAppKitConnection()

----------------------------------------

TITLE: Importing and Displaying Sponsored Transactions MDX Content
DESCRIPTION: This snippet imports a shared MDX component containing documentation about sponsored transactions and renders it on the page. The content is imported from the '/snippets/appkit/shared/sponsored-transactions.mdx' path.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/transactions/sponsored-transactions.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SponsoredTransactions from "/snippets/appkit/shared/sponsored-transactions.mdx";

<SponsoredTransactions />

----------------------------------------

TITLE: Configuring Deep Link Schema for iOS
DESCRIPTION: Adds URL scheme configuration to iOS Info.plist to enable deep linking back to your app from a wallet after connection.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#2025-04-10_snippet_4

LANGUAGE: xml
CODE:
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLName</key>
    <string>com.example.yourBundleId</string> <!-- Bundle ID of your app -->
    <key>CFBundleURLSchemes</key>
    <array>
      <!-- your own custom scheme -->
      <!-- Should be the same you set on Redirect.native on Flutter side -->
      <!-- Be mind of removing :// for this step -->
      <string>exampleapp</string>
    </array>
  </dict>
</array>

----------------------------------------

TITLE: Updating WalletKit Session
DESCRIPTION: Updates an existing session with new accounts, chains, or methods by providing the topic and updated namespaces.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
await _walletKit.updateSession(topic: 'topic', namespaces: '{}')

----------------------------------------

TITLE: Accessing AppKitState Methods
DESCRIPTION: Shows how to access AppKitState methods to monitor the open state and connection status of AppKit components.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#2025-04-10_snippet_10

LANGUAGE: kotlin
CODE:
    appKitState.isOpen

LANGUAGE: kotlin
CODE:
    appKitState.isConnected

----------------------------------------

TITLE: Retrieving Wallet Address in TypeScript
DESCRIPTION: Gets the connected wallet address using the modal's getAddress method.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
const address = modal.getAddress();

----------------------------------------

TITLE: Subscribing to Session Requests in Swift
DESCRIPTION: Code to set up a Combine publisher that listens for session requests from dApps. When a request is received, it verifies the dApp context and displays the request to the user.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_11

LANGUAGE: swift
CODE:
Sign.instance.sessionRequestPublisher
    .receive(on: DispatchQueue.main)
    .sink { [weak self] session in
        self?.verifyDapp(session.context)
        self?.showSessionRequest(session.request)
    }.store(in: &publishers)

----------------------------------------

TITLE: Importing and Using Verify Component in MDX
DESCRIPTION: Simple MDX code that imports a Verify component from a snippets directory and renders it on the page.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Rendering Transaction Button Component
DESCRIPTION: Renders a button to trigger the transaction sending function when the user is connected. The button is only displayed when isConnected is true.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_12

LANGUAGE: jsx
CODE:
return (
  isConnected && (
    <div>
      <button onClick={handleSendTx}>Send Transaction</button>
    </div>
  )
);

----------------------------------------

TITLE: Using sendUncheckedTransaction Instead of sendTransaction in ethers.js
DESCRIPTION: When sending Ethereum transactions, use signer.sendUncheckedTransaction instead of signer.sendTransaction to avoid an asynchronous call to retrieve the internal block number. This optimization returns a mock transaction response with only the hash property and wait method, with all other properties being null.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/mobile-linking.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
signer.sendUncheckedTransaction(tx)

----------------------------------------

TITLE: Installing @web3inbox/core with pnpm
DESCRIPTION: This snippet illustrates the installation of @web3inbox/core using pnpm (performant npm). pnpm is known for its efficiency in managing node modules and uses a similar syntax to npm for package installation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/javascript.mdx#2025-04-10_snippet_3

LANGUAGE: bash
CODE:
pnpm add @web3inbox/core

----------------------------------------

TITLE: Installing AppKit with Bitcoin for JavaScript
DESCRIPTION: Commands to install AppKit and its dependencies for use with Bitcoin in JavaScript projects using different package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#2025-04-10_snippet_4

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-bitcoin

LANGUAGE: bash
CODE:
yarn add @reown/appkit @reown/appkit-adapter-bitcoin

LANGUAGE: bash
CODE:
bun add @reown/appkit @reown/appkit-adapter-bitcoin

LANGUAGE: bash
CODE:
pnpm add @reown/appkit @reown/appkit-adapter-bitcoin

----------------------------------------

TITLE: Implementing Android Compose Theme
DESCRIPTION: Example showing how to implement WalletConnectModalTheme in Android using Jetpack Compose with custom accent colors.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#2025-04-10_snippet_2

LANGUAGE: kotlin
CODE:
WalletConnectModalTheme(
    accentColor = Color(0xFF3496ff),
    onAccentColor = Color.White
) {
    ModalBottomSheetLayout() {  }
}

----------------------------------------

TITLE: Retrieving Logo Assets from Explorer API
DESCRIPTION: Example GET request to retrieve a logo image in medium size for a specific image ID.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#2025-04-10_snippet_9

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/logo/md/32a77b79-ffe8-42c3-61a7-3e02e019ca00?projectId=YOUR_PROJECT_ID

----------------------------------------

TITLE: Fetching Wallet Listings from Explorer API
DESCRIPTION: Example GET request to retrieve wallet listings from the Explorer API with pagination parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#2025-04-10_snippet_0

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/wallets?projectId=YOUR_PROJECT_ID&entries=5&page=1

----------------------------------------

TITLE: Installing WalletConnect Client for Flutter
DESCRIPTION: Command to install the WalletConnect client package in a Flutter project using pub. Also includes instructions for platform-specific setup, particularly for MacOS.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#2025-04-10_snippet_3

LANGUAGE: dart
CODE:
flutter pub add walletconnect_flutter_v2

LANGUAGE: xml
CODE:
<key>com.apple.security.network.client</key>
<true/>

----------------------------------------

TITLE: Getting Current Theme Mode in AppKit
DESCRIPTION: Demonstrates how to retrieve the current theme mode setting from the AppKit modal.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#2025-04-10_snippet_7

LANGUAGE: typescript
CODE:
const modal = createAppKit({ wagmiConfig, projectId });

const themeMode = modal.getThemeMode();

----------------------------------------

TITLE: Retrieving All Subscribers using Fetch API in JavaScript
DESCRIPTION: This TypeScript code demonstrates how to retrieve all subscribers using the Fetch API. It shows how to make the API call and parse the response as an array of subscriber account IDs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
const PROJECT_ID = "<PROJECT_ID>";
const NOTIFY_API_SECRET = "<NOTIFY_API_SECRET>";
const response = await fetch(
  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,
  {
    headers: {
      Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    },
  }
);
const subscribers: string[] = await response.json();

----------------------------------------

TITLE: Enabling Swaps Feature in ReOwn AppKit
DESCRIPTION: Explicitly enables the swap feature in AppKit, which is enabled by default.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#2025-04-10_snippet_20

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  features: {
    swaps: true,
  },
});

----------------------------------------

TITLE: Defining Bitcoin Account Derivation Path
DESCRIPTION: Shows the standard BIP44/49/84/86 derivation path structure used to generate Bitcoin addresses. The path includes purpose, coin type, account, change and address index levels.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/bitcoin-rpc.mdx#2025-04-10_snippet_0

LANGUAGE: text
CODE:
m / purpose' / coin_type' / account' / change / address_index

----------------------------------------

TITLE: Updating Import Statements in React
DESCRIPTION: Code changes for import statements when migrating from Web3Modal to Reown AppKit in React applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
// Remove the following imports
- import { createWeb3Modal, defaultConfig } from '@web3modal/ethers/react'
- import { arbitrum, mainnet } from 'viem/chains'

// Add the following imports
+ import { createAppKit } from '@reown/appkit/react'
+ import { arbitrum, mainnet } from '@reown/appkit/networks'
+ import { EthersAdapter } from '@reown/appkit-adapter-ethers'

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX
DESCRIPTION: This code snippet imports a Verify component from a specific path and renders it within the page. It's likely part of a documentation system using MDX or a similar technology that allows embedding React components in Markdown.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/cloud/verify.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import Verify from "/snippets/cloud/verify.mdx";

<Verify />

----------------------------------------

TITLE: Rendering Get Balance Button in React Component
DESCRIPTION: Renders a button that triggers the balance retrieval function when clicked. The button is only rendered if the user is connected to a wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#2025-04-10_snippet_7

LANGUAGE: jsx
CODE:
return (
  isConnected && (
    <div>
      <button onClick={handleGetBalance}>Get Balance</button>
    </div>
  )
);

----------------------------------------

TITLE: Opening AppKit Using Web Components in HTML
DESCRIPTION: Demonstrates how to use the built-in appkit-button web component to open AppKit. Web components are global HTML elements that don't require importing.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Installing AppKit CLI
DESCRIPTION: Command to install and run the AppKit CLI for easy setup of a minimal AppKit version.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npx @reown/appkit-cli

----------------------------------------

TITLE: Complete Policy Example with ABI Parsing
DESCRIPTION: A complete example of a policy that validates callData based on both the target contract address and method names. It demonstrates the use of logical operators (AND/OR) and ABI references for method validation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/paymaster.mdx#2025-04-10_snippet_4

LANGUAGE: json
CODE:
{
  "policyType": "useroperation_payload_control", /* currently the only one supported */
  "policyStaticProps": {
    "contract1": {
      "abi": [...Contract ABI goes here]
    }
  }

  "params": {
    "key": "callData",
    "op": "callDataToEquals",
    "value": "0xa123cd918..."
  },
  "ands": [
    {
      "params": {
        "key": "callData",
        "op": "callDataMethodEquals",
        "value": "methodFoo"
      },
      "metadata": {
        "contractAbi": "<contract1.abi>"
      }
    }
  ],
  "ors": [
    {
      "params": {
        "key": "callData",
        "op": "callDataMethodEquals",
        "value": "methodBar"
      },
      "metadata": {
        "contractAbi": "<contract1.abi>"
      }
    },
    {
      "params": {
        "key": "callData",
        "op": "callDataMethodEquals",
        "value": "methodBaz"
      },
      "metadata": {
        "contractAbi": "<contract1.abi>"
      }
    },
  ]
}

----------------------------------------

TITLE: Using AppKit Connection Hook for Solana
DESCRIPTION: Hook that provides access to the Solana connection object for blockchain interactions
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/hooks.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import { useAppKitConnection } from '@reown/appkit-adapter-solana/react'

...

const { connection } = useAppKitConnection()

----------------------------------------

TITLE: Fetching dApp Listings from Explorer API
DESCRIPTION: Example GET request to retrieve dApp listings from the Explorer API with pagination parameters.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#2025-04-10_snippet_2

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/dapps?projectId=YOUR_PROJECT_ID&entries=5&page=1

----------------------------------------

TITLE: Approving Session Proposals on Web and React Native
DESCRIPTION: This TypeScript code demonstrates how to approve a session proposal on Web or React Native platforms. It uses walletKit.approveSession and includes error handling to update the UI appropriately for success or failure states.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#2025-04-10_snippet_6

LANGUAGE: typescript
CODE:
try {
    await walletKit.approveSession(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

----------------------------------------

TITLE: Importing Blockchain API Documentation in MDX
DESCRIPTION: Imports and renders blockchain API documentation component from a snippets directory.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/cloud/blockchain-api.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Blockchain API
---

import BlockchainAPI from "/snippets/cloud/blockchain-api.mdx";

<BlockchainAPI />

----------------------------------------

TITLE: Creating Wagmi Adapter for AppKit in Vue
DESCRIPTION: This snippet demonstrates how to create a Wagmi adapter for AppKit in Vue. It sets up the project ID, metadata, and initializes the WagmiAdapter with specified networks.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_15

LANGUAGE: typescript
CODE:
const projectId = 'YOUR_PROJECT_ID'

const metadata = { //optional
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://example.com',
    icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const wagmiAdapter = new WagmiAdapter({
  networks: [mainnet, arbitrum],
  projectId
})

----------------------------------------

TITLE: JavaScript Implementation for Modal Trigger
DESCRIPTION: JavaScript code showing how to trigger the Reown AppKit modal with a button click event.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
document.getElementById('my-button').addEventListener('click', () => {
    modal.open()
})

<button id="my-button">Connect Wallet</button>

----------------------------------------

TITLE: Notification Object Structure
DESCRIPTION: Defines the TypeScript interface for the notification object returned by the useNotifications hook. It includes properties for the notification content and a method to mark it as read.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#2025-04-10_snippet_10

LANGUAGE: typescript
CODE:
{
  title: string
  sentAt: number
  body: string
  id: string
  isRead: boolean
  url: string | null
  type: string
  markAsRead: () => Promise<void>
}

----------------------------------------

TITLE: Importing Blockchain API Documentation Component
DESCRIPTION: Imports and renders a BlockchainAPI component from the snippets directory for displaying blockchain API documentation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/cloud/blockchain-api.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Blockchain API
---

import BlockchainAPI from "/snippets/cloud/blockchain-api.mdx";

<BlockchainAPI />

----------------------------------------

TITLE: Initializing WalletConnect Sign Client in Wallet Applications
DESCRIPTION: Code for initializing the WalletConnect SignClient with project ID and optional parameters including relay URL and wallet metadata. This is the first step in implementing WalletConnect in a wallet application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
const signClient = await SignClient.init({
  projectId: "<YOUR PROJECT ID>",
  // optional parameters
  relayUrl: "<YOUR RELAY URL>",
  metadata: {
    name: "Wallet name",
    description: "A short description for your wallet",
    url: "<YOUR WALLET'S URL>",
    icons: ["<URL TO WALLET'S LOGO/ICON>"],
  },
});

----------------------------------------

TITLE: Importing and Rendering Sponsored Transactions Documentation Component in JSX
DESCRIPTION: This code imports a shared MDX component containing documentation about sponsored transactions and renders it on the page. The component is imported from a specific path in the snippets directory and then rendered directly in the JSX.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/transactions/sponsored-transactions.mdx#2025-04-10_snippet_0

LANGUAGE: jsx
CODE:
import SponsoredTransactions from "/snippets/appkit/shared/sponsored-transactions.mdx";

<SponsoredTransactions />

----------------------------------------

TITLE: Extracting Address from SIWE Message
DESCRIPTION: Example of using the SIWEUtils utility to extract the user's address from a SIWE message.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#2025-04-10_snippet_7

LANGUAGE: javascript
CODE:
SIWEUtils.getAddressFromMessage(message);

----------------------------------------

TITLE: Handling Deeplinks for WalletConnect in Swift
DESCRIPTION: Processes deeplink URLs that may contain WalletConnect-related data. This is essential for handling callbacks from wallet applications.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#2025-04-10_snippet_6

LANGUAGE: swift
CODE:
AppKit.instance.handleDeeplink(url)

----------------------------------------

TITLE: Disabling WalletConnect Explorer in TypeScript
DESCRIPTION: This code snippet demonstrates how to disable the WalletConnect explorer functionality, which is responsible for fetching wallets from WalletGuide. By default, this feature is enabled, but setting 'enableExplorer' to false will turn it off.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/enableExplorer.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
enableExplorer: false

----------------------------------------

TITLE: Fetching Subscription Notifications in Swift
DESCRIPTION: Retrieves the notification history for a specific subscription topic. Returns an array of NotifyMessageRecord objects representing the current state of notify messages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#2025-04-10_snippet_5

LANGUAGE: swift
CODE:
public func getMessageHistory(topic: String) -> [NotifyMessageRecord]

----------------------------------------

TITLE: Manually Connecting and Disconnecting iOS Relay Client
DESCRIPTION: Methods for manually establishing and closing websocket connections when using manual connection type in iOS.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/relay.mdx#2025-04-10_snippet_4

LANGUAGE: swift
CODE:
try Networking.instance.connect()

LANGUAGE: swift
CODE:
try Networking.instance.disconnect()

----------------------------------------

TITLE: Importing Modules for Message Signing
DESCRIPTION: Imports the necessary modules for signing messages with a Solana wallet, including the AppKit provider hook and the Provider type from the Solana adapter.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
import { useAppKitProvider } from "@reown/appkit/react";
import type { Provider } from "@reown/appkit-adapter-solana/react";

----------------------------------------

TITLE: Vue Implementation - Main Entry Configuration
DESCRIPTION: Vue application entry point configuration with Vue Query initialization.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#2025-04-10_snippet_3

LANGUAGE: tsx
CODE:
import { createApp } from "vue";
import { QueryClient, VueQueryPlugin } from "@tanstack/vue-query";
import App from "./App.vue";

const queryClient = new QueryClient();

createApp(App)
  .use(VueQueryPlugin, { queryClient })
  .mount("#app");

----------------------------------------

TITLE: WalletConnect OpenOptions Interface Definition
DESCRIPTION: TypeScript interface defining the OpenOptions object that can be passed to openModal. It requires a URI and optionally accepts CAIP-2 compliant chain IDs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#2025-04-10_snippet_14

LANGUAGE: typescript
CODE:
interface OpenOptions {
  // Uri that will be used to generate qrcode and mobile links, required
  uri: string;
  // CAIP-2 compliant chain ids to override initial chains defined when creating the modal
  // Learn about CAIP-10: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md
  chains?: string[];
}

----------------------------------------

TITLE: Updating Wallet Button Component
DESCRIPTION: Replacing the Anza Adapter's WalletMultiButton with AppKit's web component button in the React component.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#2025-04-10_snippet_5

LANGUAGE: tsx
CODE:
const Content: FC = () => {

-   return <WalletMultiButton />;

+   return <appkit-button />

};

----------------------------------------

TITLE: Fetching All Chains from Explorer API
DESCRIPTION: Example GET request to retrieve all chains registered under CASA Namespace and approved via the Add Chain issue template.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#2025-04-10_snippet_6

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/chains?projectId=YOUR_PROJECT_ID

----------------------------------------

TITLE: Setting Up WalletConnect Event Listeners for Session Management
DESCRIPTION: Implementation of event listeners for WalletConnect SignClient events including session proposals, events, requests, pings, and deletions. These listeners are essential for handling the complete session lifecycle in a wallet application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_1

LANGUAGE: typescript
CODE:
signClient.on("session_proposal", (event) => {
  // Show session proposal data to the user i.e. in a modal with options to approve / reject it

  interface Event {
    id: number;
    params: {
      id: number;
      expiry: number;
      relays: Array<{
        protocol: string;
        data?: string;
      }>;
      proposer: {
        publicKey: string;
        metadata: {
          name: string;
          description: string;
          url: string;
          icons: string[];
        };
      };
      requiredNamespaces: Record<
        string,
        {
          chains: string[];
          methods: string[];
          events: string[];
        }
      >;
      pairingTopic?: string;
    };
  }
});

signClient.on("session_event", (event) => {
  // Handle session events, such as "chainChanged", "accountsChanged", etc.

  interface Event {
    id: number;
    topic: string;
    params: {
      event: {
        name: string;
        data: any;
      };
      chainId: string;
    };
  }
});

signClient.on("session_request", (event) => {
  // Handle session method requests, such as "eth_sign", "eth_sendTransaction", etc.

  interface Event {
    id: number;
    topic: string;
    params: {
      request: {
        method: string;
        params: any;
      };
      chainId: string;
    };
  }
});

signClient.on("session_ping", (event) => {
  // React to session ping event

  interface Event {
    id: number;
    topic: string;
  }
});

signClient.on("session_delete", (event) => {
  // React to session delete event

  interface Event {
    id: number;
    topic: string;
  }
});

----------------------------------------

TITLE: Opening Modal Views with TypeScript in Reown
DESCRIPTION: Demonstrates how to use the `open` function to select and display different views in the Reown modal. Examples include opening the Account view, Connect view for multiple wallets, and Connect view for specific blockchain networks (Solana, Bitcoin, Ethereum).
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/core/open.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
open({ view: "Account" });

// to connect and show multi wallets view
open({ view: "Connect" });

// to connect and show only solana wallets
open({ view: "Connect", namespace: "solana" });

// to connect and show only bitcoin wallets
open({ view: "Connect", namespace: "bip122" });

// to connect and show only ethereum wallets
open({ view: "Connect", namespace: "eip155" });

----------------------------------------

TITLE: Opening On-Ramp Modal with AppKit
DESCRIPTION: Demonstrates how to programmatically open the On-Ramp providers modal using the AppKit hook. Uses the useAppKit hook to access the open function and triggers the OnRampProviders view.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/transactions/onramp.mdx#2025-04-10_snippet_0

LANGUAGE: javascript
CODE:
const { open } = useAppKit()

open({ view: 'OnRampProviders' })

----------------------------------------

TITLE: Setting Up Event Listeners for NotifyClient
DESCRIPTION: Code to establish event listeners for handling subscription events, incoming notifications, subscription updates, and subscription changes.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_3

LANGUAGE: javascript
CODE:
// Handle response to a `notifyClient.subscribe(...)` call
notifyClient.on("notify_subscription", async ({ params }) => {
  const { error } = params;

  if (error) {
    // Setting up the subscription failed.
    // Inform the user of the error and/or clean up app state.
    console.error("Setting up subscription failed: ", error);
  } else {
    // New subscription was successfully created.
    // Inform the user and/or update app state to reflect the new subscription.
    console.log(`Subscribed successfully.`);
  }
});

// Handle an incoming notification
notifyClient.on("notify_message", ({ params }) => {
  const { message } = params;
  // e.g. build a notification using the metadata from `message` and show to the user.
});

// Handle response to a `notifyClient.update(...)` call
notifyClient.on("notify_update", ({ params }) => {
  const { error } = params;

  if (error) {
    // Updating the subscription's scope failed.
    // Inform the user of the error and/or clean up app state.
    console.error("Setting up subscription failed: ", error);
  } else {
    // Subscription's scope was updated successfully.
    // Inform the user and/or update app state to reflect the updated subscription.
    console.log(`Successfully updated subscription scope.`);
  }
});

// Handle a change in the existing subscriptions (e.g after a subscribe or update)
notifyClient.on("notify_subscriptions_changed", ({ params }) => {
  const { subscriptions } = params;
  // `subscriptions` will contain any *changed* subscriptions since the last time this event was emitted.
  // To get a full list of subscriptions for a given account you can use `notifyClient.getActiveSubscriptions({ account: 'eip155:1:0x63Be...' })`
});

----------------------------------------

TITLE: Defining Mobile Wallet Configuration in TypeScript
DESCRIPTION: Demonstrates the structure for configuring custom mobile wallets with wallet ID, name, and deeplink URLs. Configuration requires both native deeplink URLs (e.g. rainbow://) and universal web links for fallback, along with corresponding wallet images to be added in walletImages.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/mobileWallets.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
mobileWallets: [
  {
    id: string,
    name: string,
    links: {
      native: string
      universal: string,
    },
  },
];

----------------------------------------

TITLE: Implementing Message Signing for Notify API in Swift
DESCRIPTION: Creates a CacaoSignature using a private key and the MessageSignerFactory. This function is used to sign SIWE messages for account registration with the Notify API.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#2025-04-10_snippet_2

LANGUAGE: swift
CODE:
func onSign(message: String) -> CacaoSignature {
    let privateKey = Data(hex: privateKey)
    let signer = MessageSignerFactory(signerFactory: DefaultSignerFactory()).create()
    let signature = try! signer.sign(message: message, privateKey: privateKey, type: .eip191)
    return signature
}

----------------------------------------

TITLE: Initializing Notify Client with CoreClient in Android
DESCRIPTION: Sets up the Notify client by initializing it with a project ID and Core Client. This is typically done in the Android Application class. The CoreClient must be initialized first with project and application metadata.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#2025-04-10_snippet_0

LANGUAGE: kotlin
CODE:
val projectId = PROJECT_ID
val appMetaData = Core.Model.AppMetaData(
    name = /* The name of your project as a String */,
    description = /* A description of your project as a String */,
    url = /* A url for your project as a String */,
    icons = /* A list of URLs to icons related to your project as Strings */,
    redirect = /* A redirect URI used by Dapps to deeplink back to your wallet. This is a String value  */
)

CoreClient.initialize(projectId = projectId, connectionType = ConnectionType.AUTOMATIC, application = this, metaData = appMetaData)

Notify.initialize(init = Notify.Params.Init(core = CoreClient) { error: Notify.Model.Error ->
    // Error will be thrown if there's an issue during initialization
}

----------------------------------------

TITLE: Rendering Balance Button Component
DESCRIPTION: Renders a button to trigger the balance fetch function when the user is connected. The button is only displayed when isConnected is true.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#2025-04-10_snippet_4

LANGUAGE: jsx
CODE:
return (
  isConnected && (
    <div>
      <button onClick={getBalance}>Get Balance</button>
    </div>
  )
);

----------------------------------------

TITLE: Enabling Deep Linking in Flutter iOS Configuration
DESCRIPTION: Additional configuration required in iOS Info.plist for Flutter applications to enable deep linking functionality.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#2025-04-10_snippet_2

LANGUAGE: xml
CODE:
<key>FlutterDeepLinkingEnabled</key>
<true/>

----------------------------------------

TITLE: Monitoring WebSocket Connection State in Swift
DESCRIPTION: Demonstrates how to subscribe to the socket connection status publisher to track and handle changes in the WebSocket connection state.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#2025-04-10_snippet_8

LANGUAGE: swift
CODE:
WalletKit.instance.socketConnectionStatusPublisher
    .receive(on: DispatchQueue.main)
    .sink { status in
    switch status {
    case .connected:
        // ...
    case .disconnected:
        // ...
    }
}.store(in: &publishers)

----------------------------------------

TITLE: Implementing AppKit Button Using Web Component
DESCRIPTION: Shows how to implement the AppKit button using the web component approach. This method uses a simple self-contained component that doesn't require explicit imports.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers/about/triggermodal.mdx#2025-04-10_snippet_0

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />;
}

----------------------------------------

TITLE: Registering WalletKit Session Event Handlers
DESCRIPTION: Sets up event emitters for chain and account change events across multiple chains.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#2025-04-10_snippet_11

LANGUAGE: javascript
CODE:
final supportedChains = ['eip155:1', 'eip155:137'];
const supportedEvents = ['chainChanged', 'accountChanged'];
for (var chainId in supportedChains) {
  for (var event in supportedEvents) {
    _walletKit.registerEventEmitter(
      chainId: chainId,
      event: event,
    );
  }
}

----------------------------------------

TITLE: Implementing Wallet List Component in React
DESCRIPTION: This code defines a React component that fetches wallet data, renders a list of wallets, and provides search functionality. It uses the WalletConnect API to retrieve wallet information and includes features like copying wallet IDs to the clipboard.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/walletlist.mdx#2025-04-10_snippet_0

LANGUAGE: JavaScript
CODE:
export const WalletList = () => {
  let wallets = [];
  let originalWalletsArray = [];

  if (typeof document !== "undefined") {
    fetch(
      "https://explorer-api.walletconnect.com/v3/wallets?projectId=8e998cd112127e42dce5e2bf74122539"
    )
      .then((response) => response.json())
      .then((data) => {
        wallets = data.listings;
        originalWalletsArray = Object.keys(data.listings).map((key) => ({
          ...data.listings[key],
          namespace: key,
        }));
        renderWallets(wallets);

        const searchInput = document.querySelector(".search-bar");
        if (searchInput) {
          searchInput.addEventListener("input", (event) => {
            const query = event.target.value.toLowerCase();
            const filteredwallets = Object.fromEntries(
              Object.entries(wallets).filter(([_, wallet]) =>
                wallet.name.toLowerCase().includes(query)
              )
            );
            renderWallets(filteredwallets);
          });
        }
      })
      .catch((error) => console.error(error));
  }

  const renderWallets = (wallets) => {
    const container = document.querySelector(".wallet-card-container");
    if (container) {
      container.innerHTML = "";
      Object.keys(wallets).forEach((key) => {
        const wallet = wallets[key];
        const card = document.createElement("button");
        card.className = `
          flex flex-col items-center justify-center 
          border border-gray-500 p-2 text-center 
          w-full dark:bg-gray-600 dark:text-white h-20
        `;
        card.innerHTML = `
          <img src="${wallet.image_url.sm}" width="40" height="40" class="p-0 m-0" alt="${wallet.name}" />
          <span>${wallet.name}</span>
        `;
        card.onclick = () => {
          navigator.clipboard.writeText(wallet.id);
          card.innerHTML = "Wallet ID copied!";
          setTimeout(() => {
            card.innerHTML = `
              <img src="${wallet.image_url.sm}" width="40" height="40" class="p-0 m-0" alt="${wallet.name}" />
              <span>${wallet.name}</span>
            `;
          }, 3000);
        };
        container.appendChild(card);
      });
    }
  };

  return (
    <div className="wallet-list">
      <input
        type="text"
        className="search-bar"
        placeholder="Search for a wallet..."
        style={{
          width: "100%",
          padding: "8px",
          marginBottom: "20px",
          marginTop: "20px",
          boxSizing: "border-box",
        }}
      />
      <div
        className="wallet-card-container"
        style={{
          display: "grid",
          gridTemplateColumns: "repeat(auto-fill, minmax(200px, 1fr))",
          gap: "8px",
        }}
      ></div>
    </div>
  );
};

----------------------------------------

TITLE: Client Connection Setup in Swift
DESCRIPTION: Demonstrates how to set up client connection using URI pairing in Swift.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_9

LANGUAGE: swift
CODE:
try await Pair.instance.pair(uri: uri)

----------------------------------------

TITLE: Approving a Session with Single Account in C#
DESCRIPTION: Another simplified approach for session approval when only one account is being connected. The SDK handles the namespace configuration automatically.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#2025-04-10_snippet_10

LANGUAGE: csharp
CODE:
sdk.SessionProposed += async (sender, @event) =>
{
    var proposal = @event.Proposal;

    var sessionData = await sdk.ApproveSession(proposal, "eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb");
    var sessionTopic = sessionData.Topic;
};

----------------------------------------

TITLE: Subscribing to Notify Events in iOS
DESCRIPTION: These properties provide publishers for various Notify events such as new subscriptions, messages, subscription deletions, updates, and active subscriptions.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_16

LANGUAGE: swift
CODE:
public var newSubscriptionPublisher: AnyPublisher<NotifySubscription, Never> {

public var notifyMessagePublisher: AnyPublisher<PushMessage, Never>

public var deleteSubscriptionPublisher: AnyPublisher<String, Never>

public var updateSubscriptionPublisher: AnyPublisher<Result<PushSubscription, Error>, Never> {

public var subscriptionsPublisher: AnyPublisher<[PushSubscription], Never>

----------------------------------------

TITLE: Launching Connected Wallet App in Swift
DESCRIPTION: Opens the wallet application that is currently connected to the dApp. This allows users to quickly access their wallet from within the application.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#2025-04-10_snippet_5

LANGUAGE: swift
CODE:
AppKit.instance.launchCurrentWallet()

----------------------------------------

TITLE: Handling Link Mode URL Dispatch in Kotlin
DESCRIPTION: Processes incoming app links by dispatching the URL to WalletKit for handling. Should be implemented in the Activity's onCreate and onNewIntent methods.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/link-mode.mdx#2025-04-10_snippet_1

LANGUAGE: kotlin
CODE:
val url = intent.dataString
WalletKit.dispatchEnvelope(url) { error -> 
    //handle error
}

----------------------------------------

TITLE: Registering CustomFirebaseService in AndroidManifest.xml
DESCRIPTION: This XML snippet shows how to register the CustomFirebaseService in the AndroidManifest.xml file. This registration is necessary for the Notify SDK to handle push notifications in the background.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_22

LANGUAGE: xml
CODE:
<application...>
    <service android:name=".CustomFirebaseService">
        <intent-filter>
            <action android:name="com.google.firebase.MESSAGING_EVENT" />
        </intent-filter>
    </service>
</application>

----------------------------------------

TITLE: Subscribing to WalletConnect Session-specific Events in JavaScript
DESCRIPTION: These events are exclusive to the WalletConnect protocol and provide updates about session states like expiration, updates, and events. They won't trigger when connected via Coinbase Wallet, Email, or Social Login.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/events.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
_appKitModal.onSessionExpireEvent.subscribe((SessionExpire? event) {});

_appKitModal.onSessionUpdateEvent.subscribe((SessionUpdate? event) {});

_appKitModal.onSessionEventEvent.subscribe((SessionEvent? event) {});

----------------------------------------

TITLE: Updating package.json dependencies for WalletKit migration
DESCRIPTION: Replace the @walletconnect/web3wallet dependency with @reown/walletkit in the package.json file. This step updates the project's dependencies to use the new WalletKit package.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-web.mdx#2025-04-10_snippet_0

LANGUAGE: json
CODE:
{
/* highlight-delete-start */
"@walletconnect/web3wallet": "^x.y.z"
/* highlight-delete-end */
/* highlight-add-start */
"@reown/walletkit": "^1.0.0"
/* highlight-add-end */
}

----------------------------------------

TITLE: Rejecting WalletConnect Session in JavaScript
DESCRIPTION: Demonstrates how to reject a session proposal using the rejectSession method with a reason from getSdkError.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#2025-04-10_snippet_4

LANGUAGE: javascript
CODE:
walletKit.on(
  "session_proposal",
  async (proposal: WalletKitTypes.SessionProposal) => {
    await walletKit.rejectSession({
      id: proposal.id,
      reason: getSdkError("USER_REJECTED_METHODS"),
    });
  }
);

----------------------------------------

TITLE: Importing Analytics Component in MDX
DESCRIPTION: Demonstrates importing and using an Analytics component in an MDX documentation page using a relative import path.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/cloud/analytics.mdx#2025-04-10_snippet_0

LANGUAGE: mdx
CODE:
---
title: Analytics
---

import Analytics from "/snippets/cloud/analytics.mdx";

<Analytics />

----------------------------------------

TITLE: ERC1271 Smart Contract Interface for Signature Validation
DESCRIPTION: This code shows the EIP-1271 interface that smart contract wallets implement. The isValidSignature function allows on-chain verification of signatures created by smart contract wallets, returning a magic value when valid.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/smart-contract-wallet-usage.mdx#2025-04-10_snippet_2

LANGUAGE: text
CODE:
contract ERC1271 {
  bytes4 constant internal MAGICVALUE = 0x1626ba7e;

  function isValidSignature(
    bytes32 _hash,
    bytes memory _signature
  )
    public
    view
    returns (bytes4 magicValue);
}

----------------------------------------

TITLE: Marking All Notifications as Read for Different Domain
DESCRIPTION: Shows how to mark all notifications as read for a specific domain while using the default account.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#2025-04-10_snippet_8

LANGUAGE: typescript
CODE:
// mark all notifications as read for default account under specified domain
await markAllNotificationsAsRead(undefined, differentDomain)

----------------------------------------

TITLE: Approving Authentication Requests in Swift
DESCRIPTION: Code to approve an authentication request from a dApp. Uses the auth objects to establish an authenticated session.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_19

LANGUAGE: swift
CODE:
let session = try await Sign.instance.approveSessionAuthenticate(requestId: requestId, auths: authObjects)

----------------------------------------

TITLE: Defining Request Body Type for Notify API in TypeScript
DESCRIPTION: This TypeScript code defines the structure of the request body for the Notify API. It includes fields for notification_id, notification details (type, title, body, url), and a list of account IDs.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
type RequestBody = {
  notification_id?: string | null;
  notification: {
    type: string;
    title: string;
    body: string;
    url?: string | null;
  };
  accounts: string[];
};

----------------------------------------

TITLE: Registering for Push Notifications in iOS
DESCRIPTION: This function requests authorization for push notifications and registers the app with Apple Push Notification service. It should be called early in the app's lifecycle.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_14

LANGUAGE: swift
CODE:
func registerForPushNotifications() {
    UNUserNotificationCenter.current()
        .requestAuthorization(
            options: [.alert, .sound, .badge]
        ) { granted, error in
            guard granted else { return }
            DispatchQueue.main.async {
                UIApplication.shared.registerForRemoteNotifications()
            }
        }
}

----------------------------------------

TITLE: Starting the Development Server
DESCRIPTION: Command to start the development server for the migrated AppKit project.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#2025-04-10_snippet_12

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Installing WalletConnectModal for React Native CLI
DESCRIPTION: Commands for installing the WalletConnectModal package for React Native using different JavaScript package managers.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_6

LANGUAGE: bash
CODE:
npm install @walletconnect/modal-react-native

LANGUAGE: bash
CODE:
yarn add @walletconnect/modal-react-native

LANGUAGE: bash
CODE:
bun a @walletconnect/modal-react-native

LANGUAGE: bash
CODE:
pnpm add @walletconnect/modal-react-native

----------------------------------------

TITLE: Enabling Authentication-Only Mode in Reown Modal
DESCRIPTION: Configuration option to enable authentication-only mode for the Reown modal. When set to true, this adjusts which wallets are fetched from the explorer. The default value is false if not specified.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/enableAuthMode.mdx#2025-04-10_snippet_0

LANGUAGE: typescript
CODE:
enableAuthMode: true

----------------------------------------

TITLE: Emitting Chain Change Event in JavaScript
DESCRIPTION: Shows how to emit a session event to notify about chain changes in the wallet.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#2025-04-10_snippet_13

LANGUAGE: javascript
CODE:
await walletKit.emitSessionEvent({
  topic,
  event: {
    name: "chainChanged",
    data: 1,
  },
  chainId: "eip155:1",
});

----------------------------------------

TITLE: Updating Hook Imports for Wagmi
DESCRIPTION: Updates to hook imports, replacing Web3Modal hooks with equivalent Reown AppKit hooks
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#2025-04-10_snippet_2

LANGUAGE: tsx
CODE:
import {
  useAppKit,
  useAppKitState,
  useAppKitEvents,
  useWalletInfo,
} from "@reown/appkit-wagmi-react-native";

----------------------------------------

TITLE: Installing Additional Dependencies for React Native with Expo
DESCRIPTION: This command installs extra packages to support async storage, polyfills, SVGs, and other functionalities in a React Native project with Expo.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/installation-expo.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npx expo install @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat expo-application

----------------------------------------

TITLE: Creating Environment File for Project ID
DESCRIPTION: Setting up an environment file to store the project ID for AppKit configuration.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#2025-04-10_snippet_6

LANGUAGE: bash
CODE:
VITE_PROJECT_ID=<Add_your_project_id>

----------------------------------------

TITLE: Estimating Gas Limits Before Transaction Submission
DESCRIPTION: To set gas limits without asynchronous calls during transaction sending, manually estimate gas using provider.estimateGas and store the result before the user attempts to send the transaction.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/mobile-linking.mdx#2025-04-10_snippet_5

LANGUAGE: javascript
CODE:
provider.estimateGas(tx)

----------------------------------------

TITLE: Rejecting a Session in TypeScript with WalletKit
DESCRIPTION: Shows how to reject a session proposal using WalletKit, including error handling and UI updates.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#2025-04-10_snippet_3

LANGUAGE: typescript
CODE:
try {
    await walletKit.rejectSession(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

----------------------------------------

TITLE: Marking All Notifications as Read for Custom Account and Domain
DESCRIPTION: Shows how to mark all notifications as read for a specific account under a specific domain.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#2025-04-10_snippet_9

LANGUAGE: typescript
CODE:
// mark all notifications as read for specified account under specified domain
await markAllNotificationsAsRead(differentAccount, differentDomain)

----------------------------------------

TITLE: Rejecting a Session Proposal in WalletConnect using C#
DESCRIPTION: Rejects a connection proposal with a reason message, terminating the connection request.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#2025-04-10_snippet_40

LANGUAGE: csharp
CODE:
await walletClient.Reject(proposal, "User rejected");

----------------------------------------

TITLE: Installing Additional Dependencies for React Native Expo
DESCRIPTION: This command installs several additional packages needed for async storage, polyfills, SVG support, and other functionalities in a React Native Expo project using Reown AppKit.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/installation-expo.mdx#2025-04-10_snippet_1

LANGUAGE: bash
CODE:
npx expo install @ethersproject/shims@5.7.0 @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat expo-application

----------------------------------------

TITLE: Configuring WalletConnect Notify for iOS
DESCRIPTION: Swift code to configure the Notify instance for an iOS application, requiring environment specification and a CryptoProvider implementation.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#2025-04-10_snippet_13

LANGUAGE: swift
CODE:
try Notify.configure(environment: APNSEnvironment, crypto: CryptoProvider)

----------------------------------------

TITLE: Initializing WalletConnect SignClient
DESCRIPTION: Setup of WalletConnect SignClient with project configuration and metadata.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#2025-04-10_snippet_1

LANGUAGE: javascript
CODE:
import SignClient from "@walletconnect/sign-client";

const signClient = await SignClient.init({
  projectId: "<YOUR_PROJECT_ID>",
  // optional parameters
  relayUrl: "<YOUR RELAY URL>",
  metadata: {
    name: "Example Dapp",
    description: "Example Dapp",
    url: "#",
    icons: ["https://walletconnect.com/walletconnect-logo.png"],
  },
});

----------------------------------------

TITLE: Installing WalletConnect Modal via Git URL
DESCRIPTION: Git URL for installing WalletConnect Unity Modal package via Package Manager.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#2025-04-10_snippet_16

LANGUAGE: plaintext
CODE:
https://github.com/WalletConnect/WalletConnectUnity.git?path=Packages/com.walletconnect.modal

----------------------------------------

TITLE: Installing AppKit Wallet Button Package
DESCRIPTION: Different package manager commands for installing the @reown/appkit-wallet-button package.
SOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/components.mdx#2025-04-10_snippet_0

LANGUAGE: bash
CODE:
npm install @reown/appkit-wallet-button

LANGUAGE: bash
CODE:
yarn add @reown/appkit-wallet-button

LANGUAGE: bash
CODE:
bun a @reown/appkit-wallet-button

LANGUAGE: bash
CODE:
pnpm add @reown/appkit-wallet-button