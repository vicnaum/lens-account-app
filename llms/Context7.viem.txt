TITLE: Setting up viem Client and Transport
DESCRIPTION: Creates a public client instance with mainnet chain configuration and HTTP transport. This is the basic setup required for interacting with Ethereum.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/getting-started.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Installing Viem with Package Managers
DESCRIPTION: Commands for installing Viem using different JavaScript package managers. This is the recommended installation method for most projects.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/installation.mdx#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm add viem

LANGUAGE: bash
CODE:
npm install viem

LANGUAGE: bash
CODE:
yarn add viem

LANGUAGE: bash
CODE:
bun add viem

----------------------------------------

TITLE: Withdrawing ETH from zkSync L2 to Ethereum L1
DESCRIPTION: Initiates a withdrawal of ETH from a zkSync Layer 2 account to Ethereum Layer 1. This example shows the basic usage of the withdraw function with required parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/withdraw.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'
import { legacyEthAddress } from 'viem/zksync'

const hash = await walletClient.withdraw({
  account,
  amount: 1_000_000_000_000_000_000n,
  token: legacyEthAddress,
})

----------------------------------------

TITLE: Estimating Fees Per Gas in TypeScript
DESCRIPTION: Demonstrates how to use the estimateFeesPerGas function to get fee estimates for both EIP-1559 and legacy transactions. It shows the usage with a public client and how to specify transaction type.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateFeesPerGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const {
  maxFeePerGas,
  maxPriorityFeePerGas
} = await publicClient.estimateFeesPerGas()
// @log: {
// @log:   maxFeePerGas: 15_000_000_000n,
// @log:   maxPriorityFeePerGas: 1_000_000_000n,
// @log: }

const { gasPrice } = await publicClient.estimateFeesPerGas({
  type: 'legacy'
})
// @log: { gasPrice: 15_000_000_000n } 

----------------------------------------

TITLE: Executing viem Client Actions
DESCRIPTION: Demonstrates how to use the configured client to interact with Ethereum by fetching the current block number using the getBlockNumber action.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/getting-started.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

const blockNumber = await client.getBlockNumber()

----------------------------------------

TITLE: Initializing Viem Client and Querying Block Number in TypeScript
DESCRIPTION: This snippet demonstrates how to set up a Viem public client for the Ethereum mainnet and use it to query the current block number. It showcases the basic setup process and a simple action consumption.
SOURCE: https://github.com/wevm/viem/blob/main/README.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
// 1. Import modules.
import { createPublicClient, http } from 'viem';
import { mainnet } from 'viem/chains';

// 2. Set up your client with desired chain & transport.
const client = createPublicClient({
  chain: mainnet,
  transport: http(),
});

// 3. Consume an action!
const blockNumber = await client.getBlockNumber();

----------------------------------------

TITLE: Deploying a Contract with viem in TypeScript
DESCRIPTION: This snippet demonstrates how to deploy a contract using the walletClient.deployContract method. It requires an ABI, account, and bytecode.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { wagmiAbi } from './abi'
import { account, walletClient } from './config'

const hash = await walletClient.deployContract({
  abi,
  account,
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
})

----------------------------------------

TITLE: Executing Write Function with Simulation in TypeScript
DESCRIPTION: Demonstrates how to execute a write function on a contract using writeContract, paired with simulateContract for validation. It includes configuration for public and wallet clients, and shows how to use a JSON-RPC or local account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient, walletClient } from './config'
import { wagmiAbi } from './abi'

const { request } = await publicClient.simulateContract({
  account,
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
})
await walletClient.writeContract(request)

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  ...
] as const;

LANGUAGE: typescript
CODE:
import { createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
})

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Depositing ETH and ERC20 Tokens from L1 to L2 in zkSync using viem
DESCRIPTION: Demonstrates how to deposit ETH and ERC20 tokens from L1 to L2 using the viem library. It shows the setup of clients and accounts, and the usage of the deposit function with various parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient, zksyncClient } from './config'
import { legacyEthAddress } from 'viem/zksync'

// deposit ETH
const hash = await walletClient.deposit({
  account,
  client: zksyncClient,
  token: legacyEthAddress,
  amount: 7_000_000_000n,
  to: account.address,
  refundRecipient: account.address,
})

// deposit ERC20
const txHash = await walletClient.deposit({
    account,
    client: zksyncClient,
    token: '0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55',
    amount: 20n,
    to: account.address,
    approveToken: true,
    refundRecipient: account.address,
})

----------------------------------------

TITLE: Executing Multicall Contract Functions with Viem
DESCRIPTION: Example showing how to batch multiple contract function calls using multicall. Demonstrates calling totalSupply, ownerOf, and mint functions on a WAGMI contract.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/multicall.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'
import { wagmiAbi } from './abi'

const wagmiContract = {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi
} as const

const results = await publicClient.multicall({
  contracts: [
    {
      ...wagmiContract,
      functionName: 'totalSupply',
    },
    {
      ...wagmiContract,
      functionName: 'ownerOf',
      args: [69420n]
    },
    {
      ...wagmiContract,
      functionName: 'mint'
    }
  ]
})

----------------------------------------

TITLE: Basic Message Signing with Wallet Client
DESCRIPTION: Demonstrates basic message signing using a wallet client with both string and hex message formats. Returns an EIP-191 formatted signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signMessage.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'

const signature_1 = await walletClient.signMessage({
  account,
  message: 'hello world',
})

const signature_2 = await walletClient.signMessage({
  account,
  message: { raw: '0x68656c6c6f20776f726c64' },
})

----------------------------------------

TITLE: Migrating Provider Methods to Client Actions in viem
DESCRIPTION: Shows how to migrate from Ethers' Provider methods to viem's Public Client actions. Methods that extend off the Public Client are called Public Actions in viem.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { getDefaultProvider } from 'ethers'

const provider = getDefaultProvider()

provider.getBlock(...) // [!code hl]
provider.getTransaction(...) // [!code hl]
...

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

client.getBlock(...) // [!code hl]
client.getTransaction(...) // [!code hl]
...

----------------------------------------

TITLE: Batching Multiple Contract Read Operations with Multicall
DESCRIPTION: Demonstrates how to use the Public Client to batch multiple contract read operations into a single multicall request.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getContract } from 'viem'
import { abi } from './abi'
import { publicClient } from './client'

const contract = getContract({ address, abi, client: publicClient })

// The below will send a single request to the RPC Provider.
const [name, totalSupply, symbol, balance] = await Promise.all([
  contract.read.name(),
  contract.read.totalSupply(),
  contract.read.symbol(),
  contract.read.balanceOf([address]),
])

----------------------------------------

TITLE: Setting Nonce Parameter
DESCRIPTION: Shows how to specify the nonce parameter for the authorization hash calculation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/hashAuthorization.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { hashAuthorization } from 'viem/utils'

hashAuthorization({
  contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
  chainId: 1,
  nonce: 0,
})

----------------------------------------

TITLE: Setting up Private Key Account
DESCRIPTION: Demonstrates how to create a Private Key Account for use with the Wallet Client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'

const account = privateKeyToAccount('0x...')

----------------------------------------

TITLE: Setting up and Using Viem Client in TypeScript
DESCRIPTION: Demonstrates how to import Viem modules, set up a public client with mainnet chain and HTTP transport, and use it to fetch the current block number.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/index.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
// 1. Import modules.
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

// 2. Set up your client with desired chain & transport.
const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

// 3. Consume an action!
const blockNumber = await client.getBlockNumber()

----------------------------------------

TITLE: Writing to Contracts with Viem
DESCRIPTION: Example of writing data to a smart contract using Viem. This creates a wallet client connected to window.ethereum, gets the user's address, and calls writeContract with the mint function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_17

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { wagmiContractConfig } from './abi'

const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
})

const [address] = await walletClient.getAddresses()

const hash = await walletClient.writeContract({
  ...wagmiContractConfig,
  functionName: 'mint',
  account: address,
})

----------------------------------------

TITLE: Using stateOverride with readContract in viem
DESCRIPTION: Example of reading a contract's totalSupply function while applying state overrides. The stateOverride parameter allows for ephemeral modifications to contract state before execution, including balance and storage slots.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const data = await publicClient.readContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'totalSupply',
  stateOverride: [ 
    { 
      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
      balance: parseEther('1'), 
      stateDiff: [ 
        { 
          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0', 
          value: '0x00000000000000000000000000000000000000000000000000000000000001a4', 
        }, 
      ], 
    } 
  ], 
})

----------------------------------------

TITLE: Creating and Using a Contract Instance in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Contract Instance using the getContract function and perform various contract-related actions such as reading state, fetching events, and watching for events.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getContract } from 'viem'
import { wagmiAbi } from './abi'
import { publicClient, walletClient } from './client'

// 1. Create contract instance
const contract = getContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  // 1a. Insert a single client
  client: publicClient,
  // 1b. Or public and/or wallet clients
  client: { public: publicClient, wallet: walletClient }
})

// 2. Call contract methods, fetch events, listen to events, etc.
const result = await contract.read.totalSupply()
const logs = await contract.getEvents.Transfer()
const unwatch = contract.watchEvent.Transfer(
  { from: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e' },
  { onLogs(logs) { console.log(logs) } }
)

----------------------------------------

TITLE: Sending User Operation with Smart Account
DESCRIPTION: Demonstrates sending a User Operation to transfer ETH using a Smart Account and waiting for the receipt.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const hash = await bundlerClient.sendUserOperation({
  account,
  calls: [{
    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
    value: parseEther('0.001')
  }]
})

const receipt = await bundlerClient.waitForUserOperationReceipt({ hash })

----------------------------------------

TITLE: Fetching Transaction Receipt Example
DESCRIPTION: Demonstrates how to fetch a transaction receipt using the publicClient.getTransactionReceipt method. Returns transaction details including block hash, block number, status, and other receipt information.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionReceipt.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const transaction = await publicClient.getTransactionReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'
})

----------------------------------------

TITLE: Basic Contract Simulation in TypeScript
DESCRIPTION: Demonstrates how to use simulateContract to simulate a contract's mint function without arguments. It includes the necessary imports, ABI definition, and client configuration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'
import { wagmiAbi } from './abi'

const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account,
})

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: "mint",
    outputs: [{ name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  ...
] as const;

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

// JSON-RPC Account
export const [account] = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Using readContract with ERC20 ABI for Type Inference
DESCRIPTION: Demonstrates type inference in action when using readContract with an ERC20 ABI. This shows how TypeScript restricts function names to only read operations and provides proper typing for arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const result = await client.readContract({
  //  ^?


  address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',
  abi: erc20Abi,
  functionName: 'balanceOf',
  //         ^?
  
  

  // ↑ Notice how "transfer" is not included since it is not a "read" function

  args: ['0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c'],
  // ^?
})

----------------------------------------

TITLE: Client Configuration for Call Action in TypeScript
DESCRIPTION: Configuration setup for using the viem library with a public client connected to the Ethereum mainnet. It demonstrates how to create a public client and define an account for transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

// @log: ↓ JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'

// @log: ↓ Local Account
// export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Standalone Contract Write in TypeScript
DESCRIPTION: Demonstrates how to use writeContract function standalone without prior simulation. It includes configuration for the wallet client and shows both JSON-RPC and local account usage.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'
import { wagmiAbi } from './abi'

await walletClient.writeContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account,
})

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  ...
] as const;

LANGUAGE: typescript
CODE:
import { createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
})

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount('0x...')

----------------------------------------

TITLE: Parsing Event Logs with ABI in TypeScript using viem
DESCRIPTION: Demonstrates how to use the parseEventLogs function with a contract ABI to decode Ethereum event logs. The ABI parameter is required to identify the event signature and decode the data properly.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const topics = parseEventLogs({
  abi: wagmiAbi, // [!code focus]
  logs: [{
    blockNumber: 69420n,
    data: '0x0000000000000000000000000000000000000000000000000000000000000001',
    logIndex: 1,
    topics: [
      '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0', 
      '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', 
      '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'
    ]
    // ...
  }]
})

----------------------------------------

TITLE: Error Handling with Viem Client
DESCRIPTION: Example showing how to handle errors when fetching block numbers using Viem's typed error system. Demonstrates error type casting and checking specific error properties based on error names.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/error-handling.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { type GetBlockNumberErrorType } from 'viem'
import { client } from './client'

try {
  const blockNumber = await client.getBlockNumber()
} catch (e) {
  const error = e as GetBlockNumberErrorType
  error.name 

  if (error.name === 'InternalRpcError')
    error.code

  if (error.name === 'HttpRequestError') {
    error.headers

    error.status
  }
}

----------------------------------------

TITLE: Creating a Block Filter using viem's publicClient in TypeScript
DESCRIPTION: Creates a new block filter using the publicClient from viem. The filter returns an object with an ID and type that can be used with getFilterChanges to listen for new block hashes.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createBlockFilter.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const filter = await publicClient.createBlockFilter() // [!code focus:99]
// @log: { id: "0x345a6572337856574a76364e457a4366", type: 'block' }

----------------------------------------

TITLE: Creating an Event Filter with Specific Arguments
DESCRIPTION: Creates an event filter scoped to specific indexed arguments. This example filters Transfer events where 'from' and 'to' match specific addresses.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'

const filter = await publicClient.createEventFilter({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),
  args: {
    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'
  }
})

----------------------------------------

TITLE: Contract ABI Definition
DESCRIPTION: Defines the ABI interface for the contract including the totalSupply function signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  ...
] as const;

----------------------------------------

TITLE: Querying Block Transaction Count using viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getBlockTransactionCount function from the publicClient to retrieve the number of transactions in a block. It shows the basic usage without any parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockTransactionCount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const count = await publicClient.getBlockTransactionCount()
// @log: Output: 23

----------------------------------------

TITLE: Migrating from Web3Provider to createWalletClient in viem
DESCRIPTION: Shows how to replace Ethers' Web3Provider with viem's createWalletClient using the custom transport for window.ethereum.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const provider = new providers.Web3Provider(window.ethereum) // [!code hl]

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'

const client = createWalletClient({ // [!code hl]
  chain: mainnet, // [!code hl] 
  transport: custom(window.ethereum) // [!code hl]
}) // [!code hl]

----------------------------------------

TITLE: Using Contract Instance Methods in TypeScript
DESCRIPTION: This snippet demonstrates how to use various methods of a Contract Instance, including reading contract state, writing to the contract, and listening for events.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { getContract } from 'viem'
import { wagmiAbi } from './abi'
import { publicClient, walletClient } from './client'

const contract = getContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  client: {
    public: publicClient,
    wallet: walletClient,
  }
})

const balance = await contract.read.balanceOf([
  '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
])
const hash = await contract.write.mint([69420])
const logs = await contract.getEvents.Transfer()
const unwatch = contract.watchEvent.Transfer(
  {
    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'
  },
  { onLogs: logs => console.log(logs) }
)

----------------------------------------

TITLE: Creating Custom Account with Signing Implementation
DESCRIPTION: Demonstrates creating a custom account with implementations for signing messages, transactions, and typed data using a private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { 
  signMessage, 
  signTransaction, 
  signTypedData, 
  privateKeyToAddress,
  toAccount 
} from 'viem/accounts'

const privateKey = '0x...'

const account = toAccount({
  address: getAddress(privateKey),

  async signMessage({ message }) {
    return signMessage({ message, privateKey })
  },

  async signTransaction(transaction, { serializer }) {
    return signTransaction({ privateKey, transaction, serializer })
  },

  async signTypedData(typedData) {
    return signTypedData({ ...typedData, privateKey })
  },
})

----------------------------------------

TITLE: Extending Viem Client with Debug Functionality
DESCRIPTION: Implementation of a custom debug client that extends the base client with traceCall functionality using geth's debug_traceCall RPC method
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/custom.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { 
  createClient, 
  http,
  formatTransactionRequest,
  type CallParameters
} from 'viem'
import { mainnet } from 'viem/chains'

const debugClient = createClient({ 
  chain: mainnet,
  transport: http(),
}).extend(client => ({
  // ...
  async traceCall(args: CallParameters) {
    return client.request({
      method: 'debug_traceCall',
      params: [formatTransactionRequest(args), 'latest', {}]
    })
  },
  // ...
}))

const response = await debugClient.traceCall({
  account: '0xdeadbeef29292929192939494959594933929292',
  to: '0xde929f939d939d393f939393f93939f393929023',
  gas: 69420n,
  data: '0xf00d4b5d00000000000000000000000001291230982139282304923482304912923823920000000000000000000000001293123098123928310239129839291010293810'
})

----------------------------------------

TITLE: Simulating Contract Function Call with Authorization List in TypeScript
DESCRIPTION: Shows how to include a signed EIP-7702 Authorization list when simulating a contract function call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const authorization = await walletClient.signAuthorization({ 
  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', 
}) 

const { result } = await publicClient.simulateContract({
  address: account.address,
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  authorizationList: [authorization],
})

----------------------------------------

TITLE: Using Standalone Contract Actions in TypeScript
DESCRIPTION: This snippet shows how to perform contract actions using standalone functions instead of a Contract Instance. It includes examples of reading contract state, writing to the contract, and watching for events.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { wagmiAbi } from './abi'
import { publicClient, walletClient } from './client'

const balance = await publicClient.readContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'balanceOf',
  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']
})
const hash = await walletClient.writeContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420]
})
const unwatch = publicClient.watchContractEvent({
  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',
  abi: wagmiAbi,
  eventName: 'Transfer',
  args: {
    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'
  },
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Sending Blob Transaction with KZG Setup in TypeScript
DESCRIPTION: Illustrates how to send a blob transaction using KZG setup for EIP-4844 compatibility.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import * as cKzg from 'c-kzg'
import { toBlobs, setupKzg, stringToHex } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

const kzg = setupKzg(cKzg, mainnetTrustedSetupPath) 

const hash = await walletClient.sendTransaction({
  account,
  blobs: toBlobs({ data: stringToHex('blobby blob!') }),
  kzg,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
})

----------------------------------------

TITLE: Disabling CCIP Read in Public Client Configuration
DESCRIPTION: Configures a Public Client with CCIP Read support disabled.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const publicClient = createPublicClient({
  ccipRead: false,
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Retrieving Account Balance using getBalance in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getBalance function from the publicClient to retrieve the balance of an Ethereum address. It returns the balance as a bigint value in wei.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBalance.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const balance = await publicClient.getBalance({
  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
})
// @log: > 10000000000000000000000n (wei)

----------------------------------------

TITLE: Complete End-to-End Withdrawal Implementation
DESCRIPTION: Complete implementation showing the full withdrawal process from L2 to L1 including initiation, proving, and finalization steps. Uses Viem library to handle the withdrawal process with proper waiting periods between steps.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getWithdrawals } from 'viem/op-stack'
import { 
  account, 
  publicClientL1, 
  walletClientL1,
  publicClientL2, 
  walletClientL2 
} from './config'

const args = await publicClientL1.buildInitiateWithdrawal({
  to: account.address,
  value: parseEther('1')
})
 
const hash = await walletClientL2.initiateWithdrawal(args)

const receipt = await publicClientL2.waitForTransactionReceipt({ hash })

const { output, withdrawal } = await publicClientL1.waitToProve({
  receipt,
  targetChain: walletClientL2.chain
})

const proveArgs = await publicClientL2.buildProveWithdrawal({
  output,
  withdrawal,
})

const proveHash = await walletClientL1.proveWithdrawal(proveArgs)

const proveReceipt = await publicClientL1.waitForTransactionReceipt({
  hash: proveHash
})

await publicClientL1.waitToFinalize({
  targetChain: walletClientL2.chain,
  withdrawalHash: withdrawal.withdrawalHash,
})

const finalizeHash = await walletClientL1.finalizeWithdrawal({
  targetChain: walletClientL2.chain,
  withdrawal,
})

const finalizeReceipt = await publicClientL1.waitForTransactionReceipt({
  hash: finalizeHash
})

----------------------------------------

TITLE: Creating Public and Wallet Clients in TypeScript
DESCRIPTION: This snippet shows how to create public and wallet clients using viem's createPublicClient and createWalletClient functions. It includes examples for both Metamask and WalletConnect integrations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, http, custom } from 'viem'
import { mainnet } from 'viem/chains'
import { EthereumProvider } from '@walletconnect/ethereum-provider'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http(),
})

// eg: Metamask
export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!),
})

// eg: WalletConnect
const provider = await EthereumProvider.init({
  projectId: "abcd1234",
  showQrModal: true,
  chains: [1],
})

export const walletClientWC = createWalletClient({
  chain: mainnet,
  transport: custom(provider),
})

----------------------------------------

TITLE: Simulating Contract Function Call with Value in TypeScript
DESCRIPTION: Demonstrates how to include a value (in wei) when simulating a contract function call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_19

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
  value: parseEther('1')
})

----------------------------------------

TITLE: Complete User Operation Example
DESCRIPTION: End-to-end example of sending a User Operation with a Smart Account, including sending ETH and waiting for receipt.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { bundlerClient } from './config.js'

const hash = await bundlerClient.sendUserOperation({ 
  account, 
  calls: [{ 
    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D', 
    value: parseEther('0.001') 
  }] 
}) 

const receipt = await bundlerClient.waitForUserOperationReceipt({ hash })

----------------------------------------

TITLE: Importing viem Functions Directly in TypeScript
DESCRIPTION: Shows how to import various viem functions directly from the main 'viem' package instead of using separate entrypoints.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import {
  encodeAbiParameters,
  getContract,
  getBlock,
  mine,
  sendTransaction,
} from 'viem'

----------------------------------------

TITLE: Using Call Action with Public Client in TypeScript
DESCRIPTION: Example of executing a message call using the viem public client. This demonstrates a basic call operation with an account, data, and target address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const data = await publicClient.call({ // [!code focus:7]
  account,
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Using recoverAuthorizationAddress in TypeScript
DESCRIPTION: This example demonstrates how to use the recoverAuthorizationAddress function to recover the original signing address from a signed Authorization object. It includes creating a wallet client, signing an authorization, and then recovering the address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/recoverAuthorizationAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
import { recoverAuthorizationAddress } from 'viem/utils'
import { walletClient } from './client'

const eoa = privateKeyToAccount('0x...')

const authorization = await walletClient.signAuthorization({
  account: eoa,
  authorization: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'
})

const address = await recoverAuthorizationAddress({
  authorization,
})

----------------------------------------

TITLE: Contract Call Simulation in TypeScript
DESCRIPTION: Shows how to simulate contract interactions including mint and transfer functions using ABI definitions. Demonstrates handling of multiple contract calls in a single simulation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseAbi, parseEther } from 'viem'
import { client } from './config'

const abi = parseAbi([
  'function mint()',
  'function transfer(address, uint256) returns (bool)',
])
 
const { results } = await client.simulateCalls({
  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'mint',
    },
    {
      to: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',
      abi,
      functionName: 'transfer',
      args: [
        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
        100n
      ],
    },
  ],
})

----------------------------------------

TITLE: Block Retrieval by Number
DESCRIPTION: Example of retrieving block information using a specific block number parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const block = await publicClient.getBlock({
  blockNumber: 42069n
})

----------------------------------------

TITLE: Defining Custom EVM Chain Configuration
DESCRIPTION: Demonstrates how to create a custom chain configuration using the defineChain utility. The example shows a complete chain definition including chain ID, native currency details, RPC URLs, block explorer information, and contract addresses.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/introduction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineChain } from 'viem'

export const zora = defineChain({
  id: 7777777,
  name: 'Zora',
  nativeCurrency: {
    decimals: 18,
    name: 'Ether',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: {
      http: ['https://rpc.zora.energy'],
      webSocket: ['wss://rpc.zora.energy'],
    },
  },
  blockExplorers: {
    default: { name: 'Explorer', url: 'https://explorer.zora.energy' },
  },
  contracts: {
    multicall3: {
      address: '0xcA11bde05977b3631167028862bE2a173976CA11',
      blockCreated: 5882,
    },
  },
})

----------------------------------------

TITLE: Initializing WebAuthn Account with Credential
DESCRIPTION: Shows the complete process of setting up a WebAuthn account including creating a credential, initializing the WebAuthn account, and connecting it to a Coinbase Smart Account. Requires viem library and account abstraction modules.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { 
  createWebAuthnCredential, 
  toWebAuthnAccount,
  toCoinbaseSmartAccount 
} from 'viem/account-abstraction'
import { client } from './client'

// 1. Register a credential (ie. passkey).
const credential = await createWebAuthnCredential({
  name: 'Example',
})

// 2. Create a WebAuthn owner account from the credential.
const owner = toWebAuthnAccount({
  credential,
})

// 3. Hook up the owner to a WebAuthn-compatible Smart Account.
const account = toCoinbaseSmartAccount({
  client,
  owners: [owner],
})

----------------------------------------

TITLE: ABI Encoding with Ethers.js
DESCRIPTION: Using Ethers.js to encode ABI parameters. This shows two approaches: using objects with type and name properties, and using a human-readable format with types only.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_28

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'

const abiCoder = utils.defaultAbiCoder()

// Object
abiCoder.encode(
  [{ type: 'uint', name: 'x' }, { type: 'string', name: 'y' }],
  [1234, 'Hello world']
)

// Human Readable
abiCoder.encode(
  ['uint', 'string'], 
  [1234, 'Hello World']
);

----------------------------------------

TITLE: Sending a Transaction with Hoisted Account in TypeScript
DESCRIPTION: Demonstrates sending a transaction using a wallet client with a hoisted account, eliminating the need to pass the account explicitly.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { walletClient } from './config'

const hash = await walletClient.sendTransaction({
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})
// '0x...'

----------------------------------------

TITLE: Signing a Transaction with viem Wallet Client in TypeScript
DESCRIPTION: Demonstrates how to prepare and sign a transaction using the viem wallet client. It includes steps for preparing the transaction request, signing it, and sending the raw transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'
 
const request = await walletClient.prepareTransactionRequest({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

const signature = await walletClient.signTransaction(request)
// 0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33

const hash = await walletClient.sendRawTransaction(signature)

----------------------------------------

TITLE: Setting up an Ethereum Client with Viem
DESCRIPTION: Demonstrates how to import necessary modules, create a public client connected to the Ethereum mainnet using HTTP transport, and execute a basic blockchain action to retrieve the current block number.
SOURCE: https://github.com/wevm/viem/blob/main/src/README.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
// 1. Import modules.
import { createPublicClient, http } from 'viem';
import { mainnet } from 'viem/chains';

// 2. Set up your client with desired chain & transport.
const client = createPublicClient({
  chain: mainnet,
  transport: http(),
});

// 3. Consume an action!
const blockNumber = await client.getBlockNumber();

----------------------------------------

TITLE: Contract Simulation with Arguments in TypeScript
DESCRIPTION: Shows how to simulate a contract function that requires arguments. The example uses a mint function that takes a tokenId parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'
import { wagmiAbi } from './abi'

const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  account,
})

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [{ name: "owner", type: "uint32" }],
    name: "mint",
    outputs: [{ name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  ...
] as const;

----------------------------------------

TITLE: Migrating from JsonRpcProvider to createPublicClient in viem
DESCRIPTION: Demonstrates replacing Ethers' JsonRpcProvider with viem's createPublicClient. Includes examples for both standard and custom chain configurations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const provider = new providers.JsonRpcProvider('https://cloudflare-eth.com') // [!code hl]

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const provider = new providers.JsonRpcProvider('https://250.rpc.thirdweb.com', { // [!code hl]
  name: 'Fantom', // [!code hl]
  id: 250 // [!code hl]
}) // [!code hl]

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({ // [!code hl]
  chain: mainnet, // [!code hl]
  transport: http('https://cloudflare-eth.com') // [!code hl]
}) // [!code hl]

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { fantom } from 'viem/chains'

const client = createPublicClient({ // [!code hl]
  chain: fantom, // [!code hl]
  transport: http('https://250.rpc.thirdweb.com') // [!code hl]
}) // [!code hl]

----------------------------------------

TITLE: Executing Deposit Transaction from Mainnet to Optimism using viem
DESCRIPTION: This snippet shows the complete process of depositing ETH from Mainnet to Optimism. It includes building the deposit transaction parameters, executing the transaction on L1, waiting for confirmation, and tracking the corresponding L2 transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getL2TransactionHashes } from 'viem/op-stack'
import { account, publicClientL1, publicClientL2, walletClientL1 } from './config'

// Build parameters for the transaction on the L2.
const args = await publicClientL2.buildDepositTransaction({
  mint: parseEther('1'),
  to: account.address,
})
 
// Execute the deposit transaction on the L1.
const hash = await walletClientL1.depositTransaction(args)

// Wait for the L1 transaction to be processed.
const receipt = await publicClientL1.waitForTransactionReceipt({ hash })

// Get the L2 transaction hash from the L1 transaction receipt.
const [l2Hash] = getL2TransactionHashes(receipt)

// Wait for the L2 transaction to be processed.
const l2Receipt = await publicClientL2.waitForTransactionReceipt({ 
  hash: l2Hash 
})

----------------------------------------

TITLE: Reading from Contracts with Viem
DESCRIPTION: Code example showing how to read data from a smart contract using Viem. This snippet creates a public client and directly calls readContract with the necessary configuration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_15

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { wagmiContractConfig } from './abi'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

const supply = await client.readContract({
  ...wagmiContractConfig,
  functionName: 'totalSupply'
})

----------------------------------------

TITLE: Basic Transaction Request Preparation
DESCRIPTION: Example showing how to prepare a basic transaction request with an account, recipient address and value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
const request = await walletClient.prepareTransactionRequest({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

----------------------------------------

TITLE: Local Account Client Configuration
DESCRIPTION: Configuration setup for Viem clients using local private key accounts. Sets up public and wallet clients for both L1 and L2 chains with necessary OP Stack extensions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1, walletActionsL1, walletActionsL2 } from 'viem/op-stack'

export const account = privateKeyToAccount('0x...')

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const walletClientL1 = createWalletClient({
  account,
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

export const walletClientL2 = createWalletClient({
  account,
  chain: optimism,
  transport: http()
}).extend(walletActionsL2())

----------------------------------------

TITLE: Handling Custom Errors in Contract Simulation
DESCRIPTION: Illustrates how to catch and handle custom Solidity errors thrown during contract simulation. It includes error handling logic and shows how to access the custom error data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { BaseError, ContractFunctionRevertedError } from 'viem';
import { account, walletClient, publicClient } from './config'
import { wagmiAbi } from './abi'

try {
  await publicClient.simulateContract({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    abi: wagmiAbi,
    functionName: 'mint',
    account,
  })
} catch (err) {
  if (err instanceof BaseError) {
    const revertError = err.walk(err => err instanceof ContractFunctionRevertedError)
    if (revertError instanceof ContractFunctionRevertedError) {
      const errorName = revertError.data?.errorName ?? ''
      // do something with `errorName`
    }
  }
}

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: "mint",
    outputs: [{ name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  // Custom solidity error
  {
    type: 'error',
    inputs: [],
    name: 'MintIsDisabled'
  },
  ...
] as const;

LANGUAGE: solidity
CODE:
// ...
error MintIsDisabled();
contract WagmiExample {
  // ...

    function mint() public {
      // ...
      revert MintIsDisabled();
      // ...
    }

  // ...
}

----------------------------------------

TITLE: Signing Raw Hex Message with Private Key
DESCRIPTION: Demonstrates signing a hex-encoded message using a private key account. Returns a hex signature that can be used for message verification or address recovery.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signMessage.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'

const account = privateKeyToAccount('0x...')

const signature = await account.signMessage({
  // Hex data representation of message.
  message: { raw: '0x68656c6c6f20776f726c64' },
})

----------------------------------------

TITLE: Using toAccount for Custom Signing Implementations in viem
DESCRIPTION: Example demonstrating how to use toAccount instead of getAccount for custom signing implementations. This function allows creating account objects with custom signing logic for messages, transactions, and typed data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_13

LANGUAGE: typescript
CODE:
import { createWalletClient, http, getAccount } from 'viem' // [!code --]
import { createWalletClient, http } from 'viem' // [!code ++]
import { toAccount } from 'viem/accounts' // [!code ++]
import { mainnet } from 'viem/chains'
import { getAddress, signMessage, signTransaction } from './sign-utils' 

const privateKey = '0x...' 
const account = getAccount({ // [!code --]
const account = toAccount({ // [!code ++]
  address: getAddress(privateKey),
  signMessage(message) {
    return signMessage(message, privateKey)
  },
  signTransaction(transaction) {
    return signTransaction(transaction, privateKey)
  },
  signTypedData(typedData) {
    return signTypedData(typedData, privateKey)
  }
})

const client = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Block-Specific Message Verification
DESCRIPTION: Shows how to verify a message with specific block number for Smart Contract Account verification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const valid = await publicClient.verifyMessage({
  blockNumber: 42069n,
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  message: 'hello world',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})

----------------------------------------

TITLE: Extending Wallet Client with Public Actions
DESCRIPTION: Shows how to extend the Wallet Client with Public Actions for additional functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { createWalletClient, http, publicActions } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const account = privateKeyToAccount('0x...')

const client = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
}).extend(publicActions)

const { request } = await client.simulateContract({ ... }) // Public Action
const hash = await client.writeContract(request) // Wallet Action

----------------------------------------

TITLE: Migrating from getDefaultProvider to createPublicClient in viem
DESCRIPTION: Shows how to replace Ethers' getDefaultProvider with viem's createPublicClient. The viem implementation is more explicit about the chain and transport being used.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getDefaultProvider } from 'ethers'

const provider = getDefaultProvider() // [!code hl]

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({ // [!code hl]
  chain: mainnet, // [!code hl]
  transport: http() // [!code hl]
}) // [!code hl]

----------------------------------------

TITLE: Setting Transaction Value Using parseEther in TypeScript
DESCRIPTION: Shows how to prepare a transaction request using the parseEther utility to convert ETH to Wei. Demonstrates proper value formatting for transaction preparation with viem.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'

const request = await walletClient.prepareTransactionRequest({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1'),
  nonce: 69
})

----------------------------------------

TITLE: Creating an Event Filter Scoped to a Specific Event
DESCRIPTION: Creates an event filter for a specific event type using parseAbiItem to convert a human-readable event signature to ABI format. This example filters for Transfer events on the USDC contract.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'
import { publicClient } from './client'

const filter = await publicClient.createEventFilter({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),
})

----------------------------------------

TITLE: Extending Wallet Client with Layer 1 OP Stack Actions in TypeScript
DESCRIPTION: This snippet demonstrates how to create a wallet client for the Ethereum mainnet and extend it with Layer 1 OP Stack actions. It uses the 'walletActionsL1' extension to add OP Stack functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { walletActionsL1 } from 'viem/op-stack' // [!code hl]

const walletClient = createWalletClient({
  chain: mainnet,
  transport: http(),
}).extend(walletActionsL1()) // [!code hl]

const hash = await walletClient.depositTransaction({/* ... */})

----------------------------------------

TITLE: Sending ETH value with contract transactions in viem
DESCRIPTION: Example demonstrating how to send ETH along with a contract transaction by setting the value parameter. This is useful for payable functions that require ETH to be sent as part of the transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
await walletClient.writeContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  value: parseEther('1') // [!code focus]
})

----------------------------------------

TITLE: Deployless Contract Read via Bytecode
DESCRIPTION: Demonstrates how to perform a read operation on an undeployed contract using its bytecode.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { parseAbi } from 'viem'
import { publicClient } from './config'

const data = await publicClient.readContract({
  abi: parseAbi(['function name() view returns (string)']),
  code: '0x...',
  functionName: 'name'
})

----------------------------------------

TITLE: Contract ABI Definition
DESCRIPTION: Example ABI definition containing a Transfer event with indexed parameters for from, to, and tokenId.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  {
    inputs: [
      {
        indexed: true,
        name: "from",
        type: "address",
      },
      { indexed: true, name: "to", type: "address" },
      {
        indexed: true,
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
] as const;

----------------------------------------

TITLE: Block Retrieval by Tag
DESCRIPTION: Example of retrieving block information using a block tag parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const block = await publicClient.getBlock({
  blockTag: 'safe'
})

----------------------------------------

TITLE: Using FactoryData Parameter in Call Action
DESCRIPTION: Example of specifying the factoryData parameter when making a call. This parameter contains calldata to execute on the factory to deploy the contract.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_13

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  factory: '0x0000000000ffe8b47b3e2130213b802212439497',
  factoryData: '0xdeadbeef', // [!code focus]
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Basic TypedData Signing Example
DESCRIPTION: Example showing how to sign typed data using a wallet client with an account parameter. Demonstrates the basic usage of signTypedData with domain, types, and message parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTypedData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'
import { domain, types } from './data'

const signature = await walletClient.signTypedData({
  account,
  domain,
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Simulating Contract Function Call with Account Address in TypeScript
DESCRIPTION: Shows how to simulate a contract function call by specifying the account address to simulate from.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
})

----------------------------------------

TITLE: Migrating from AlchemyProvider to createPublicClient in viem
DESCRIPTION: Demonstrates replacing Ethers' AlchemyProvider with viem's createPublicClient using the Alchemy RPC URL directly in the HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const provider = new providers.AlchemyProvider('homestead', '<apiKey>') // [!code hl]

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({ // [!code hl]
  chain: mainnet, // [!code hl]
  transport: http('https://eth-mainnet.g.alchemy.com/v2/<apiKey>') // [!code hl]
}) // [!code hl]

----------------------------------------

TITLE: Signing User Operation with Coinbase Smart Account in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Coinbase Smart Account and sign a User Operation. It includes the necessary imports, account creation, and the signUserOperation call with all required parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toCoinbaseSmartAccount } from 'viem/account-abstraction'
import { client, owner } from './config'

export const account = await toCoinbaseSmartAccount({
  client,
  owners: [owner],
})

const signature = await account.signUserOperation({
  callData: '0xdeadbeef',
  callGasLimit: 141653n,
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 15000000000n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  paymasterPostOpGasLimit: 0n,
  paymasterVerificationGasLimit: 0n,
  preVerificationGas: 53438n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  verificationGasLimit: 259350n,
})

----------------------------------------

TITLE: Configuring Wallet Client and Account in TypeScript
DESCRIPTION: This snippet demonstrates how to create a wallet client using viem, configure it for the Ethereum mainnet, and set up an account. It shows both JSON-RPC and local account options.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
})

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Simulating Contract Function Call with Function Name in TypeScript
DESCRIPTION: Demonstrates how to use the simulateContract function to simulate a contract mint function call, specifying the function name.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
})

----------------------------------------

TITLE: Setting Custom RPC Schema for Viem Wallet Client
DESCRIPTION: Shows how to define and set a custom RPC schema for the wallet client. This allows for typed JSON-RPC schema definitions, enabling better type checking and autocompletion for custom RPC methods.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_13

LANGUAGE: typescript
CODE:
import { rpcSchema } from 'viem'

type CustomRpcSchema = [{
  Method: 'eth_wagmi',
  Parameters: [string]
  ReturnType: string
}]

const client = createWalletClient({
  rpcSchema: rpcSchema<CustomRpcSchema>(),
  transport: custom(window.ethereum!)
})

const result = await client.request({
  method: 'eth_wa
  params: ['hello'],
})

----------------------------------------

TITLE: Asset Changes Tracking Simulation in TypeScript
DESCRIPTION: Illustrates how to track asset balance changes during transaction simulation by enabling the traceAssetChanges parameter. Shows detailed token balance changes for ETH and ERC20 tokens.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseAbi, parseEther } from 'viem'
import { client } from './config'

const abi = parseAbi([
  'function mint()',
  'function transfer(address, uint256) returns (bool)',
])
 
const { assetChanges, results } = await client.simulateCalls({
  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1.5')
    },
    {
      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'mint',
    },
    {
      to: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',
      abi,
      functionName: 'transfer',
      args: [
        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
        100n
      ],
    },
  ],
  traceAssetChanges: true,
})

----------------------------------------

TITLE: Passing Arguments to Write Function in TypeScript
DESCRIPTION: Shows how to pass arguments to a contract write function using the args attribute. It includes type inference for arguments based on the function name and ABI.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { account, walletClient } from './client'
import { wagmiAbi } from './abi'

const { request } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  account
})
await walletClient.writeContract(request)

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [{ name: "tokenId", type: "uint32" }],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  ...
] as const;

LANGUAGE: typescript
CODE:
import { createWalletClient, custom, http} from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
})

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount('0x...')

----------------------------------------

TITLE: Event Name Scoped Query
DESCRIPTION: Example showing how to scope logs to a specific event name in the contract ABI.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContractEvents.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'
import { publicClient } from './client'
import { erc20Abi } from './abi'

const logs = await publicClient.getContractEvents({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  abi: erc20Abi,
  eventName: 'Transfer',
})

----------------------------------------

TITLE: Sponsoring User Operations with Paymaster Client in Viem (User Operation Action)
DESCRIPTION: This snippet shows how to create a Paymaster client and use it with a Bundler client to sponsor User Operation fees, but applies the Paymaster at the action level. It uses Pimlico's Paymaster API and sends a user operation to transfer Ether.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { 
  createBundlerClient, 
  createPaymasterClient,
} from 'viem/account-abstraction'
import { account, client } from './config.ts'

const paymasterClient = createPaymasterClient({
  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}'),
})

const bundlerClient = createBundlerClient({
  account,
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

const hash = await bundlerClient.sendUserOperation({
  calls: [{
    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
    value: parseEther('0.001')
  }]
  paymaster: paymasterClient,
})

----------------------------------------

TITLE: Specifying Block Number for Balance Retrieval in TypeScript
DESCRIPTION: This example shows how to use the getBalance function with a specific block number. The balance will be retrieved for the account at the specified block number.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBalance.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const balance = await publicClient.getBalance({
  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  blockNumber: 69420n
})

----------------------------------------

TITLE: Configuring viem Clients for Mainnet and Optimism with JSON-RPC Account
DESCRIPTION: This configuration sets up viem clients for Ethereum Mainnet and Optimism using a JSON-RPC account (e.g., from a browser extension). It includes necessary extensions for OP Stack operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

// Retrieve Account from an EIP-1193 Provider. 
export const [account] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
}) 

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const walletClientL1 = createWalletClient({
  account,
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Address-Scoped Events Query
DESCRIPTION: Example demonstrating how to scope event logs to a specific contract address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContractEvents.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { publicClient } from './client'
import { erc20Abi } from './abi'

const logs = await publicClient.getContractEvents({
  abi: erc20Abi,
  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',
})

----------------------------------------

TITLE: Basic Contract Events Query in TypeScript
DESCRIPTION: Basic example of fetching all event logs for an ERC-20 contract using viem's getContractEvents.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContractEvents.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'
import { erc20Abi } from './abi'

const logs = await publicClient.getContractEvents({ 
  abi: erc20Abi 
})

----------------------------------------

TITLE: Configuring Bundler Client with a Paymaster Client
DESCRIPTION: Shows how to configure a Bundler Client with a separate Paymaster Client for User Operation sponsorship. This setup allows the bundler to use an external paymaster service for handling transaction fees.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const paymasterClient = createPaymasterClient({ // [!code focus]
  transport: http('https://public.pimlico.io/v2/11155111/rpc') // [!code focus]
}) // [!code focus]

const bundlerClient = createBundlerClient({
  chain: mainnet,
  paymaster: paymasterClient, // [!code focus]
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

----------------------------------------

TITLE: Initializing Public Client for Ethereum Mainnet in TypeScript using Viem
DESCRIPTION: This code snippet shows how to create a public client for interacting with the Ethereum mainnet using the Viem library. It sets up the client with the mainnet chain and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterLogs.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Basic Contract Read Operation in TypeScript
DESCRIPTION: Demonstrates basic usage of readContract to call a read-only function (totalSupply) on a contract without arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'
import { wagmiAbi } from './abi'

const data = await publicClient.readContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'totalSupply',
})
// 69420n

----------------------------------------

TITLE: Scoped Contract Events Query
DESCRIPTION: Example showing how to scope event logs by contract address, event name, arguments and block range for USDC transfers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContractEvents.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'
import { publicClient } from './client'
import { erc20Abi } from './abi'

const usdcContractAddress = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'

const logs = await publicClient.getContractEvents({ 
  address: usdcContractAddress,
  abi: erc20Abi,
  eventName: 'Transfer',
  args: {
    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'
  },
  fromBlock: 16330000n,
  toBlock: 16330050n
})

----------------------------------------

TITLE: Local Account Configuration for Cross-Chain Operations
DESCRIPTION: Configuration setup for a local private key account to perform cross-chain operations between Ethereum Mainnet and Optimism. This configuration creates separate public and wallet clients for interacting with both L1 and L2 chains.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
// Import Viem modules.
import { createPublicClient, createWalletClient, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

export const account = privateKeyToAccount('0x...')

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const walletClientL1 = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Basic Event Watching in TypeScript
DESCRIPTION: Simple example of watching all blockchain events using watchEvent with a basic callback handler
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
const unwatch = publicClient.watchEvent({
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Multiple Events Watching
DESCRIPTION: Example of watching multiple events simultaneously using parseAbi
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const unwatch = publicClient.watchEvent({
  events: parseAbi([
    'event Approval(address indexed owner, address indexed sender, uint256 value)',
    'event Transfer(address indexed from, address indexed to, uint256 value)'
  ]),
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Defining Contract ABI in TypeScript
DESCRIPTION: This snippet shows how to define a contract's ABI, including a constructor with no inputs. The ABI is exported as a constant array.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  ...
] as const;

----------------------------------------

TITLE: Viem Public Client Configuration
DESCRIPTION: Sets up a public client instance for interacting with the Ethereum mainnet using Viem. Configures the client with mainnet chain settings and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionReceipt.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Configuring viem Clients for Mainnet and Optimism with Local Account
DESCRIPTION: This configuration sets up viem clients for Ethereum Mainnet and Optimism using a local account (private key). It includes necessary extensions for OP Stack operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

export const account = privateKeyToAccount('0x...')

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const walletClientL1 = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Event-Specific Watching with parseAbiItem
DESCRIPTION: Watching specific events using parseAbiItem to convert human-readable event signatures to ABI format
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const unwatch = publicClient.watchEvent({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Extracting Arguments with decodeFunctionData in TypeScript
DESCRIPTION: Example of using decodeFunctionData to extract both the function name and arguments from encoded calldata. It demonstrates how to handle functions with parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { decodeFunctionData } from 'viem'
import { wagmiAbi } from './abi'

const { functionName, args } = decodeFunctionData({
  abi: wagmiAbi,
  data: '0x70a08231000000000000000000000000fba3912ca04dd458c843e2ee08967fc04f3579c2'
})
// { functionName: 'balanceOf', args: ["0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2"] }

----------------------------------------

TITLE: Requesting Ethereum Wallet Addresses with viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the requestAddresses function from the walletClient to request a list of accounts managed by an Ethereum wallet. It returns an array of Ethereum addresses.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/requestAddresses.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { walletClient } from './client'

const accounts = await walletClient.requestAddresses()
// ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']

----------------------------------------

TITLE: Initializing Wallet Client with HTTP Transport in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Wallet Client using the HTTP transport for the Ethereum mainnet chain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createWalletClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Basic Block Watching Implementation in TypeScript
DESCRIPTION: Demonstrates setting up a basic block watcher using a public client. The watcher logs block information to the console and returns an unwatch function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlocks.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const unwatch = publicClient.watchBlocks(
  { onBlock: block => console.log(block) }
)

----------------------------------------

TITLE: Creating a Private Key Account and Wallet Client in TypeScript
DESCRIPTION: Demonstrates how to initialize a Private Key Account with privateKeyToAccount and use it to create a wallet client. This example shows the complete setup with chain and transport configurations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/privateKeyToAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const account = privateKeyToAccount('0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80') // [!code focus]

const client = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Complete TypedData Signing and Verification Example in TypeScript
DESCRIPTION: This complete example demonstrates the process of defining a typed message, signing it with a wallet client, and verifying the signature. It includes imports, message definition, and the verification step.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyTypedData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { verifyTypedData } from 'viem'
import { account, walletClient } from './client'

const message = {
  from: {
    name: 'Cow',
    wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
  },
  to: {
    name: 'Bob',
    wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
  },
  contents: 'Hello, Bob!',
} as const

const signature = await walletClient.signTypedData({
  account,
  domain,
  types,
  primaryType: 'Mail',
  message,
})

const valid = await verifyTypedData({
  address: account.address,
  domain,
  types,
  primaryType: 'Mail',
  message,
  signature,
})
// true

----------------------------------------

TITLE: Creating ZKsync-compatible Viem Clients with EIP-712 Actions
DESCRIPTION: Creates wallet and public clients for ZKsync, extending the wallet client with EIP-712 actions required for ZKsync functionality. The wallet client uses the browser's Ethereum provider, while the public client uses HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { zksync } from 'viem/chains'
import { eip712WalletActions } from 'viem/zksync'
 
const walletClient = createWalletClient({
  chain: zksync,
  transport: custom(window.ethereum!),
}).extend(eip712WalletActions()) // [!code hl]

const publicClient = createPublicClient({
  chain: zksync,
  transport: http()
})

----------------------------------------

TITLE: Deploying Contract with Constructor Arguments in TypeScript
DESCRIPTION: This snippet shows how to deploy a contract with constructor arguments using the walletClient.deployContract method. It includes the 'args' parameter for passing constructor arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { deployContract } from 'viem'
import { wagmiAbi } from './abi'
import { account, walletClient } from './config'

const hash = await walletClient.deployContract({
  abi,
  account,
  args: [69420],
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
})

----------------------------------------

TITLE: Creating a Basic Event Filter in TypeScript with viem
DESCRIPTION: Creates a basic event filter with no arguments that will query for all events. Uses the publicClient to create the filter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const filter = await publicClient.createEventFilter()
// @log: { id: "0x345a6572337856574a76364e457a4366", type: 'event' }

----------------------------------------

TITLE: Sending ZKsync Transaction with Paymaster
DESCRIPTION: Demonstrates sending a transaction on ZKsync using a paymaster for fee abstraction. Includes account details, recipient address, value, and paymaster configuration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const hash = await walletClient.sendTransaction({
  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n,
  paymaster: '0xFD9aE5ebB0F6656f4b77a0E99dCbc5138d54b0BA',
  paymasterInput: '0x123abc...'
})

----------------------------------------

TITLE: Importing and Using Predefined Chains in Viem
DESCRIPTION: Shows how to import a predefined chain (Zora) from viem/chains and use it to create a public client. This example demonstrates the basic setup for connecting to an EVM-compatible network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/introduction.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
import { createPublicClient, http } from 'viem'
import { zora } from 'viem/chains' // [!code focus]

const client = createPublicClient({
  chain: zora, // [!code focus]
  transport: http()
})

----------------------------------------

TITLE: Decoding Event Logs in Viem
DESCRIPTION: Demonstrates how to use viem's decodeEventLog function to decode event data and topics from logs, equivalent to ethers.js Interface.decodeEventLog method with a different parameter structure.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_53

LANGUAGE: typescript
CODE:
import { decodeEventLog, parseEther } from 'viem'
import { abi } from './abi'

const result = decodeEventLog({
  abi,
  data: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000',
  topics: [
    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
    '0x0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72',
    '0x000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c'
  ]
})

----------------------------------------

TITLE: Converting Arbitrary Data to Blob Sidecars
DESCRIPTION: Demonstrates converting arbitrary data into blob sidecars using the KZG setup. Requires a KZG implementation to be configured.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobSidecars.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toBlobSidecars } from 'viem'
import { kzg } from './kzg'

const sidecars = toBlobSidecars({ data: '0x...', kzg })

LANGUAGE: typescript
CODE:
import * as cKzg from 'c-kzg'
import { setupKzg } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

export const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)

----------------------------------------

TITLE: Retrieving a User Operation Receipt with Viem in TypeScript
DESCRIPTION: This example demonstrates how to retrieve a User Operation receipt using a bundler client by providing a User Operation hash. The function returns detailed information about the operation including blockHash, blockNumber, sender status, and other transaction details.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperationReceipt.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { bundlerClient } from './client'

const receipt = await bundlerClient.getUserOperationReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'
})
// @log: {
// @log:   blockHash: '0xaf1dadb8a98f1282e8f7b42cc3da8847bfa2cf4e227b8220403ae642e1173088',
// @log:   blockNumber: 15132008n,
// @log:   sender: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
// @log:   ...
// @log:   status: 'success',
// @log: }

----------------------------------------

TITLE: Using recoverTypedDataAddress in TypeScript
DESCRIPTION: Example of how to use the recoverTypedDataAddress function to recover the signing address from EIP-712 typed data and signature. It demonstrates setting up the necessary data structures and calling the function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTypedDataAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { recoverTypedDataAddress } from 'viem'
import { account, walletClient } from './client'

const message = {
  from: {
    name: 'Cow',
    wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
  },
  to: {
    name: 'Bob',
    wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
  },
  contents: 'Hello, Bob!',
} as const
 
const signature = await walletClient.signTypedData({
  account,
  domain,
  types,
  primaryType: 'Mail',
  message,
})

const address = await recoverTypedDataAddress({
  domain,
  types,
  primaryType: 'Mail',
  message,
  signature,
})

----------------------------------------

TITLE: Migrating from FallbackProvider to fallback transport in viem
DESCRIPTION: Demonstrates replacing Ethers' FallbackProvider with viem's fallback transport function to support multiple RPC providers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const alchemy = new providers.AlchemyProvider('homestead', '<apiKey>') // [!code hl]
const infura = new providers.InfuraProvider('homestead', '<apiKey>') // [!code hl]
const provider = new providers.FallbackProvider([alchemy, infura]) // [!code hl]

LANGUAGE: typescript
CODE:
import { createPublicClient, http, fallback } from 'viem'
import { mainnet } from 'viem/chains'

const alchemy = http('https://eth-mainnet.g.alchemy.com/v2/<apiKey>') // [!code hl]
const infura = http('https://mainnet.infura.io/v3/<apiKey>') // [!code hl]

const client = createPublicClient({
  chain: mainnet,
  transport: fallback([alchemy, infura]) // [!code hl]
})

----------------------------------------

TITLE: Using decodeEventLog to Decode Event Log Data
DESCRIPTION: Demonstrates how to use the decodeEventLog function to decode ABI encoded event topics and data. It includes the ABI definition and shows the expected output format.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeEventLog.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { decodeEventLog } from 'viem'
import { wagmiAbi } from './abi.ts'

const topics = decodeEventLog({
  abi: wagmiAbi,
  data: '0x0000000000000000000000000000000000000000000000000000000000000001',
  topics: [
    '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0', 
    '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', 
    '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'
  ]
})
/**
 *  {
 *    eventName: 'Transfer',
 *    args: {
 *      from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
 *      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
 *      value: 1n
 *    }
 *  }
 */

----------------------------------------

TITLE: Encoding a Struct using encodeAbiParameters with ABI Definition
DESCRIPTION: Shows how to encode a complex struct with uint256, bool, and address fields using encodeAbiParameters and an ABI definition.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { abi } from './abi'

const encodedData = encodeAbiParameters(
  abi[0].inputs,
  [{
    x: 420n,
    y: true,
    z: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  }],
)
// 0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac

----------------------------------------

TITLE: Verifying Typed Data Signature Example
DESCRIPTION: Example showing how to verify a typed data signature using the viem library. The code initializes clients, signs a typed message, and verifies the signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyTypedData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient, publicClient } from './client'
import { domain, types } from './data'

const message = {
  from: {
    name: 'Cow',
    wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
  },
  to: {
    name: 'Bob',
    wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
  },
  contents: 'Hello, Bob!',
}

const signature = await walletClient.signTypedData({
  account,
  domain,
  types,
  primaryType: 'Mail',
  message,
})

const valid = await publicClient.verifyTypedData({
  address: account.address,
  domain,
  types,
  primaryType: 'Mail',
  message,
  signature,
})
// true

----------------------------------------

TITLE: Configuring Wallet Client with Local Account in TypeScript
DESCRIPTION: Sets up a wallet client using a local account derived from a private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'

export const walletClient = createWalletClient({
  account: privateKeyToAccount('0x...'),
  transport: http()
})

----------------------------------------

TITLE: Using toHex Function with Various Data Types
DESCRIPTION: Demonstrates the usage of toHex function with different data types including numbers, strings, byte arrays, and booleans.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toHex } from 'viem'

toHex(420)
// "0x1a4"

toHex('Hello world')
// "0x48656c6c6f20776f726c642e"

toHex(
  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])
)
// "0x48656c6c6f20576f726c6421"

toHex(true)
// "0x1"

----------------------------------------

TITLE: Configuring viem Client with OP Stack Extensions
DESCRIPTION: Configuration example showing how to set up a public client with OP Stack extensions. This creates a public client for the Ethereum mainnet and extends it with L1 public actions for interacting with OP Stack chains.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getL2Output.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

----------------------------------------

TITLE: Using ABI with Const Assertion for Type Inference
DESCRIPTION: Demonstrates how to use const assertions with ABI definitions to enable type inference in Viem contract interactions. This approach defines the ABI separately with proper typing.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const abi = [{ // [!code focus]
  type: 'function', // [!code focus]
  name: 'balanceOf', // [!code focus]
  stateMutability: 'view', // [!code focus]
  inputs: [{ type: 'address' }], // [!code focus]
  outputs: [{ type: 'uint256' }], // [!code focus]
}] as const // [!code focus]
// @log:       ↑ const assertion

const result = client.readContract({
  address: '0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c',
  abi, 
  functionName: 'balanceOf',
  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']
})

----------------------------------------

TITLE: Estimating Gas with Max Fee for EIP-1559 Transactions in TypeScript
DESCRIPTION: Demonstrates setting maxFeePerGas for EIP-1559 transactions when estimating gas using viem's estimateGas function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const gas = await publicClient.estimateGas({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  maxFeePerGas: parseGwei('20'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1')
})

----------------------------------------

TITLE: Typed Data Domain and Types Configuration
DESCRIPTION: Configuration for the typed data domain and types definitions used in the verification process. Includes Person and Mail type definitions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const

export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Sending Transaction with EIP-7702 Authorization in TypeScript
DESCRIPTION: Demonstrates sending a transaction with a signed EIP-7702 Authorization list.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const account = privateKeyToAccount('0x...')

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: http(),
})

const authorization = await walletClient.signAuthorization({ 
  account,
  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', 
}) 

const hash = await walletClient.sendTransaction({
  account,
  authorizationList: [authorization],
  data: '0xdeadbeef',
  to: account.address,
})

----------------------------------------

TITLE: Combining simulateContract with writeContract in TypeScript
DESCRIPTION: Demonstrates how to use simulateContract to validate a transaction before executing it with writeContract. This pattern ensures the transaction will be successful before sending it.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { account, walletClient, publicClient } from './config'
import { wagmiAbi } from './abi'

const { request } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account,
})
const hash = await walletClient.writeContract(request)

----------------------------------------

TITLE: Contract Deployment Data Encoding with Constructor Arguments
DESCRIPTION: Example demonstrating how to encode contract deployment data with constructor arguments, specifically an address parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeDeployData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { encodeDeployData } from 'viem'
import { wagmiAbi } from './abi'

const data = encodeDeployData({
  abi: wagmiAbi,
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']
})
// 0x608060405260405161083e38038061083e833981016040819052610...00000000000000000000000000000000a5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC

----------------------------------------

TITLE: Building Deposit Transaction Parameters with buildDepositTransaction
DESCRIPTION: Shows how to properly build deposit transaction parameters using the buildDepositTransaction action before executing the transaction. This ensures proper gas calculation and configuration for L2 execution.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { account, publicClientL2, walletClientL1 } from './config'

// Build parameters for the transaction on the L2.
const args = await publicClientL2.buildDepositTransaction({
  account,
  mint: parseEther('1')
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})
 
// Execute the deposit transaction on the L1.
const hash = await walletClientL1.depositTransaction(args)

----------------------------------------

TITLE: Finalizing Withdrawal Example Implementation
DESCRIPTION: Example showing how to finalize a withdrawal from L2 to L1 using the finalizeWithdrawal function. Demonstrates retrieving a withdrawal from a transaction receipt and submitting it for finalization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/finalizeWithdrawal.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClientL2, walletClientL1 } from './config'

const receipt = await getTransactionReceipt(publicClientL2, {
  hash: '0xbbdd0957a82a057a76b5f093de251635ac4ddc6e2d0c4aa7fbf82d73e4e11039',
})

const [withdrawal] = getWithdrawals(receipt)
 
const hash = await walletClientL1.finalizeWithdrawal({
  account,
  targetChain: publicClientL2.chain,
  withdrawal,
})

----------------------------------------

TITLE: Sending Transaction with Wallet Client in TypeScript
DESCRIPTION: This snippet illustrates how to use the Wallet Client to send a transaction using the created account. It includes parsing Ether value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, http, parseEther } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const client = createWalletClient({
  chain: mainnet,
  transport: http()
})

const account = privateKeyToAccount('0x...')

const hash = await client.sendTransaction({ // [!code focus:5]
  account,
  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  value: parseEther('0.001')
})

----------------------------------------

TITLE: Requesting Wallet Permissions with Viem in TypeScript
DESCRIPTION: Example showing how to request wallet permissions using the walletClient object from viem. The method requests permissions for eth_accounts and returns an array of WalletPermission objects.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/requestPermissions.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { walletClient } from './client'

const permissions = await walletClient.requestPermissions({ eth_accounts: {} })

----------------------------------------

TITLE: Initializing JSON-RPC Account with Browser Extension Wallet in TypeScript
DESCRIPTION: This code demonstrates how to create a JSON-RPC Account by extracting an address from a browser extension wallet (like MetaMask) using the window.ethereum provider and the eth_requestAccounts method. The address is then used to initialize a wallet client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/jsonRpc.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
// @noErrors
import 'viem/window'
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'

const [address] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
})

const client = createWalletClient({
  account: address, 
  chain: mainnet,
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: Customizing estimateFeesPerGas in Viem Chain Definition (TypeScript)
DESCRIPTION: This snippet shows how to customize the estimateFeesPerGas function in a chain definition. It allows for fine-grained control over fee estimation, supporting both legacy and EIP-1559 transaction types.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/fees.md#2025-04-14_snippet_3

LANGUAGE: ts
CODE:
import { defineChain } from 'viem'

const example = defineChain({
  /* ... */
  fees: { 
    async estimateFeesPerGas({ client, multiply, type }) {
      const gasPrice = // ...
      const baseFeePerGas = // ...
      const maxPriorityFeePerGas = // ...

      if (type === 'legacy') return { gasPrice: multiply(gasPrice) }
      return {
        maxFeePerGas: multiply(baseFeePerGas) + maxPriorityFeePerGas,
        maxPriorityFeePerGas
      },
    },
  },
})

----------------------------------------

TITLE: Basic Execute Function Usage in viem
DESCRIPTION: Example showing how to execute multiple calls on an ERC-7821-compatible contract, including a value transfer and a data-based interaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, client } from './config'
 
const hash = await client.execute({
  account,
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      data: '0xdeadbeef',
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
    },
  ],
})

----------------------------------------

TITLE: Configuration Setup for Bundler Client
DESCRIPTION: Configuration setup including public client creation, account initialization, and bundler client setup.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { 
  createBundlerClient, 
  toCoinbaseSmartAccount 
} from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts' 

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

const owner = privateKeyToAccount('0x...')

const account = await toCoinbaseSmartAccount({ 
  client, 
  owners: [owner]
}) 

export const bundlerClient = createBundlerClient({
  account,
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

----------------------------------------

TITLE: Tree-shaking Optimized Client Usage
DESCRIPTION: Example of using individual actions with a basic client for optimal tree-shaking and bundle size optimization
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/custom.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { getBlock, sendTransaction } from 'viem/actions'

const client = createClient({ 
  chain: mainnet,
  transport: http()
})

const blockNumber = await getBlock(client, { blockTag: 'latest' })
const hash = await sendTransaction(client, { ... })

----------------------------------------

TITLE: Extending Public Client with Layer 2 OP Stack Actions in TypeScript
DESCRIPTION: This example shows how to create a public client for the Base chain (a Layer 2 solution) and extend it with Layer 2 OP Stack actions. It uses the 'publicActionsL2' extension to add OP Stack functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack' // [!code hl]

const publicClient = createPublicClient({
  chain: base,
  transport: http(),
}).extend(publicActionsL2()) // [!code hl]

const l1Gas = await publicClient.estimateL1Gas({/* ... */})

----------------------------------------

TITLE: Executing EIP-7702 Contract Write in TypeScript
DESCRIPTION: This snippet demonstrates the end-to-end process of performing a Contract Write using EIP-7702. It includes authorizing the designation of a Contract onto an EOA, and then invoking the 'initialize' function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
import { walletClient } from './config'
import { abi, contractAddress } from './contract'

const eoa = privateKeyToAccount('0x...')

// 1. Authorize designation of the Contract onto the EOA.
const authorization = await walletClient.signAuthorization({
  account: eoa,
  contractAddress,
})

// 2. Designate the Contract on the EOA, and invoke the 
//    `initialize` function.
const hash = await walletClient.writeContract({
  abi,
  address: eoa.address,
  authorizationList: [authorization],
  //                  ↑ 3. Pass the Authorization as a parameter.
  functionName: 'initialize',
})

----------------------------------------

TITLE: Sending a Transaction with viem in TypeScript
DESCRIPTION: Creates and sends a transaction using a wallet client. Requires an account, recipient address, and value in wei.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'

const hash = await walletClient.sendTransaction({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})
// '0x...'

----------------------------------------

TITLE: Importing OP Stack Chains from Viem
DESCRIPTION: Shows how to import various predefined OP Stack chain configurations from the Viem library, including mainnet and testnet chains for Base, Fraxtal, Optimism, Zora, and other networks.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/chains.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import {
  base,
  baseGoerli,
  baseSepolia,
  fraxtal,
  fraxtalTestnet,
  ink,
  inkSepolia,
  optimism,
  optimismGoerli,
  optimismSepolia,
  soneium,
  soneiumMinato,
  unichain,
  unichainSepolia,
  zircuit,
  zircuitTestnet,
  zora,
  zoraSepolia,
  zoraTestnet,
} from 'viem/chains'

----------------------------------------

TITLE: Defining ABI for encodeFunctionData in TypeScript
DESCRIPTION: Shows how to define an ABI (Application Binary Interface) for use with encodeFunctionData. This example defines the 'totalSupply' function in the ABI.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  ...
] as const;

----------------------------------------

TITLE: Basic ENS Address Resolution in TypeScript
DESCRIPTION: Example showing how to resolve an ENS name to an Ethereum address using the publicClient with proper name normalization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { normalize } from 'viem/ens'
import { publicClient } from './client'
 
const ensAddress = await publicClient.getEnsAddress({
  name: normalize('wevm.eth'),
})
// '0xd2135CfB216b74109775236E36d4b433F1DF507B'

----------------------------------------

TITLE: Verifying Typed Data Signatures in TypeScript using viem
DESCRIPTION: This example demonstrates how to verify a typed data signature using the verifyTypedData utility. It takes parameters including the signer's address, domain data, type definitions, primary type, message, and signature to confirm if the signature is valid.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyTypedData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
const valid = await verifyTypedData({
  address: account.address,
  domain,
  types,
  primaryType: 'Mail',
  message,
  signature,
})
// true

----------------------------------------

TITLE: Basic Usage of decodeFunctionData in TypeScript
DESCRIPTION: Example of decoding a function to calldata using decodeFunctionData. It demonstrates how to extract the function name from encoded data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { decodeFunctionData } from 'viem'
import { wagmiAbi } from './abi.ts'

const { functionName } = decodeFunctionData({
  abi: wagmiAbi,
  data: '0x18160ddd'
})
// { functionName: 'totalSupply' }

----------------------------------------

TITLE: Verifying Typed Data with Block Number in TypeScript using viem
DESCRIPTION: This snippet demonstrates how to use the publicClient.verifyTypedData method to verify typed data, specifying a block number for Smart Contract Account verification. It includes the structure for domain, types, and message data required for EIP-712 typed data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyTypedData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const valid = await publicClient.verifyTypedData({
  blockNumber: 42069n, // [!code focus]
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  domain: {
    name: 'Ether Mail',
    version: '1',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
  },
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  signature: '0x...',
})

----------------------------------------

TITLE: Creating an Access List with viem's publicClient
DESCRIPTION: Demonstrates how to use the createAccessList function with a public client to generate an access list for a transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const result = await publicClient.createAccessList({
  data: '0xdeadbeef',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
})

----------------------------------------

TITLE: Creating an Event Filter with Block Range
DESCRIPTION: Creates an event filter scoped to a specific block range. This example limits the filter to events between blocks 16330000 and 16330050.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'

const filter = await publicClient.createEventFilter({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),
  fromBlock: 16330000n,
  toBlock: 16330050n
})

----------------------------------------

TITLE: Scoped Log Retrieval with Event Parameters
DESCRIPTION: Demonstrates retrieving logs with specific filtering parameters including contract address, event signature, argument filters and block range.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getLogs.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'
import { publicClient } from './client'

const logs = await publicClient.getLogs({
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256)'),
  args: {
    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'
  },
  fromBlock: 16330000n,
  toBlock: 16330050n
})

----------------------------------------

TITLE: Creating a Basic Bundler Client with Public HTTP Transport
DESCRIPTION: Demonstrates how to create a Bundler Client using a public client and HTTP transport pointing to a bundler endpoint. This configures a client to interact with ERC-4337 bundlers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { createBundlerClient } from 'viem/account-abstraction' // [!code focus]
import { mainnet } from 'viem/chains' // [!code focus]

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

const bundlerClient = createBundlerClient({ // [!code focus]
  client, // [!code focus]
  transport: http('https://public.pimlico.io/v2/1/rpc') // [!code focus]
}) // [!code focus]

----------------------------------------

TITLE: Deployless Call Using Bytecode in TypeScript
DESCRIPTION: Example of performing a deployless call by providing contract bytecode directly. This allows calling functions on contracts that haven't been deployed yet, demonstrated with an ERC721 contract.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { encodeFunctionData, parseAbi } from 'viem'
import { publicClient } from './config'

const data = await publicClient.call({
  // Bytecode of the contract. Accessible here: https://etherscan.io/address/0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2#code
  code: '0x...',
  // Function to call on the contract.
  data: encodeFunctionData({
    abi: parseAbi(['function name() view returns (string)']),
    functionName: 'name'
  }),
})

----------------------------------------

TITLE: Simulating Calls with Asset Change Tracing in TypeScript using viem
DESCRIPTION: This example shows how to enable tracing of asset changes when simulating calls with the viem client. It sets the traceAssetChanges option to true.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const { results } = await client.simulateCalls({
  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
  calls: [ 
    { 
      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
      value: parseEther('2'),
    },  
  ], 
  traceAssetChanges: true,
})

----------------------------------------

TITLE: Block Retrieval by Hash
DESCRIPTION: Example of retrieving block information using a specific block hash parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const block = await publicClient.getBlock({
  blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d'
})

----------------------------------------

TITLE: Executing Contract Write with EIP-7702 in TypeScript
DESCRIPTION: This snippet shows how to designate a Contract on an Account and execute the 'initialize' function using an EIP-7702 Contract Write. It uses the previously signed Authorization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
import { abi, contractAddress } from './contract'

const eoa = privateKeyToAccount('0x...')
 
const authorization = await walletClient.signAuthorization({
  account: eoa,
  contractAddress,
})

const hash = await walletClient.writeContract({
  abi,
  address: eoa.address,
  authorizationList: [authorization],
  functionName: 'initialize',
})

----------------------------------------

TITLE: Using toEventSelector with Different Input Formats in TypeScript
DESCRIPTION: Demonstrates various ways to use the toEventSelector function with different input formats, including string event definitions and AbiEvent objects.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventSelector.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toEventSelector } from 'viem'

const selector_1 = toEventSelector('Transfer(address,address,uint256)')
// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef

const selector_2 = toEventSelector('Transfer(address indexed from, address indexed to, uint256 amount)')
// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef

// or from an `AbiEvent` on your contract ABI
const selector_3 = toEventSelector({
  name: 'Transfer',
  type: 'event',
  inputs: [
    { name: 'from', type: 'address', indexed: true },
    { name: 'to', type: 'address', indexed: true },
    { name: 'amount', type: 'uint256', indexed: false },
  ],
})
// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef

----------------------------------------

TITLE: Retrieving User Operation Data with bundlerClient in TypeScript
DESCRIPTION: Example showing how to retrieve information about a User Operation using a hash with the bundlerClient. The function returns detailed information including block data and the User Operation details.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperation.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { bundlerClient } from './client'

const result = await bundlerClient.getUserOperation({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'
})

----------------------------------------

TITLE: Basic User Operation Preparation with Viem
DESCRIPTION: Demonstrates basic usage of prepareUserOperation to create a transaction sending ETH to an address. Uses bundlerClient with a specified account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, bundlerClient } from './config'

const userOperation = await bundlerClient.prepareUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }]
})

----------------------------------------

TITLE: Defining ABI with Constructor Arguments in TypeScript
DESCRIPTION: This snippet demonstrates how to define a contract's ABI that includes a constructor with input parameters. The constructor takes a uint32 argument named 'x'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/deployContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [{ name: "x", type: "uint32" }],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  ...
] as const;

----------------------------------------

TITLE: Using verifyAuthorization Function in TypeScript
DESCRIPTION: Demonstrates how to use the verifyAuthorization function to verify an Authorization object signature. It includes creating a wallet client, signing an authorization, and verifying the signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/verifyAuthorization.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
import { verifyAuthorization } from 'viem/utils'
import { walletClient } from './client'

const eoa = privateKeyToAccount('0x...')

const authorization = await walletClient.signAuthorization({
  account: eoa,
  authorization: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'
})

const valid = await verifyAuthorization({
  address: eoa.address,
  authorization,
})

----------------------------------------

TITLE: Defining EIP-712 Domain and Types in TypeScript
DESCRIPTION: Example of how to define the domain and types for EIP-712 typed data. It shows the structure for specifying the domain properties and type definitions used in the recoverTypedDataAddress function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTypedDataAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
// All properties on a domain are optional
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const
 
// The named list of all type definitions
export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Configuring Viem Clients for OP Stack with JSON-RPC Account
DESCRIPTION: Sets up the necessary Viem client configurations for interacting with both L1 (Ethereum mainnet) and L2 (Optimism) chains using a JSON-RPC account from a browser provider like MetaMask.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1, walletActionsL1, walletActionsL2 } from 'viem/op-stack'

// Retrieve Account from an EIP-1193 Provider. 
export const [account] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
}) 

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const walletClientL1 = createWalletClient({
  account,
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

export const walletClientL2 = createWalletClient({
  account,
  chain: optimism,
  transport: custom(window.ethereum)
}).extend(walletActionsL2())

----------------------------------------

TITLE: Proving Withdrawals from L2 to L1 in TypeScript with viem
DESCRIPTION: Example showing how to prove a withdrawal transaction that occurred on an L2 chain using the proveWithdrawal method. This snippet demonstrates retrieving a transaction receipt, extracting withdrawal information, obtaining L2 output data, building parameters, and submitting the proof to L1.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClientL1, publicClientL2, walletClientL1 } from './config'

const receipt = await getTransactionReceipt(publicClientL2, {
  hash: '0xbbdd0957a82a057a76b5f093de251635ac4ddc6e2d0c4aa7fbf82d73e4e11039',
})

const [withdrawal] = getWithdrawals(receipt)
const output = await publicClientL1.getL2Output({
  l2BlockNumber: receipt.blockNumber,
  targetChain: publicClientL2.chain,
})

const args = await publicClientL2.buildProveWithdrawal({
  account,
  output,
  withdrawal,
})
 
const hash = await walletClientL1.proveWithdrawal(args)

----------------------------------------

TITLE: Configuring viem Clients for OP Stack L1 and L2
DESCRIPTION: Shows how to set up public and wallet clients for L1 and L2 interactions in the OP Stack ecosystem using viem. It includes extensions for specific L1 and L2 actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildInitiateWithdrawal.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1, walletActionsL2 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const walletClientL1 = createWalletClient({
  chain: optimism,
  transport: custom(window.ethereum)
}).extend(walletActionsL2())

// JSON-RPC Account
export const [account] = await walletClientL1.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Integrating Nonce Manager with Local Accounts in viem
DESCRIPTION: This example demonstrates how to integrate a nonceManager with a Local Account and use it for automatic nonce management in transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/createNonceManager.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { privateKeyToAccount, nonceManager } from 'viem/accounts'
import { client } from './config'

const account = privateKeyToAccount('0x...', { nonceManager })

const hashes = await Promise.all([
  client.sendTransaction({
    account,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('0.1'),
  }),
  client.sendTransaction({
    account,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('0.2'),
  }),
])

----------------------------------------

TITLE: Filtering Event Logs by Event Name in viem
DESCRIPTION: Shows how to use the eventName parameter to filter logs by a specific event type defined in the ABI. This example filters logs to only include those from 'Transfer' events.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
const topics = parseEventLogs({
  abi: wagmiAbi,
  eventName: 'Transfer', // [!code focus]
  logs: [{
    blockNumber: 69420n,
    data: '0x0000000000000000000000000000000000000000000000000000000000000001',
    logIndex: 1,
    topics: [
      '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0', 
      '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', 
      '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'
    ]
    // ...
  }]
})

----------------------------------------

TITLE: Setting maxFeePerGas for EIP-1559 Transactions in viem
DESCRIPTION: Example showing how to set the maxFeePerGas parameter when writing to a contract using the walletClient.writeContract method. This parameter specifies the total fee per gas in wei, inclusive of maxPriorityFeePerGas, and only applies to EIP-1559 transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
await walletClient.writeContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  maxFeePerGas: parseGwei('20'),  // [!code focus]
})

----------------------------------------

TITLE: Configuring a Bundler Client with a Smart Account
DESCRIPTION: Shows how to create a Bundler Client with a Smart Account configured, using the Coinbase Smart Account implementation. The account will be used for actions that require an account parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem' 
import { createBundlerClient } from 'viem/account-abstraction'
import { mainnet } from 'viem/chains' 

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

import { toCoinbaseSmartAccount } from 'viem/account-abstraction' // [!code focus]
import { privateKeyToAccount } from 'viem/accounts'

const owner = privateKeyToAccount('0x...')

const account = await toCoinbaseSmartAccount({ // [!code focus]
  client, // [!code focus]
  owners: [owner] // [!code focus]
}) // [!code focus]

const bundlerClient = createBundlerClient({
  account, // [!code focus]
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

----------------------------------------

TITLE: Executing EIP-7702 Transaction in TypeScript
DESCRIPTION: This snippet shows how to execute an EIP-7702 Transaction to designate a Contract on an Account and invoke the 'initialize' function. It uses the previously signed authorization and encodes the function data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { encodeFunctionData } from 'viem'
import { walletClient } from './config'
import { contractAddress } from './contract'

const eoa = privateKeyToAccount('0x...')
 
const authorization = await walletClient.signAuthorization({
  account: eoa,
  contractAddress,
})

const hash = await walletClient.sendTransaction({
  authorizationList: [authorization],
  data: encodeFunctionData({
    abi,
    functionName: 'initialize',
  }),
  to: eoa.address,
})

----------------------------------------

TITLE: Sending Transaction with JSON-RPC Account
DESCRIPTION: Example of sending a transaction using the Wallet Client with a JSON-RPC account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const hash = await client.sendTransaction({
  account: address,
  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  value: parseEther('0.001')
})

----------------------------------------

TITLE: Complete hashTypedData Usage Example
DESCRIPTION: Demonstrates a complete example of using hashTypedData with domain, types, primaryType, and message parameters to create an EIP-712 compliant hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { hashTypedData } from 'viem'

hashTypedData({
  domain: {
    name: 'Ether Mail',
    version: '1',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
  },
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Defining a Contract ABI in TypeScript
DESCRIPTION: This snippet provides an example of defining a contract ABI as a constant in TypeScript. It includes definitions for a totalSupply function and a Transfer event.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    name: 'Transfer',
    type: 'event',
    inputs: [
      {
        indexed: true,
        name: 'from',
        type: 'address',
      },
      { indexed: true, name: 'to', type: 'address' },
      {
        indexed: true,
        name: 'tokenId',
        type: 'uint256',
      },
    ],
  },
  ...
] as const;

----------------------------------------

TITLE: Deploying Contracts with Viem
DESCRIPTION: How to deploy a new contract using Viem. This creates a wallet client, gets the user's address, and uses deployContract with the ABI and bytecode.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_19

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { abi, bytecode } from './abi'

const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
})

const [address] = await walletClient.getAddresses()

await walletClient.deployContract({
  abi,
  account: address,
  bytecode,
})

----------------------------------------

TITLE: Basic Usage of encodeAbiParameters with Multiple Data Types
DESCRIPTION: Demonstrates encoding a string, uint, and boolean value using encodeAbiParameters. The function takes an array of parameter definitions with names and types, and their corresponding values.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { encodeAbiParameters } from 'viem'

const encodedData = encodeAbiParameters(
  [
    { name: 'x', type: 'string' },
    { name: 'y', type: 'uint' },
    { name: 'z', type: 'bool' }
  ],
  ['wagmi', 420n, true]
)
// 0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000

----------------------------------------

TITLE: Installing and Using decodeErrorResult Function in TypeScript
DESCRIPTION: This snippet demonstrates how to import and use the decodeErrorResult function from Viem to decode a reverted error from a contract function call. It includes an example of decoding error data using a provided ABI.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeErrorResult.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { decodeErrorResult } from 'viem'
import { wagmiAbi } from './abi.ts'

const value = decodeErrorResult({
  abi: wagmiAbi,
  data: '0xb758934b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000'
})
// { errorName: 'InvalidTokenError', args: ['sold out'] }

----------------------------------------

TITLE: Recovering Message Address with viem in TypeScript
DESCRIPTION: This example demonstrates how to recover a signing address from a message and signature. It first signs a message using a wallet client and then recovers the original signing address with the recoverMessageAddress function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { recoverMessageAddress } from 'viem';
import { account, walletClient } from './config'
 
const signature = await walletClient.signMessage({
  account,
  message: 'hello world',
})

const address = await recoverMessageAddress({
  message: 'hello world',
  signature,
})

----------------------------------------

TITLE: Encoding Function Data in Viem
DESCRIPTION: Demonstrates how to use viem's encodeFunctionData function to encode function calls with arguments, equivalent to ethers.js Interface.encodeFunctionData method with a different parameter structure.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_47

LANGUAGE: typescript
CODE:
import { encodeFunctionData, parseEther } from 'viem'
import { abi } from './abi'

const data = encodeFunctionData({
  abi,
  functionName: 'transferFrom',
  args: [
    '0x8ba1f109551bD432803012645Ac136ddd64DBA72',
    '0xaB7C8803962c0f2F5BBBe3FA8bf41cd82AA1923C',
    parseEther('1.0')
  ]
})

----------------------------------------

TITLE: Watching Block Numbers with Public Client in TypeScript
DESCRIPTION: Demonstrates how to use the watchBlockNumber function with a public client to monitor incoming block numbers. The function returns an unwatch function that can be used to stop watching.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const unwatch = publicClient.watchBlockNumber(
  { onBlockNumber: blockNumber => console.log(blockNumber) }
)

----------------------------------------

TITLE: Event-Specific Contract Watching
DESCRIPTION: Example of watching a specific named event (Transfer) on a contract using viem.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/watchContractEvent.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { publicClient } from './client'
import { wagmiAbi } from './abi'

const unwatch = publicClient.watchContractEvent({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  eventName: 'Transfer',
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Basic Usage of decodeFunctionResult
DESCRIPTION: Demonstrates how to decode a simple function result using decodeFunctionResult with an ABI and function name.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionResult.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { decodeFunctionResult } from 'viem'
import { wagmiAbi } from './abi.ts'

const value = decodeFunctionResult({
  abi: wagmiAbi,
  functionName: 'ownerOf',
  data: '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac'
})
// '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'

----------------------------------------

TITLE: Extending Client with OP Stack Actions in TypeScript
DESCRIPTION: Extends a Viem public client with OP Stack Layer 2 actions. This enables the client to interact with OP Stack-specific functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack' 

const client = createPublicClient({
  chain: base,
  transport: http(),
}).extend(publicActionsL2()) 

----------------------------------------

TITLE: Setting Block Timestamp Interval with Specific Value in TypeScript
DESCRIPTION: This snippet demonstrates setting the block timestamp interval to 1 second using the setBlockTimestampInterval function from a Viem test client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBlockTimestampInterval.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
await testClient.setBlockTimestampInterval({
  interval: 1
})

----------------------------------------

TITLE: Using encodePacked function to encode mixed data types
DESCRIPTION: Demonstrates how to use encodePacked to create ABI non-standard packed encoded data with different Solidity types including address, string, and bytes16 array.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodePacked.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
encodePacked(
  ['address', 'string', 'bytes16[]'], 
  [
    '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 
    'hello world',
    ['0xdeadbeefdeadbeefdeadbeefdeadbeef', '0xcafebabecafebabecafebabecafebabe']
  ]
)
// 0xd8da6bf26964af9d7eed9e03e53415d37aa9604568656c6c6f20776f726c64deadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000cafebabecafebabecafebabecafebabe00000000000000000000000000000000

----------------------------------------

TITLE: Basic Withdrawal Initiation Example
DESCRIPTION: Example showing how to initiate a withdrawal from L2 to L1 using the walletClientL2
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/initiateWithdrawal.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { base } from 'viem/chains'
import { account, walletClientL2 } from './config'
 
const hash = await walletClientL2.initiateWithdrawal({
  account,
  request: {
    gas: 21_000n,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  },
})

----------------------------------------

TITLE: Interacting with Delegated Account in TypeScript
DESCRIPTION: This snippet demonstrates how to interact with a previously delegated Account by invoking its functions. No Authorization is needed for this interaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
import { abi } from './contract'

const eoa = privateKeyToAccount('0x...')

const hash = await walletClient.writeContract({
  abi,
  address: eoa.address,
  functionName: 'ping',
})

----------------------------------------

TITLE: Configuring viem Client with OP Stack Extensions
DESCRIPTION: Configuration setup for creating a public client with OP Stack extensions enabled for the Base network. Shows how to set up both JSON-RPC and local accounts for use with estimateTotalGas.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateTotalGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack'

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Configuration Setup for Smart Account
DESCRIPTION: Configuration setup for creating a public client and defining an owner account from a private key. This setup is required for initializing a Smart Account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { http, createPublicClient } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const owner = privateKeyToAccount('0x...')
 
export const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Account Hoisting with viem Wallet Client in TypeScript
DESCRIPTION: Shows how to hoist an account on the wallet client to avoid passing it in every transaction request. This approach simplifies the transaction signing process.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
 
const request = await walletClient.prepareTransactionRequest({
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

const signature = await walletClient.signTransaction(request)
// 0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33

const hash = await walletClient.sendRawTransaction(signature)

----------------------------------------

TITLE: Implementing User Operation with Dedicated Paymaster Client
DESCRIPTION: Sets up a Bundler Client with a dedicated Paymaster Client for sponsoring transaction fees. Uses Pimlico's Paymaster API to handle gas fee sponsorship across multiple chains.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { 
  createBundlerClient, 
  createPaymasterClient,
} from 'viem/account-abstraction'
import { account, client } from './config.ts'

const paymasterClient = createPaymasterClient({
  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}'),
})

const bundlerClient = createBundlerClient({
  account,
  client,
  paymaster: paymasterClient,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

const hash = await bundlerClient.sendUserOperation({
  calls: [{
    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
    value: parseEther('0.001')
  }]
})

----------------------------------------

TITLE: Using State Overrides in Contract Simulation
DESCRIPTION: Demonstrates how to use state overrides when simulating contract interactions. This example simulates a token transfer on behalf of another user by modifying the contract's state to have maximum approval.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'
import { abi, address } from './contract'

// Allowance slot: A 32 bytes hex string representing the allowance slot of the sender.
const allowanceSlot = '0x....'

// Max allowance: A 32 bytes hex string representing the maximum allowance (2^256 - 1)
const maxAllowance = numberToHex(maxUint256)

const { result } = await publicClient.simulateContract({
  abi,
  address,
  account,
  functionName: 'transferFrom',
  args: [
    '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', 
    account.address, 
    69420n
  ],
  stateOverride: [
    {
      // modifying the state of the token contract
      address,
      stateDiff: [
        {
          slot: allowanceSlot,
          value: maxAllowance,
        },
      ],
    },
  ],
})

console.log(result)
// @log: Output: true

----------------------------------------

TITLE: Basic Usage of parseAbiParameters with String Input
DESCRIPTION: Demonstrates how to parse a string of human-readable ABI parameters into structured AbiParameter objects. The example shows parsing parameters for a token transfer function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameters.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseAbiParameters } from 'viem'

const abiParameters = parseAbiParameters(
  //  ^? const abiParameters: [{ type: "address"; name: "from"; }, { type: "address";...
  'address from, address to, uint256 amount',
)

----------------------------------------

TITLE: Basic User Operation Example
DESCRIPTION: Demonstrates how to send a basic user operation with an account and value transfer.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, bundlerClient } from './config'

const hash = await bundlerClient.sendUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
})

----------------------------------------

TITLE: Setting up Bundler Client for User Operations
DESCRIPTION: Creates a Bundler Client that will be used to submit User Operations to the network. Uses Pimlico's public endpoint as an example.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { createBundlerClient } from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

const bundlerClient = createBundlerClient({
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

----------------------------------------

TITLE: Message Signing with Account Hoisting
DESCRIPTION: Shows how to sign messages when the account is hoisted on the wallet client, eliminating the need to pass the account parameter with each call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { walletClient } from './config'

const signature = await walletClient.signMessage({
  message: 'hello world',
})

----------------------------------------

TITLE: Verifying SIWE Message with Additional Parameters in TypeScript
DESCRIPTION: This snippet demonstrates the use of optional parameters in the verifySiweMessage function, such as address, blockNumber, blockTag, domain, nonce, scheme, and time. These parameters allow for more specific verification scenarios.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/actions/verifySiweMessage.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const valid = await publicClient.verifySiweMessage({
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  blockNumber: 42069n,
  blockTag: 'safe',
  domain: 'viem.sh',
  nonce: generateSiweNonce(),
  scheme: 'https',
  time: new Date(),
  message,
  signature:
    '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})

----------------------------------------

TITLE: Contract Read with Arguments
DESCRIPTION: Shows how to call a contract function (balanceOf) that requires arguments, with TypeScript type inference.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { publicClient } from './client'
import { wagmiAbi } from './abi'

const data = await publicClient.readContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'balanceOf',
  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']
})

----------------------------------------

TITLE: Event Watching with Indexed Arguments
DESCRIPTION: Example of watching events with specific indexed argument values for filtering
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const unwatch = publicClient.watchEvent({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),
  args: {
    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'
  },
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Using getAbiItem Function to Retrieve ABI Item
DESCRIPTION: Demonstrates how to use the getAbiItem function to retrieve an item from an ABI array. It includes an example ABI and shows how to extract a specific item by name.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/getAbiItem.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getAbiItem } from 'viem'

const encodedData = getAbiItem({
  abi: [
    { 
      name: 'x', 
      type: 'function', 
      inputs: [{ type: 'uint256' }], 
      outputs: [],
      stateMutability: 'payable'
    },
    { 
      name: 'y', 
      type: 'event', 
      inputs: [{ type: 'address' }], 
      outputs: [{ type: 'uint256' }],
      stateMutability: 'view'
    },
    { 
      name: 'z', 
      type: 'function', 
      inputs: [{ type: 'string' }],
      outputs: [{ type: 'uint256' }],
      stateMutability: 'view'
    }
  ],
  name: 'y',
})
/**
 * { 
 *  name: 'y', 
 *  type: 'event', 
 *  inputs: [{ type: 'address' }], 
 *  outputs: [{ type: 'uint256' }],
 *  stateMutability: 'view'
 * }
 */

----------------------------------------

TITLE: Configuring KZG Interface
DESCRIPTION: Sets up the KZG interface by connecting the KZG bindings with Viem using the mainnet trusted setup.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/guides/blob-transactions.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import * as cKzg from 'c-kzg'
import { setupKzg } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

export const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)

----------------------------------------

TITLE: Retrieving Paymaster Data for User Operations in TypeScript
DESCRIPTION: Example of retrieving paymaster-related User Operation properties using the paymasterClient. This function returns necessary paymaster information including address, data, and gas limits.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'
})

----------------------------------------

TITLE: Estimating Gas with Contract Data in TypeScript
DESCRIPTION: Demonstrates how to include contract data when estimating gas for a transaction using viem's estimateGas function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const gas = await publicClient.estimateGas({
  data: '0x...',
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1')
})

----------------------------------------

TITLE: Verifying a Signed Message using verifyMessage in TypeScript
DESCRIPTION: This snippet demonstrates how to use the verifyMessage function from viem to verify a signed message. It includes creating a wallet client, signing a message, and then verifying the signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyMessage.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { verifyMessage } from 'viem'
import { account, walletClient } from './client'

const signature = await walletClient.signMessage({
  account,
  message: 'hello world',
})

const valid = await verifyMessage({
  address: account.address,
  message: 'hello world',
  signature,
})
// true

----------------------------------------

TITLE: Creating an Event Filter with Multiple Argument Options
DESCRIPTION: Creates an event filter with an array of possible values for an indexed argument. This example matches Transfer events from any of three different addresses.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'

const filter = await publicClient.createEventFilter({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),
  args: {
    // '0xd8da...' OR '0xa5cc...' OR '0xa152...'
    from: [
      '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 
      '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',
      '0xa152f8bb749c55e9943a3a0a3111d18ee2b3f94e',
    ],
  }
})

----------------------------------------

TITLE: Viem Public Client Configuration
DESCRIPTION: Setup of the viem public client for interacting with the Ethereum mainnet using HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/multicall.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Sending Transactions with Paymaster on ZKsync
DESCRIPTION: Demonstrates how to send a transaction with paymaster support on ZKsync. This enables gas-free transactions where a paymaster contract covers the gas fees. The transaction includes paymaster address and input parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const hash = await walletClient.sendTransaction({
  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n,
  paymaster: '0xFD9aE5ebB0F6656f4b77a0E99dCbc5138d54b0BA',
  paymasterInput: '0x123abc...'
})

----------------------------------------

TITLE: Type Inference with EIP-712 Typed Data Signing
DESCRIPTION: Shows how TypeScript provides type inference for EIP-712 structured data when using signTypedData. The types definition enables automatic validation of the message structure.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const result = client.signTypedData({
  domain: {
    name: 'Ether Mail',
    version: '1',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
  },

  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },

  primaryType: 'Mail',

  message: {
    // ^?












    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Transaction Receipt with Custom Confirmations
DESCRIPTION: Example showing how to wait for multiple confirmations before resolving the receipt
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const transaction = await publicClient.waitForTransactionReceipt(
  { 
    confirmations: 5,
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d' 
  }
)

----------------------------------------

TITLE: Importing Chain-specific Exports in TypeScript
DESCRIPTION: Demonstrates the new import paths for chain-specific exports, moving from 'viem/chains/utils' to specific chain packages like 'viem/celo', 'viem/op-stack', and 'viem/zksync'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import {
  parseTransaction,
  serializeTransaction
} from 'viem/celo'

import {
  // ...
} from 'viem/op-stack'

import {
  parseTransaction,
  serializeTransaction,
  // ...
} from 'viem/zksync'

----------------------------------------

TITLE: Using OP Stack Actions to Estimate L1 Gas in TypeScript
DESCRIPTION: Demonstrates how to use an OP Stack-extended client to estimate Layer 1 gas fees for a transaction. This is important for calculating the total cost of transactions on OP Stack chains.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http, parseEther } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
}).extend(publicActionsL2()) 

const l1Gas = await client.estimateL1Gas({ 
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', 
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
  value: parseEther('1') 
}) 

----------------------------------------

TITLE: Using sendRawTransaction with Serialized Transaction in TypeScript
DESCRIPTION: This example shows how to use the sendRawTransaction function with a pre-serialized transaction. It demonstrates the direct use of the serializedTransaction parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendRawTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const signature = await walletClient.sendRawTransaction({
  serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'
})

----------------------------------------

TITLE: Setting Storage Value Using TestClient in TypeScript
DESCRIPTION: This snippet demonstrates how to use the setStorageAt function from a testClient to write a value to a specific storage slot of an Ethereum account. It requires a configured testClient and specifies the address, index, and value to be set.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setStorageAt.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.setStorageAt({
  address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',
  index: 2,
  value: '0x0000000000000000000000000000000000000000000000000000000000000069'
})

----------------------------------------

TITLE: Retrieving Transaction by Block Hash and Index in TypeScript
DESCRIPTION: This example demonstrates how to use the getTransaction function to retrieve transaction information using a block hash and index. It showcases the usage of the blockHash and index parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const transaction = await publicClient.getTransaction({
  blockHash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  index: 0
})

----------------------------------------

TITLE: Checking Transaction Confirmations using Hash
DESCRIPTION: Shows how to get transaction confirmations using a transaction hash directly with the Viem public client. Returns the number of blocks passed since transaction processing.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionConfirmations.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const confirmations = await publicClient.getTransactionConfirmations({
  hash: '0x...'
})
// @log: 15n

----------------------------------------

TITLE: Transaction Request with Access List
DESCRIPTION: Shows how to prepare a transaction request that includes an access list for optimized gas usage.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const request = await walletClient.prepareTransactionRequest({
  accessList: [
    {
      address: '0x1',
      storageKeys: ['0x1'],
    },
  ],
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Decoding Function Data in Viem
DESCRIPTION: Demonstrates how to use viem's decodeFunctionData function to decode function call data, equivalent to ethers.js Interface.decodeFunctionData method with a different parameter structure.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_55

LANGUAGE: typescript
CODE:
import { decodeFunctionData, parseEther } from 'viem'
import { abi } from './abi'

const result = decodeFunctionData({
  abi,
  data: '0x23b872dd0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c0000000000000000000000000000000000000000000000000de0b6b3a7640000',
})

----------------------------------------

TITLE: Authorizing Contract Designation in TypeScript
DESCRIPTION: This snippet demonstrates how to sign an Authorization to designate a Contract to an Account using the Viem library. It uses a private key to instantiate an EOA and signs the authorization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
import { contractAddress } from './contract'

const eoa = privateKeyToAccount('0x...')
 
const authorization = await walletClient.signAuthorization({
  account: eoa,
  contractAddress,
})

----------------------------------------

TITLE: Simulating Contract Call with Viem
DESCRIPTION: How to simulate a contract function call using Viem. This creates a public client and uses the simulateContract method to test what would happen if the transaction was executed.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_25

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { wagmiContractConfig } from './abi'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

await client.simulateContract({
  ...wagmiContractConfig, 
  functionName: 'mint'
})

----------------------------------------

TITLE: Signing Typed Data Example
DESCRIPTION: Example showing how to sign typed data using a private key account with domain, types and message parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTypedData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
import { domain, types } from './data'

const account = privateKeyToAccount('0x...')

const signature = await account.signTypedData({
  domain,
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Estimating Gas with Gas Price for Legacy Transactions in TypeScript
DESCRIPTION: Shows how to specify a gas price when estimating gas for legacy transactions using viem's estimateGas function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const gas = await publicClient.estimateGas({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  gasPrice: parseGwei('20'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1') 
})

----------------------------------------

TITLE: Creating a Mnemonic Account with viem
DESCRIPTION: Initialize a mnemonic account using a BIP-39 phrase and create a wallet client. The account can be used for signing transactions and messages with the derived private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { mnemonicToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const account = mnemonicToAccount('legal winner thank year wave sausage worth useful legal winner thank yellow') // [!code focus]

const client = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Making Contract Function Calls with ERC-7821
DESCRIPTION: Example of using ERC-7821 to make contract function calls with ABI, functionName, and arguments, combining both simple value transfers and contract interactions in batches.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, client } from './config'

const abi = parseAbi([
  'function approve(address, uint256) returns (bool)',
  'function transferFrom(address, address, uint256) returns (bool)',
])
 
const hash = await client.execute({
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  batches: [
    {
      calls: [
        {
          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
          value: parseEther('1')
        },
      ]
    },
    {
      calls: [
        {
          to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
          abi,
          functionName: 'approve',
          args: [
            '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
            100n
          ],
        },
        {
          to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
          abi,
          functionName: 'transferFrom',
          args: [
            '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
            '0x0000000000000000000000000000000000000000',
            100n
          ],
        },
      ],
    },
  ],
})

----------------------------------------

TITLE: Proving Withdrawals from L2 to L1 with Viem's OP Stack Actions
DESCRIPTION: Demonstrates how to prove a withdrawal transaction from Layer 2 to Layer 1 using Viem. This includes waiting for the L2 output proposal (typically up to one hour), building the parameters for the prove withdrawal transaction, and executing the transaction on L1.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { 
  account, 
  publicClientL1,
  publicClientL2, 
  walletClientL1,
  walletClientL2 
} from './config'

// (Shortcut) Get receipt from transaction created in Step 1.
const receipt = 
  await publicClientL2.getTransactionReceipt({ hash: '0x...' })

// 1. Wait until the withdrawal is ready to prove.
const { output, withdrawal } = await publicClientL1.waitToProve({ 
  receipt,
  targetChain: walletClientL2.chain
})

// 2. Build parameters to prove the withdrawal on the L2.
const args = await publicClientL2.buildProveWithdrawal({
  output,
  withdrawal,
})

// 3. Prove the withdrawal on the L1.
const hash = await walletClientL1.proveWithdrawal(args)

// 4. Wait until the prove withdrawal is processed.
const receipt = await publicClientL1.waitForTransactionReceipt({
  hash
})

----------------------------------------

TITLE: Installing and Using decodeDeployData Function
DESCRIPTION: Example showing how to import and use the decodeDeployData function to decode contract deployment data including bytecode and constructor arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeDeployData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { decodeDeployData } from 'viem'
import { wagmiAbi } from './abi.ts'

const { args } = decodeDeployData({
  abi: wagmiAbi,
  bytecode: '0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220116554d4ba29ee08da9e97dc54ff9a2a65d67a648140d616fc225a25ff08c86364736f6c63430008070033',
  data: '0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220116554d4ba29ee08da9e97dc54ff9a2a65d67a648140d616fc225a25ff08c86364736f6c634300080700330000000000000000000000000000000000000000000000000000000000010f2c'
})

----------------------------------------

TITLE: Configuring viem Wallet Client with JSON-RPC Account in TypeScript
DESCRIPTION: Demonstrates how to configure the viem wallet client using a JSON-RPC account retrieved from an EIP-1193 provider like window.ethereum.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
})

export const walletClient = createWalletClient({
  account,
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: Partial Event Log Decoding
DESCRIPTION: Shows how to handle partial log decoding by setting strict mode to false for nonconforming logs.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
parseEventLogs({
  abi: parseAbi(['event Transfer(address indexed, address, uint256)']),
  logs: [{
    data: '0x0000000000000000000000000000000000000000000000000000000000000001',
    topics: [
      '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
      '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    ]
  }],
  strict: false
})

----------------------------------------

TITLE: Retrieving Raw Event Filter Changes in TypeScript using viem
DESCRIPTION: Creates a raw event filter for a specific event signature and retrieves changes using getFilterChanges. Returns an array of event logs.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterChanges.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'
import { publicClient } from './client'

const filter = await publicClient.createEventFilter({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),
})
const logs = await publicClient.getFilterChanges({ filter })

----------------------------------------

TITLE: Event Log Filtering with ABI Event
DESCRIPTION: Shows how to filter logs using a manually constructed ABI event object with indexed parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getLogs.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const logs = await publicClient.getLogs(publicClient, {
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: {
    name: 'Transfer',
    inputs: [
      { type: 'address', indexed: true, name: 'from' },
      { type: 'address', indexed: true, name: 'to' },
      { type: 'uint256', indexed: false, name: 'value' }
    ]
  },
  args: {
    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'
  },
  fromBlock: 16330000n,
  toBlock: 16330050n
})

----------------------------------------

TITLE: Configuring viem Wallet Client with Local Account in TypeScript
DESCRIPTION: Shows how to set up the viem wallet client using a local account derived from a private key, along with an HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTransaction.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'

export const walletClient = createWalletClient({
  account: privateKeyToAccount('0x...'),
  transport: http()
})

----------------------------------------

TITLE: Creating Event Filter and Getting Logs in TypeScript using Viem
DESCRIPTION: This snippet demonstrates how to create an event filter for a specific contract address and event, then retrieve the logs using the getFilterLogs function from the Viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterLogs.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'
import { publicClient } from './client'

const filter = await publicClient.createEventFilter({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),
})
const logs = await publicClient.getFilterLogs({ filter })
// @log: [{ ... }, { ... }, { ... }]

----------------------------------------

TITLE: Signing Typed Data with ERC-7739 Format in TypeScript
DESCRIPTION: This code snippet demonstrates how to use the signTypedData function from the viem library to sign EIP-712 typed data using the ERC-7739 TypedDataSign format. It includes the necessary imports, domain and types definitions, and the function call with all required parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signTypedData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'
import { domain, types } from './data'

const signature = await walletClient.signTypedData({
  // Account used for signing.
  account,
  domain,
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  // Verifying contract address (e.g. ERC-4337 Smart Account).
  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2'
})

----------------------------------------

TITLE: Using Public Client to Get Block Number
DESCRIPTION: Demonstrates how to use the Public Client to retrieve the current block number from the Ethereum network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const blockNumber = await publicClient.getBlockNumber()

----------------------------------------

TITLE: Using formatUnits for Numeric Conversion
DESCRIPTION: Demonstrates how to use formatUnits to convert a bigint value using a base-10 exponent. The example shows converting 420000000000n with exponent 9 to produce '420'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/formatUnits.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { formatUnits } from 'viem'

formatUnits(420000000000n, 9)
// '420'

----------------------------------------

TITLE: Getting Filter Changes in TypeScript using Viem
DESCRIPTION: This snippet demonstrates how to use the getFilterChanges function with a previously created filter to retrieve new event logs. It shows the basic structure of calling the function with a filter parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterLogs.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const filter = await publicClient.createEventFilter()
const logs = await publicClient.getFilterChanges({
  filter,
})

----------------------------------------

TITLE: viem Contract Write Example
DESCRIPTION: Example showing how to use viem's writeContract method with named parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/faq.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, parseAbi } from 'viem'

const client = createWalletClient(…)
client.writeContract({
  address: '0x…',
  abi: parseAbi([
    'function transferFrom(address sender, address recipient, uint256 amount) returns (bool)',
  ]),
  functionName: 'transferFrom',
  args: {
    sender: '0x…',
    recipient: '0x…',
    amount: 100n,
  },
})

----------------------------------------

TITLE: Estimating Total Fee for L2 Transaction in TypeScript using viem
DESCRIPTION: This snippet demonstrates how to use the estimateTotalFee function from the viem library to calculate the total fee for an L2 transaction. It includes both the function call and the necessary configuration setup.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateTotalFee.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const fee = await publicClient.estimateTotalFee({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1')
})

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack'

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Contract Reading Simulation in TypeScript
DESCRIPTION: Demonstrates how to simulate read-only contract calls using simulateCalls. Shows examples of querying totalSupply and ownerOf functions with success and failure handling.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { parseAbi } from 'viem'
import { client } from './config'

const abi = parseAbi([
  'function totalSupply() returns (uint256)',
  'function ownerOf(uint256) returns (address)',
])
 
const { results } = await client.simulateCalls({
  calls: [
    {
      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'totalSupply',
    },
    {
      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'ownerOf',
      args: [69420n],
    },
    {
      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'ownerOf',
      args: [13371337n],
    },
  ],
})

----------------------------------------

TITLE: Waiting for User Operation Receipt with Bundler Client in TypeScript
DESCRIPTION: This snippet demonstrates how to use waitForUserOperationReceipt to wait for a User Operation to be included on a Block and retrieve its receipt. The function takes a hash parameter and returns a UserOperationReceipt object containing details like blockHash, blockNumber, sender, and status.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { bundlerClient } from './client'

const receipt = await bundlerClient.waitForUserOperationReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'
})
// @log: {
// @log:   blockHash: '0xaf1dadb8a98f1282e8f7b42cc3da8847bfa2cf4e227b8220403ae642e1173088',
// @log:   blockNumber: 15132008n,
// @log:   sender: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
// @log:   ...
// @log:   status: 'success',
// @log: }

----------------------------------------

TITLE: Defining ABI for decodeEventLog Example
DESCRIPTION: Shows the ABI definition used in the decodeEventLog example, including the Transfer event structure.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeEventLog.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [
      {
        indexed: true,
        name: 'from',
        type: 'address',
      },
      { indexed: true, name: 'to', type: 'address' },
      {
        indexed: false,
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  ...
] as const;

----------------------------------------

TITLE: Using parseAbiParameters with Array Input Including Custom Structs
DESCRIPTION: Shows how to use parseAbiParameters with an array of strings, including a custom struct definition. The example demonstrates parsing a parameter with a struct type.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameters.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseAbiParameters } from 'viem'

const abiParameters = parseAbiParameters([
  //  ^? const abiParameters: [{ type: "tuple"; components: [{ type: "string"; name:...
  'Baz bar',
  'struct Baz { string name; }',
])

----------------------------------------

TITLE: Configuring CCIP Read Request Handler in Viem Wallet Client
DESCRIPTION: Demonstrates how to set up a custom handler for offchain CCIP (Cross-Chain Interoperability Protocol) lookup requests when creating a wallet client. This function is called to make the offchain CCIP lookup request as specified in EIP-3668.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
const client = createWalletClient({
  ccipRead: {
    async request({ data, sender, urls }) {
      // ...
    }
  },
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: Basic Fee Estimation Example in TypeScript
DESCRIPTION: Example showing basic usage of estimateFee to calculate transaction fees.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/estimateFee.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const fee = await client.estimateFee({
  account: '0x636A122e48079f750d44d13E5b39804227E1467e',
  to: "0xa61464658AfeAf65CccaaFD3a512b69A83B77618",
  value: 0n
});

----------------------------------------

TITLE: Configuring TypeScript for Viem with Strict Mode
DESCRIPTION: Sets up the tsconfig.json with strict mode enabled, which is required for Viem's type system to work correctly.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_0

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strict": true // [!code focus]
  }
}

----------------------------------------

TITLE: Basic Contract Gas Estimation in TypeScript
DESCRIPTION: Example showing basic usage of estimateContractGas to calculate gas for a contract mint function with no arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/estimateContractGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'
import { wagmiAbi } from './abi'

const gas = await publicClient.estimateContractGas({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account,
})
// 69420n

----------------------------------------

TITLE: JSON-RPC Account Configuration
DESCRIPTION: Configuration setup for using a JSON-RPC account with the wallet client, retrieving the account from an EIP-1193 provider.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signMessage.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'

const [account] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
})

export const walletClient = createWalletClient({
  account,
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: Building Withdrawal Parameters with viem for OP Stack L2
DESCRIPTION: Demonstrates how to use the buildInitiateWithdrawal function to prepare parameters for an L2 to L1 withdrawal. It shows the basic usage with an account, recipient address, and withdrawal amount.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildInitiateWithdrawal.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClientL1, walletClientL2 } from './config'

const args = await publicClientL1.buildInitiateWithdrawal({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1'),
})
 
const hash = await walletClientL2.initiateWithdrawal(args)

----------------------------------------

TITLE: Using Custom Serializer for Transaction Signing in TypeScript
DESCRIPTION: Shows how to implement a custom serializer for transaction types not natively supported by viem. The serializer function takes the transaction object and returns a hexadecimal string representation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseGwei } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'

const account = privateKeyToAccount('0x...')

const signature = await account.signTransaction({
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('3'),
  gas: 21000n,
  nonce: 69,
  to: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
}, {
  serializer(transaction) { // [!code focus:16]
    const {
      chainId,
      nonce,
      // ...
    } = transaction

    return concatHex([
      '0x69',
      toRlp([
        toHex(chainId),
        nonce ? toHex(nonce) : '0x',
        // ...
      ]),
    ])
  }
})

----------------------------------------

TITLE: Self-executing EIP-7702 in TypeScript
DESCRIPTION: This snippet shows how to perform a self-executing EIP-7702 transaction where the EOA both signs the Authorization and executes the Transaction. The 'executor: 'self'' parameter is crucial for proper nonce handling.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
import { abi, contractAddress } from './contract'

const authorization = await walletClient.signAuthorization({
  contractAddress,
  executor: 'self',
})

const hash = await walletClient.writeContract({
  abi,
  address: walletClient.account.address,
  authorizationList: [authorization],
  functionName: 'initialize',
})

----------------------------------------

TITLE: Retrieving Block Filter Changes in TypeScript using viem
DESCRIPTION: Creates a block filter and retrieves changes using getFilterChanges. Returns an array of block hashes.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterChanges.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const filter = await publicClient.createBlockFilter()
const hashes = await publicClient.getFilterChanges({ filter })

----------------------------------------

TITLE: Retrieving Latest L1 Batch Number in zkSync using TypeScript
DESCRIPTION: This snippet demonstrates how to use the getL1BatchNumber function to retrieve the latest L1 batch number from a zkSync client. It requires a configured client instance.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchNumber.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const latestNumber = await client.getL1BatchNumber();

----------------------------------------

TITLE: Self-executing EIP-7702 Transaction in TypeScript
DESCRIPTION: This snippet shows how to perform a self-executing EIP-7702 transaction where the EOA both signs the authorization and executes the transaction. It demonstrates the use of 'executor: 'self'' in the signAuthorization call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { encodeFunctionData } from 'viem'
import { walletClient } from './config'
import { contractAddress } from './contract'

const authorization = await walletClient.signAuthorization({
  contractAddress,
  executor: 'self',
})

const hash = await walletClient.sendTransaction({
  authorizationList: [authorization],
  data: encodeFunctionData({
    abi,
    functionName: 'initialize',
  }),
  to: walletClient.account.address,
})

----------------------------------------

TITLE: Extracting Chain Data Using All Available Chains in TypeScript
DESCRIPTION: Demonstrates how to extract chain information using all available chains from the viem/chains module. Note that this approach increases bundle size and is recommended only for server-side usage.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/extractChain.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { extractChain } from 'viem'
import * as chains from 'viem/chains'

const optimism = extractChain({
  chains: Object.values(chains),
  id: 10,
})

optimism.id
//       ^? (property) id: 10
optimism.name
//       ^? (property) name: "OP Mainnet"

----------------------------------------

TITLE: Event Topic Encoding with Arguments in TypeScript
DESCRIPTION: Shows how to encode event topics with indexed parameters for a Transfer event. Demonstrates passing address arguments for 'from' and 'to' parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeEventTopics.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { encodeEventTopics } from 'viem'

const topics = encodeEventTopics({
  abi: wagmiAbi,
  eventName: 'Transfer'
  args: {
    from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
  }
})

----------------------------------------

TITLE: Initializing Bundler Client with HTTP Transport in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Bundler Client using the createBundlerClient function from viem/account-abstraction. It configures the client with the mainnet chain and an HTTP transport pointing to a Pimlico RPC endpoint.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_14

LANGUAGE: typescript
CODE:
const bundlerClient = createBundlerClient({
  chain: mainnet,
  transport: http('https://public.pimlico.io/v2/1/rpc'), // [!code focus]
})

----------------------------------------

TITLE: Using parseTransaction Function - TypeScript
DESCRIPTION: Demonstrates how to parse a serialized RLP-encoded transaction using the parseTransaction function. The function takes a hexadecimal string input and returns a structured TransactionSerializable object.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseTransaction } from 'viem'

const transaction = parseTransaction('0x02ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')

----------------------------------------

TITLE: Execute Function with Contract Calls
DESCRIPTION: Example demonstrating the execute function with contract calls using ABI, functionName, and args properties, including Ethereum transfers, token approvals, and token transfers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, client } from './config'

const abi = parseAbi([
  'function approve(address, uint256) returns (bool)',
  'function transferFrom(address, address, uint256) returns (bool)',
])
 
const hash = await client.execute({
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'approve',
      args: [
        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
        100n
      ],
    },
    {
      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'transferFrom',
      args: [
        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
        '0x0000000000000000000000000000000000000000',
        100n
      ],
    },
  ],
})

----------------------------------------

TITLE: Performance Optimization for encodeFunctionData in TypeScript
DESCRIPTION: Shows how to optimize performance when calling the same function multiple times by preparing the function selector once and reusing it.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { prepareEncodeFunctionData, encodeFunctionData } from 'viem'

const transfer = prepareEncodeFunctionData({
  abi: erc20Abi,
  functionName: 'transfer',
})

for (const address of addresses) {
  const data = encodeFunctionData({
    ...transfer,
    args: [address, 69420n],
  })
}

----------------------------------------

TITLE: Serializing Celo Transactions
DESCRIPTION: Demonstrates how to serialize Celo transaction objects with custom parameters like feeCurrency for USDC payments, supporting various transaction types.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/celo.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { serializeTransaction } from 'viem/celo'

const serialized = serializeTransaction({
  chainId: 42220,
  gas: 21001n,
  feeCurrency: "0x2F25deB3848C207fc8E0c34035B3Ba7fC157602B" // whitelisted adapter for USDC
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  nonce: 69,
  to: '0x1234512345123451234512345123451234512345',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Using Gas Parameter in Call Action
DESCRIPTION: Example of specifying the gas parameter when making a call. This parameter sets the gas limit provided for transaction execution.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_14

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  gas: 1_000_000n, // [!code focus]
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Implementing Typed Data Signing
DESCRIPTION: Demonstrates implementation of the signTypedData function for signing EIP-712 typed data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const account = toAccount({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  async signMessage({ message }) {
    return signMessage({ message, privateKey })
  },
  async signTransaction(transaction, { serializer }) {
    return signTransaction({ privateKey, transaction, serializer })
  },
  async signTypedData(typedData) {
    return signTypedData({ ...typedData, privateKey })
  },
})

----------------------------------------

TITLE: Event Log Parsing with Multiple Argument Values
DESCRIPTION: Demonstrates filtering logs using multiple values for a single argument using an array.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const logs = parseEventLogs({ 
  abi: erc20Abi, 
  args: {
    from: [
      '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
      '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
    ],
  },
  logs: receipt.logs,
})

----------------------------------------

TITLE: Creating an Access List with Max Fee Per Gas
DESCRIPTION: Shows how to create an access list with a specified max fee per gas for EIP-1559 Transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { parseEther, parseGwei } from 'viem'

const result = await publicClient.createAccessList({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xdeadbeef',
  maxFeePerGas: parseGwei('20'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
})

----------------------------------------

TITLE: Writing to ZKsync Smart Contract
DESCRIPTION: Shows how to interact with a smart contract on ZKsync by calling a mint function. Includes contract address specification, ABI parsing, and function execution.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const hash = await walletClient.writeContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),
  functionName: 'mint',
  args: [69420],
})

----------------------------------------

TITLE: Basic Message Verification Example in TypeScript
DESCRIPTION: Example showing how to verify a signed message using the publicClient.verifyMessage method. Includes initial message signing and subsequent verification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
const signature = await walletClient.signMessage({
  account,
  message: 'hello world',
})
const valid = await publicClient.verifyMessage({
  address: account.address,
  message: 'hello world',
  signature,
})

----------------------------------------

TITLE: Configuration for Viem Clients and Accounts
DESCRIPTION: This snippet shows the configuration for creating a public client, a private key account, and a Coinbase smart account in Viem. It sets up the necessary components for the other code examples.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { createPublicClient, http, parseEther } from 'viem'
import { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts' 

export const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

const owner = privateKeyToAccount('0x...')

export const account = await toCoinbaseSmartAccount({ 
  client, 
  owners: [owner]
})

----------------------------------------

TITLE: Finalizing Withdrawals from L2 to L1 with Viem's OP Stack Actions
DESCRIPTION: Shows how to finalize a withdrawal after it has been proved. This includes waiting for the 7-day finalization period, finalizing the withdrawal on L1, and confirming the transaction has been processed, completing the withdrawal process.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { getWithdrawals } from 'viem/op-stack'
import { 
  account, 
  publicClientL1,
  publicClientL2, 
  walletClientL1,
  walletClientL2 
} from './config'

// (Shortcut) Get receipt from transaction created in Step 1.
const receipt = 
  await publicClientL2.getTransactionReceipt({ hash: '0x...' })

// (Shortcut) Get withdrawals from receipt in Step 3.
const [withdrawal] = getWithdrawals(receipt)

// 1. Wait until the withdrawal is ready to finalize.
await publicClientL1.waitToFinalize({
  targetChain: walletClientL2.chain,
  withdrawalHash: withdrawal.withdrawalHash,
})

// 2. Finalize the withdrawal.
const hash = await walletClientL1.finalizeWithdrawal({
  targetChain: walletClientL2.chain,
  withdrawal,
})

// 3. Wait until the withdrawal is finalized.
const receipt = await publicClientL1.waitForTransactionReceipt({
  hash
})

----------------------------------------

TITLE: Basic Event Log Parsing Example
DESCRIPTION: Basic example showing how to use parseEventLogs to decode ERC20 transfer and approval logs from a transaction receipt.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEventLogs } from 'viem'
import { erc20Abi } from './abi'
import { client } from './client'

const receipt = await getTransactionReceipt(client, {
  hash: '0xec23b2ba4bc59ba61554507c1b1bc91649e6586eb2dd00c728e8ed0db8bb37ea',
})

const logs = parseEventLogs({ 
  abi: erc20Abi, 
  logs: receipt.logs,
})

----------------------------------------

TITLE: Using Async Recovery Functions in viem
DESCRIPTION: Example showing the change from synchronous to asynchronous usage of recovery functions like recoverMessageAddress, which now require await syntax. This affects recoverAddress, recoverMessageAddress, and verifyMessage functions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { recoverMessageAddress } from 'viem'

recoverMessageAddress({ message: 'hello world', signature: '0x...' }) // [!code --]
await recoverMessageAddress({ message: 'hello world', signature: '0x...' }) // [!code ++]

----------------------------------------

TITLE: Complex Example of decodeFunctionResult
DESCRIPTION: Demonstrates decoding a complex function result with nested structures including addresses, integers, and boolean values.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionResult.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { decodeFunctionResult } from 'viem'

const value = decodeFunctionResult({
  abi: wagmiAbi,
  functionName: 'getInfo',
  data: '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac0000000000000000000000000000000000000000000000000000000000010f2c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac0000000000000000000000000000000000000000000000000000000000000045'
})

----------------------------------------

TITLE: Sponsoring User Operations with Built-in Paymaster in Viem (User Operation Action)
DESCRIPTION: This snippet shows how to use a Bundler client with built-in Paymaster support to sponsor User Operation fees, applying the Paymaster at the action level. It sets the paymaster option to true when sending the user operation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { 
  createBundlerClient, 
  createPaymasterClient,
} from 'viem/account-abstraction'
import { account, client } from './config.ts'

const bundlerClient = createBundlerClient({
  account,
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

const hash = await bundlerClient.sendUserOperation({
  calls: [{
    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
    value: parseEther('0.001')
  }]
  paymaster: true,
})

----------------------------------------

TITLE: Decoding Event Logs in Ethers
DESCRIPTION: Shows how to use ethers.js Interface.decodeEventLog to decode event data and topics from logs. This extracts the event arguments from emitted events.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_52

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'
import { abi } from './abi'

const iface = new utils.Interface(abi);
const result = iface.decodeEventLog(
  'Transfer',
  data: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000',
  topics: [
    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
    '0x0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72',
    '0x000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c'
  ]
);

----------------------------------------

TITLE: Simulating Contract Function Call with Gas Price in TypeScript
DESCRIPTION: Shows how to set a gas price for a legacy transaction when simulating a contract function call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_14

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
  gasPrice: parseGwei('20'),
})

----------------------------------------

TITLE: Preparing User Operation with Bundler Client as Paymaster in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Bundler Client to prepare a user operation with the paymaster option enabled. It includes setting up a transaction to transfer 1 ETH to a specified address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const hash = await bundlerClient.prepareUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: true, // [!code focus]
})

----------------------------------------

TITLE: Configuring State Override in Transaction
DESCRIPTION: Demonstrates setting state override parameters for a transaction call. Includes setting address, balance, and state differences for temporary state modifications before execution.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_19

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  account,
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  stateOverride: [
    {
      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
      balance: parseEther('1'),
      stateDiff: [
        {
          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0',
          value: '0x00000000000000000000000000000000000000000000000000000000000001a4',
        },
      ],
    }
  ],
})

----------------------------------------

TITLE: Deploying Contracts with Ethers.js
DESCRIPTION: How to deploy a new contract using Ethers.js. This creates a ContractFactory with the contract ABI and bytecode, then deploys it using a signer from the wallet.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_18

LANGUAGE: typescript
CODE:
import { ContractFactory, providers } from 'ethers'
import { abi, bytecode } from './abi'

const provider = new providers.Web3Provider(window.ethereum)

const [address] = await provider.listAccounts()
const signer = provider.getSigner(address)

const contract = new ContractFactory(abi, bytecode, signer)
await contract.deploy()

----------------------------------------

TITLE: Contract Instance with Viem
DESCRIPTION: Creating and using a contract instance with Viem. This uses getContract to create a contract interface that provides read and event-watching capabilities.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_27

LANGUAGE: typescript
CODE:
import { createPublicClient, http, getContract } from 'viem'
import { mainnet } from 'viem/chains'
import { wagmiContractConfig } from './abi'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

const contract = getContract({
  ...wagmiContractConfig,
  client,
})

const supply = await contract.read.totalSupply()
const unwatch = contract.watchEvent.Transfer({
  onLogs: logs => {
    const { args: { from, to, amount }, eventName } = logs[0]
    // ...
  },
})
unwatch()

----------------------------------------

TITLE: Event Filter with Block Range
DESCRIPTION: Creating an event filter scoped to a specific block range with fromBlock and toBlock parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const filter = await publicClient.createContractEventFilter({
  abi: wagmiAbi,
  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',
  eventName: 'Transfer',
  fromBlock: 16330000n,
  toBlock: 16330050n
})

----------------------------------------

TITLE: Setting up Wallet Client in TypeScript
DESCRIPTION: Example of how to set up a wallet client using viem. It demonstrates creating a wallet client with a custom transport and defining an account address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTypedDataAddress.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, custom, getAccount } from 'viem'

export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'

export const walletClient = createWalletClient({
  transport: custom(window.ethereum)
})

----------------------------------------

TITLE: Configuring Wallet Client for EIP-7702 in TypeScript
DESCRIPTION: This snippet shows the setup of a Wallet Client and a 'Relay Account' for executing EIP-7702 Contract Writes. The relay account is typically used to sponsor gas fees for the transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { sepolia } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts' 

export const relay = privateKeyToAccount('0x...')
 
export const walletClient = createWalletClient({
  account: relay,
  chain: sepolia,
  transport: http(),
})

----------------------------------------

TITLE: Using isHex Function with Strict Option in TypeScript
DESCRIPTION: Demonstrates the usage of the isHex function with the 'strict' option. It shows how the function behaves differently when strict mode is enabled or disabled.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isHex.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
isHex('0xlol', { strict: false })
// true

isHex('0xlol', { strict: true })
// false

isHex('lol', { strict: false })
// false

----------------------------------------

TITLE: Configuring Public Client and Account in TypeScript
DESCRIPTION: This snippet demonstrates how to set up the public client and account for interacting with the L2 network. It imports necessary functions from viem, creates a public client with the base chain, and extends it with L2-specific actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Gas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack'

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Simulating Contract Function Call with Block Tag in TypeScript
DESCRIPTION: Demonstrates how to use a block tag when simulating a contract function call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
  blockTag: 'safe',
})

----------------------------------------

TITLE: Deployless Contract Read via Factory
DESCRIPTION: Shows how to read from an undeployed contract using a deploy factory pattern, commonly used with ERC-4337 Smart Accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { encodeFunctionData, parseAbi } from 'viem'
import { account, publicClient } from './config'

const data = await publicClient.readContract({
  factory: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',
  factoryData: encodeFunctionData({
    abi: parseAbi(['function createAccount(address owner, uint256 salt)']),
    functionName: 'createAccount',
    args: [account, 0n],
  }),
  abi: account.abi,
  address: account.address,
  functionName: 'entryPoint',
})

----------------------------------------

TITLE: Configuring Wallet Client for Self-executing EIP-7702 in TypeScript
DESCRIPTION: This configuration sets up the Wallet Client with an EOA for self-executing EIP-7702 transactions. The EOA is used for both signing the Authorization and executing the Transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { sepolia } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts'

export const eoa = privateKeyToAccount('0x...')
 
export const walletClient = createWalletClient({
  account: eoa,
  chain: sepolia,
  transport: http(),
})

----------------------------------------

TITLE: Retrieving Proof Data with getProof in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getProof function from the publicClient to retrieve proof data for a specific account and storage keys. It includes the necessary imports and client setup.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getProof.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const proof = await publicClient.getProof({ 
  address: '0x4200000000000000000000000000000000000016',
  storageKeys: [
    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
  ],
})

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { optimism } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: optimism,
  transport: http()
})

----------------------------------------

TITLE: Setting Up Wallet Client with EIP-5792 Actions in Viem
DESCRIPTION: Shows how to configure a Viem wallet client with custom transport using window.ethereum and extend it with EIP-5792 experimental actions. This setup is necessary to use the showCallsStatus method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/showCallsStatus.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import 'viem/window'
// ---cut---
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'
import { eip5792Actions } from 'viem/experimental'

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!),
}).extend(eip5792Actions())

export const [account] = await walletClient.getAddresses()

----------------------------------------

TITLE: Creating a Public Client for OP Stack Chain in TypeScript
DESCRIPTION: Sets up a Viem public client with Base (an OP Stack chain) and an HTTP transport. This is the first step in interacting with OP Stack chains.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { base } from 'viem/chains'

const client = createPublicClient({ 
  chain: base, 
  transport: http(), 
}) 

----------------------------------------

TITLE: Encoding Contract Deployment Data in Viem
DESCRIPTION: Demonstrates how to use viem's encodeDeployData function to encode constructor arguments for contract deployment. Unlike ethers, viem concatenates the bytecode with the encoded data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_41

LANGUAGE: typescript
CODE:
import { encodeDeployData } from 'viem'
import { abi, bytecode } from './abi'

const data = encodeDeployData({
  abi,
  bytecode,
  args: ['SYM', 'Some Name']
})

----------------------------------------

TITLE: Signing Typed Data with Coinbase Smart Account in TypeScript
DESCRIPTION: This example demonstrates how to sign typed data using a Coinbase Smart Account. It includes setting up the account, defining the domain and types, and calling the signTypedData method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signTypedData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toCoinbaseSmartAccount } from 'viem/account-abstraction'
import { client, owner } from './config.js'
import { domain, types } from './data.js'

const account = await toCoinbaseSmartAccount({
  client,
  owners: [owner],
})

const signature = await account.signTypedData({
  domain,
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Using extractWithdrawalMessageLogs Function
DESCRIPTION: Demonstrates how to use the extractWithdrawalMessageLogs function to extract MessagePassed logs from a transaction receipt.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractWithdrawalMessageLogs.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { extractWithdrawalMessageLogs } from 'viem'

const receipt = await client.getTransactionReceipt({
  hash: '0xc9c0361bc3da9cd3560e48b469d0d6aac0e633e4897895edfd26a287f7c578ec',
})

const logs = extractWithdrawalMessageLogs(receipt)
// [
//   { args: { ... }, blockHash: '0x...', eventName: 'MessagePassed'  },
//   { args: { ... }, blockHash: '0x...', eventName: 'MessagePassed'  },
//   { args: { ... }, blockHash: '0x...', eventName: 'MessagePassed'  },
// ]

----------------------------------------

TITLE: Estimating User Operation Gas with viem in TypeScript
DESCRIPTION: Example of using estimateUserOperationGas to estimate gas values for a User Operation that transfers 1 ETH.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, bundlerClient } from './config'

const gas = await bundlerClient.estimateUserOperationGas({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }]
})

----------------------------------------

TITLE: Using recoverAddress with Signature Parameter in TypeScript
DESCRIPTION: Example demonstrating the signature parameter in the recoverAddress function. The signature parameter can be a Hex string, ByteArray, or Signature object representing the signature of the hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverAddress.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const address = await recoverAddress({ 
  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c' 
})

----------------------------------------

TITLE: Using toEventHash Function
DESCRIPTION: Demonstrates two ways to generate event hashes: using a string-based event signature and using an AbiEvent object. Both methods produce the same hash for an ERC20 Transfer event.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventHash.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toEventHash } from 'viem'

const hash_1 = toEventHash('event Transfer(address,address,uint256)')
// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef

const hash_2 = toEventHash({
  name: 'Transfer',
  type: 'event',
  inputs: [
    { name: 'from', type: 'address', indexed: true },
    { name: 'to', type: 'address', indexed: true },
    { name: 'amount', type: 'uint256', indexed: false },
  ],
})
// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef

----------------------------------------

TITLE: Retrieving Transaction Information with getTransaction in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getTransaction function from the publicClient to retrieve information about a transaction using its hash. It shows the basic usage and expected return format.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const transaction = await publicClient.getTransaction({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'
})

----------------------------------------

TITLE: Defining ABI Inline for Type Inference
DESCRIPTION: Shows how to define an ABI inline within a function call to enable type inference without using a separate const assertion. This approach is more concise for one-off operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
// @log:   ↓ defined inline
const result = client.readContract({
  address: '0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c',
  abi: [{ // [!code focus]
    type: 'function', // [!code focus]
    name: 'balanceOf', // [!code focus]
    stateMutability: 'view', // [!code focus]
    inputs: [{ type: 'address' }], // [!code focus]
    outputs: [{ type: 'uint256' }], // [!code focus]
  }], // [!code focus]
  functionName: 'balanceOf',
  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']
})

----------------------------------------

TITLE: Switching Chain with Viem Wallet Client
DESCRIPTION: Example showing how to switch to the Avalanche network using the walletClient.switchChain method. The function takes a chain ID parameter and uses the eth_switchEthereumChain JSON-RPC method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/switchChain.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { avalanche } from 'viem/chains'
import { walletClient } from './client'
 
await walletClient.switchChain({ id: avalanche.id })

LANGUAGE: typescript
CODE:
// [!include ~/snippets/walletClient.ts]

----------------------------------------

TITLE: Basic Contract Event Filter Setup
DESCRIPTION: Basic example of creating a contract event filter using Viem. Shows the minimal setup required with just an ABI parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'
import { wagmiAbi } from './abi'

const filter = await publicClient.createContractEventFilter({
  abi: wagmiAbi
})

----------------------------------------

TITLE: Retrieving Gas Price using getGasPrice in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getGasPrice function with a publicClient to retrieve the current gas price. It requires a configured publicClient instance.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getGasPrice.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const gasPrice = await publicClient.getGasPrice()

----------------------------------------

TITLE: Initializing Viem Client with EIP-5792 Actions
DESCRIPTION: Example showing how to create and extend a Viem wallet client with EIP-5792 actions for batch transaction support. The client is configured for the Ethereum mainnet using a custom transport with window.ethereum provider.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/client.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { eip5792Actions } from 'viem/experimental'

const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!),
}).extend(eip5792Actions())

const id = await walletClient.sendCalls({/* ... */})

----------------------------------------

TITLE: Subscribing to Contract Events with Viem
DESCRIPTION: How to listen for contract events using Viem. This creates a public client and uses watchContractEvent to monitor Transfer events, with an event handler for incoming logs.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_21

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { wagmiContractConfig } from './abi'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

const unwatch = client.watchContractEvent({
  ...wagmiContractConfig,
  eventName: 'Transfer',
  onLogs: logs => {
    const { args: { from, to, amount }, eventName } = logs[0]
    // ...
  },
})

// unsubscribe
unwatch()

----------------------------------------

TITLE: Signing Raw Message with Private Key
DESCRIPTION: Demonstrates signing a raw hex message using the raw attribute, allowing direct signing of hex-encoded data without UTF-8 conversion.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signMessage.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'

const account = privateKeyToAccount('0x...')

const signature = await account.signMessage({
  message: { raw: '0x68656c6c6f20776f726c64' },
})

----------------------------------------

TITLE: Setting up Viem Wallet Client
DESCRIPTION: Creates a wallet client configuration with account and network settings for interacting with Ethereum mainnet.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/guides/blob-transactions.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const account = privateKeyToAccount('0x...')

export const client = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Sending a Signed Transaction with sendRawTransaction in TypeScript
DESCRIPTION: This snippet demonstrates how to prepare a transaction request, sign it, and send the raw transaction using the walletClient. It requires a configured walletClient and account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendRawTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'

const request = await walletClient.prepareTransactionRequest({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

const serializedTransaction = await walletClient.signTransaction(request)

const hash = await walletClient.sendRawTransaction({ serializedTransaction })

----------------------------------------

TITLE: Signing Messages with Raw Hex Data
DESCRIPTION: Example showing how to sign a message provided as raw hexadecimal data. This allows for signing arbitrary binary data that may not be valid UTF-8 encoded text.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { walletClient } from './config'

const signature = await walletClient.signMessage({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  message: { raw: '0x68656c6c6f20776f726c64' }, 
  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2',
})

----------------------------------------

TITLE: Using formatEther Function to Convert Wei to Ether
DESCRIPTION: Demonstrates how to use the formatEther function to convert a wei value (as bigint) to its ether representation as a string. The example shows converting 1 ether (1000000000000000000 wei) to its string representation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/formatEther.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { formatEther } from 'viem'

formatEther(1000000000000000000n) 
// '1'

----------------------------------------

TITLE: Block Watching with WebSocket Transport
DESCRIPTION: Demonstrates setting up block watching using WebSocket transport with polling enabled. Shows configuration of WebSocket client for real-time block monitoring.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlocks.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, webSocket } from 'viem'
import { mainnet } from 'viem/chains'

const publicClient = createPublicClient({
  chain: mainnet,
  transport: webSocket()
})

const unwatch = publicClient.watchBlocks(
  { 
    onBlock: block => console.log(block),
    poll: true,
  }
)

----------------------------------------

TITLE: Creating an Event Filter with Manual ABI Event Definition
DESCRIPTION: Creates an event filter using a manually defined ABI event object instead of parseAbiItem. This approach directly specifies the event name and inputs with their types and indexed status.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const filter = await publicClient.createEventFilter(publicClient, {
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: {
    name: 'Transfer', 
    inputs: [
      { type: 'address', indexed: true, name: 'from' },
      { type: 'address', indexed: true, name: 'to' },
      { type: 'uint256', indexed: false, name: 'value' }
    ] 
  }
})

----------------------------------------

TITLE: Complex Function Result Encoding in TypeScript
DESCRIPTION: Demonstrates encoding of complex nested data structures with multiple fields and types.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionResult.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { decodeFunctionResult } from 'viem'

const data = decodeFunctionResult({
  abi: wagmiAbi,
  functionName: 'getInfo',
  value: [
    {
      foo: {
        sender: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
        x: 69420n,
        y: true
      },
      sender: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
      z: 69
    }
  ]
})

----------------------------------------

TITLE: Configuring viem Client for L2 Actions
DESCRIPTION: This snippet shows how to configure a viem public client for use with L2 actions, specifically for the zkSync network. It demonstrates importing necessary modules and extending the client with L2-specific actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/estimateGasL1ToL2.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

----------------------------------------

TITLE: Initializing Wallet Client with JSON-RPC Account
DESCRIPTION: Creates a Wallet Client using the custom transport with window.ethereum provider for JSON-RPC accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'

const client = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: Event Log Parsing with Argument Filtering
DESCRIPTION: Example of filtering logs by specific argument values using the args parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const logs = parseEventLogs({ 
  abi: erc20Abi, 
  args: {
    from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  },
  logs: receipt.logs,
})

----------------------------------------

TITLE: Initializing ZKsync Wallet Client in Viem
DESCRIPTION: Sets up a wallet client with ZKsync chain configuration and EIP712 wallet actions. Uses custom transport with window.ethereum provider.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { zksync } from 'viem/chains'
import { eip712WalletActions } from 'viem/zksync'

const walletClient = createWalletClient({
  chain: zksync,
  transport: custom(window.ethereum!),
}).extend(eip712WalletActions())

----------------------------------------

TITLE: Extending Viem Wallet Client with ERC-7715 Actions
DESCRIPTION: Example showing how to import and extend a Viem wallet client with experimental ERC-7715 actions. The code demonstrates importing necessary modules, creating a wallet client connected to Ethereum mainnet, and extending it with ERC-7715 functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7715/client.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { erc7715Actions } from 'viem/experimental' // [!code focus]

const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!),
}).extend(erc7715Actions()) // [!code focus]

const id = await walletClient.grantPermissions({/* ... */})

----------------------------------------

TITLE: Retrieving Call Batch Status with Viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getCallsStatus function from a walletClient to retrieve the status of a call batch. It requires a configured walletClient with EIP-5792 actions and returns detailed status information including chain ID, status code, and receipts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCallsStatus.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { walletClient } from './config'

const result = await walletClient.getCallsStatus({
  id: '0x1234567890abcdef',
})
// @log: {
// @log:   atomic: false,
// @log:   chainId: 1,
// @log:   id: '0x1234567890abcdef',
// @log:   statusCode: 200,
// @log:   status: 'success',
// @log:   receipts: [{ ... }],
// @log: }

----------------------------------------

TITLE: Creating a Light Smart Account with permissionless.js
DESCRIPTION: Example showing how to import and use toLightSmartAccount from permissionless.js to create a Light Smart Account with a client and owner.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toLightSmartAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toLightSmartAccount } from 'permissionless/accounts'
import { client } from './client.js'
import { owner } from './owner.js'

const account = await toLightSmartAccount({
  client,
  owner: owner,
  version: '2.0.0',
})

----------------------------------------

TITLE: Sending Transaction with Private Key Account
DESCRIPTION: Example of sending a transaction using the Wallet Client with a Private Key Account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const hash = await client.sendTransaction({
  account,
  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  value: parseEther('0.001')
})

----------------------------------------

TITLE: Configuring viem Client for getAllBalances
DESCRIPTION: This snippet shows the configuration setup for using the getAllBalances function. It creates a public client using the zksync chain and extends it with publicActionsL2. It also defines two types of accounts: a JSON-RPC account and a local account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getAllBalances.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Configuring Pre-Verification Gas in User Operation with TypeScript
DESCRIPTION: This example demonstrates how to set the pre-verification gas amount when preparing a user operation. This extra gas is paid to the Bundler for processing the operation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const userOperation = await bundlerClient.prepareUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  preVerificationGas: 69420n, // [!code focus]
})

----------------------------------------

TITLE: Basic Usage of encodeFunctionData in TypeScript
DESCRIPTION: Demonstrates how to use encodeFunctionData to encode a function name into calldata. It uses an ABI imported from another file and encodes the 'totalSupply' function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { encodeFunctionData } from 'viem'
import { wagmiAbi } from './abi.ts'

const data = encodeFunctionData({
  abi: wagmiAbi,
  functionName: 'totalSupply'
})

----------------------------------------

TITLE: Creating an Event Filter for Multiple Events
DESCRIPTION: Creates a filter that listens for multiple event types. This example listens for both Approval and Transfer events by using parseAbi to handle multiple event signatures.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { parseAbi } from 'viem'

const filter = await publicClient.createEventFilter({
  events: parseAbi([
    'event Approval(address indexed owner, address indexed sender, uint256 value)',
    'event Transfer(address indexed from, address indexed to, uint256 value)',
  ]),
})

----------------------------------------

TITLE: Extending Wallet Client with Public Actions in TypeScript
DESCRIPTION: This snippet shows how to extend a Wallet Client with Public Actions, allowing the use of both Wallet and Public Actions on a single client instance.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createWalletClient, http, publicActions } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const account = privateKeyToAccount('0x...')

const client = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
}).extend(publicActions) // [!code ++]

const { request } = await client.simulateContract({ ... }) // Public Action
const hash = await client.writeContract(request) // Wallet Action

----------------------------------------

TITLE: Retrieving Contract Event Filter Changes in TypeScript using viem
DESCRIPTION: Creates a contract event filter for a specific event and retrieves changes using getFilterChanges. Returns an array of event logs.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterChanges.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const filter = await publicClient.createContractEventFilter({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  abi: wagmiAbi,
  eventName: 'Transfer'
})
const logs = await publicClient.getFilterChanges({ filter })

----------------------------------------

TITLE: Signing a Transaction with Authorization List in TypeScript
DESCRIPTION: Shows how to sign a transaction with an EIP-7702 Authorization list. This includes creating an authorization and then using it in the transaction signing process.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
const account = privateKeyToAccount('0x...')
// ---cut---
const authorization = await account.signAuthorization({
  contractAddress: '0x...',
  chainId: 1,
  nonce: 1,
})

const signature = await account.signTransaction({
  authorizationList: [authorization], // [!code focus]
  chainId: 1,
})

----------------------------------------

TITLE: Querying Blob Base Fee with viem
DESCRIPTION: Example showing how to query the current blob base fee using a public client. Returns the base fee as a bigint value in wei.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlobBaseFee.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const baseFee = await publicClient.getBlobBaseFee()

----------------------------------------

TITLE: Basic Usage of parseAbiParameter
DESCRIPTION: Demonstrates the basic usage of parseAbiParameter to convert a human-readable ABI parameter string into a structured AbiParameter object. The example parses 'address from' into an object with type and name properties.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameter.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseAbiParameter } from 'viem'

const abiParameter = parseAbiParameter('address from')
//    ^? const abiParameter: { type: "address"; name: "from"; }

----------------------------------------

TITLE: Querying L1 Chain ID with viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getL1ChainId function from a configured viem client to retrieve the Chain ID of the underlying L1 network in zkSync.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1ChainId.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const chainId = await client.getL1ChainId();

----------------------------------------

TITLE: Basic getFeeHistory Usage Example
DESCRIPTION: Example showing how to retrieve historical gas fee data using the getFeeHistory function with a public client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFeeHistory.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const feeHistory = await publicClient.getFeeHistory({
  blockCount: 4,
  rewardPercentiles: [25, 75]
})

----------------------------------------

TITLE: Creating and Using a Paymaster Client
DESCRIPTION: Example of creating a Paymaster Client and integrating it with a Bundler Client. This shows the basic setup required to use a Paymaster for sponsoring transactions on the Sepolia testnet.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { 
  createBundlerClient, 
  createPaymasterClient,
} from 'viem/account-abstraction'
import { sepolia } from 'viem/chains'

const paymasterClient = createPaymasterClient({
  transport: http('https://public.pimlico.io/v2/11155111/rpc'),
})

const bundlerClient = createBundlerClient({
  chain: sepolia,
  paymaster: paymasterClient,
  transport: http('https://public.pimlico.io/v2/11155111/rpc'),
})

----------------------------------------

TITLE: Passing Arguments to encodeFunctionData in TypeScript
DESCRIPTION: Illustrates how to pass arguments to encodeFunctionData when the function requires parameters. This example uses the 'balanceOf' function which requires an address argument.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { encodeFunctionData } from 'viem'
import { wagmiAbi } from './abi'

const data = encodeFunctionData({
  abi: wagmiAbi,
  functionName: 'balanceOf',
  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']
})

----------------------------------------

TITLE: Setting Custom Key for Viem Wallet Client
DESCRIPTION: Shows how to set a custom key for the wallet client. The key is a string that can be used to identify the client, with a default value of "wallet".
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
const client = createWalletClient({
  key: 'foo',
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: Using Factory Parameter in Call Action
DESCRIPTION: Example of specifying the factory parameter when making a call. This parameter specifies a contract deployment factory address for deployless calls.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  factory: '0x0000000000ffe8b47b3e2130213b802212439497', // [!code focus]
  factoryData: '0xdeadbeef',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Using toFunctionHash with String and AbiFunction
DESCRIPTION: Examples demonstrating how to use toFunctionHash with both a string function signature and an AbiFunction object to generate function hashes. The function returns a Hex value representing the hash of the function signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionHash.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toFunctionHash } from 'viem'

const hash_1 = toFunctionHash('function ownerOf(uint256)')
// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef

// or from an `AbiEvent` on your contract ABI
const hash_2 = toFunctionHash({
  name: 'ownerOf',
  type: 'function',
  inputs: [{ name: 'tokenId', type: 'uint256' }],
  outputs: [],
  stateMutability: 'view',
})
// @log: Output: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef

----------------------------------------

TITLE: Sending Blob Transaction
DESCRIPTION: Demonstrates sending a blob transaction containing a simple 'hello world' string to the zero address, including blob gas fee configuration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/guides/blob-transactions.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { parseGwei, stringToHex, toBlobs } from 'viem'
import { account, client } from './client'
import { kzg } from './kzg'

const blobs = toBlobs({ data: stringToHex('hello world') })

const hash = await client.sendTransaction({
  blobs,
  kzg,
  maxFeePerBlobGas: parseGwei('30'),
  to: '0x0000000000000000000000000000000000000000',
})

----------------------------------------

TITLE: Initializing Wallet Client for Local Accounts
DESCRIPTION: Creates a Wallet Client using the http transport for local accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createWalletClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Implementing Safe Smart Account using toSafeSmartAccount
DESCRIPTION: Example code showing how to implement a Safe Smart Account using the toSafeSmartAccount function from permissionless.js. The function requires a client, an array of owners, and a version specification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSafeSmartAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toSafeSmartAccount } from 'permissionless/accounts'
import { client } from './client.js'
import { owner } from './owner.js'

const account = await toSafeSmartAccount({
  client,
  owners: [owner],
  version: '1.4.1',
})

----------------------------------------

TITLE: Recovering Transaction Address using Viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the recoverTransactionAddress function from Viem to recover the signing address from a prepared and signed transaction. It requires a walletClient instance and uses the prepareTransactionRequest and signTransaction methods before recovering the address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTransactionAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { recoverTransactionAddress } from 'viem'
import { walletClient } from './client'

const request = await walletClient.prepareTransactionRequest({
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

const serializedTransaction = await walletClient.signTransaction(request)

const address = await recoverTransactionAddress({
  serializedTransaction,
})

----------------------------------------

TITLE: Message Verification with Explicit Address
DESCRIPTION: Example showing message verification with an explicit Ethereum address instead of using an account object.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const valid = await publicClient.verifyMessage({
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  message: 'hello world',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})

----------------------------------------

TITLE: Creating a ZKsync Multi-signature Smart Account in TypeScript
DESCRIPTION: Example showing how to create a multi-signature ZKsync Smart Account using the toMultisigSmartAccount function with contract address and private keys.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toMultisigSmartAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toMultisigSmartAccount } from 'viem/zksync'

const account = toMultisigSmartAccount({
  address: '0xf39Fd6e51aad8F6F4ce6aB8827279cffFb92266', 
  privateKeys: ['0x...', '0x...']
})

----------------------------------------

TITLE: Configuring Event Watch with fromBlock Parameter in TypeScript
DESCRIPTION: Demonstrates how to initialize an event watcher with Viem's publicClient, specifying a starting block number using the fromBlock parameter. The example shows how to set up a basic event listener that logs events to the console.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const unwatch = publicClient.watchEvent({
  fromBlock: 1n,
  onLogs: logs => console.log(logs),
})

----------------------------------------

TITLE: Defining Domain and Types for EIP-712 Typed Data in TypeScript
DESCRIPTION: This snippet shows how to define the domain and types for EIP-712 compliant typed data. It includes the domain properties and the structure of the types used in the signTypedData method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
// All properties on a domain are optional
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const
 
// The named list of all type definitions
export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Querying Block Transaction Count by Tag in TypeScript
DESCRIPTION: This example illustrates how to use the getBlockTransactionCount function with a block tag parameter to get the transaction count for a specific block state.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockTransactionCount.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const block = await publicClient.getBlockTransactionCount({
  blockTag: 'safe'
})

----------------------------------------

TITLE: Estimating L1 Gas for L2 Transaction in TypeScript
DESCRIPTION: This snippet demonstrates how to use the estimateL1Gas function from the viem library to estimate the L1 gas required for an L2 transaction. It includes the basic usage and configuration setup.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateL1Gas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const gas = await publicClient.estimateL1Gas({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1')
})

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack'

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Retrieving ENS Resolver Example
DESCRIPTION: Example showing how to get an ENS resolver address using the publicClient. Demonstrates usage of normalize function for ENS name preparation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsResolver.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { normalize } from 'viem/ens'
import { publicClient } from './client'
 
const resolverAddress = await publicClient.getEnsResolver({
  name: normalize('wevm.eth'),
})
// '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'

----------------------------------------

TITLE: Public Client Configuration for Block Watching
DESCRIPTION: Shows how to configure and create a public client for the Ethereum mainnet using Viem's createPublicClient function with HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlocks.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Using parseAbiParameter with Struct Definition
DESCRIPTION: Shows how to use parseAbiParameter with an array of strings to parse a struct definition. This example includes a tuple type with component information.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiParameter.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseAbiParameter } from 'viem'

const abiParameter = parseAbiParameter([
  //  ^? const abiParameter: { type: "tuple"; components: [{ type: "string"; name:...
  'Baz bar',
  'struct Baz { string name; }',
])

----------------------------------------

TITLE: Using getTxpoolStatus in TypeScript with viem
DESCRIPTION: This snippet demonstrates how to use the getTxpoolStatus function from a testClient. It retrieves the status of the transaction pool, including pending and queued transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getTxpoolStatus.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

const status = await testClient.getTxpoolStatus()

----------------------------------------

TITLE: Configuration Setup for Viem Client and Owner Account
DESCRIPTION: This snippet shows the configuration setup for creating a public client and defining the owner account using a private key. It's a prerequisite for the main signUserOperation example.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const owner = privateKeyToAccount('0x...')

----------------------------------------

TITLE: Modifying Account Balance with Viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the setBalance function from the Viem library to modify the balance of an Ethereum account. It uses a testClient instance and the parseEther utility function to set the balance to 1 ETH.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBalance.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { testClient } from './client'
 
await testClient.setBalance({
  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  value: parseEther('1')
})

----------------------------------------

TITLE: Configuration setup for viem clients
DESCRIPTION: Shows the configuration setup for the Ethereum and zkSync Era clients. It creates a public client for the Ethereum mainnet and another for zkSync, extending the zkSync client with public L2 actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/bridge/getL2HashFromPriorityOp.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync, mainnet } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

export const zksyncClient = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

----------------------------------------

TITLE: Specifying Address Parameter for ZKsync Smart Account in TypeScript
DESCRIPTION: This code snippet shows how to specify the address parameter when creating a ZKsync Smart Account. The address should be of type Hex and represent the deployed Account's Contract implementation address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSmartAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const account = toSmartAccount({
  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', // [!code focus]
  async sign({ hash }) {
    // ...
  }
})

----------------------------------------

TITLE: Setting addressIndex in hdKeyToAccount
DESCRIPTION: Example showing how to specify the addressIndex option when creating an HD Account, which affects the address index used in the derivation path (m/44'/60'/0'/0/${addressIndex}).
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
// @noErrors
import { hdKeyToAccount } from 'viem/accounts'
// ---cut---
const hdKey = HDKey.fromMasterSeed(...)

const account = hdKeyToAccount(
  hdKey,
  {
    accountIndex: 1,
    addressIndex: 6 // [!code focus]
  }
)

----------------------------------------

TITLE: Basic Contract Event Watching in TypeScript
DESCRIPTION: Basic example of watching contract events using viem's publicClient. Sets up a watcher for all events on a specific contract address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/watchContractEvent.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'
import { wagmiAbi } from './abi'

const unwatch = publicClient.watchContractEvent({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Setting Up Client Configuration for ERC-7821 Actions
DESCRIPTION: Configuration setup for using execute function, showing how to create a client with ERC-7821 actions extension, initialize an account, and set up the transport layer.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { erc7821Actions } from 'viem/experimental'

export const account = privateKeyToAccount('0x...')

export const client = createClient({
  chain: mainnet,
  transport: http(),
}).extend(erc7821Actions())

----------------------------------------

TITLE: Signing a Message with Smart Account in TypeScript
DESCRIPTION: This example demonstrates how to sign a message using a Smart Account with the owner's credentials. It creates a Smart Account and uses it to sign a 'hello world' message.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signMessage.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toCoinbaseSmartAccount } from 'viem/account-abstraction'
import { client, owner } from './config.js'

const account = await toSmartAccount({
  client,
  owners: [owner],
})

const signature = await account.signMessage({
  message: 'hello world',
})

----------------------------------------

TITLE: Basic Transaction Signing Example
DESCRIPTION: Demonstrates how to prepare and sign a basic transaction using a wallet client with EIP712 support.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/signTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'

const request = await walletClient.prepareTransactionRequest({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

const signature = await walletClient.signTransaction(request)

const hash = await walletClient.sendRawTransaction(signature)

----------------------------------------

TITLE: Using the Account Parameter with getL1TokenBalance in TypeScript
DESCRIPTION: Example showing how to use the account parameter when retrieving an L1 token balance. The account parameter can be a JSON-RPC Account or Local Account address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenBalance.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const balance = await publicClient.getL1TokenBalance({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266' // [!code focus]
  blockTag: 'latest',
  token: '0x5C221E77624690fff6dd741493D735a17716c26B',
})

----------------------------------------

TITLE: Importing ZKsync Chains in TypeScript
DESCRIPTION: Shows how to import the main ZKsync chain and Sepolia testnet chain definitions from Viem's chains module.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/chains.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import {
  zksync,
  zksyncSepoliaTestnet,
} from 'viem/chains'

----------------------------------------

TITLE: Using getAbiItem with 4byte Selector
DESCRIPTION: Demonstrates how to use the getAbiItem function with a 4byte selector instead of a function name. This can be useful when working with function signatures.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/getAbiItem.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const encodedData = getAbiItem({
  abi: [...],
  name: '0x70a08231', // [!code focus]
})

----------------------------------------

TITLE: Configuring zkSync Wallet Client
DESCRIPTION: Sets up a wallet client for zkSync with the necessary extensions. Shows configuration for both JSON-RPC and Local Account types.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/withdraw.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { zksync } from 'viem/chains'
import { eip712Actions } from 'viem/zksync'

export const walletClient = createWalletClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(publicActionsL2())

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Converting Wei Balance to Ether using formatEther in TypeScript
DESCRIPTION: This example shows how to convert the balance from wei to ether units using the formatEther function from the viem library. It retrieves the balance and then formats it as ether.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBalance.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { formatEther } from 'viem'

const balance = await publicClient.getBalance({
  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  blockTag: 'safe'
})
const balanceAsEther = formatEther(balance)
// "6.942"

----------------------------------------

TITLE: Migrating from AnkrProvider to createPublicClient in viem
DESCRIPTION: Shows how to replace Ethers' AnkrProvider with viem's createPublicClient using the Ankr RPC URL directly in the HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const provider = new providers.AnkrProvider('homestead', '<apiKey>') // [!code hl]

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({ // [!code hl]
  chain: mainnet, // [!code hl]
  transport: http('https://rpc.ankr.com/eth/<apiKey>') // [!code hl]
}) // [!code hl]

----------------------------------------

TITLE: JSON-RPC Client Configuration
DESCRIPTION: Configuration setup for Viem clients using JSON-RPC accounts (like MetaMask). Sets up public and wallet clients for both L1 and L2 chains with necessary OP Stack extensions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1, walletActionsL1, walletActionsL2 } from 'viem/op-stack'

export const [account] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
}) 

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const walletClientL1 = createWalletClient({
  account,
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

export const walletClientL2 = createWalletClient({
  account,
  chain: optimism,
  transport: custom(window.ethereum)
}).extend(walletActionsL2())

----------------------------------------

TITLE: Basic Usage of decodeAbiParameters
DESCRIPTION: Demonstrates the basic usage of decodeAbiParameters to decode encoded ABI data with multiple parameter types (string, uint, bool).
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { decodeAbiParameters } from 'viem'

const values = decodeAbiParameters(
  [
    { name: 'x', type: 'string' },
    { name: 'y', type: 'uint' },
    { name: 'z', type: 'bool' }
  ],
  '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',
)
// ['wagmi', 420n, true]

----------------------------------------

TITLE: Implementing Message Signing
DESCRIPTION: Demonstrates implementation of the signMessage function for EIP-191 format message signing.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const account = toAccount({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',

  async signMessage({ message }) {
    return signMessage({ message, privateKey })
  },
  async signTransaction(transaction, { serializer }) {
    return signTransaction({ privateKey, transaction, serializer })
  },
  async signTypedData(typedData) {
    return signTypedData({ ...typedData, privateKey })
  },
})

----------------------------------------

TITLE: Configuring viem Clients for L1/L2 Interaction
DESCRIPTION: Configuration setup for creating public and wallet clients to interact with L1 and extend it with publicActionsL1 for L2 operations. Demonstrates both JSON-RPC and Local Account setup approaches.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateProveWithdrawalGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

// JSON-RPC Account
export const [account] = await walletClientL1.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Deployless Call Using Deploy Factory in TypeScript
DESCRIPTION: Example of performing a deployless call using a deploy factory for an ERC-4337 Smart Account. This approach temporarily deploys a contract using a factory and then calls a function on the deployed contract.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { encodeFunctionData, parseAbi } from 'viem'
import { owner, publicClient } from './config'

const data = await publicClient.call({
  // Address of the contract deployer (e.g. Smart Account Factory).
  factory: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',

  // Function to execute on the factory to deploy the contract.
  factoryData: encodeFunctionData({
    abi: parseAbi(['function createAccount(address owner, uint256 salt)']),
    functionName: 'createAccount',
    args: [owner, 0n],
  }),

  // Function to call on the contract (e.g. Smart Account contract).
  data: encodeFunctionData({
    abi: parseAbi(['function entryPoint() view returns (address)']),
    functionName: 'entryPoint'
  }),

  // Address of the contract.
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Estimating Max Priority Fee Per Gas - Basic Usage
DESCRIPTION: Example showing how to estimate the maximum priority fee per gas using a public client. Returns the fee estimate in wei as a bigint.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateMaxPriorityFeePerGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const maxPriorityFeePerGas = await publicClient.estimateMaxPriorityFeePerGas()
// @log: Output: 1_000_000_000n

----------------------------------------

TITLE: Defining Domain and Types for EIP-712 Typed Data
DESCRIPTION: This code snippet shows how to define the domain and types objects required for EIP-712 typed data signing. The domain object includes optional properties like name, version, chainId, and verifyingContract. The types object defines the structure of the data to be signed.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
// All properties on a domain are optional
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const

// The named list of all type definitions
export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Basic Usage of depositTransaction with viem for OP Stack L1-to-L2 Transactions
DESCRIPTION: Demonstrates how to initiate a deposit transaction from an L1 chain to execute on an L2 chain using the viem library. The example shows sending 1 ETH to a target address on the Base L2 network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { base } from 'viem/chains'
import { account, walletClientL1 } from './config'
 
const hash = await walletClientL1.depositTransaction({
  account,
  request: {
    gas: 21_000n,
    mint: parseEther('1')
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  },
  targetChain: base,
})

----------------------------------------

TITLE: Configuring Wallet Client in TypeScript
DESCRIPTION: This snippet shows how to set up a Wallet Client and a Relay Account for executing EIP-7702 Transactions. It uses the Sepolia testnet and an HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { sepolia } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts' 

export const relay = privateKeyToAccount('0x...')
 
export const walletClient = createWalletClient({
  account: relay,
  chain: sepolia,
  transport: http(),
})

----------------------------------------

TITLE: Creating a Smart Account with a Custom Implementation
DESCRIPTION: Demonstrates how to instantiate a Smart Account with a custom implementation by providing required callback functions and optional configurations. The example shows all mandatory methods that need to be implemented and optional extensions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSmartAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { coinbase, toSmartAccount } from 'viem/account-abstraction'
import { client, owner } from './config.js'

const account = await toSmartAccount({
  client,
  entryPoint: {
    abi: [/* ... */],
    address: '0x0000000071727De22E5E9d8BAf0edAc6f37da032',
    version: '0.7',
  },
  
  async decodeCalls(data) {
    // Decode calls from calldata as defined by the Smart Account contract.
  },
  async encodeCalls(calls) {
    // Encode calls as defined by the Smart Account contract.
  },
  async getAddress() {
    // Get the address of the Smart Account.
  },
  async getFactoryArgs() {
    // Build the Factory properties for the Smart Account.
  },
  async getNonce() {
    // Get the nonce of the Smart Account.
  },
  async getStubSignature() {
    // Get the stub signature for User Operations from the Smart Account.
  },
  async signMessage(message) {
    // Sign message to be verified by the Smart Account contract.
  },
  async signTypedData(typedData) {
    // Sign typed data to be verified by the Smart Account contract.
  },
  async signUserOperation(userOperation) {
    // Sign a User Operation to be broadcasted via the Bundler.
  },

  // (Optional) Extend the Smart Account with custom properties.
  extend: {
    abi: [/* ... */],
    factory: {
      abi: [/* ... */],
      address: '0xda4b37208c41c4f6d1b101cac61e182fe1da0754',
    },
  },
  // (Optional) User Operation configuration.
  userOperation: {
    async estimateGas(userOperation) {
      // Estimate gas properties for a User Operation.
    },
  },
})

----------------------------------------

TITLE: Defining types parameter in wrapTypedDataSignature
DESCRIPTION: Example showing how to define the types parameter for wrapTypedDataSignature. This includes creating custom type definitions for structured data like Person and Mail objects.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const signature = wrapTypedDataSignature({
  domain,
  types: { 
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  verifierDomain: {
    name: 'Smart Account',
    version: '1',
    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',
    chainId: 1,
  },
})

----------------------------------------

TITLE: Defining Contract ABI with Constructor Arguments
DESCRIPTION: Defines a contract ABI with a constructor that accepts a uint32 parameter, necessary for contracts that require initialization arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [{ name: "x", type: "uint32" }],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  ...
] as const;

----------------------------------------

TITLE: Migrating Signer Methods to Wallet Actions in viem
DESCRIPTION: Demonstrates replacing Ethers' Signer methods with viem's Wallet Client actions. Methods that extend off the Wallet Client are called Wallet Actions in viem.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_13

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const provider = new providers.Web3Provider(window.ethereum)

const [address] = await provider.listAccounts()
const signer = provider.getSigner(address)

signer.sendTransaction(...) // [!code hl]
signer.signMessage(...) // [!code hl]
...

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'

const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })

const client = createWalletClient({
  account,
  chain: mainnet,
  transport: custom(window.ethereum)
})

client.sendTransaction({ ... }) // [!code hl]
client.signMessage({ ... }) // [!code hl]
...

----------------------------------------

TITLE: Retrieving ENS Text Record - Main Example
DESCRIPTION: Example showing how to retrieve a Twitter handle text record for an ENS name using the publicClient.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { normalize } from 'viem/ens'
import { publicClient } from './client'
 
const ensText = await publicClient.getEnsText({
  name: normalize('wevm.eth'),
  key: 'com.twitter',
})
// 'wevm_dev'

----------------------------------------

TITLE: Transaction Receipt with Custom Polling
DESCRIPTION: Example showing how to customize the polling interval for transaction receipt retrieval
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const transaction = await publicClient.waitForTransactionReceipt(
  { 
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
    pollingInterval: 12_000,
  }
)

----------------------------------------

TITLE: Filtering Event Logs by Arguments in viem
DESCRIPTION: Demonstrates how to use the args parameter to filter logs based on specific event argument values. In this example, logs are filtered to only include those with a specific 'from' address value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const topics = parseEventLogs({
  abi: wagmiAbi,
  args: { // [!code focus]
    from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]
  }, // [!code focus]
  logs: [{
    blockNumber: 69420n,
    data: '0x0000000000000000000000000000000000000000000000000000000000000001',
    logIndex: 1,
    topics: [
      '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0', 
      '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', 
      '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'
    ]
    // ...
  }]
})

----------------------------------------

TITLE: Estimating Total Gas for L2 Contract Operations with viem
DESCRIPTION: This example demonstrates how to estimate the total (L1 + L2) gas for a contract mint operation on an L2 network using the publicClient with publicActionsL2 extension.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'
import { wagmiAbi } from './abi'

const gas = await publicClient.estimateContractTotalGas({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account,
})

----------------------------------------

TITLE: WebSocket Client Configuration
DESCRIPTION: Example showing how to configure a WebSocket client with polling enabled for watching pending transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchPendingTransactions.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, webSocket } from 'viem'
import { mainnet } from 'viem/chains'

const publicClient = createPublicClient({
  chain: mainnet,
  transport: webSocket()
})

const unwatch = publicClient.watchPendingTransactions(
  { 
    onTransactions: transactions => console.log(transactions),
    poll: true,
  }
)

----------------------------------------

TITLE: Using extractTransactionDepositedLogs Function - TypeScript
DESCRIPTION: Demonstrates how to use the extractTransactionDepositedLogs function to extract logs from a transaction receipt. Returns an array of TransactionDeposited logs containing event arguments and block information.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractTransactionDepositedLogs.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { extractTransactionDepositedLogs } from 'viem'

const receipt = await client.getTransactionReceipt({
  hash: '0xc9c0361bc3da9cd3560e48b469d0d6aac0e633e4897895edfd26a287f7c578ec',
})

const logs = extractTransactionDepositedLogs(receipt)
// [
//   { args: { ... }, blockHash: '0x...', eventName: 'TransactionDeposited'  },
//   { args: { ... }, blockHash: '0x...', eventName: 'TransactionDeposited'  },
//   { args: { ... }, blockHash: '0x...', eventName: 'TransactionDeposited'  },
// ]

----------------------------------------

TITLE: Configuring Paymaster Context in User Operation with TypeScript
DESCRIPTION: This example shows how to set up a paymaster client and include paymaster-specific context when preparing a user operation. It demonstrates the use of a custom paymaster client with an API key and additional context data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const paymasterClient = createPaymasterClient({
  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}')
})

const hash = await bundlerClient.prepareUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: paymasterClient,
  paymasterContext: { // [!code focus]
    policyId: 'abc123' // [!code focus]
  }, // [!code focus]
})

----------------------------------------

TITLE: Estimating Gas for L1 to L2 Deposit Transaction
DESCRIPTION: Main example showing how to estimate gas for a deposit transaction from L1 to L2 (Base). It demonstrates minting ETH on L2 by sending it from L1.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { base } from 'viem/chains'
import { account, publicClientL1 } from './config'
 
const gas = await publicClientL1.estimateDepositTransactionGas({
  account,
  request: {
    gas: 21_000n,
    mint: parseEther('1')
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  },
  targetChain: base,
})

----------------------------------------

TITLE: Decoding Error Results in Ethers
DESCRIPTION: Shows how to use ethers.js Interface.decodeErrorResult to decode error data returned from a failed transaction. This extracts the arguments from custom errors.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_50

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'
import { abi } from './abi'

const iface = new utils.Interface(abi);
const result = iface.decodeErrorResult("AccountLocked", '0xf7c3865a0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba720000000000000000000000000000000000000000000000000de0b6b3a7640000')

----------------------------------------

TITLE: Checking Withdrawal Finalization Status in zkSync using viem
DESCRIPTION: Example of using the isWithdrawalFinalized function to check if a withdrawal transaction from zkSync (L2) has been finalized on the L1 network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client, zksyncClient } from './config'

const hash = await client.isWithdrawalFinalized({
  client: zksyncClient,
  hash: '0x…',
})

----------------------------------------

TITLE: Migrating from Wallet to privateKeyToAccount in viem
DESCRIPTION: Demonstrates replacing Ethers' Wallet with viem's privateKeyToAccount function. viem separates the account creation from the client creation for improved composability.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
import { providers, Wallet } from 'ethers'

const provider = new providers.Web3Provider(window.ethereum)

const wallet = new Wallet('0x...', provider) // [!code hl]

wallet.sendTransaction({ ... })

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const account = privateKeyToAccount('0x...') // [!code hl]

const client = createWalletClient({
  account, // [!code hl]
  chain: mainnet,
  transport: custom(window.ethereum)
})

client.sendTransaction({ ... })

----------------------------------------

TITLE: Creating ZKsync Smart Account - Basic Usage
DESCRIPTION: Demonstrates how to create a single-signature ZKsync Smart Account by providing the contract address and private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSinglesigSmartAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toSinglesigSmartAccount } from 'viem/zksync'

const account = toSinglesigSmartAccount({
  address: '0xf39Fd6e51aad8F6F4ce6aB8827279cffFb92266', 
  privateKey: '0x...'
})

----------------------------------------

TITLE: Configuring Public Client with Multicall Optimization
DESCRIPTION: Sets up a Public Client with eth_call aggregation enabled for improved performance using multicall.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const publicClient = createPublicClient({
  batch: {
    multicall: true,
  },
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Contract Call Simulation
DESCRIPTION: Demonstrates how to simulate contract function calls using ABI definitions along with regular transactions. Includes approve and transferFrom function calls.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateBlocks.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseAbi, parseEther } from 'viem'
import { client } from './config'

const abi = parseAbi([
  'function approve(address, uint256) returns (bool)',
  'function transferFrom(address, address, uint256) returns (bool)',
])
 
const result = await client.simulateBlocks({
  blocks: [{
    calls: [
      {
        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
        value: parseEther('1')
      },
      {
        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
        to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
        abi,
        functionName: 'approve',
        args: [
          '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
          100n
        ],
      },
      {
        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
        to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
        abi,
        functionName: 'transferFrom',
        args: [
          '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
          '0x0000000000000000000000000000000000000000',
          100n
        ],
      },
    ],
  }]
})

----------------------------------------

TITLE: Retrieving Pending Transaction Filter Changes in TypeScript using viem
DESCRIPTION: Creates a pending transaction filter and retrieves changes using getFilterChanges. Returns an array of transaction hashes.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFilterChanges.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const filter = await publicClient.createPendingTransactionFilter()
const hashes = await publicClient.getFilterChanges({ filter })

----------------------------------------

TITLE: WebSocket Transport with Retry Configuration
DESCRIPTION: Examples of configuring retry behavior and timeouts for WebSocket transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://1.rpc.thirdweb.com/...', {
  retryCount: 5,
})

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://1.rpc.thirdweb.com/...', {
  retryDelay: 100,
})

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://1.rpc.thirdweb.com/...', {
  timeout: 60_000,
})

----------------------------------------

TITLE: Configuring walletClient with eip5792Actions for getCapabilities
DESCRIPTION: Shows how to set up the wallet client with the necessary eip5792Actions extension to use getCapabilities. The configuration creates a wallet client connected to the browser's Ethereum provider.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import 'viem/window'
// ---cut---
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'
import { eip5792Actions } from 'viem/experimental'

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!),
}).extend(eip5792Actions())

export const [account] = await walletClient.getAddresses()

----------------------------------------

TITLE: ABI Definition for Struct Encoding Example
DESCRIPTION: Shows the ABI definition used in the struct encoding example, defining a tuple with uint256, bool, and address components.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
export const abi = [
  {
    name: 'staticStruct',
    inputs: [
      {
        components: [
          {
            name: 'x',
            type: 'uint256',
          },
          {
            name: 'y',
            type: 'bool',
          },
          {
            name: 'z',
            type: 'address',
          },
        ],
        name: 'foo',
        type: 'tuple',
      },
    ],
  }
] as const

----------------------------------------

TITLE: Estimating Gas for L2 Withdrawal Proof with viem Library
DESCRIPTION: This example shows how to estimate gas required to prove a withdrawal that occurred on an L2 using viem's publicClientL1. It includes essential parameters like account, L2 output index, proof data, and target chain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateProveWithdrawalGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'
import { account, publicClientL1 } from './config'

const gas = await publicClientL1.estimateProveWithdrawalGas({
  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  l2OutputIndex: 4529n,
  outputRootProof: { ... },
  targetChain: optimism,
  withdrawalProof: [ ... ],
  withdrawal: { ... },
})

----------------------------------------

TITLE: Using getL2TransactionHashes Function in TypeScript
DESCRIPTION: This example demonstrates how to use the getL2TransactionHashes function to extract L2 hashes from an L1 Transaction Receipt. It also shows how to get the transaction receipt using a client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getL2TransactionHashes.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { extractTransactionDepositedLogs, getL2TransactionHashes } from 'viem'

const receipt = await client.getTransactionReceipt({
  hash: '0xa08acae48f12243bccd7153c88d892673d5578cce4ee9988c0332e8bba47436b',
})

const l2Hashes = getL2TransactionHashes(receipt) // [!code hl]

----------------------------------------

TITLE: Basic Transaction Simulation in TypeScript
DESCRIPTION: Demonstrates how to simulate basic ETH transfer transactions using simulateCalls. Shows simulation of multiple transfers with their gas usage and status results.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { client } from './config'
 
const { results } = await client.simulateCalls({
  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
  calls: [
    {
      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
      value: parseEther('2'),
    },
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1'),
    },
  ],
})

----------------------------------------

TITLE: Basic Pending Transaction Watching in TypeScript
DESCRIPTION: Example showing how to watch pending transactions using the publicClient. Returns transaction hashes in batches within the polling interval.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchPendingTransactions.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const unwatch = publicClient.watchPendingTransactions(
  { onTransactions: hashes => console.log(hashes) }
)

----------------------------------------

TITLE: Overriding Chain for Fee Estimation in TypeScript
DESCRIPTION: Demonstrates how to override the chain when estimating fees per gas. This example uses the Optimism chain instead of the default client chain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateFeesPerGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains' // [!code focus]

const { maxFeePerGas, maxPriorityFeePerGas } = 
  await publicClient.estimateFeesPerGas({
    chain: optimism // [!code focus]
  })

----------------------------------------

TITLE: Passing Chain Directly to Transaction Actions in viem
DESCRIPTION: Example demonstrating how to pass a chain directly to a transaction action instead of setting it at the client level. This approach allows for per-transaction chain specification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { createWalletClient, custom, getAccount } from 'viem'
import { mainnet } from 'viem/chains'

export const walletClient = createWalletClient({
  chain: mainnet, // [!code --]
  transport: custom(window.ethereum)
})
 
const account = getAccount('0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266')
 
const hash = await walletClient.sendTransaction({ 
  account,
  chain: mainnet, // [!code ++]
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

----------------------------------------

TITLE: Configuring viem Clients for OP Stack Interactions
DESCRIPTION: Configuration setup for creating wallet and public clients with the necessary OP Stack extensions. Shows how to initialize clients for both L1 and L2 chains, and demonstrates two methods of providing account details.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildProveWithdrawal.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, base } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

export const walletClientL1 = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

// JSON-RPC Account
export const [account] = await walletClientL1.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Block Retrieval with Transactions
DESCRIPTION: Example of retrieving block information including full transaction details.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const block = await publicClient.getBlock({
  includeTransactions: true
})

----------------------------------------

TITLE: Basic Contract Deployment Data Encoding in TypeScript
DESCRIPTION: Basic example showing how to encode contract deployment data without constructor arguments using the encodeDeployData function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeDeployData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { encodeDeployData } from 'viem'
import { wagmiAbi } from './abi.ts'

const data = encodeDeployData({
  abi: wagmiAbi,
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...'
})
// 0x608060405260405161083e38038061083e833981016040819052610...

----------------------------------------

TITLE: ENS Text Record Retrieval with Custom Resolver
DESCRIPTION: Example showing how to retrieve an ENS text record using a custom Universal Resolver contract address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const ensText = await publicClient.getEnsText({
  name: normalize('wevm.eth'),
  key: 'com.twitter',
  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',
})

----------------------------------------

TITLE: Implementing User Operation with Bundler-Integrated Paymaster
DESCRIPTION: Demonstrates a simplified approach using bundler-integrated paymaster functionality. Instead of creating a separate Paymaster Client, it uses the bundler's built-in paymaster capabilities.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { 
  createBundlerClient, 
  createPaymasterClient,
} from 'viem/account-abstraction'
import { account, client } from './config.ts'

const bundlerClient = createBundlerClient({
  account,
  client,
  paymaster: true,
  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}'),
})

----------------------------------------

TITLE: Using serializeTransaction to Serialize an EIP-1559 Transaction
DESCRIPTION: Demonstrates how to use the serializeTransaction function to serialize an EIP-1559 transaction. It includes setting various transaction parameters like chainId, gas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, and value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { serializeTransaction } from 'viem'

const serialized = serializeTransaction({
  chainId: 1,
  gas: 21001n,
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  nonce: 69,
  to: "0x1234512345123451234512345123451234512345",
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Types Parameter Example
DESCRIPTION: Demonstrates the structure of the types parameter which defines the Person and Mail types with their respective fields.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashTypedData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const hash = hashTypedData({
  domain,
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Public Client Configuration
DESCRIPTION: Sets up the viem public client with mainnet configuration and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/readContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Parsing an EIP-4361 Message with parseSiweMessage in TypeScript
DESCRIPTION: Demonstrates how to use the parseSiweMessage function to parse an EIP-4361 formatted authentication message into a structured object. The function takes a string message as input and returns a SiweMessage object containing the parsed fields.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/parseSiweMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseSiweMessage } from 'viem/siwe'

const message = `example.com wants you to sign in with your Ethereum account:
0xA0Cf798816D4b9b9866b5330EEa46a18382f251e

I accept the ExampleOrg Terms of Service: https://example.com/tos

URI: https://example.com/path
Version: 1
Chain ID: 1
Nonce: foobarbaz
Issued At: 2023-02-01T00:00:00.000Z`
const fields = parseSiweMessage(message)
fields.address
//     ^?

----------------------------------------

TITLE: Using Data Parameter in Call Action
DESCRIPTION: Example of specifying the data parameter when making a call. This parameter contains a contract hashed method call with encoded arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', // [!code focus]
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Waiting for Transaction Receipt on Optimism L2
DESCRIPTION: Code that waits for a transaction to be processed on the Optimism (L2) chain using the previously extracted L2 transaction hash. Once this resolves, the deposited ETH should be credited to the account on the L2 chain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
// Import Viem Clients.
import { 
  account, 
  publicClientL1, 
  publicClientL2,
  walletClientL1 
} from './config'

// Build parameters for the transaction on the L2.
const args = await publicClientL2.buildDepositTransaction({
  mint: parseEther('1'),
  to: account.address,
})

// Execute the deposit transaction on the L1. 
const hash = await walletClientL1.depositTransaction(args) 

// Wait for the L1 transaction to be processed. 
const receipt = await publicClientL1.waitForTransactionReceipt({ hash }) 

// Get the L2 transaction hash from the L1 transaction receipt. 
const [l2Hash] = getL2TransactionHashes(receipt) 

// Wait for the L2 transaction to be processed. 
const l2Receipt = await publicClientL2.waitForTransactionReceipt({ 
  hash: l2Hash 
})

----------------------------------------

TITLE: watchAsset with Image Parameter
DESCRIPTION: Example demonstrating optional image parameter usage for token logo URL in watchAsset function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/watchAsset.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const success = await walletClient.watchAsset({
  type: 'ERC20',
  options: {
    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
    decimals: 18,
    symbol: 'WETH',
    image: 'https://weth.com/icon.png',
  }
})

----------------------------------------

TITLE: Setting up Private Key Account in TypeScript
DESCRIPTION: This code shows how to create a Private Key Account using the privateKeyToAccount function from viem/accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts' // [!code focus]
import { mainnet } from 'viem/chains'

const client = createWalletClient({
  chain: mainnet,
  transport: http()
})

const account = privateKeyToAccount('0x...') // [!code focus:1]

----------------------------------------

TITLE: Configuring Client for L2 Chain with OP-Stack Extensions
DESCRIPTION: Example showing how to configure a public client for an L2 chain (Base) with the OP-Stack extensions required for estimateContractL1Fee. Demonstrates both JSON-RPC account and local account configuration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Fee.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack'

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Creating a Public Client with IPC Transport in TypeScript
DESCRIPTION: This example demonstrates how to create a public client using the IPC Transport. It imports necessary functions and chains, then creates a client with mainnet chain and IPC transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient } from 'viem'
import { ipc } from 'viem/node'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet, 
  transport: ipc('/tmp/reth.ipc'), // [!code hl]
})

----------------------------------------

TITLE: Setting Private Keys for ZKsync Multi-signature Smart Account
DESCRIPTION: Example demonstrating how to set the private keys of the owners when creating a ZKsync multi-signature Smart Account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toMultisigSmartAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const account = toMultisigSmartAccount({
  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', 
  privateKeys: ['0x...', '0x...'] // [!code focus]
})

----------------------------------------

TITLE: Estimating Total Fee for L2 Contract Write in TypeScript
DESCRIPTION: This snippet demonstrates how to use the estimateContractTotalFee function to estimate the total fee for executing an L2 contract write. It imports necessary dependencies and calls the function with required parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalFee.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'
import { wagmiAbi } from './abi'

const fee = await publicClient.estimateContractTotalFee({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account,
})

----------------------------------------

TITLE: Configuring Polling Interval for Viem Wallet Client
DESCRIPTION: Demonstrates how to set a custom polling interval for the wallet client. The polling interval determines the frequency (in milliseconds) for polling enabled Actions, with a default value of 4000ms.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
const client = createWalletClient({
  pollingInterval: 10_000,
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: KZG setup for TypeScript blob operations
DESCRIPTION: Shows how to set up KZG (Kate-Zaverucha-Goldberg) polynomial commitments, which are required for blob operations in Ethereum.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
// @noErrors
import * as cKzg from 'c-kzg'
import { setupKzg } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

export const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)

----------------------------------------

TITLE: Configuring Pre-Verification Gas for User Operation in TypeScript
DESCRIPTION: Shows how to set the preVerificationGas, which is extra gas to pay the Bundler for processing the user operation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const hash = await bundlerClient.sendUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  preVerificationGas: 69420n, // [!code focus]
})

----------------------------------------

TITLE: Estimating Gas with a Specific Block Tag in TypeScript
DESCRIPTION: Shows how to estimate gas for a transaction using a specific block tag with viem's estimateGas function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const gas = await publicClient.estimateGas({
  blockTag: 'safe',
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1') 
})

----------------------------------------

TITLE: Configuring Viem Client for L2 Operations
DESCRIPTION: Configuration setup for creating a public client with L2 capabilities using viem. It includes creating a wallet client, setting up accounts, and extending the client with L2-specific actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateInitiateWithdrawalGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack'

export const publicClientL2 = createPublicClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(publicActionsL2())

// JSON-RPC Account
export const [account] = await walletClientL2.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Client Configuration Setup
DESCRIPTION: Configuration setup for the public client and account initialization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/estimateContractGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Reading EIP-712 Domain for Counterfactual Contract using viem
DESCRIPTION: This snippet demonstrates how to read the EIP-712 domain for a contract that has not been deployed yet, using factory and factoryData parameters. It utilizes the encodeFunctionData function to prepare the factory data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getEip712Domain.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { factory, publicClient } from './config'

const { domain, extensions, fields } = await publicClient.getEip712Domain({ 
  address: '0x57ba3ec8df619d4d243ce439551cce713bb17411',
  factory: factory.address,
  factoryData: encodeFunctionData({
    abi: factory.abi,
    functionName: 'createAccount',
    args: ['0x0000000000000000000000000000000000000000', 0n]
  }),
})

----------------------------------------

TITLE: Using waitToFinalize for Withdrawal Finalization in TypeScript
DESCRIPTION: Example demonstrating how to use the waitToFinalize function with viem to await the finalization period for a withdrawal transaction from Optimism (L2) to Ethereum (L1).
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitToFinalize.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'
import { account, publicClientL1, publicClientL2 } from './config'

const receipt = await publicClientL2.getTransactionReceipt({
  hash: '0x9a2f4283636ddeb9ac32382961b22c177c9e86dd3b283735c154f897b1a7ff4a',
})

const [message] = getWithdrawals(receipt)

await publicClientL1.waitToFinalize({
  withdrawalHash: message.withdrawalHash,
  targetChain: optimism
})

----------------------------------------

TITLE: Configuring Custom ZKsync Chain
DESCRIPTION: Demonstrates how to define a custom chain using ZKsync's chain configuration, including formatters and serializers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/zksync.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineChain } from 'viem'
import { chainConfig } from 'viem/zksync'

export const zkSyncExample = defineChain({
  ...chainConfig,
  name: 'ZKsync Example',
  // ...
})

----------------------------------------

TITLE: Configuration for Bundler Client and Account in TypeScript
DESCRIPTION: Setup for creating a public client, smart account, and bundler client for use with estimateUserOperationGas.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const account = await toCoinbaseSmartAccount({
  client,
  owners: [privateKeyToAccount('0x...')],
})

export const bundlerClient = createBundlerClient({
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc')
})

----------------------------------------

TITLE: Execute Function with Authorization List
DESCRIPTION: Example showing how to use the execute function with a signed EIP-7702 Authorization list for secure contract interactions, including obtaining authorization and passing it to the execute function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const authorization = await client.signAuthorization({ 
  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', 
}) 

const hash = await client.execute({
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  authorizationList: [authorization],
  calls: [ 
    { 
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
      value: parseEther('1')
    }, 
    { 
      data: '0xdeadbeef', 
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
    }, 
  ], 
})

----------------------------------------

TITLE: Importing createNonceManager from viem/nonce
DESCRIPTION: This snippet shows how to import the createNonceManager function from the viem/nonce module.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/createNonceManager.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createNonceManager } from 'viem/nonce'

----------------------------------------

TITLE: Basic Block Simulation with Transactions
DESCRIPTION: Example showing how to simulate multiple transactions within a block with custom block number and state overrides. Uses parseEther for value conversion.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateBlocks.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { client } from './config'
 
const result = await client.simulateBlocks({
  blocks: [{
    blockOverrides: {
      number: 69420n,
    },
    calls: [
      {
        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
        to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
        value: parseEther('2'),
      },
      {
        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
        value: parseEther('1'),
      },
    ],
    stateOverrides: [{
      address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
      balance: parseEther('10'),
    }],
  }]
})

----------------------------------------

TITLE: Configuration Setup for Viem Clients
DESCRIPTION: Basic configuration setup for creating public client and smart account initialization required for both implementation approaches.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { createPublicClient, http, parseEther } from 'viem'
import { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts' 

export const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

const owner = privateKeyToAccount('0x...')

export const account = await toCoinbaseSmartAccount({ 
  client, 
  owners: [owner]
})

----------------------------------------

TITLE: Initializing Basic Viem Client
DESCRIPTION: Creates a basic Viem client with mainnet chain and HTTP transport configuration
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/custom.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createClient({ 
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Generating Random BIP-39 Mnemonics in viem
DESCRIPTION: Generate a cryptographically secure random mnemonic phrase using the generateMnemonic function with a specific wordlist from viem/accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { english, generateMnemonic } from 'viem/accounts'

const mnemonic = generateMnemonic(english)

----------------------------------------

TITLE: Reading EIP-712 Domain using viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getEip712Domain function from the viem library to read the EIP-712 domain from a contract. It requires a publicClient instance configured with a chain and transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getEip712Domain.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const { domain, extensions, fields } = await publicClient.getEip712Domain({ 
  address: '0x57ba3ec8df619d4d243ce439551cce713bb17411',
})

----------------------------------------

TITLE: ENS Name Query with Custom Resolver
DESCRIPTION: Example of querying an ENS name with a custom Universal Resolver address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsName.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const ensName = await publicClient.getEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',
})

----------------------------------------

TITLE: Basic Batch Transaction Implementation
DESCRIPTION: Demonstrates how to send multiple transactions in a batch using the walletClient. Includes sending ETH and executing contract calls.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/sendCalls.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, walletClient } from './config'
 
const { id } = await walletClient.sendCalls({
  account,
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      data: '0xdeadbeef',
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
    },
  ],
})

----------------------------------------

TITLE: Recovering Public Key from Hash and Signature in TypeScript using viem
DESCRIPTION: This example demonstrates how to use the recoverPublicKey function to recover the original 64-byte public key from a message hash and signature. The function takes an object with hash and signature parameters and returns the public key as a hexadecimal string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverPublicKey.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { recoverPublicKey } from 'viem'
 
const publicKey = await recoverPublicKey({
  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'
})
// 0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5

----------------------------------------

TITLE: Parameter Examples for finalizeWithdrawal Function
DESCRIPTION: Examples demonstrating the different parameters available for the finalizeWithdrawal function, including the required client and hash parameters and optional index and chain parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const hash = await walletClient.finalizeWithdrawal({
  client: zksyncClient, // [!code focus]
  hash: '0x…',
})

LANGUAGE: typescript
CODE:
const hash = await walletClient.finalizeWithdrawal({
  client: zksyncClient,
  hash: '0x…',  // [!code focus]
})

LANGUAGE: typescript
CODE:
const hash = await walletClient.finalizeWithdrawal({
  client: zksyncClient,
  hash: '0x…',
  index: 0n, // [!code focus]
})

LANGUAGE: typescript
CODE:
import { zksync } from 'viem/chains' // [!code focus]

const hash = await walletClient.finalizeWithdrawal({
  chain: zksync, // [!code focus]
  client: zksyncClient,
  hash: '0x…',
})

----------------------------------------

TITLE: Configuring viem Clients for zkSync and Ethereum
DESCRIPTION: Setup configuration for viem clients to interact with both zkSync (L2) and Ethereum mainnet (L1), extending them with the necessary public actions for cross-chain operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { zksync, mainnet } from 'viem/chains'
import { publicActionsL2, publicActionsL1 } from 'viem/zksync'

export const zksyncClient = createPublicClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(publicActionsL2())

export const client = createPublicClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(publicActionsL1())

----------------------------------------

TITLE: Basic Log Retrieval with Viem Client
DESCRIPTION: Basic example of retrieving all event logs using a public client. Creates a public client instance and calls getLogs without any filters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getLogs.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const logs = await publicClient.getLogs()

----------------------------------------

TITLE: Using toFunctionSelector with Different Input Formats
DESCRIPTION: Demonstrates three different ways to generate function selectors: using a full function signature string, using a shortened function signature, and using an AbiFunction object. All methods produce the same selector output (0x6352211e).
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionSelector.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toFunctionSelector } from 'viem'

const selector_1 = toFunctionSelector('function ownerOf(uint256 tokenId)')
// @log: Output: 0x6352211e

const selector_2 = toFunctionSelector('ownerOf(uint256)')
// @log: Output: 0x6352211e

// or from an `AbiFunction` on your contract ABI
const selector_3 = toFunctionSelector({
  name: 'ownerOf',
  type: 'function',
  inputs: [{ name: 'tokenId', type: 'uint256' }],
  outputs: [],
  stateMutability: 'view',
})
// @log: Output: 0x6352211e

----------------------------------------

TITLE: Using To Parameter in Call Action
DESCRIPTION: Example of specifying the to parameter when making a call. This parameter represents the contract address or recipient of the call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', // [!code focus]
})

----------------------------------------

TITLE: Configuring HTTP Transport Parameters
DESCRIPTION: Various configuration examples including batch size, wait time, fetch options, and other transport parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/http.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const transport = http('https://1.rpc.thirdweb.com/...', {
  batch: {
    batchSize: 2_000
  }
})

LANGUAGE: typescript
CODE:
const transport = http('https://1.rpc.thirdweb.com/...', {
  fetchOptions: {
    headers: {
      'Authorization': 'Bearer ...'
    }
  }
})

----------------------------------------

TITLE: Configuring viem Client for L2 Actions with zksync Chain
DESCRIPTION: Setup for creating a public client with zksync chain configuration and extending it with L2-specific public actions to enable L2-specific methods like getBaseTokenL1Address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBaseTokenL1Address.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

----------------------------------------

TITLE: Setting Bytecode for Account Address in TypeScript
DESCRIPTION: This snippet demonstrates how to use the `setCode` function from a test client to modify the bytecode stored at a specific account address. It requires a pre-configured test client and takes an address and bytecode as parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setCode.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.setCode({
  address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',
  bytecode: '0x60806040526000600355600019600955600c80546001600160a01b031916737a250d5630b4cf539739df...'
})

----------------------------------------

TITLE: Creating Pending Transaction Filter with Viem in TypeScript
DESCRIPTION: This snippet demonstrates how to create a pending transaction filter using the publicClient from Viem. The filter can be used with getFilterChanges to listen for new pending transaction hashes.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createPendingTransactionFilter.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const filter = await publicClient.createPendingTransactionFilter()
// @log: Output: { id: "0x345a6572337856574a76364e457a4366", type: 'transaction' }

----------------------------------------

TITLE: Account Hoisted Transaction Request
DESCRIPTION: Demonstrates preparing a transaction request with the account hoisted on the wallet client instead of passing it directly.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const request = await walletClient.prepareTransactionRequest({
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

----------------------------------------

TITLE: Estimating L1 Fee for L2 Transaction using viem
DESCRIPTION: This snippet demonstrates how to use the estimateL1Fee function from the viem library to estimate the L1 data fee for an L2 transaction. It includes the main function call and a configuration setup.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateL1Fee.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const fee = await publicClient.estimateL1Fee({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1')
})

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack'

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Generating Random Private Keys in TypeScript
DESCRIPTION: Shows how to generate a random private key using the generatePrivateKey function from viem/accounts, which can then be used with privateKeyToAccount.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/privateKeyToAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { generatePrivateKey } from 'viem/accounts'

const privateKey = generatePrivateKey()

----------------------------------------

TITLE: Creating Public Client with HTTP Transport
DESCRIPTION: Example of creating a public client with HTTP transport configuration and mainnet chain specification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/http.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http('https://1.rpc.thirdweb.com/...'),
})

----------------------------------------

TITLE: Sponsoring User Operations with Paymaster Client in Viem (Bundler Client)
DESCRIPTION: This snippet demonstrates how to create a Paymaster client and use it with a Bundler client to sponsor User Operation fees. It uses Pimlico's Paymaster API and sends a user operation to transfer Ether.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { 
  createBundlerClient, 
  createPaymasterClient,
} from 'viem/account-abstraction'
import { account, client } from './config.ts'

const paymasterClient = createPaymasterClient({
  transport: http('https://public.pimlico.io/v2/11155111/rpc'),
})

const bundlerClient = createBundlerClient({
  account,
  client,
  paymaster: paymasterClient,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

const hash = await bundlerClient.sendUserOperation({
  calls: [{
    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
    value: parseEther('0.001')
  }]
})

----------------------------------------

TITLE: Retrieving Transaction Details with ZkSync in Viem
DESCRIPTION: Demonstrates how to fetch transaction details using the getTransactionDetails method from a viem public client configured for ZkSync. The function takes a transaction hash and returns the transaction details.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getTransactionDetails.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const details = await client.getTransactionDetails({
  txHash: '0x...'
});

----------------------------------------

TITLE: Configuring Custom Celo Chain
DESCRIPTION: Demonstrates how to define a custom Celo chain using Viem's chainConfig and defineChain utility, inheriting Celo's formatters and serializers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/celo.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineChain } from 'viem'
import { chainConfig } from 'viem/celo'

export const celoExample = defineChain({
  ...chainConfig,
  name: 'Celo Example',
  // ...
})

----------------------------------------

TITLE: Extending Test Client with Additional Actions
DESCRIPTION: Demonstrates how to extend the test client with public and wallet actions for broader functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/test.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createTestClient, http, publicActions, walletActions } from 'viem'
import { foundry } from 'viem/chains'

const client = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})
  .extend(publicActions)
  .extend(walletActions)

const blockNumber = await client.getBlockNumber()
const hash = await client.sendTransaction({ ... })
const mine = await client.mine({ blocks: 1 })

----------------------------------------

TITLE: Decoding a Struct from Contract Output
DESCRIPTION: Example showing how to decode a struct containing uint256, bool, and address fields from contract output.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { abi } from './abi'

const values = decodeAbiParameters(
  abi[0].outputs,
  '0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',
)
// { x: 420n, y: true, z: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC' }

----------------------------------------

TITLE: Address-Scoped Event Watching
DESCRIPTION: Example of watching events from a specific contract address using watchEvent
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const unwatch = publicClient.watchEvent({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Configuring User Operation Fee Estimation for Bundler Client in TypeScript
DESCRIPTION: This code snippet shows how to configure the User Operation fee estimation when creating a Bundler Client. It includes an async function that estimates the maxFeePerGas and maxPriorityFeePerGas for a User Operation request.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_15

LANGUAGE: typescript
CODE:
const bundlerClient = createBundlerClient({
  chain: mainnet,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
  userOperation: { // [!code focus]
    async estimateFeesPerGas({ account, bundlerClient, userOperation }) { // [!code focus]
      // Estimate fees per gas for the User Operation. // [!code focus]
      return { // [!code focus]
        maxFeePerGas: /* ... */, // [!code focus]
        maxPriorityFeePerGas: /* ... */, // [!code focus]
      } // [!code focus]
    } // [!code focus]
  } // [!code focus]
})

----------------------------------------

TITLE: Specifying Target Chain for ZKSync Deposit Operation
DESCRIPTION: Example demonstrating how to specify the target chain for a deposit operation. This ensures the transaction is sent to the correct network and prevents errors from chain mismatches.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { zksync } from 'viem/chains' // [!code focus]

const hash = await walletClient.deposit({
  chain: zksync, // [!code focus]
  client: zksyncClient,
  token: '0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55',
  amount: 20n,
  to: walletClient.account.address,
  approveToken: true,
  refundRecipient: walletClient.account.address,
})

----------------------------------------

TITLE: Using the Bundler Client as a Paymaster
DESCRIPTION: Demonstrates how to configure a Bundler Client to also act as a Paymaster by setting the paymaster parameter to true. This setup assumes the bundler endpoint supports paymaster RPC methods.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const bundlerClient = createBundlerClient({
  chain: mainnet,
  paymaster: true, // [!code focus]
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

----------------------------------------

TITLE: Setting the commitments parameter in commitmentsToVersionedHashes
DESCRIPTION: Demonstrates how to set the commitments parameter when converting blob commitments to versioned hashes.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const blobs = toBlobs({ data: '0x1234' })
const commitments = blobsToCommitments({ blobs, kzg })
const versionedHashes = commitmentsToVersionedHashes({ 
  commitments,  
  kzg, 
})

----------------------------------------

TITLE: Using getTimeToFinalize for OP Stack Withdrawals in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getTimeToFinalize function to retrieve the time until a withdrawal transaction can be finalized. It includes setting up the necessary clients and retrieving the withdrawal information.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToFinalize.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'
import { account, publicClientL1, publicClientL2 } from './config'

const receipt = await publicClientL2.getTransactionReceipt({
  hash: '0x9a2f4283636ddeb9ac32382961b22c177c9e86dd3b283735c154f897b1a7ff4a',
})

const [message] = getWithdrawals(receipt)

const {
  period,
  seconds,
  timestamp,
} = await publicClientL1.getTimeToFinalize({
  withdrawalHash: message.withdrawalHash,
  targetChain: optimism
})

----------------------------------------

TITLE: Setting Storage Keys for getProof in TypeScript
DESCRIPTION: This example demonstrates how to specify the storage keys when calling the getProof function. The storageKeys parameter is an array of Hash values representing the storage keys to be proved and included in the result.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getProof.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const proof = await publicClient.getProof({
  address: '0x4200000000000000000000000000000000000016',
  storageKeys: [ // [!code focus:3]
    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
  ],
  blockNumber: 42069n
})

----------------------------------------

TITLE: Filtered Contract Event Watching
DESCRIPTION: Example of watching contract events with specific argument filtering for the Transfer event.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/watchContractEvent.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { publicClient } from './client'
import { wagmiAbi } from './abi'

const unwatch = publicClient.watchContractEvent({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  eventName: 'Transfer',
  args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Encoding Error Result with Full ABI Example
DESCRIPTION: Demonstrates how to encode an error result using a complete contract ABI with explicit error name specification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeErrorResult.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { decodeErrorResult } from 'viem'
import { wagmiAbi } from './abi.ts'

const value = encodeErrorResult({
  abi: wagmiAbi,
  errorName: 'InvalidTokenError',
  args: ['sold out']
})

----------------------------------------

TITLE: Extracting Wallet Capabilities with getCapabilities in viem
DESCRIPTION: Demonstrates how to use getCapabilities to extract wallet capabilities grouped by chain ID. The example shows calling getCapabilities with an account parameter and the structure of the returned capabilities object.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'
 
const capabilities = await walletClient.getCapabilities({
  account,
})
// @log: {
// @log:   8453: {
// @log:      paymasterService: {
// @log:        supported: true,
// @log:      },
// @log:      sessionKeys: {
// @log:        supported: true,
// @log:      },
// @log:    },
// @log:    84532: {
// @log:       paymasterService: {
// @log:         supported: true,
// @log:       },
// @log:    },
// @log: }

----------------------------------------

TITLE: Explicit Chain ID and Nonce Authorization Signing
DESCRIPTION: Example of signing an authorization with explicitly specified chain ID and nonce values for more precise control.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/signAuthorization.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { walletClient } from './client'

const eoa = privateKeyToAccount('0x...')
 
const authorization = await walletClient.signAuthorization({
  account: eoa,
  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  chainId: 10,
  nonce: 420,
})

const hash = await walletClient.sendTransaction({
  authorizationList: [authorization],
  data: '0xdeadbeef',
  to: eoa.address,
})

----------------------------------------

TITLE: Querying Chain ID using viem Public Client
DESCRIPTION: Demonstrates how to retrieve the chain ID from the current Ethereum network using a viem public client. Returns a numeric chain ID value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getChainId.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const chainId = await publicClient.getChainId()

----------------------------------------

TITLE: Using decodeFunctionResult Without functionName
DESCRIPTION: Shows how to use decodeFunctionResult when the ABI contains only one item, making the functionName parameter optional.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionResult.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { decodeFunctionResult } from 'viem'
import { abiItem } from './abi.ts'

const value = decodeFunctionResult({
  abi: [abiItem],
  data: '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac'
})
// '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'

----------------------------------------

TITLE: Creating Wallet Client with JSON-RPC Account in Viem
DESCRIPTION: This snippet shows how to create a walletClient using Viem's createWalletClient function with a JSON-RPC account. It retrieves the account from an EIP-1193 Provider (window.ethereum) and sets up a custom transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverTransactionAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
})

export const walletClient = createWalletClient({
  account,
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: Using parseEther Function to Convert Ether to Wei in TypeScript
DESCRIPTION: This snippet demonstrates how to use the parseEther function to convert a string representation of ether ('420') to numerical wei. The result is a bigint value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseEther.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'

parseEther('420') // [!code focus:2]
// 420000000000000000000n

----------------------------------------

TITLE: Event Filter with Multiple Arguments
DESCRIPTION: Example of creating an event filter with multiple indexed arguments including array-based filtering.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const filter = await publicClient.createContractEventFilter({
  abi: wagmiAbi,
  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',
  eventName: 'Transfer',
  args: {
    from: [
      '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 
      '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',
      '0xa152f8bb749c55e9943a3a0a3111d18ee2b3f94e',
    ],
  }
})

----------------------------------------

TITLE: Basic Unsigned Transaction Example
DESCRIPTION: Demonstrates how to send a basic unsigned transaction using the test client with required parameters like from, to, and value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/sendUnsignedTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
const hash = await testClient.sendUnsignedTransaction({
  from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

----------------------------------------

TITLE: Contract Call User Operation Preparation
DESCRIPTION: Demonstrates how to prepare a User Operation for contract interaction using ABI and function name specification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { bundlerClient, publicClient } from './config'
import { wagmiAbi } from './abi'

const userOperation = await bundlerClient.prepareUserOperation({
  calls: [{
    abi: wagmiAbi,
    functionName: 'mint',
    to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  }],
})

----------------------------------------

TITLE: Estimating Total Gas for an L2 Transaction in viem
DESCRIPTION: Example of using the estimateTotalGas function from viem's OP Stack module to calculate the combined L1 data gas and L2 execution gas for a transaction on Base network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateTotalGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const gas = await publicClient.estimateTotalGas({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1')
})

----------------------------------------

TITLE: Simulating Contract Function Call with Data Suffix in TypeScript
DESCRIPTION: Shows how to append additional data to the calldata when simulating a contract function call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  dataSuffix: '0xdeadbeef'
})

----------------------------------------

TITLE: Creating Public Client in TypeScript
DESCRIPTION: Shows how to create a public client using the createPublicClient function from viem. It sets up a client for the Ethereum mainnet using HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateFeesPerGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Importing extractTransactionDepositedLogs Function - TypeScript
DESCRIPTION: Shows how to import the extractTransactionDepositedLogs function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractTransactionDepositedLogs.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { extractTransactionDepositedLogs } from 'viem'

----------------------------------------

TITLE: Retrieving Wallet Addresses using TypeScript and Viem
DESCRIPTION: Demonstrates how to use the walletClient.getAddresses() method to fetch a list of account addresses owned by the wallet. Returns an array of checksummed Ethereum addresses.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/getAddresses.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { walletClient } from './client'

const accounts = await walletClient.getAddresses()
// ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']

----------------------------------------

TITLE: Basic Contract Deployment with EIP712 Transaction in TypeScript
DESCRIPTION: Demonstrates how to deploy a contract using the walletClient with basic configuration. Requires an ABI, account, and bytecode to function properly.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { wagmiAbi } from './abi'
import { account, walletClient } from './config'

const hash = await walletClient.deployContract({
  abi,
  account,
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
})

----------------------------------------

TITLE: Basic Transaction Sending with viem
DESCRIPTION: Example showing how to send a basic transaction using wallet client with account details and value transfer.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/sendTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient } from './config'

const hash = await walletClient.sendTransaction({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

----------------------------------------

TITLE: Using commitmentToVersionedHash with blob data
DESCRIPTION: Example showing how to transform a blob commitment to a versioned hash using the commitmentToVersionedHash function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentToVersionedHash.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { 
  blobsToCommitments, 
  commitmentToVersionedHash, 
  toBlobs 
} from 'viem'
import { kzg } from './kzg'

const blobs = toBlobs({ data: '0x1234' })
const [commitment] = blobsToCommitments({ blobs, kzg })
const versionedHashes = commitmentToVersionedHash({  
  commitment,  
}) 

----------------------------------------

TITLE: Execute Function with Account Hoisting Example
DESCRIPTION: Example showing how to use the execute function with account hoisting, where the account is set at the client level instead of being passed to each execute call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, client } from './config'
 
const hash = await client.execute({
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      data: '0xdeadbeef',
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
    },
  ],
})

----------------------------------------

TITLE: Specifying the domain parameter in wrapTypedDataSignature
DESCRIPTION: Example demonstrating how to set the domain parameter in a wrapTypedDataSignature function call. The domain includes name, version, chainId, and verifyingContract properties.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const signature = wrapTypedDataSignature({
  domain: { 
    name: 'Ether Mail',
    version: '1',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
  },
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  verifierDomain: {
    name: 'Smart Account',
    version: '1',
    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',
    chainId: 1,
  },
})

----------------------------------------

TITLE: Adding Avalanche Chain to Wallet using viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the addChain method from a walletClient to add the Avalanche chain to a wallet. It imports the avalanche chain from viem/chains and uses a pre-configured walletClient.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/addChain.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { avalanche } from 'viem/chains'
import { walletClient } from './client'
 
await walletClient.addChain({ chain: avalanche })

----------------------------------------

TITLE: Account Hoisting with JSON-RPC for OP Stack Transactions
DESCRIPTION: Shows how to hoist the account at the client level with JSON-RPC accounts to avoid passing the account to every deposit transaction call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createWalletClient, createPublicClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, base } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum.request({
  method: 'eth_requestAccounts'
})

export const walletClientL1 = createWalletClient({
  account,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Setting Paymaster Data in User Operation with TypeScript
DESCRIPTION: This snippet illustrates how to include paymaster data when preparing a user operation. It shows setting the paymaster address and providing specific paymaster data as a hexadecimal string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const userOperation = await bundlerClient.prepareUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',
  paymasterData: '0xdeadbeef', // [!code focus]
})

----------------------------------------

TITLE: Retrieving Storage Slot Value with viem
DESCRIPTION: Example showing how to retrieve a value from a storage slot using the getStorageAt method from a public client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getStorageAt.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toHex } from 'viem'
import { wagmiAbi } from './abi'
import { publicClient } from './client'

const data = await publicClient.getStorageAt({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  slot: toHex(0)
})

----------------------------------------

TITLE: Decoding Function Data in Ethers
DESCRIPTION: Shows how to use ethers.js Interface.decodeFunctionData to decode function call data. This extracts the function name and arguments from transaction data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_54

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'
import { abi } from './abi'

const iface = new utils.Interface(abi);
const result = iface.decodeFunctionData('transferFrom', '0x23b872dd0000000000000000000000008ba1f109551bd432803012645ac136ddd64dba72000000000000000000000000ab7c8803962c0f2f5bbbe3fa8bf41cd82aa1923c0000000000000000000000000000000000000000000000000de0b6b3a7640000');

----------------------------------------

TITLE: Configuring Wallet Client for OP Stack L1 Transactions
DESCRIPTION: Shows how to configure a wallet client with L1 wallet actions for deposit transactions. Demonstrates setup with both JSON-RPC and local private key accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { walletActionsL1 } from 'viem/op-stack'

export const walletClientL1 = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

// JSON-RPC Account
export const [account] = await walletClientL1.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Configuring Wallet Client in viem
DESCRIPTION: This snippet shows the configuration of a wallet client using viem, which is imported in the previous example.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/createNonceManager.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const client = createWalletClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Account Hoisting Configuration
DESCRIPTION: Shows how to configure clients with hoisted accounts for both JSON-RPC and Local Account scenarios
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/initiateWithdrawal.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createWalletClient, createPublicClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1, walletActionsL2 } from 'viem/op-stack'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum.request({
  method: 'eth_requestAccounts'
})

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const walletClientL2 = createWalletClient({
  account,
  chain: optimism,
  transport: custom(window.ethereum)
}).extend(walletActionsL2())

----------------------------------------

TITLE: Struct ABI Definition for Decoding
DESCRIPTION: The ABI definition used for the struct decoding example.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
export const abi = [
  {
    name: 'staticStruct',
    outputs: [
      {
        components: [
          {
            name: 'x',
            type: 'uint256',
          },
          {
            name: 'y',
            type: 'bool',
          },
          {
            name: 'z',
            type: 'address',
          },
        ],
        name: 'foo',
        type: 'tuple',
      },
    ],
  }
] as const

----------------------------------------

TITLE: Using recoverAddress with Hash Parameter in TypeScript
DESCRIPTION: Example demonstrating the hash parameter in the recoverAddress function. The hash parameter is a string representing the hash that was signed.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const address = await recoverAddress({ 
  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68', 
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'
})

----------------------------------------

TITLE: Event Log Parsing with Event Name Filter
DESCRIPTION: Example demonstrating how to filter logs by specific event names using the eventName parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const logs = parseEventLogs({ 
  abi: erc20Abi, 
  eventName: 'Transfer',
  logs: receipt.logs,
})

----------------------------------------

TITLE: Serializing a Transaction with Signature
DESCRIPTION: Shows how to serialize a transaction with an optional signature. The signature includes r, s, and yParity values.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const serialized = serializeTransaction({
  chainId: 1,
  gas: 21001n,
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  nonce: 69,
  to: '0x1234512345123451234512345123451234512345',
  value: parseEther('0.01'),
}, { // [!code focus:5]
  r: '0x123451234512345123451234512345123451234512345123451234512345',
  s: '0x123451234512345123451234512345123451234512345123451234512345',
  yParity: 1
})

----------------------------------------

TITLE: Contract ABI Definition
DESCRIPTION: Definition of the contract ABI including the constructor parameters used for decoding the deploy data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeDeployData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [
      {
        name: 'a',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  ...
] as const;

----------------------------------------

TITLE: Configuration Setup for L1 and L2 Clients in viem
DESCRIPTION: Configuration for setting up public and wallet clients for both L1 and L2 chains using viem. This includes creating clients for Ethereum (L1) and Optimism (L2), extending them with OP Stack-specific actions, and configuring the account to use for transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1, publicActionsL2, walletActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL1())

export const walletClientL1 = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

// JSON-RPC Account
export const [account] = await walletClientL1.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Using getWithdrawalStatus in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getWithdrawalStatus function to check the status of a withdrawal. It retrieves a transaction receipt from L2 and then checks its status on L1.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getWithdrawalStatus.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClientL1, publicClientL2 } from './config'

const receipt = await publicClientL2.getTransactionReceipt({
  hash: '0x7b5cedccfaf9abe6ce3d07982f57bcb9176313b019ff0fc602a0b70342fe3147'
})

const status = await publicClientL1.getWithdrawalStatus({
  receipt,
  targetChain: publicClientL2.chain,
})
// "ready-to-prove"

----------------------------------------

TITLE: Basic Contract Write Example
DESCRIPTION: Basic example of writing to a contract using walletClient with required parameters including account, address, ABI and function name.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/writeContract.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
const hash = await walletClient.writeContract({
  account,
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
})

----------------------------------------

TITLE: Configuring Polling Interval for Paymaster Client
DESCRIPTION: Setting a custom polling interval for the Paymaster Client. The pollingInterval parameter defines the frequency in milliseconds for polling enabled Actions, with a default of 4000ms.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createPaymasterClient } from 'viem/account-abstraction'
import { http } from 'viem'

const client = createPaymasterClient({
  pollingInterval: 10_000,
  transport: http('https://public.pimlico.io/v2/11155111/rpc')
})

----------------------------------------

TITLE: Executing EIP-7702 Transaction in TypeScript
DESCRIPTION: This snippet demonstrates the full process of executing an EIP-7702 Transaction, including authorizing the contract designation, designating the contract on the EOA, and invoking the 'initialize' function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { encodeFunctionData } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { walletClient } from './config'
import { abi, contractAddress } from './contract'

const eoa = privateKeyToAccount('0x...')

// 1. Authorize designation of the Contract onto the EOA.
const authorization = await walletClient.signAuthorization({
  account: eoa,
  contractAddress,
})

// 2. Designate the Contract on the EOA, and invoke the 
//    `initialize` function.
const hash = await walletClient.sendTransaction({
  authorizationList: [authorization],
  //                  ↑ 3. Pass the Authorization as a parameter.
  data: encodeFunctionData({
    abi,
    functionName: 'initialize',
  }),
  to: eoa.address,
})

----------------------------------------

TITLE: Using Human Readable Parameters with parseAbiParameters
DESCRIPTION: Shows how to use decodeAbiParameters with human-readable ABI parameters using the parseAbiParameters utility.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { decodeAbiParameters, parseAbiParameters } from 'viem'

const values = decodeAbiParameters(
  parseAbiParameters('string x, uint y, bool z'),
  '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000'
)
// ['wagmi', 420n, true]

----------------------------------------

TITLE: Extending Viem Client with ERC-7739 Actions in TypeScript
DESCRIPTION: This snippet demonstrates how to extend a Viem wallet client with experimental ERC-7739 actions. It imports the required dependencies, creates a wallet client connected to the Ethereum mainnet, and then extends it with ERC-7739 functionality which can be used for operations like message signing.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/client.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { erc7739Actions } from 'viem/experimental' // [!code focus]

const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!),
}).extend(erc7739Actions()) // [!code focus]

const id = await walletClient.signMessage({/* ... */})

----------------------------------------

TITLE: Recovering Ethereum Address from Hash and Signature using Viem in TypeScript
DESCRIPTION: Example of using the recoverAddress function from the Viem library to recover the original signing Ethereum address from a hash and its corresponding signature. The function returns the address as a string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { recoverAddress } from 'viem'
 
const address = await recoverAddress({
  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'
})
// 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266

----------------------------------------

TITLE: Using parseSignature Function to Parse Hex Signature in TypeScript
DESCRIPTION: Demonstrates how to use the parseSignature function to convert a hex formatted signature into a structured signature object. The function returns an object with r, s, and yParity properties.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseSignature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseSignature } from 'viem'

parseSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c') // [!code focus:8]
/**
 * {
 *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',
 *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',
 *   yParity: 1
 * }
 */

----------------------------------------

TITLE: Creating Test Client for Viem in TypeScript
DESCRIPTION: This snippet shows how to create a test client using Viem library. The client is configured to use the Foundry chain and Anvil mode with HTTP transport. This client can be used to interact with the blockchain, including using the dumpState function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/dumpState.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Using keccak256 with different input types
DESCRIPTION: Demonstrates how to use the keccak256 function with different types of input: Uint8Array (byte array), hex string, and UTF-8 string converted to hex. Each example shows the expected output hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/keccak256.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { keccak256 } from 'viem'

keccak256(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])
// 0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0

keccak256('0xdeadbeef')
// 0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1

// hash utf-8 string
keccak256(toHex('hello world'))
// 0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0

----------------------------------------

TITLE: Executing Deposit Transaction on Ethereum Mainnet
DESCRIPTION: This code snippet shows how to execute the deposit transaction on Ethereum Mainnet using the walletClientL1. It uses the previously built transaction parameters to initiate the deposit.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
// Import Viem Clients.
import { account, publicClientL2, walletClientL1 } from './config'

// Build parameters for the transaction on the L2.
const args = await publicClientL2.buildDepositTransaction({
  mint: parseEther('1'),
  to: account.address,
})

// Execute the deposit transaction on the L1.
const hash = await walletClientL1.depositTransaction(args)

----------------------------------------

TITLE: Basic Authorization Signing in TypeScript
DESCRIPTION: Demonstrates how to sign a basic EIP-7702 Authorization using a wallet client and private key account. The authorization is then used in a transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/signAuthorization.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
import { walletClient } from './client'

const eoa = privateKeyToAccount('0x...')
 
const authorization = await walletClient.signAuthorization({
  account: eoa,
  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
})

const hash = await walletClient.sendTransaction({
  authorizationList: [authorization],
  data: '0xdeadbeef',
  to: eoa.address,
})

----------------------------------------

TITLE: Bundler Client Setup
DESCRIPTION: Creating a bundler client for submitting User Operations to the blockchain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { createBundlerClient } from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

const bundlerClient = createBundlerClient({
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

----------------------------------------

TITLE: Creating Public Client with WebSocket Transport
DESCRIPTION: Example of creating a public client with WebSocket transport configuration for mainnet chain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, webSocket } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet, 
  transport: webSocket('wss://1.rpc.thirdweb.com/...'),
})

----------------------------------------

TITLE: Event Filter with Address Scope
DESCRIPTION: Creating an event filter scoped to a specific contract address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const filter = await publicClient.createContractEventFilter({
  abi: wagmiAbi,
  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2'
})

----------------------------------------

TITLE: TypedData Type Definitions
DESCRIPTION: Defines the domain and types structure for the typed data signing. Includes Person and Mail type definitions with their respective fields.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
// All properties on a domain are optional
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const
 
// The named list of all type definitions
export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Serializing ZKsync Transactions
DESCRIPTION: Example of serializing a ZKsync transaction with EIP-712 support, including paymaster functionality. Demonstrates usage of the serializeTransaction utility.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/zksync.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { serializeTransaction } from 'viem/zksync'

const serialized = serializeTransaction({
  chainId: 1,
  gas: 21001n,
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  nonce: 69,
  paymaster: '0x4B5DF730c2e6b28E17013A1485E5d9BC41Efe021',
  paymasterInput: '0x8c5a344500000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000',
  to: '0x1234512345123451234512345123451234512345',
  type: 'eip712',
  value: parseEther('0.01')
})

----------------------------------------

TITLE: Impersonating Account Using TestClient in Viem
DESCRIPTION: Example showing how to impersonate an Ethereum account using the testClient. This allows sending transactions from an account without having its private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/impersonateAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.impersonateAccount({
  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC'
})

----------------------------------------

TITLE: Encoding Error Result without ErrorName
DESCRIPTION: Shows how to encode an error result when working with a single ABI item, where errorName becomes optional.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeErrorResult.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { decodeErrorResult } from 'viem'

const abiItem = {
  inputs: [{ name: 'reason', type: 'string' }],
  name: 'InvalidTokenError',
  type: 'error'
}

const value = encodeErrorResult({
  abi: [abiItem],
  args: ['sold out']
})

----------------------------------------

TITLE: Inspecting Transaction Pool using Viem TestClient
DESCRIPTION: Example of how to use the inspectTxpool method to get information about pending transactions. The code demonstrates creating a test client and using it to fetch transaction pool data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/inspectTxpool.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

const data = await testClient.inspectTxpool()

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Basic Block Retrieval in TypeScript
DESCRIPTION: Basic example of retrieving block information using the publicClient.getBlock() method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlock.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const block = await publicClient.getBlock()

----------------------------------------

TITLE: Defining message parameter in wrapTypedDataSignature
DESCRIPTION: Example showing how to structure the message parameter in wrapTypedDataSignature. The message contains the actual data being signed according to the type structure defined in types.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const signature = wrapTypedDataSignature({
  domain,
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail', 
  message: { 
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  verifierDomain: {
    name: 'Smart Account',
    version: '1',
    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',
    chainId: 1,
  },
})

----------------------------------------

TITLE: Setting maxPriorityFeePerGas for EIP-1559 Transactions in viem
DESCRIPTION: Example demonstrating how to set the maxPriorityFeePerGas parameter when writing to a contract. This parameter defines the max priority fee per gas in wei and only applies to EIP-1559 transactions, working together with maxFeePerGas to determine the total transaction fee.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
await walletClient.writeContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'), // [!code focus]
})

----------------------------------------

TITLE: Parsing ABI Data in Viem
DESCRIPTION: Demonstrates how to parse ABI data using the parseAbi function in viem. This function takes an array of function and event signatures and converts them into a structured ABI format.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_33

LANGUAGE: typescript
CODE:
import { parseAbi } from 'viem'

const json = parseAbi([
  'constructor(string symbol, string name)',
  'function transferFrom(address from, address to, uint amount)',
  'function transferFrom(address from, address to, uint amount, bool x)',
  'function mint(uint amount) payable',
  'function balanceOf(address owner) view returns (uint)',
  'event Transfer(address indexed from, address indexed to, uint256 amount)'
])

----------------------------------------

TITLE: Signing a Transaction with Local Account in TypeScript
DESCRIPTION: Demonstrates how to sign a transaction using a local account's private key. It includes setting up the account and specifying transaction parameters like chainId, gas fees, and recipient address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseGwei } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'

const account = privateKeyToAccount('0x...')

const signature = await account.signTransaction({
  chainId: 1,
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('3'),
  gas: 21000n,
  nonce: 69,
  to: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
})
// @log: Output: "0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33"

----------------------------------------

TITLE: Using getL2HashFromPriorityOp to get L2 hash from L1 receipt
DESCRIPTION: Demonstrates how to use the getL2HashFromPriorityOp function to retrieve the L2 hash from an L1 transaction receipt. It first waits for the transaction receipt and then uses it alongside the main contract address to get the L2 hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/bridge/getL2HashFromPriorityOp.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { client, zksyncClient } from './config'
import { getL2HashFromPriorityOp } from 'viem/zksync'

const receipt = await client.waitForTransactionReceipt({
  hash: '0x...'
})
const l2Hash = getL2HashFromPriorityOp(
  receipt,
  await zksyncClient.getMainContractAddress()
)

----------------------------------------

TITLE: Configuring Viem Client with ERC-7821 Support
DESCRIPTION: Configuration setup for creating a Viem client with ERC-7821 actions enabled. Demonstrates how to initialize the client with mainnet connection and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/supportsExecutionMode.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { erc7821Actions } from 'viem/experimental'

export const client = createClient({
  chain: mainnet,
  transport: http(),
}).extend(erc7821Actions())

----------------------------------------

TITLE: Providing the signature parameter in wrapTypedDataSignature
DESCRIPTION: Example showing how to provide the signature parameter to wrapTypedDataSignature. This is the EIP-712 typed data signature that will be wrapped into the ERC-7739 format.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const signature = wrapTypedDataSignature({
  domain,
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail', 
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  signature: '0x...', 
})

----------------------------------------

TITLE: Using GasPrice Parameter in Call Action
DESCRIPTION: Example of specifying the gasPrice parameter when making a call. This parameter sets the price in wei to pay per gas and only applies to Legacy Transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_15

LANGUAGE: typescript
CODE:
import { parseGwei } from 'viem'

const data = await publicClient.call({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  gasPrice: parseGwei('20'), // [!code focus]
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Retrieving Wallet Permissions using walletClient in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getPermissions method of the walletClient to retrieve the current permissions of a wallet. The permissions are stored in the 'permissions' variable.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/getPermissions.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { walletClient } from './client'

const permissions = await walletClient.getPermissions()

----------------------------------------

TITLE: Setting Minimum Allowance in getApprovalBasedPaymasterInput
DESCRIPTION: Demonstrates how to set the minAllowance parameter, which represents the minimum allowance of token that can be sent towards the paymaster.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getApprovalBasedPaymasterInput.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const data = getApprovalBasedPaymasterInput({
  innerInput: new Uint8Array(),
  minAllowance: 1n, // [!code focus]
  token: "0x65C899B5fb8Eb9ae4da51D67E1fc417c7CB7e964",
})

----------------------------------------

TITLE: Contract Gas Estimation with Arguments
DESCRIPTION: Example demonstrating how to estimate gas for a contract function that accepts arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/estimateContractGas.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'
import { wagmiAbi } from './abi'

const gas = await publicClient.estimateContractGas({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  account,
})
// 69420n

----------------------------------------

TITLE: Retrieving Transaction Count Example - TypeScript
DESCRIPTION: Basic example showing how to get the transaction count for an Ethereum address using the publicClient.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionCount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const transactionCount = await publicClient.getTransactionCount({
  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
})

----------------------------------------

TITLE: WebSocket Transport with Method Filtering
DESCRIPTION: Configuring specific RPC methods to include in the WebSocket transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://1.rpc.thirdweb.com/...', {
  methods: {
    include: ['eth_sendTransaction', 'eth_signTypedData_v4'],
  },
})

----------------------------------------

TITLE: Basic Message Recovery with UTF-8 Representation in viem
DESCRIPTION: This code snippet demonstrates how to recover an address from a message using the default UTF-8 representation. It specifies the message as a string and provides the corresponding signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const address = await recoverMessageAddress({ 
  message: 'hello world', 
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'
})

----------------------------------------

TITLE: Initializing Test Client with Basic Configuration
DESCRIPTION: Creates a test client instance with foundry chain, anvil mode, and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/test.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

const client = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Creating a Public Client with Fallback Transport in TypeScript
DESCRIPTION: This example demonstrates how to create a public client using the fallback transport with multiple HTTP providers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, fallback, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: fallback([
    http('https://1.rpc.thirdweb.com/...'),
    http('https://mainnet.infura.io/v3/...')
  ]),
})

----------------------------------------

TITLE: Configuring baseFeeMultiplier in Viem Chain Definition (TypeScript)
DESCRIPTION: This code snippet shows how to set the baseFeeMultiplier in a chain definition. It can be set as a static value or as an async function that calculates the multiplier based on the latest block and transaction request.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/fees.md#2025-04-14_snippet_1

LANGUAGE: ts
CODE:
import { defineChain } from 'viem'

const example = defineChain({ 
  /* ... */
  fees: { 
    baseFeeMultiplier: 1.2,
    // or
    async baseFeeMultiplier({ block, request }) {
      // some async work
      return // ...
    },
  },
})

----------------------------------------

TITLE: Using nonce Parameter in depositTransaction (TypeScript)
DESCRIPTION: Example showing how to specify a transaction nonce when making an L1 to L2 deposit with the depositTransaction function. The nonce parameter provides a unique identifier for the transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const hash = await client.depositTransaction({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  request: {
    gas: 21_000n,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
    value: parseEther('1')
  },
  nonce: 69, // [!code focus]
  targetChain: base,
})

----------------------------------------

TITLE: Estimating Gas for a Specific Block Number in TypeScript
DESCRIPTION: Demonstrates how to estimate gas for a transaction at a specific block number using viem's estimateGas function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const gas = await publicClient.estimateGas({
  blockNumber: 15121123n,
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1') 
})

----------------------------------------

TITLE: Configuring viem Clients for OP Stack in TypeScript
DESCRIPTION: Configuration setup for creating public clients for both L1 (Ethereum mainnet) and L2 (Optimism) chains using viem. The L1 client is extended with OP Stack-specific public actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextGame.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())
export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
})

----------------------------------------

TITLE: Account Hoisting for Deposit Transactions in TypeScript
DESCRIPTION: Demonstrates how to hoist an account on the wallet client to avoid passing it in every buildDepositTransaction call. Includes examples for both JSON-RPC and Local accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildDepositTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { publicClientL2, walletClientL1 } from './config'

const args = await publicClientL2.buildDepositTransaction({
  mint: parseEther('1')
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})
 
const hash = await walletClientL1.depositTransaction(args)

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, base } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum.request({
  method: 'eth_requestAccounts'
})

export const walletClientL1 = createWalletClient({
  account,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, base } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

export const walletClientL1 = createWalletClient({
  account: privateKeyToAccount('0x...'),
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Using getTimeToNextGame in viem with OP Stack
DESCRIPTION: Example showing how to use the getTimeToNextGame action to retrieve timing information about the next dispute game on an OP Stack chain with fault proofs enabled.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToNextGame.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'
import { account, publicClientL1, publicClientL2 } from './config'

const l2BlockNumber = publicClientL2.getBlockNumber()

const {
  interval,
  seconds,
  timestamp
} = await publicClientL1.getTimeToNextGame({
  l2BlockNumber,
  targetChain: publicClientL2.chain,
})

----------------------------------------

TITLE: Using toEventSignature Function
DESCRIPTION: Demonstrates two ways to generate event signatures: using a string event definition and using an AbiEvent object structure. Both approaches generate the same signature output for a Transfer event.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventSignature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toEventSignature } from 'viem'

// from event definition
const signature_1 = toEventSignature('event Transfer(address indexed from, address indexed to, uint256 amount)')
// @log: Output: Transfer(address,address,uint256)

// from an `AbiEvent` on your contract ABI
const signature_2 = toEventSignature({
  name: 'Transfer',
  type: 'event',
  inputs: [
    { name: 'address', type: 'address', indexed: true },
    { name: 'address', type: 'address', indexed: true },
    { name: 'uint256', type: 'uint256', indexed: false },
  ],
})
// @log: Output: Transfer(address,address,uint256)

----------------------------------------

TITLE: Basic Transaction Receipt Retrieval in TypeScript
DESCRIPTION: Example showing basic usage of waitForTransactionReceipt to retrieve a transaction receipt
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const transaction = await publicClient.waitForTransactionReceipt(
  { hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d' }
)

----------------------------------------

TITLE: Configuring viem Clients with JSON-RPC Account Hoisting
DESCRIPTION: Configuration setup showing how to hoist a JSON-RPC account at the wallet client level. This example retrieves an account from an EIP-1193 provider and attaches it to the wallet client during initialization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildProveWithdrawal.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, base } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum.request({
  method: 'eth_requestAccounts'
})

export const walletClientL1 = createWalletClient({
  account,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Retrieving L1 Batch Details in ZKSync with Viem
DESCRIPTION: Example showing how to retrieve details for a specific L1 batch from the ZKSync network using the getL1BatchDetails function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchDetails.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const batchDetails = await client.getL1BatchDetails({
  number: 1
});

----------------------------------------

TITLE: Importing parseAbiItem from viem
DESCRIPTION: Shows how to import the parseAbiItem function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiItem.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'

----------------------------------------

TITLE: Demonstrating Partial Decode with decodeEventLog
DESCRIPTION: Illustrates how to use the strict parameter to allow partial decoding of event logs when there's a mismatch in data size.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeEventLog.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
decodeEventLog({
  abi: parseAbi(['event Transfer(address indexed, address, uint256)']),
  data: '0x0000000000000000000000000000000000000000000000000000000000000001',
  topics: [
    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
    '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  ],
  strict: false
})
/**
 * {
 *   eventName: 'Transfer',
 *   args: ['0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266']
 * }
 */

----------------------------------------

TITLE: Calling Contracts on ZKsync
DESCRIPTION: Shows how to simulate and execute a contract call on ZKsync. This example mints an NFT by simulating the transaction first with the public client, then executing it with the wallet client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { simulateContract } from 'viem/contract'

const { request } = await publicClient.simulateContract(walletClient, {
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),
  functionName: 'mint',
  args: [69420],
});
const hash = await walletClient.writeContract(request)

----------------------------------------

TITLE: Estimating Gas with Max Priority Fee for EIP-1559 Transactions in TypeScript
DESCRIPTION: Shows how to set both maxFeePerGas and maxPriorityFeePerGas for EIP-1559 transactions when estimating gas using viem.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const gas = await publicClient.estimateGas({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1')
})

----------------------------------------

TITLE: Implementing Transaction Serializer with Signature in Viem
DESCRIPTION: This snippet shows a more detailed implementation of a transaction serializer in Viem. It highlights the `serializers.transaction` property within the chain definition, demonstrating how to handle both the transaction and its signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/serializers.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineChain, serializeTransaction } from 'viem'

const example = defineChain({
  /* ... */
  serializers: { // [!code focus:5]
    transaction(transaction, signature) {
      return serializeTransaction(transaction, signature)
    },
  },
})

----------------------------------------

TITLE: Dropping a Transaction from Mempool using Viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the dropTransaction method from a testClient to remove a transaction from the mempool. It requires a transaction hash as a parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/dropTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.dropTransaction({
  hash: '0xe58dceb6b20b03965bb678e27d141e151d7d4efc2334c2d6a49b9fac523f7364'
})

----------------------------------------

TITLE: Signing a Transaction with Access List in TypeScript
DESCRIPTION: Demonstrates how to include an access list when signing a transaction. The access list specifies addresses and storage keys that the transaction plans to access.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
const account = privateKeyToAccount('0x...')
// ---cut---
const signature = await account.signTransaction({
  accessList: [ // [!code focus:6]
    {
      address: '0x1',
      storageKeys: ['0x1'],
    },
  ],
  chainId: 1,
})

----------------------------------------

TITLE: Custom Permission Type Example
DESCRIPTION: Example demonstrating how to use custom permission types as an escape hatch.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7715/grantPermissions.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const result = await walletClient.grantPermissions({
  account,
  expiry: 1716846083638,
  permissions: [
    { 
      type: { custom: 'example' },
      data: {
        value: '0xdeadbeef',
      }
    } 
  ], 
})

----------------------------------------

TITLE: Parsing Deposit Transaction in Viem
DESCRIPTION: Shows how to use the parseTransaction function to parse a deposit transaction (0x7e-prefixed) in the OP Stack context.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/parseTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseTransaction } from 'viem'

const transaction = parseTransaction('0x7ef83ca018040f35752170c3339ddcd850f185c9cc46bdef4d6e1f2ab323f4d3d710431994977f82a600a1414e583f7f13623f1ac5d58b1c0b808080808080')

----------------------------------------

TITLE: Setting transaction nonce in viem contract calls
DESCRIPTION: Example showing how to set a custom nonce parameter when writing to a contract. The nonce is a unique number that identifies this transaction and can be used to replace pending transactions or ensure transaction ordering.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/writeContract.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
await walletClient.writeContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  nonce: 69 // [!code focus]
})

----------------------------------------

TITLE: Migrating from JsonRpcSigner to createWalletClient with account in viem
DESCRIPTION: Shows how to replace Ethers' JsonRpcSigner with viem's createWalletClient using an explicit account. viem uses the term 'Account' rather than 'Signer'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const provider = new providers.Web3Provider(window.ethereum)

const [address] = await provider.listAccounts() // [!code hl]
const signer = provider.getSigner(address) // [!code hl]

signer.sendTransaction({ ... })

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'

const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' }) // [!code hl]

const client = createWalletClient({
  account, // [!code hl]
  chain: mainnet,
  transport: custom(window.ethereum)
})

client.sendTransaction({ ... })

----------------------------------------

TITLE: Basic watchAsset Usage with ERC20 Token
DESCRIPTION: Example showing how to request tracking of a WETH token in a user's wallet using the watchAsset function. Returns a boolean indicating success.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/watchAsset.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
const success = await walletClient.watchAsset({
  type: 'ERC20',
  options: {
    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
    decimals: 18,
    symbol: 'WETH',
  },
})

----------------------------------------

TITLE: Accessing ABI Fragments in Ethers
DESCRIPTION: Shows how to use ethers.js Interface to access specific functions and events from an ABI. This initializes an Interface object and retrieves function and event definitions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_38

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'
import { abi } from './abi'

const interface = new utils.Interface(abi)
interface.getFunction('transferFrom')
interface.getEvent('Transfer')

----------------------------------------

TITLE: Replacing assertChain parameter with chain: null
DESCRIPTION: Shows how to migrate from the removed assertChain parameter to using chain: null when needing to bypass chain validation in sendTransaction, writeContract, or deployContract functions.
SOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_27

LANGUAGE: diff
CODE:
await walletClient.sendTransaction({
- assertChain: false,
+ chain: null,
  ...
})

----------------------------------------

TITLE: Creating an Access List with Account Parameter
DESCRIPTION: Demonstrates using the createAccessList function with an account address specified.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'

const result = await publicClient.createAccessList({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xdeadbeef',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
})

----------------------------------------

TITLE: Using Optional Context Parameter in getPaymasterStubData in TypeScript
DESCRIPTION: Example showing how to include paymaster-specific fields using the optional context parameter when calling getPaymasterStubData. This allows passing additional custom data needed by specific paymasters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterStubData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  callGasLimit: 69420n,
  context: { 
    policyId: 'abc123', 
  }, 
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'
})

----------------------------------------

TITLE: Estimating Max Priority Fee with Chain Override
DESCRIPTION: Example demonstrating how to estimate max priority fee per gas with a specific chain override using the Optimism network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateMaxPriorityFeePerGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'

const maxPriorityFeePerGas = 
  await publicClient.estimateMaxPriorityFeePerGas({
    chain: optimism
  })

----------------------------------------

TITLE: Defining Chain with Custom Fees in Viem (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the 'defineChain' function to create a custom chain with specified fee configurations. It sets a base fee multiplier and a default priority fee.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/fees.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
import { defineChain } from 'viem'

export const example = defineChain({
  /* ... */
  fees: { 
    baseFeeMultiplier: 1.2, 
    defaultPriorityFee: parseGwei('0.01'), 
  } 
})

----------------------------------------

TITLE: Configuration Setup for viem Wallet Client in TypeScript
DESCRIPTION: This configuration code shows how to set up a wallet client in viem. It demonstrates creating a wallet client with a custom transport and illustrates two ways to obtain an account: via JSON-RPC or by using a local private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'

export const walletClient = createWalletClient({
  transport: custom(window.ethereum)
})

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount('0x...')

----------------------------------------

TITLE: Example Usage of grantPermissions
DESCRIPTION: Example showing how to request native token transfer permissions with expiry and allowance policies.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7715/grantPermissions.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, walletClient } from './config'
 
const result = await walletClient.grantPermissions({
  account,
  expiry: 1716846083638,
  permissions: [
    {
      type: 'native-token-transfer',
      data: {
        ticker: 'ETH',
      },
      policies: [
        {
          type: 'token-allowance',
          data: {
            allowance: parseEther('1'),
          },
        },
      ],
    },
  ],
})

----------------------------------------

TITLE: Verifying SIWE Message in TypeScript
DESCRIPTION: This snippet demonstrates how to use the verifySiweMessage function to verify a signed EIP-4361 formatted message. It shows the basic usage with a public client, including the message and signature parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/actions/verifySiweMessage.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
const valid = await publicClient.verifySiweMessage({
  message,
  signature,
})
// @log: true

----------------------------------------

TITLE: Using Custom Transport with Window Ethereum Provider
DESCRIPTION: Shows how to create a wallet client using the custom transport with a window.ethereum provider.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'

const client = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: Smart Account Creation with Account Hoisting
DESCRIPTION: Example of creating a Smart Account and hoisting it to the bundler client for simplified operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createPublicClient, http, parseEther } from 'viem'
import { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts' 

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

const owner = privateKeyToAccount('0x...')

const account = await toCoinbaseSmartAccount({ 
  client, 
  owners: [owner]
}) 

const bundlerClient = createBundlerClient({
  account,
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

const hash = await bundlerClient.sendUserOperation({
  calls: [{
    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
    value: parseEther('0.001')
  }]
})

----------------------------------------

TITLE: Configuring Base Token Approval with Boolean Flag in ZKSync Deposit
DESCRIPTION: Example of a deposit transaction with base token approval enabled via a boolean flag. This ensures the bridge has sufficient allowance before proceeding with the deposit operation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const hash = await walletClient.deposit({
  client: zksyncClient,
  token: '0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55',
  amount: 20n,
  to: walletClient.account.address,
  approveBaseToken: true, // [!code focus],
  refundRecipient: walletClient.account.address,
  bridgeAddress: '0xFC073319977e314F251EAE6ae6bE76B0B3BAeeCF',
})

----------------------------------------

TITLE: Setting Up a Public Client in viem
DESCRIPTION: Creates a public client connected to the Ethereum mainnet using HTTP transport. This client is used to create event filters and interact with the blockchain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Simulating Contract Function Call with Arguments in TypeScript
DESCRIPTION: Demonstrates how to pass arguments to a contract function when simulating a call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',
  abi: wagmiAbi,
  functionName: 'balanceOf',
  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC'],
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
})

----------------------------------------

TITLE: Defining Contract ABI with Custom Error in TypeScript
DESCRIPTION: This snippet shows the definition of a contract ABI that includes a custom error named 'InvalidTokenError'. This ABI is used in conjunction with the decodeErrorResult function to properly decode error results.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeErrorResult.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
		inputs: [
			{
				name: "reason",
				type: "string"
			}
		],
		name: "InvalidTokenError",
		type: "error"
	},
  ...
] as const;

----------------------------------------

TITLE: Encoding Function Results in Viem
DESCRIPTION: Demonstrates how to use viem's encodeFunctionResult function to encode function return values, equivalent to ethers.js Interface.encodeFunctionResult method with a different parameter structure.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_49

LANGUAGE: typescript
CODE:
import { encodeFunctionResult, parseEther } from 'viem'
import { abi } from './abi'

const data = encodeFunctionResult({
  abi,
  functionName: 'balanceOf',
  value: ['0x8ba1f109551bD432803012645Ac136ddd64DBA72']
})

----------------------------------------

TITLE: Implementing Transaction Signing
DESCRIPTION: Shows implementation of the signTransaction function for signing Ethereum transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const account = toAccount({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  async signMessage({ message }) {
    return signMessage({ message, privateKey })
  },
  async signTransaction(transaction, { serializer }) {
    return signTransaction({ privateKey, transaction, serializer })
  },
  async signTypedData(typedData) {
    return signTypedData({ ...typedData, privateKey })
  },
})

----------------------------------------

TITLE: Configuring viem Client for ZKsync in TypeScript
DESCRIPTION: This snippet shows how to configure a viem public client for interacting with the ZKsync network. It sets up the client with the ZKsync chain, HTTP transport, and extends it with publicActionsL2 for L2-specific functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBlockDetails.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

----------------------------------------

TITLE: Hoisting JSON-RPC Account in Wallet Client
DESCRIPTION: Shows how to hoist the account into the Wallet Client to avoid passing it to every action.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const [account] = await window.ethereum!.request({ method: 'eth_requestAccounts' })

const client = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
})

const hash = await client.sendTransaction({
  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  value: parseEther('0.001')
})

----------------------------------------

TITLE: Simulating Contract Function Call with State Override in TypeScript
DESCRIPTION: Shows how to use state overrides when simulating a contract function call, which can be useful for testing purposes.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_18

LANGUAGE: typescript
CODE:
const data = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
  stateOverride: [
    {
      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
      balance: parseEther('1'),
      stateDiff: [
        {
          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0',
          value: '0x00000000000000000000000000000000000000000000000000000000000001a4',
        },
      ],
    }
  ],
})

----------------------------------------

TITLE: Using estimateFinalizeWithdrawalGas with OP Stack Withdrawals
DESCRIPTION: Example of estimating gas required to finalize a withdrawal from Optimism to Ethereum L1. This snippet demonstrates calling the estimateFinalizeWithdrawalGas method with basic required parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateFinalizeWithdrawalGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'
import { account, publicClientL1 } from './config'

const gas = await publicClientL1.estimateFinalizeWithdrawalGas({
  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  targetChain: optimism,
  withdrawal: { ... },
})

----------------------------------------

TITLE: Importing parseGwei from viem
DESCRIPTION: Shows how to import the parseGwei function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseGwei.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseGwei } from 'viem'

----------------------------------------

TITLE: Using getCapabilities with Account Hoisting in viem
DESCRIPTION: Demonstrates how to use getCapabilities without passing an account parameter each time by hoisting the account on the wallet client instance.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
 
const capabilities = await walletClient.getCapabilities()

----------------------------------------

TITLE: Using Bundler Client with Paymaster in TypeScript
DESCRIPTION: Demonstrates how to send a user operation with the Bundler Client using a paymaster. The paymaster is enabled by setting the 'paymaster' option to true.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const hash = await bundlerClient.sendUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: true, // [!code focus]
})

----------------------------------------

TITLE: Defining KZG Interface with c-kzg in TypeScript
DESCRIPTION: Demonstrates how to use defineKzg with the c-kzg library to create a KZG interface. It includes loading the trusted setup and defining the KZG interface.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/defineKzg.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
// @noErrors
import * as cKzg from 'c-kzg'
import { defineKzg } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

cKzg.loadTrustedSetup(mainnetTrustedSetupPath)

const kzg = defineKzg(cKzg)

----------------------------------------

TITLE: Configuring Batch JSON-RPC Transport
DESCRIPTION: Setting up HTTP transport with batch JSON-RPC enabled for multiple concurrent requests.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/http.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const transport = http('https://1.rpc.thirdweb.com/...', {
  batch: true
})

----------------------------------------

TITLE: Loading Chain State Example
DESCRIPTION: Example showing how to load a previously dumped chain state using the testClient.loadState method. The state is provided as a hex-encoded data blob.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/loadState.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.loadState({ state: '0x1f8b08000000000000ffad934d8e1c310885ef52eb5e003660e636184c3651b7949948915a7df7b8934ded6bbcc23fe2f3e3c1f3f088c7effbd7e7f1f13ce00ff60c35939e4e016352131bb3658bd0f046682dcd98dfafef8f7bace3036ec7f49ffe2fde190817da82b0e9933abcd7713be291ffaf77fcf9f5f8e53ff6f6f97addde4cced6dd8b3b89e6d4d468a2a3d93e537480fd15713933f12a73ebc2b106ae561c59bae1d152784733c067f1dc49479d987295d9a2f7c8cc296e00e534797026d94ed312a9bc93b5192726d155a882999a42300ea48ce680109a80936141a2be0d8f7182f6cb4a0d4a6d96ac49d16b2834e1a5836dd0c242c0b5751ac8d9d1cb4a4d65b97620594ac2dc77a159cbb9ab349f096fedee76828ecb4cdb20d044679e1124c6c1633a4acda639d026f81ea96f15eab0963a76ca3d2f81b58705fbea3e4a59761b11f8769ce0046d5799d5ac5216a37b8e51523d96f81c839476fb54d53422393bda94af505fafbf9d0612379c040000' })

----------------------------------------

TITLE: Estimating Gas for L1 to L2 Execution with viem
DESCRIPTION: This snippet demonstrates how to use the estimateGasL1ToL2 function to estimate gas for an L1 to L2 transaction. It includes setting up the client and making the estimation call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/estimateGasL1ToL2.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const gas = await client.estimateGasL1ToL2({
  account: '0x636A122e48079f750d44d13E5b39804227E1467e',
  to: '0xa61464658AfeAf65CccaaFD3a512b69A83B77618',
  value: 0n
});

----------------------------------------

TITLE: Changing output format in commitmentsToVersionedHashes
DESCRIPTION: Shows how to specify the output format (bytes) when converting commitments to versioned hashes.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const blobs = toBlobs({ data: '0x1234' })
const commitments = blobsToCommitments({ blobs, kzg })
const versionedHashes = commitmentsToVersionedHashes({ 
  commitments, 
  to: 'bytes' 
})
versionedHashes

----------------------------------------

TITLE: Public Client Configuration with OP Stack Extensions
DESCRIPTION: Shows how to set up the publicClientL1 with OP Stack extensions needed for cross-chain operations. Includes both JSON-RPC and local account examples.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

// JSON-RPC Account
export const [account] = await publicClientL1.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Configuring watchBlockNumber with WebSocket and Polling in TypeScript
DESCRIPTION: Demonstrates how to use watchBlockNumber with a WebSocket transport and enable polling. This configuration allows for flexibility in how block numbers are monitored.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createPublicClient, webSocket } from 'viem'
import { mainnet } from 'viem/chains'

const publicClient = createPublicClient({
  chain: mainnet,
  transport: webSocket()
})

const unwatch = publicClient.watchBlockNumber(
  { 
    onBlockNumber: blockNumber => console.log(blockNumber),
    poll: true,
  }
)

----------------------------------------

TITLE: ABI Decoding with Viem
DESCRIPTION: Using Viem to decode ABI-encoded data. This demonstrates decoding with object parameters and with parsed human-readable parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_31

LANGUAGE: typescript
CODE:
import { decodeAbiParameters, parseAbiParameters } from 'viem'

// Object
decodeAbiParameters(
  [{ type: 'uint', name: 'x' }, { type: 'string', name: 'y' }],
  '0x00000000000000000000000000000000000000000000000000000000000004d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000'
)

// Human Readable
decodeAbiParameters(
  parseAbiParameters('uint, string'),
  '0x00000000000000000000000000000000000000000000000000000000000004d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000'
)

----------------------------------------

TITLE: Importing hdKeyToAccount Function in TypeScript
DESCRIPTION: How to import the HDKey and hdKeyToAccount function from viem accounts module. The function is used to create a Hierarchical Deterministic (HD) Account from an HD Key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { HDKey, hdKeyToAccount } from 'viem/accounts'

----------------------------------------

TITLE: Setting Up KZG for viem in TypeScript
DESCRIPTION: Shows how to set up KZG (Kate-Zaverucha-Goldberg) for use with viem, including importing necessary modules and setting up the trusted setup path.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sidecarsToVersionedHashes.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import * as cKzg from 'c-kzg'
import { setupKzg } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

export const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)

----------------------------------------

TITLE: Importing fromHex Function in TypeScript
DESCRIPTION: Shows how to import the fromHex function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { fromHex } from 'viem'

----------------------------------------

TITLE: Migrating from CloudflareProvider to createPublicClient in viem
DESCRIPTION: Shows how to replace Ethers' CloudflareProvider with viem's createPublicClient using the Cloudflare RPC URL directly in the HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const provider = new providers.CloudflareProvider() // [!code hl]

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({ // [!code hl]
  chain: mainnet, // [!code hl]
  transport: http('https://cloudflare-eth.com/') // [!code hl]
}) // [!code hl]

----------------------------------------

TITLE: Configuring Retry Delay
DESCRIPTION: Demonstrates how to set the retry delay for failed requests in the transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const transport = custom(window.ethereum!, {
  retryDelay: 100,
})

----------------------------------------

TITLE: Using serializeCompactSignature to convert compact signatures to hex
DESCRIPTION: Demonstrates how to use the serializeCompactSignature function to convert a CompactSignature object (with r and yParityAndS values) into a hex-formatted string according to EIP-2098.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeCompactSignature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { serializeCompactSignature } from 'viem'

serializeCompactSignature({ // [!code focus:8]
  r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',
  yParityAndS:
    '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',
})
// "0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b907e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064"

----------------------------------------

TITLE: Retrieving Contract Bytecode with Viem Client
DESCRIPTION: Example of using the publicClient to retrieve bytecode from a contract address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getCode.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const bytecode = await publicClient.getCode({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
})

----------------------------------------

TITLE: Transaction Receipt Formatter Configuration
DESCRIPTION: Demonstrates configuration of transaction receipt formatting with custom fields using defineTransactionReceipt.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/formatters.md#2025-04-14_snippet_3

LANGUAGE: ts
CODE:
import { defineTransactionReceipt, defineChain, hexToBigInt } from 'viem'

type RpcTransactionReceiptOverrides = {
  l1Fee: `0x${string}`
}
type TransactionReceiptOverrides = {
  l1Fee: bigint
}

const example = defineChain({
  /* ... */
  formatters: {
    transactionReceipt: defineTransactionReceipt({
      exclude: ['effectiveGasPrice'],
      format(args: RpcTransactionReceiptOverrides): 
        TransactionReceiptOverrides {
        return {
          l1Fee: hexToBigInt(args.l1Fee)
        }
      },
    }),
  },
})

const receipt = await client.getTransactionReceipt({ hash: '0x...' })
//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }

----------------------------------------

TITLE: Using fromHex with Options in TypeScript
DESCRIPTION: Shows how to use the fromHex function with additional options, such as specifying the size of the output.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
fromHex(
  '0x48656c6c6f20776f726c642e0000000000000000000000000000000000000000', 
  {
    size: 32,
    to: 'string'
  }
)
// 'Hello world'

----------------------------------------

TITLE: Computing the L2 Transaction Hash from L1 Receipt
DESCRIPTION: Code that extracts the Optimism (L2) transaction hash from the logs in the Ethereum Mainnet (L1) transaction receipt. This step is crucial to be able to track the transaction on the L2 chain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
// Import Viem Clients.
import { 
  account, 
  publicClientL1, 
  publicClientL2,
  walletClientL1 
} from './config'

// Build parameters for the transaction on the L2.
const args = await publicClientL2.buildDepositTransaction({
  mint: parseEther('1'),
  to: account.address,
})

// Execute the deposit transaction on the L1. 
const hash = await walletClientL1.depositTransaction(args) 

// Wait for the L1 transaction to be processed. 
const receipt = await publicClientL1.waitForTransactionReceipt({ hash }) 

// Get the L2 transaction hash from the L1 transaction receipt. 
const [l2Hash] = getL2TransactionHashes(receipt)

----------------------------------------

TITLE: Configuring Bundler Client
DESCRIPTION: Shows how to set up and configure a bundler client using viem's createBundlerClient function with an HTTP transport pointing to a public bundler endpoint.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getChainId.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { createBundlerClient } from 'viem/account-abstraction'

export const bundlerClient = createBundlerClient({
  transport: http('https://public.pimlico.io/v2/1/rpc')
})

----------------------------------------

TITLE: Using getWithdrawalStatus to Check Finalization Readiness
DESCRIPTION: Demonstrates how to check if a withdrawal is ready to be finalized without using the waitToFinalize action, which is recommended to prevent attempting to finalize a withdrawal that isn't ready yet.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
const status = await publicClientL1.getWithdrawalStatus({
  receipt,
  targetChain: walletClientL2.chain
})

if (status === 'ready-to-finalize') {
  // ...
}

----------------------------------------

TITLE: Using hashMessage Function with Different Input Types
DESCRIPTION: Demonstrates various ways to use the hashMessage function including with plain text, hex data, and byte array inputs. The function returns a keccak256 hash in EIP-191 format.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { hashMessage } from 'viem'

hashMessage('hello world')
// 0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68

// Hash a hex data value.
hashMessage({ raw: '0x68656c6c6f20776f726c64' })
// 0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68

// Hash a bytes data value.
hashMessage({ 
  raw: Uint8Array.from([
    104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100,
  ])})
// 0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68

----------------------------------------

TITLE: Creating SIWE Message with Parameters in TypeScript
DESCRIPTION: This example shows how to create a SIWE message using the createSiweMessage function with various parameters such as address, chainId, domain, nonce, URI, and version. It's used as part of the verification process.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/actions/verifySiweMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const valid = await publicClient.verifySiweMessage({
  message: createSiweMessage({
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    chainId: 1,
    domain: 'example.com',
    nonce: generateSiweNonce(),
    uri: 'https://example.com/path',
    version: '1',
  }),
  signature:
    '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})

----------------------------------------

TITLE: Creating a Bundler Client in TypeScript
DESCRIPTION: This snippet shows how to create a bundler client using viem's createBundlerClient function. The client is configured with a chain (mainnet) and an HTTP transport pointing to a public Pimlico endpoint. This client is required for the waitForUserOperationReceipt function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { createBundlerClient } from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'

export const bundlerClient = createBundlerClient({
  chain: mainnet,
  transport: http('https://public.pimlico.io/v2/1/rpc')
})

----------------------------------------

TITLE: Estimating User Operation Gas with Account Hoisting in TypeScript
DESCRIPTION: Example of using estimateUserOperationGas with an account hoisted on the Bundler Client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { bundlerClient } from './config'

const gas = await bundlerClient.estimateUserOperationGas({
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }]
})

----------------------------------------

TITLE: Configuring Viem Clients for ZKSync Integration
DESCRIPTION: Configuration setup for viem clients to work with ZKSync, including the creation of wallet and public clients with appropriate extensions for L1 and L2 interactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, createPublicClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { zksync, mainnet } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/zksync'

export const zksyncClient = createPublicClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(publicActionsL2())

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Configuring Viem Client and Owner
DESCRIPTION: Configuration setup showing how to create a public client and define account owner using viem utilities
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { http, createPublicClient } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const owner = privateKeyToAccount('0x...')
 
export const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Parsing multiple signatures with parseAbiItem
DESCRIPTION: Shows how to use parseAbiItem with an array of signatures, including a function and a struct definition. This allows for parsing more complex ABI items that reference custom types.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiItem.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'

const abiItem = parseAbiItem([
  //  ^? const abiItem: { name: "foo"; type: "function"; stateMutability: "view"; inputs:...
  'function foo(Baz bar) view returns (string)',
  'struct Baz { string name; }',
])

----------------------------------------

TITLE: Wallet Client Configuration
DESCRIPTION: Setup for wallet client with zksync chain and EIP712 actions, including account configuration options.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/sendTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { zksync } from 'viem/chains'
import { eip712Actions } from 'viem/zksync'

export const walletClient = createWalletClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(eip712WalletActions())

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Retrieving Dispute Games for an L2 Chain with viem
DESCRIPTION: This example demonstrates how to retrieve dispute games for an L2 chain (Optimism) using the getGames action. The code retrieves dispute games for the Optimism L2 chain using a public client configured for the L1 chain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getGames.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'
import { account, publicClientL1 } from './config'

const games = await publicClientL1.getGames({
  targetChain: optimism,
})

----------------------------------------

TITLE: Using parseAbi to Convert Human-Readable ABI
DESCRIPTION: Demonstrates how to use parseAbi to convert human-readable ABI signatures into JSON format. The example includes a function signature for balanceOf and an event signature for Transfer.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbi.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseAbi } from 'viem'

const abi = parseAbi([
  'function balanceOf(address owner) view returns (uint256)',
  'event Transfer(address indexed from, address indexed to, uint256 amount)',
])

----------------------------------------

TITLE: Using validateSiweMessage Function
DESCRIPTION: Demonstrates how to use validateSiweMessage to validate a SIWE message by checking address, chain ID, domain, nonce, and URI fields.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/validateSiweMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { validateSiweMessage } from 'viem/siwe'

const valid = validateSiweMessage({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  message: {
    address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
    chainId: 1,
    domain: 'example.com',
    nonce: 'foobarbaz',
    uri: 'https://example.com/path',
    version: '1',
  },
})

----------------------------------------

TITLE: Creating a bundlerClient for Account Abstraction in TypeScript
DESCRIPTION: Shows how to create a bundlerClient instance for account abstraction operations using viem. The client is configured with a chain (mainnet) and a HTTP transport pointing to a public Pimlico endpoint.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperation.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { createBundlerClient } from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'

export const bundlerClient = createBundlerClient({
  chain: mainnet,
  transport: http('https://public.pimlico.io/v2/1/rpc')
})

----------------------------------------

TITLE: Querying Block Transaction Count by Number in TypeScript
DESCRIPTION: This snippet shows how to use the getBlockTransactionCount function with a specific block number parameter to retrieve the transaction count for a particular block.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockTransactionCount.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const block = await publicClient.getBlockTransactionCount({
  blockNumber: 42069n
})

----------------------------------------

TITLE: Configuring zkSync Client with viem in TypeScript
DESCRIPTION: This code sets up a public client for zkSync using the viem library. It creates a client with the zkSync chain configuration, HTTP transport, and extends it with L2-specific public actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchNumber.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

----------------------------------------

TITLE: Mining Interval Parameter Example
DESCRIPTION: Example demonstrating the interval parameter usage in setIntervalMining. Shows how to set a specific mining interval value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setIntervalMining.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
await testClient.setIntervalMining({
  interval: 5
})

----------------------------------------

TITLE: Finalizing ZKSync Withdrawals with Viem
DESCRIPTION: Example of finalizing a withdrawal from ZKSync L2 to L1 using viem library, requiring an account, ZKSync client, and transaction hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient, zksyncClient } from './config'

const hash = await walletClient.finalizeWithdrawal({
  account,
  client: zksyncClient,
  hash: '0x…',
})

----------------------------------------

TITLE: Setting a Custom Polling Interval for the Bundler Client
DESCRIPTION: Shows how to configure a custom polling interval for the Bundler Client. This determines how frequently (in milliseconds) the client will poll for updates in polling-enabled actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { createBundlerClient } from 'viem/account-abstraction'
import { http } from 'viem'

const client = createBundlerClient({
  pollingInterval: 10_000, // [!code focus]
  transport: http('https://public.pimlico.io/v2/1/rpc')
})

----------------------------------------

TITLE: stringToBytes Function Usage - TypeScript
DESCRIPTION: Shows how to use stringToBytes to convert strings to byte arrays
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { stringToBytes } from 'viem'

stringToBytes('Hello world')
// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])

stringToBytes('Hello world', { size: 32 })
// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

----------------------------------------

TITLE: Raw Data Representation Message Recovery in viem
DESCRIPTION: This code snippet shows how to recover an address from a message using its raw data representation rather than UTF-8. It specifies the message as an object with a raw hexadecimal value and provides the corresponding signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const address = await recoverMessageAddress({ 
  message: { raw: '0x68656c6c6f20776f726c64' }, 
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'
})

----------------------------------------

TITLE: Defining ABI with Parameters for decodeFunctionData in TypeScript
DESCRIPTION: Example of defining an ABI with a function that includes parameters, specifically for the balanceOf function used in the argument extraction example.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionData.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [{ name: "owner", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  ...
] as const;

----------------------------------------

TITLE: Using Test Client for Mining Blocks
DESCRIPTION: Example of using the test client to mine blocks on the test network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/test.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const mine = await client.mine({ blocks: 1 })

----------------------------------------

TITLE: Setting Base Fee Per Gas Parameter in Viem TypeScript
DESCRIPTION: This snippet demonstrates how to set the baseFeePerGas parameter when calling the setNextBlockBaseFeePerGas function. It uses the parseGwei function to convert 30 Gwei to Wei.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNextBlockBaseFeePerGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
await testClient.setNextBlockBaseFeePerGas({
  baseFeePerGas: parseGwei('30')
})

----------------------------------------

TITLE: Using getWithdrawalStatus to Check Proof Readiness
DESCRIPTION: Demonstrates how to check if a withdrawal is ready to be proved without using the waitToProve action, which is recommended to prevent attempting to prove a withdrawal that isn't ready yet.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const status = await publicClientL1.getWithdrawalStatus({
  receipt,
  targetChain: walletClientL2.chain
})

if (status === 'ready-to-prove') {
  // ...
}

----------------------------------------

TITLE: User Operation Return Type Structure in TypeScript
DESCRIPTION: Shows the return type structure of the getUserOperation function, which includes blockHash, blockNumber, entryPoint address, transactionHash, and the full userOperation object.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperation.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
{
  blockHash: Hash,
  blockNumber: bigint,
  entryPoint: Address,
  transactionHash: Hash,
  userOperation: UserOperation
}

----------------------------------------

TITLE: Updated Log Generic Type Definition in TypeScript
DESCRIPTION: The updated type definition for the Log generic type shows the addition of TPending as the third generic parameter. This improves type safety for logs from pending blocks.
SOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_19

LANGUAGE: typescript
CODE:
type Log<
  TQuantity = bigint,
  TIndex = number,
+ TPending extends boolean = boolean,
  TAbiEvent extends AbiEvent | undefined = undefined,
  TStrict extends boolean | undefined = undefined,
  TAbi extends Abi | readonly unknown[] = [TAbiEvent],
  TEventName extends string | undefined = TAbiEvent extends AbiEvent
    ? TAbiEvent['name']
    : undefined,
>

----------------------------------------

TITLE: Defining ABI with Parameters for encodeFunctionData in TypeScript
DESCRIPTION: Shows how to define an ABI for a function that takes parameters, in this case the 'balanceOf' function which requires an address input.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [{ name: "owner", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  ...
] as const;

----------------------------------------

TITLE: Interacting with Delegated Account in TypeScript
DESCRIPTION: This snippet demonstrates how to interact with a delegated account by invoking its functions after the initial EIP-7702 transaction. It shows calling the 'ping' function without needing an authorization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/sending-transactions.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { encodeFunctionData } from 'viem'
import { walletClient } from './config'

const eoa = privateKeyToAccount('0x...')

const hash = await walletClient.sendTransaction({
  data: encodeFunctionData({
    abi,
    functionName: 'ping',
  }),
  to: eoa.address,
})

----------------------------------------

TITLE: Serializing Deposit Transactions for OP Stack
DESCRIPTION: Shows how to serialize a deposit transaction with from address, gas, mint amount, sourceHash, value, and transaction type specification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/serializeTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { serializeTransaction } from 'viem/op-stack'

const serialized = serializeTransaction({
  from: '0x977f82a600a1414e583f7f13623f1ac5d58b1c0b',
  gas: 21000n,
  mint: parseEther('1'),
  sourceHash: '0x18040f35752170c3339ddcd850f185c9cc46bdef4d6e1f2ab323f4d3d7104319',
  value: parseEther('1'),
  type: 'deposit'
})

----------------------------------------

TITLE: Configuring Public Client with Custom Batch Size and Wait Time
DESCRIPTION: Creates a Public Client with custom batch size and wait time for multicall aggregation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const publicClient = createPublicClient({
  batch: {
    multicall: {
      batchSize: 512,
      wait: 16,
    },
  },
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Extracting Chain Data Using Specific Chains in TypeScript
DESCRIPTION: Shows how to extract chain information using a specific set of imported chains. The function returns a type-safe chain object with properties like id and name.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/extractChain.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { extractChain } from 'viem'
import { mainnet, base, optimism, zora } from 'viem/chains'

const optimism = extractChain({
  chains: [mainnet, base, optimism, zora],
  id: 10,
})

optimism.id
//       ^? (property) id: 10
optimism.name
//       ^? (property) name: "OP Mainnet"

----------------------------------------

TITLE: Custom Transport Provider Implementation
DESCRIPTION: Shows the basic structure of implementing a custom transport provider with request handling.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const transport = custom({
  async request({ method, params }) {
    const response = await customRpc.request(method, params)
    return response
  }
})

----------------------------------------

TITLE: Building Deposit Transaction Parameters in TypeScript
DESCRIPTION: Demonstrates how to use the buildDepositTransaction function to prepare parameters for a deposit transaction from L1 to L2. It includes setting up the necessary clients and account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/buildDepositTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClientL2, walletClientL1 } from './config'

const args = await publicClientL2.buildDepositTransaction({
  account,
  mint: parseEther('1'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})
 
const hash = await walletClientL1.depositTransaction(args)

----------------------------------------

TITLE: Creating an Access List with Max Priority Fee Per Gas
DESCRIPTION: Demonstrates creating an access list with specified max fee and max priority fee per gas for EIP-1559 Transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { parseEther, parseGwei } from 'viem'

const result = await publicClient.createAccessList({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xdeadbeef',
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
})

----------------------------------------

TITLE: Using slice with hex strings and byte arrays
DESCRIPTION: Demonstrates how to use the slice function with both hex strings and Uint8Array objects to extract specific sections based on byte offsets.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/slice.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { slice } from 'viem'

slice('0x0123456789', 1, 4)
// 0x234567

slice(new Uint8Array([1, 122, 51, 123]), 1, 3)
// Uint8Array [122, 51]

----------------------------------------

TITLE: Configuring Public Client for L2 Operations in TypeScript
DESCRIPTION: This snippet demonstrates how to configure a public client for L2 operations. It creates a public client with the Base chain, extends it with L2 actions, and defines an account for transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalFee.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack'

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Using blobsToProofs Function in TypeScript
DESCRIPTION: Demonstrates how to use the blobsToProofs function to compute proofs for blobs and their commitments. It includes the necessary setup and related function calls.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToProofs.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { blobsToCommitments, blobsToProofs, toBlobs } from 'viem'
import { kzg } from './kzg'

const blobs = toBlobs({ data: '0x...' })
const commitments = blobsToCommitments({ blobs, kzg })
const proofs = blobsToProofs({ blobs, commitments, kzg })

----------------------------------------

TITLE: Reverting Blockchain State with Viem Test Client in TypeScript
DESCRIPTION: This snippet demonstrates how to use the revert function from a Viem test client to roll back the blockchain state to a previous snapshot. It requires a pre-configured test client and a valid snapshot ID.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/revert.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.revert({
  id: '0x...'
})

----------------------------------------

TITLE: Basic Usage of getContractAddress with CREATE opcode
DESCRIPTION: Demonstrates how to use getContractAddress to determine a contract address using the CREATE opcode, providing the deployer address and nonce.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getContractAddress } from 'viem'

getContractAddress({
  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',
  nonce: 69420n
})
// '0xDf2e056f7062790dF95A472f691670717Ae7b1B6'

----------------------------------------

TITLE: Creating an Owner Account from a Private Key
DESCRIPTION: Example of how to create an owner account from a private key using viem's privateKeyToAccount function. This owner account is used in the Thirdweb Smart Account implementation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toThirdwebSmartAccount.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
 
export const owner = privateKeyToAccount('0x...')

----------------------------------------

TITLE: Setting up Typed Data Domain and Types in TypeScript
DESCRIPTION: This code snippet defines the domain and types for structured typed data following EIP-712 format. It includes domain parameters like name and chainId, and type definitions for Person and Mail objects used in structured messages.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
// All properties on a domain are optional
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const

// The named list of all type definitions
export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Test Client Configuration
DESCRIPTION: Shows how to create and configure a test client instance using Viem with Foundry chain and Anvil mode.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/sendUnsignedTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Getting Testnet Paymaster Address with viem
DESCRIPTION: Example demonstrating how to fetch a Paymaster address from a Testnet. Returns Address type or null if no Paymaster is available.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getTestnetPaymasterAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'
const address = await client.getTestnetPaymasterAddress();

----------------------------------------

TITLE: Creating a Nonce Manager with JSON-RPC source in viem
DESCRIPTION: This snippet demonstrates how to create a Nonce Manager instance using the createNonceManager function with a JSON-RPC source.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/createNonceManager.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createNonceManager, jsonRpc } from 'viem/nonce'

const nonceManager = createNonceManager({
  source: jsonRpc()
})

----------------------------------------

TITLE: Block Formatter Configuration
DESCRIPTION: Demonstrates how to customize block formatting with custom fields and exclusions using defineBlock.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/formatters.md#2025-04-14_snippet_1

LANGUAGE: ts
CODE:
import { defineBlock, defineChain, hexToBigInt } from 'viem'

type RpcBlockOverrides = {
  secondaryFee: `0x${string}`
}
type BlockOverrides = {
  secondaryFee: bigint
}

const example = defineChain({
  /* ... */
  formatters: {
    block: defineBlock({
      exclude: ['difficulty'],
      format(args: RpcBlockOverrides): BlockOverrides {
        return {
          secondaryFee: hexToBigInt(args.secondaryFee)
        }
      },
    }),
  },
})

const block = await client.getBlock()
//    ^? { ..., difficulty: never, secondaryFee: bigint, ... }

----------------------------------------

TITLE: Wallet Client Configuration Setup
DESCRIPTION: Shows the setup of a wallet client with mainnet configuration and HTTP transport using a private key account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/signAuthorization.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const relay = privateKeyToAccount('0x...')

export const walletClient = createWalletClient({
  account: relay,
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: WebSocket Transport with Keep-Alive Configuration
DESCRIPTION: Configuring WebSocket transport with keep-alive ping messages.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://1.rpc.thirdweb.com/...', {
  keepAlive: { interval: 1_000 },
})

----------------------------------------

TITLE: Basic Usage of fromBlobs Function in TypeScript
DESCRIPTION: Example of how to transform blob data back to its original form using the fromBlobs function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBlobs.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { fromBlobs } from 'viem'

const data = fromBlobs({ blobs: ['0x...'] })

----------------------------------------

TITLE: Using CREATE2 opcode with getContractAddress
DESCRIPTION: Demonstrates how to use getContractAddress with the CREATE2 opcode for deterministic contract addresses.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
getContractAddress({
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',
  opcode: 'CREATE2',
  salt: toBytes('wagmi'),
})

----------------------------------------

TITLE: Using toRlp function for RLP encoding in TypeScript
DESCRIPTION: Demonstrates various usage examples of the toRlp function, including encoding hex values, arrays, and Uint8Arrays. Also shows how to specify the output type.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toRlp.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toRlp } from 'viem'

toRlp('0x123456789')
// "0x850123456789"

toRlp(['0x7f', '0x7f', '0x8081e8'])
// "0xc67f7f838081e8"

toRlp(new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9]))
// "0x89010203040506070809"

toRlp('0x123456789', 'bytes')
// Uint8Array [133, 1, 35, 69, 103, 137]

----------------------------------------

TITLE: Implementing Custom Paymaster Stub Data Function for Gas Estimation
DESCRIPTION: Shows how to implement a custom getPaymasterStubData function for gas estimation of User Operations. This function provides paymaster properties specifically for gas estimation purposes.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
const bundlerClient = createBundlerClient({
  chain: mainnet,
  paymaster: { 
    async getPaymasterStubData(userOperation) { // [!code focus]
      // Retrieve paymaster properties for the User Operation. // [!code focus]
      return { // [!code focus]
        paymaster: '0x...', // [!code focus]
        paymasterData: '0x...', // [!code focus]
        paymasterVerificationGasLimit: 69420n, // [!code focus]
        paymasterPostOpGasLimit: 69420n, // [!code focus]
      } // [!code focus]
    } // [!code focus]
    async getPaymasterData(userOperation) { /* ... */ }
  } 
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

----------------------------------------

TITLE: Configuring Viem Clients for OP Stack Interactions
DESCRIPTION: Configuration setup for creating public clients that interact with both L1 (Ethereum mainnet) and L2 (Optimism) chains. The L1 client is extended with publicActionsL1 to enable OP Stack specific actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToNextL2Output.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: custom(window.ethereum)
})

----------------------------------------

TITLE: Simulating Calls with Transfer Tracing in TypeScript using viem
DESCRIPTION: This snippet illustrates how to enable tracing of transfers when simulating calls with the viem client. It sets the traceTransfers option to true.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/simulateCalls.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const { results } = await client.simulateCalls({
  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',
  calls: [ 
    { 
      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
      value: parseEther('2'),
    },  
  ], 
  traceTransfers: true,
})

----------------------------------------

TITLE: Parsing ABI Parameters in Viem
DESCRIPTION: Demonstrates how to use viem's parseAbiParameter function to parse individual ABI parameter types, equivalent to ethers.js ParamType.from method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_37

LANGUAGE: typescript
CODE:
import { parseAbiParameter } from 'viem'

const param = parseAbiParameter('address owner')

----------------------------------------

TITLE: Transaction Hash Parameter Example
DESCRIPTION: Shows the usage of the hash parameter when calling getTransactionReceipt. The hash parameter must be a hexadecimal string representing a transaction hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionReceipt.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const transaction = await publicClient.getTransactionReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d'
})

----------------------------------------

TITLE: Setting Custom Polling Interval for watchBlockNumber in TypeScript
DESCRIPTION: Shows how to set a custom polling interval when using watchBlockNumber. This allows for control over how frequently the function checks for new block numbers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const unwatch = publicClient.watchBlockNumber(
  { 
    onBlockNumber: blockNumber => console.log(blockNumber),
    pollingInterval: 12_000,
  }
)

----------------------------------------

TITLE: Initializing Viem Test Client Configuration
DESCRIPTION: Sets up a test client instance using Viem's createTestClient function. Configures the client with Foundry chain, Anvil mode, and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setRpcUrl.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Deploying Contract with Factory Dependencies in TypeScript
DESCRIPTION: Demonstrates deploying a contract with factory dependencies, which are additional bytecode elements needed for contract deployment, particularly useful in zkSync.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { deployContract } from 'viem'
import { wagmiAbi } from './abi'
import { account, walletClient } from './config'

const hash = await walletClient.deployContract({
  abi,
  account,
  args: [69420],
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
  factoryDeps: [
    '0x702040405260405161083e38038061083e833981016040819123456...', 
    '0x102030405260405161083e38038061083e833981016040819112233...'
  ]
})

----------------------------------------

TITLE: Importing parseSignature Function from viem in TypeScript
DESCRIPTION: Shows how to import the parseSignature function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseSignature.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseSignature } from 'viem'

----------------------------------------

TITLE: Getting Transaction Count with Block Tag - TypeScript
DESCRIPTION: Example showing how to get the transaction count at a specific block tag like 'safe' or 'latest'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionCount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const transactionCount = await publicClient.getTransactionCount({
  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  blockTag: 'safe'
})

----------------------------------------

TITLE: Creating a Wallet Client in TypeScript using viem
DESCRIPTION: This code creates a wallet client instance using viem's createWalletClient function, connecting to an Ethereum provider through window.ethereum. It also defines an account address that will be used for signing operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/verifyTypedData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'

export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'

export const walletClient = createWalletClient({
  transport: custom(window.ethereum),
})

----------------------------------------

TITLE: Transaction with Access List
DESCRIPTION: Example of sending an unsigned transaction with an access list parameter for optimized gas usage.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/sendUnsignedTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const data = await testClient.sendUnsignedTransaction({
  accessList: [
    {
      address: '0x1',
      storageKeys: ['0x1'],
    },
  ],
  from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Importing encodeFunctionData from viem in TypeScript
DESCRIPTION: Shows how to import the encodeFunctionData function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { encodeFunctionData } from 'viem'

----------------------------------------

TITLE: Implementing Custom RPC Transport
DESCRIPTION: Demonstrates how to implement a custom transport with a custom RPC implementation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'
import { customRpc } from './rpc'

const client = createWalletClient({ 
  chain: mainnet,
  transport: custom({
    async request({ method, params }) {
      const response = await customRpc.request(method, params)
      return response
    }
  })
})

----------------------------------------

TITLE: Basic SIWE Message Creation
DESCRIPTION: Demonstrates creating a basic Sign-In with Ethereum message with required parameters including address, chainId, domain, nonce, URI, and version.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/createSiweMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const message = createSiweMessage({
  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  chainId: 1,
  domain: 'example.com',
  nonce: 'foobarbaz',
  uri: 'https://example.com/path',
  version: '1',
})

----------------------------------------

TITLE: Estimating Gas with State Override in TypeScript
DESCRIPTION: Demonstrates using state override when estimating gas for a transaction, allowing for ephemeral state changes before execution.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const data = await publicClient.estimateGas({
  account,
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  stateOverride: [
    {
      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
      balance: parseEther('1'),
      stateDiff: [
        {
          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0',
          value: '0x00000000000000000000000000000000000000000000000000000000000001a4',
        },
      ],
    }
  ],
})

----------------------------------------

TITLE: Initializing a Public Client with Mainnet Chain and HTTP Transport
DESCRIPTION: Creates a Public Client instance configured for the Ethereum mainnet using HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const publicClient = createPublicClient({ 
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Setting up a Bundler Client for Account Abstraction in Viem
DESCRIPTION: This code demonstrates how to create a bundler client for account abstraction using Viem. It configures the client with the mainnet chain and an HTTP transport pointing to a Pimlico public RPC endpoint.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperationReceipt.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { createBundlerClient } from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'

export const bundlerClient = createBundlerClient({
  chain: mainnet,
  transport: http('https://public.pimlico.io/v2/1/rpc')
})

----------------------------------------

TITLE: Configuring Base Token Approval with Transaction Overrides in ZKSync Deposit
DESCRIPTION: Example of a deposit transaction with custom gas parameters for the token approval transaction. This allows configuring specific transaction parameters when approving the base token.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const hash = await walletClient.deposit({
  client: zksyncClient,
  token: '0x70a0F165d6f8054d0d0CF8dFd4DD2005f0AF6B55',
  amount: 20n,
  to: walletClient.account.address,
  approveBaseToken: { 
    maxFeePerGas: 200_000_000_000n // [!code focus],  
  },
  refundRecipient: walletClient.account.address,
  bridgeAddress: '0xFC073319977e314F251EAE6ae6bE76B0B3BAeeCF',
})

----------------------------------------

TITLE: Using getTimeToProve for Withdrawal Status Information
DESCRIPTION: Shows how to use the getTimeToProve action to retrieve the estimated time remaining before a withdrawal can be proved, which can be displayed to users or stored in a database.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const { seconds, timestamp } = await publicClientL1.getTimeToProve({
  receipt,
  targetChain: walletClientL2.chain
})

----------------------------------------

TITLE: Type Definitions Setup
DESCRIPTION: Definition of domain parameters and typed data structure including Person and Mail types.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const domain = {
  name: 'Ether Mail',
  version: '1',
  chainId: 1,
  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
} as const

export const types = {
  Person: [
    { name: 'name', type: 'string' },
    { name: 'wallet', type: 'address' },
  ],
  Mail: [
    { name: 'from', type: 'Person' },
    { name: 'to', type: 'Person' },
    { name: 'contents', type: 'string' },
  ],
} as const

----------------------------------------

TITLE: Configuring a Public Client for viem
DESCRIPTION: Shows how to set up a public client using viem's createPublicClient function with the mainnet chain and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Checking L1 Token Allowance Example
DESCRIPTION: Example showing how to check token allowance using publicClient with necessary account and token configurations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1Allowance.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const allowance = await publicClient.getL1Allowance({
  account
  token: '0x5C221E77624690fff6dd741493D735a17716c26B',
  bridgeAddress: '0x84DbCC0B82124bee38e3Ce9a92CdE2f943bab60D',
})

----------------------------------------

TITLE: Using targetChain in proveWithdrawal Function in TypeScript
DESCRIPTION: Example of using the targetChain parameter in the proveWithdrawal function. The targetChain specifies the L2 chain to execute the transaction on.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { mainnet } from 'viem/chains'

const hash = await client.proveWithdrawal({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  l2OutputIndex: 4529n,
  outputRootProof: { /* ... */ },
  withdrawalProof: [ /* ... */ ],
  withdrawal: { /* ... */ },
  targetChain: optimism, // [!code focus]
})

----------------------------------------

TITLE: Using hash parameter with recoverPublicKey in TypeScript
DESCRIPTION: This code demonstrates the usage of the hash parameter in the recoverPublicKey function. The hash parameter should be the cryptographic hash of the message that was signed and is required for recovering the public key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverPublicKey.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const publicKey = await recoverPublicKey({ 
  hash: '0xd9eba16ed0ecae432b71fe008c98cc872bb4cc214d3220a36f365326cf807d68', // [!code focus]
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'
})

----------------------------------------

TITLE: Using isAddress with Checksum Validation in TypeScript
DESCRIPTION: Demonstrates how to use the isAddress function with checksum validation and how to opt-out of this behavior.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { isAddress } from 'viem'

isAddress('0xa5cc3c03994db5b0d9a5eEdD10Cabab0813678ac', {
  strict: false
})

isAddress(
  '0xa5cc3c03994db5b0d9a5eEdD10Cabab0813678ac'.toLowerCase()
)

----------------------------------------

TITLE: Configuring walletClient with Hoisted Account for getCapabilities
DESCRIPTION: Shows how to configure the wallet client with an account hoisted at the client level. The configuration retrieves the account from an EIP-1193 provider and sets it on the wallet client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import 'viem/window'
import { createWalletClient, custom } from 'viem'
import { eip5792Actions } from 'viem/experimental'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum!.request({ 
  method: 'eth_requestAccounts' 
})

export const walletClient = createWalletClient({
  account,
  transport: custom(window.ethereum!)
}).extend(eip5792Actions())

----------------------------------------

TITLE: Configuring Public Client for L1 Balance Retrieval in TypeScript
DESCRIPTION: This snippet demonstrates how to configure a public client with L1 actions for use with the getL1Balance function. It includes setup for both JSON-RPC and local accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1Balance.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { publicActionsL1 } from 'viem/zksync'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(publicActionsL1())

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Creating an Event Filter with Strict Mode
DESCRIPTION: Creates an event filter with strict mode enabled, which ensures that only logs that conform to the indexed and non-indexed arguments on the event are returned. This guarantees that args will always be defined but may filter out non-conforming logs.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createEventFilter.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'

const filter = await publicClient.createEventFilter({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),
  strict: true
})
const logs = await publicClient.getFilterLogs({ filter })

logs[0].args

----------------------------------------

TITLE: Using isErc6492Signature to check signature format
DESCRIPTION: Demonstrates how to use the isErc6492Signature function to check if a hexadecimal signature follows the ERC-6492 format. The function returns a boolean indicating whether the signature matches the format.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isErc6492Signature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { isErc6492Signature } from 'viem/utils'

const result = isErc6492Signature('0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492')

----------------------------------------

TITLE: Configuring Custom OP Stack Chain
DESCRIPTION: Demonstrates how to create a custom OP Stack chain configuration using Viem's defineChain utility and chainConfig from the op-stack module. This allows for extending the base OP Stack configuration with custom chain parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/chains.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { defineChain } from 'viem'
import { chainConfig } from 'viem/op-stack'

export const opStackExample = defineChain({
  ...chainConfig,
  name: 'OP Stack Example',
  // ...
})

----------------------------------------

TITLE: Using fromRlp with various inputs and output formats
DESCRIPTION: Demonstrates different ways to use the fromRlp function with various inputs (hex strings and byte arrays) and output formats ('hex' and 'bytes').
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromRlp.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { fromRlp } from 'viem'

fromRlp('0x850123456789', 'hex')
// "0x123456789"

fromRlp('0xc67f7f838081e8', 'hex')
// ['0x7f', '0x7f', '0x8081e8']

fromRlp('0x89010203040506070809', 'bytes')
//  Uint8Array [1, 2, 3, 4, 5, 6, 7, 8, 9]

fromRlp(new Uint8Array ([133, 1, 35, 69, 103, 137]), 'hex')
// "0x123456789"

----------------------------------------

TITLE: Importing serializeSignature from viem in TypeScript
DESCRIPTION: Shows how to import the serializeSignature function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeSignature.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { serializeSignature } from 'viem'

----------------------------------------

TITLE: Using getL2TokenAddress to Find L2 Token Equivalent in ZKsync Era
DESCRIPTION: Example showing how to call the getL2TokenAddress function to retrieve the L2 token address equivalent for a given L1 token address on ZKsync Era.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL2TokenAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const address = await client.getL2TokenAddress({
    token: '0x5C221E77624690fff6dd741493D735a17716c26B'
})

----------------------------------------

TITLE: Specifying EntryPoint Address for getPaymasterData
DESCRIPTION: Example showing how to specify the EntryPoint contract address when retrieving paymaster data. The EntryPoint is the central contract that processes user operations in ERC-4337.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  callGasLimit: 69420n,
  chainId: 1, 
  entryPointAddress: '0x0000000071727De22E5E9d8BAf0edAc6f37da032', 
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'
})

----------------------------------------

TITLE: Getting Function Signature Hash in Ethers
DESCRIPTION: Shows how to use ethers.js Interface.getSighash to get the function selector (4-byte signature) for a function. This is used for identifying functions in transaction data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_58

LANGUAGE: typescript
CODE:
import { Interface, FunctionFragment } from '@ethersproject/abi';

const hash = Interface.getSighash(FunctionFragment.from('function ownerOf(uint256)'));

----------------------------------------

TITLE: Getting L1 Token Address Example
DESCRIPTION: Example showing how to retrieve the L1 token address equivalent for a given L2 token address using the getL1TokenAddress method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const address = await client.getL1TokenAddress({
  token: '0x3e7676937A7E96CFB7616f255b9AD9FF47363D4b'
})

----------------------------------------

TITLE: Setting Contract Address Parameter
DESCRIPTION: Shows how to specify the contract address parameter for the authorization hash calculation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/hashAuthorization.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { hashAuthorization } from 'viem/utils'

hashAuthorization({
  contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',
  chainId: 1,
  nonce: 0,
})

----------------------------------------

TITLE: Importing toBlobs Function
DESCRIPTION: Shows how to import the toBlobs function from the Viem library
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobs.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toBlobs } from 'viem'

----------------------------------------

TITLE: Setting up Viem Public Client
DESCRIPTION: Configuration of the Viem public client for interacting with the Ethereum mainnet.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsName.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Importing Fallback Transport in TypeScript
DESCRIPTION: This snippet shows how to import the fallback function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { fallback } from 'viem'

----------------------------------------

TITLE: Using hashMessage to Hash Different Message Types
DESCRIPTION: Demonstrates how to use the hashMessage function to hash different types of messages (UTF-8 string, hex data, and bytes array) using the ERC-7739 PersonalSign format. Each example includes required verifier domain information with name, version, contract address, and chain ID.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/hashMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { hashMessage } from 'viem/experimental/erc7739'

// Hash a UTF-8 value.
hashMessage({ 
  message: 'hello world', 
  verifierDomain: { 
    name: 'Smart Account', 
    version: '1', 
    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678', 
    chainId: 1, 
  }, 
}) 

// Hash a hex data value.
hashMessage({ 
  message: { raw: '0x68656c6c6f20776f726c64' }, 
  verifierDomain: { 
    name: 'Smart Account', 
    version: '1', 
    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678', 
    chainId: 1, 
  }, 
}) 

// Hash a bytes data value.
hashMessage({ 
  message: {
    raw: Uint8Array.from([
      104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100,
    ])
  }, 
  verifierDomain: { 
    name: 'Smart Account', 
    version: '1', 
    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678', 
    chainId: 1, 
  }, 
}) 

----------------------------------------

TITLE: Event Log Parsing with Multiple Event Names
DESCRIPTION: Shows how to filter logs by multiple event names using an array of event names.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const logs = parseEventLogs({ 
  abi: erc20Abi, 
  eventName: ['Transfer', 'Approval'],
  logs: receipt.logs,
})

----------------------------------------

TITLE: Importing createClient in TypeScript
DESCRIPTION: Basic import of the createClient function from Viem library
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/custom.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createClient } from 'viem'

----------------------------------------

TITLE: Execute Function with Custom Gas Price
DESCRIPTION: Example demonstrating how to set a custom gas price when using the execute function, providing control over transaction execution costs in the Ethereum network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const hash = await client.execute({
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  calls: [ 
    { 
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
      value: parseEther('1') 
    }, 
    { 
      data: '0xdeadbeef', 
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
    }, 
  ], 
  gasPrice: parseGwei('20'),
})

----------------------------------------

TITLE: ENS Name Query with Block Number
DESCRIPTION: Example of querying an ENS name with a specific block number parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsName.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const ensName = await publicClient.getEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  blockNumber: 15121123n,
})

----------------------------------------

TITLE: ABI Definition with Constructor Arguments
DESCRIPTION: Example ABI definition showing a constructor that takes an address parameter named 'owner'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeDeployData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [{ name: 'owner', type: 'address' }],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  ...
] as const;

----------------------------------------

TITLE: Encoding a Single Parameter with encodeAbiParameters
DESCRIPTION: Demonstrates encoding a single uint32 parameter with encodeAbiParameters, showing the simplified usage with a single value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
encodeAbiParameters(
  [{ name: 'x', type: 'uint32' }],
  [69420]
)

----------------------------------------

TITLE: Building Parameters for Proving Withdrawals with viem
DESCRIPTION: Example showing how to use the buildProveWithdrawal action to prepare transaction parameters for proving a withdrawal. The parameters include account information, L2 output data, and withdrawal details needed for L1 transaction submission.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { account, publicClientL2, walletClientL1 } from './config'

const receipt = await getTransactionReceipt(publicClientL2, {
  hash: '0xbbdd0957a82a057a76b5f093de251635ac4ddc6e2d0c4aa7fbf82d73e4e11039',
})

const [withdrawal] = getWithdrawals(receipt)
const output = await walletClientL1.getL2Output({
  l2BlockNumber: receipt.blockNumber,
  targetChain: publicClientL2.chain,
})

const args = await publicClientL2.buildProveWithdrawal({
  account,
  output,
  withdrawal,
})
 
const hash = await walletClientL1.proveWithdrawal(args)

----------------------------------------

TITLE: Using toHex Function with Options
DESCRIPTION: Shows how to use the toHex function with additional options, specifically setting the size of the output.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
toHex(
  'Hello world', 
  { size: 32 } // [!code focus]
)
// '0x48656c6c6f20776f726c642e0000000000000000000000000000000000000000'

----------------------------------------

TITLE: Using waitForCallsStatus to check transaction status in viem (TypeScript)
DESCRIPTION: This example demonstrates how to send a batch of calls using sendCalls and then wait for their confirmation using waitForCallsStatus. It includes sending 1 ETH to a specific address and then waiting for the transaction to be confirmed.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/waitForCallsStatus.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, walletClient } from './config'
 
const { id } = await walletClient.sendCalls({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
})
 
const result = await walletClient.waitForCallsStatus({
  id,
})
// @log: {
// @log:   atomic: false,
// @log:   chainId: 1,
// @log:   id: '0x1234567890abcdef',
// @log:   statusCode: 200,
// @log:   status: 'success',
// @log:   receipts: [{ ... }],
// @log: }

----------------------------------------

TITLE: Converting a standard signature to a compact signature using viem
DESCRIPTION: Demonstrates how to use the signatureToCompactSignature function to convert a standard Ethereum signature (with r, s, and yParity components) into an EIP-2098 compact signature format that combines yParity and s into a single value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/signatureToCompactSignature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { signatureToCompactSignature, Signature } from 'viem'

signatureToCompactSignature({  // [!code focus:9]
  r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',
  s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064' 
  yParity: 0
})
// {
//   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',
//   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',
// }

----------------------------------------

TITLE: Configuring viem PublicClient for EIP-712 Domain Reading
DESCRIPTION: This snippet shows how to create and configure a publicClient using viem library for reading EIP-712 domain. It sets up the client with the mainnet chain and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getEip712Domain.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Gas Estimation with Viem
DESCRIPTION: How to estimate gas for a contract function call using Viem. This creates a public client and uses the estimateContractGas method with the contract configuration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_23

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { wagmiContractConfig } from './abi'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

const gas = await client.estimateContractGas({
  ...wagmiContractConfig, 
  functionName: 'mint'
})

----------------------------------------

TITLE: Creating Smart Account with Owner
DESCRIPTION: Instantiates a Coinbase Smart Account with an owner account derived from a private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import {
  createBundlerClient,
  toCoinbaseSmartAccount
} from 'viem/account-abstraction'
import { mainnet } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts'

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

const bundlerClient = createBundlerClient({
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

const owner = privateKeyToAccount('0x...')

const account = await toCoinbaseSmartAccount({
  client,
  owners: [owner]
})

----------------------------------------

TITLE: Executing Batch JSON-RPC Requests
DESCRIPTION: Example of executing multiple concurrent requests using batch JSON-RPC functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/http.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const [blockNumber, balance, ensName] = await Promise.all([
  client.getBlockNumber(),
  client.getBalance({ address: '0xd2135CfB216b74109775236E36d4b433F1DF507B' }),
  client.getEnsName({ address: '0xd2135CfB216b74109775236E36d4b433F1DF507B' }),
])

----------------------------------------

TITLE: Using Custom Portal Address for Optimism Bridge
DESCRIPTION: Shows how to specify a custom Optimism Portal contract address using the portalAddress parameter, which makes the targetChain parameter optional.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_14

LANGUAGE: typescript
CODE:
const gas = await client.estimateDepositTransactionGas({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  request: {
    gas: 21_000n,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
    value: parseEther('1')
  },
  portalAddress: '0xbEb5Fc579115071764c7423A4f12eDde41f106Ed' // [!code focus]
})

----------------------------------------

TITLE: Using withdrawal in proveWithdrawal Function in TypeScript
DESCRIPTION: Example of using the withdrawal parameter in the proveWithdrawal function. The withdrawal data is typically derived from the buildProveWithdrawal Action.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const hash = await client.proveWithdrawal({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  l2OutputIndex: 4529n,
  gas: 420_000n, 
  outputRootProof: { /* ... */ },
  withdrawalProof: [ /* ... */ ],
  withdrawal: { /* ... */ }, // [!code focus]
  targetChain: optimism,
})

----------------------------------------

TITLE: Importing mnemonicToAccount from viem
DESCRIPTION: Import the mnemonicToAccount function from the viem/accounts module to create mnemonic-based accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { mnemonicToAccount } from 'viem/accounts'

----------------------------------------

TITLE: Using Block Tag with getProof in TypeScript
DESCRIPTION: This example shows how to use a block tag when calling the getProof function. The blockTag parameter is optional and allows specifying a named block state for retrieving proof data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getProof.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const proof = await publicClient.getProof({
  address: '0x4200000000000000000000000000000000000016',
  storageKeys: [
    '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',
  ],
  blockTag: 'latest' // [!code focus]
})

----------------------------------------

TITLE: ENS Name Query with Gateway URLs
DESCRIPTION: Example of querying an ENS name with custom gateway URLs for CCIP-Read requests.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsName.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const ensName = await publicClient.getEnsName({
  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
  gatewayUrls: ["https://ccip.ens.xyz"],
})

----------------------------------------

TITLE: Estimating Withdrawal Gas in TypeScript
DESCRIPTION: Example of using the estimateInitiateWithdrawalGas function to estimate gas for an L2 to L1 withdrawal. It demonstrates setting up the client, account, and withdrawal request parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateInitiateWithdrawalGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { base } from 'viem/chains'
import { account, publicClientL2 } from './config'
 
const gas = await publicClientL2.estimateInitiateWithdrawalGas({
  account,
  request: {
    gas: 21_000n,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  },
})

----------------------------------------

TITLE: Config Setup with Local Private Key Account for OP Stack
DESCRIPTION: Configuration example showing how to set up clients with a local private key account hoisted at the client level. This approach uses a private key directly rather than connecting to an external wallet provider.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

export const walletClientL1 = createWalletClient({
  account: privateKeyToAccount('0x...'),
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Complete hashTypedData Usage Example
DESCRIPTION: Demonstrates full usage of hashTypedData function including domain configuration, types definition, and message structure for EIP-712 typed data hashing.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/hashTypedData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
hashTypedData({
  domain: {
    name: 'Ether Mail',
    version: '1',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
  },
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  extensions: [],
  fields: '0x0f',
  verifierDomain: {
    chainId: 1,
    name: 'Smart Account',
    salt: '0x0000000000000000000000000000000000000000000000000000000000000000',
    version: '1',
    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',
  },
})

----------------------------------------

TITLE: Simulating Contract Function Call with Access List in TypeScript
DESCRIPTION: Demonstrates how to include an access list when simulating a contract function call, which can optimize gas usage.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  accessList: [{
    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
    storageKeys: ['0x1'],
  }],
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
})

----------------------------------------

TITLE: Test Client Configuration
DESCRIPTION: Configuration for creating a test client using Viem with Foundry/Anvil as the test environment. Sets up HTTP transport and chain configuration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/loadState.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Using getL2TokenAddress with Required Token Parameter
DESCRIPTION: Example showing how to call getL2TokenAddress with the required token parameter which specifies the L1 token address to be mapped.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL2TokenAddress.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const address = await client.getL2TokenAddress({
    token: '0x5C221E77624690fff6dd741493D735a17716c26B'
})

----------------------------------------

TITLE: Hoisting Account in Wallet Client Creation in TypeScript
DESCRIPTION: This code demonstrates how to hoist the account into the Wallet Client creation, eliminating the need to pass the account to every action.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createWalletClient, http, parseEther } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const account = privateKeyToAccount('0x...')

const client = createWalletClient({ // [!code focus:99]
  account, // [!code ++]
  chain: mainnet,
  transport: http()
})

const hash = await client.sendTransaction({
  account, // [!code --]
  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  value: parseEther('0.001')
})

----------------------------------------

TITLE: Configuring Wallet Client with JSON-RPC Account in TypeScript
DESCRIPTION: Sets up a wallet client using an account retrieved from an EIP-1193 provider (e.g., MetaMask).
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/sendTransaction.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
})

export const walletClient = createWalletClient({
  account,
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: Configuring Viem Test Client for Foundry Chain in TypeScript
DESCRIPTION: This code snippet shows the configuration of a Viem test client for the Foundry chain. It sets up the client with specific parameters including the chain, mode, and transport method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/snapshot.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: numberToBytes Function Usage - TypeScript
DESCRIPTION: Demonstrates converting numbers to byte arrays using numberToBytes function
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { numberToBytes } from 'viem'

numberToBytes(420)
// Uint8Array([1, 164])

numberToBytes(420, { size: 32 })
// Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 164])

----------------------------------------

TITLE: Importing getSourceHash Function from viem
DESCRIPTION: Shows how to import the getSourceHash function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getSourceHash } from 'viem'

----------------------------------------

TITLE: Basic Paymaster Usage with Bundler Client
DESCRIPTION: Demonstrates how to enable Paymaster functionality when estimating user operation gas costs using the bundlerClient.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const hash = await bundlerClient.estimateUserOperationGas({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: true,
})

----------------------------------------

TITLE: Using a Specific Account for Message Signing
DESCRIPTION: Example showing how to sign a message by specifying an Ethereum address as the account parameter. This allows for explicit control over which account signs the message.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { walletClient } from './config'

const signature = await walletClient.signMessage({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', 
  message: 'hello world',
  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2'
})

----------------------------------------

TITLE: Estimating L1 Fee for Contract Write in TypeScript
DESCRIPTION: Basic example of estimating the L1 data fee for a contract write operation on an L2 chain using viem. The example shows how to call the estimateContractL1Fee method from a configured client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Fee.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'
import { wagmiAbi } from './abi'

const l1Fee = await publicClient.estimateContractL1Fee({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account,
})

----------------------------------------

TITLE: Using waitToProve with Transaction Receipt in OP Stack
DESCRIPTION: Example showing how to use the waitToProve function to wait until an L2 withdrawal transaction is ready to be proved. The function takes a transaction receipt and the target L2 chain as parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitToProve.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClientL1, publicClientL2 } from './config'

const receipt = await publicClientL2.getTransactionReceipt({
  hash: '0x7b5cedccfaf9abe6ce3d07982f57bcb9176313b019ff0fc602a0b70342fe3147'
})
const output = await publicClientL1.waitToProve({
  receipt,
  targetChain: publicClientL2.chain,
})

----------------------------------------

TITLE: Specifying output format for keccak256
DESCRIPTION: Shows how to specify the output format of the keccak256 function using the 'to' parameter. In this example, the function returns a Uint8Array instead of the default hex string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/keccak256.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { keccak256 } from 'viem'

keccak256(
  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33],
  'bytes' // [!code focus]
)
// Uint8Array [62, 162, 241, 208, 171, 243, 252, 102, 207, 41, 238, 187, 112, 203, 212, 231, 254, 118, 46, 248, 160, 155, 204, 6, 200, 237, 246, 65, 35, 10, 254, 192] // [!code focus]

----------------------------------------

TITLE: Execute Function with Custom Chain Parameter
DESCRIPTION: Example showing how to specify a custom chain when using the execute function, allowing for cross-chain contract interactions without changing the client configuration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'

const hash = await client.execute({
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  calls: [ 
    { 
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
      value: parseEther('1')
    }, 
    { 
      data: '0xdeadbeef', 
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
    }, 
  ], 
  chain: optimism,
})

----------------------------------------

TITLE: Wallet Client Configuration
DESCRIPTION: Configuration setup for wallet client including chain selection, transport setup, and EIP712 action extension.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/writeContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { zksync } from 'viem/chains'
import { eip712WalletActions } from 'viem/zksync'

export const walletClient = createWalletClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(eip712WalletActions())

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Event Topic Encoding without EventName in TypeScript
DESCRIPTION: Shows how to encode event topics when ABI contains only one item, making eventName parameter optional. Uses a simplified ABI with just the Transfer event definition.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeEventTopics.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { encodeEventTopics } from 'viem'

const abiItem = {
  inputs: [
    {
      indexed: true,
      name: 'from',
      type: 'address',
    },
    { indexed: true, name: 'to', type: 'address' },
    {
      indexed: false,
      name: 'value',
      type: 'uint256',
    },
  ],
  name: 'Transfer',
  type: 'event',
}

const topics = encodeEventTopics({
  abi: [abiItem]
})

----------------------------------------

TITLE: Configuring Public Clients for L1 and L2 in TypeScript
DESCRIPTION: This snippet shows how to set up public clients for both L1 (Ethereum mainnet) and L2 (Optimism) chains using the viem library. It includes extending the L1 client with OP Stack-specific actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToFinalize.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: custom(window.ethereum)
})

----------------------------------------

TITLE: Defining Contract ABI for Gas Estimation
DESCRIPTION: ABI definition for the contract whose gas usage will be estimated, including the mint function that will be called in the example.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: "mint",
    outputs: [{ name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  ...
] as const;

----------------------------------------

TITLE: Event Watching with ABI Event Object
DESCRIPTION: Example of watching events using a direct ABI event object specification
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchEvent.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const unwatch = publicClient.watchEvent(publicClient, {
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  event: {
    name: 'Transfer',
    inputs: [
      { type: 'address', indexed: true, name: 'from' },
      { type: 'address', indexed: true, name: 'to' },
      { type: 'uint256', indexed: false, name: 'value' }
    ]
  },
  onLogs: logs => console.log(logs)
})

----------------------------------------

TITLE: Configuring Error Handling in Fallback Transport
DESCRIPTION: This example demonstrates how to configure custom error handling logic in fallback transport to determine whether to throw an error or continue to the next transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_13

LANGUAGE: typescript
CODE:
const transport = fallback([thirdweb, infura], {
  shouldThrow: (err: Error) => {
    return err.message.includes('sad times')
  },
})

----------------------------------------

TITLE: Signing a UTF-8 Message with Smart Account
DESCRIPTION: Example of signing the UTF-8 representation of a message using a Smart Account. This is the default behavior when providing a string message.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signMessage.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const signature = await account.signMessage({
  message: 'hello world',
})

----------------------------------------

TITLE: Creating TestClient Configuration for Viem
DESCRIPTION: Setup code for creating a test client using Viem with Foundry/Anvil configuration. Demonstrates initialization of the test environment with HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/impersonateAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Client Configuration Setup
DESCRIPTION: Setup for creating public and wallet clients with viem. Configures mainnet connection and wallet integration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyTypedData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import 'viem/window'
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const walletClient = createWalletClient({
  transport: custom(window.ethereum!)
})

export const [account] = await walletClient.getAddresses()

----------------------------------------

TITLE: Using Account Hoisting with ERC-7821 Execute Method
DESCRIPTION: Example showing how to execute batches with an account hoisted on the client configuration rather than passing it to each method call, simplifying repeated use.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { account, client } from './config'
 
const hash = await client.execute({
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  batches: [
    {
      calls: [
        {
          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
          value: parseEther('1')
        },
      ]
    },
    {
      calls: [
        {
          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
          value: parseEther('2')
        },
        {
          data: '0xdeadbeef',
          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
        },
      ],
    },
  ],
})

----------------------------------------

TITLE: Configuration Setup for L1 Token Balance Retrieval in TypeScript
DESCRIPTION: Configuration for setting up a public client with L1 actions extension and defining an account. Demonstrates both JSON-RPC and local account setup options.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenBalance.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { publicActionsL1 } from 'viem/zksync'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(publicActionsL1())

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Retrieving Bytecode with Block Tag
DESCRIPTION: Example of getting contract bytecode using a specific block tag.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getCode.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const bytecode = await publicClient.getCode({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  blockTag: 'safe',
})

----------------------------------------

TITLE: boolToBytes Function Usage - TypeScript
DESCRIPTION: Shows how to convert boolean values to byte arrays using boolToBytes function
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { boolToBytes } from 'viem'

boolToBytes(true)
// Uint8Array([1])

boolToBytes(true, { size: 32 })
// Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])

----------------------------------------

TITLE: Importing Custom Transport
DESCRIPTION: Demonstrates how to import the custom transport function from viem.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/custom.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { custom } from 'viem'

----------------------------------------

TITLE: Retrieving Default Bridge Addresses in ZKsync Era using TypeScript
DESCRIPTION: This snippet demonstrates how to use the 'getDefaultBridgeAddresses' function to retrieve the addresses of default ZKsync Era bridge contracts. It requires a configured client that extends publicActionsL2.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getDefaultBridgeAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const addresses = await client.getDefaultBridgeAddresses();

----------------------------------------

TITLE: Configuring Viem WalletClient with EIP-5792 Actions
DESCRIPTION: This snippet shows how to configure a Viem walletClient with custom transport and EIP-5792 actions. It sets up the client for the Ethereum mainnet and extends it with experimental EIP-5792 actions, which are required for using getCallsStatus.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCallsStatus.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import 'viem/window'
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'
import { eip5792Actions } from 'viem/experimental'

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!),
}).extend(eip5792Actions())

export const [account] = await walletClient.getAddresses()

----------------------------------------

TITLE: Importing encodeAbiParameters from Viem in TypeScript
DESCRIPTION: Shows how to import the encodeAbiParameters function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { encodeAbiParameters } from 'viem'

----------------------------------------

TITLE: Retrieving Transaction by Block Tag and Index in TypeScript
DESCRIPTION: This example demonstrates how to use the getTransaction function to get transaction information using a block tag and index. It shows the usage of the blockTag and index parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransaction.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const transaction = await publicClient.getTransaction({
  blockTag: 'safe',
  index: 0
})

----------------------------------------

TITLE: Using dumpState Function in TypeScript with Viem
DESCRIPTION: This snippet demonstrates how to use the dumpState function from a testClient to serialize the current state of a blockchain. The function returns a hex-encoded data blob representing the serialized state.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/dumpState.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

const state = await testClient.dumpState()
// 0x1f8b08000000000000ffad934d8e1c310885ef52eb5e003660e636184c3651b7949948915a7df7b8934ded6bbcc23fe2f3e3c1f3f088c7effbd7e7f1f13ce00ff60c35939e4e016352131bb3658bd0f046682dcd98dfafef8f7bace3036ec7f49ffe2fde190817da82b0e9933abcd7713be291ffaf77fcf9f5f8e53ff6f6f97addde4cced6dd8b3b89e6d4d468a2a3d93e537480fd15713933f12a73ebc2b106ae561c59bae1d152784733c067f1dc49479d987295d9a2f7c8cc296e00e534797026d94ed312a9bc93b5192726d155a882999a42300ea48ce680109a80936141a2be0d8f7182f6cb4a0d4a6d96ac49d16b2834e1a5836dd0c242c0b5751ac8d9d1cb4a4d65b97620594ac2dc77a159cbb9ab349f096fedee76828ecb4cdb20d044679e1124c6c1633a4acda639d026f81ea96f15eab0963a76ca3d2f81b58705fbea3e4a59761b11f8769ce0046d5799d5ac5216a37b8e51523d96f81c839476fb54d53422393bda94af505fafbf9d0612379c040000

----------------------------------------

TITLE: Retrieving L2 to L1 Log Proof in ZKSync using viem
DESCRIPTION: This snippet demonstrates how to use the getLogProof function to retrieve the proof for an L2 to L1 log. It requires a transaction hash and optionally an index of the log within the transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getLogProof.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const proof = await client.getLogProof({
  txHash: '0x...',
  index: 1
});

----------------------------------------

TITLE: Using concat Function with Hex Values and Byte Arrays in TypeScript
DESCRIPTION: Shows examples of using the concat function to combine hex strings and Uint8Array instances. The function can handle both data types and returns the concatenated value in the same format as the input.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/concat.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { concat } from 'viem'

concat(['0x00000069', '0x00000420'])
// 0x0000006900000420

concat([new Uint8Array([69]), new Uint8Array([420])])
// Uint8Array [69, 420]

----------------------------------------

TITLE: Installing toFunctionHash from viem
DESCRIPTION: Import statement showing how to include the toFunctionHash function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionHash.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toFunctionHash } from 'viem'

----------------------------------------

TITLE: Configuring Viem Test Client Setup
DESCRIPTION: Shows how to set up and configure a test client using viem library with Foundry chain and Anvil mode. Includes transport configuration and chain specification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setLoggingEnabled.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Setting Max Priority Fee Per Gas in Client Execute Method
DESCRIPTION: Example of configuring both maxFeePerGas and maxPriorityFeePerGas parameters. The maxPriorityFeePerGas sets the maximum priority fee (tip) in wei for miners/validators.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
const hash = await client.execute({
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  batches: [
    {
      calls: [
        {
          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
          value: parseEther('1')
        },
      ]
    },
    {
      calls: [
        {
          data: '0xdeadbeef',
          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
        },
      ],
    },
  ],
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'), // [!code focus]
})

----------------------------------------

TITLE: Configuring a Public Client for viem
DESCRIPTION: Example of creating a public client using viem's createPublicClient function. This client is required for the Smart Account initialization and connects to the Ethereum mainnet.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSimpleSmartAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { http, createPublicClient } from 'viem'
import { mainnet } from 'viem/chains'
 
export const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Using isAddress with Strict Mode Option
DESCRIPTION: Shows how to use the isAddress function with the strict option. When strict is false, addresses don't need to be in checksum format. When strict is true (default), addresses must be in checksum format.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isAddress.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
isAddress('0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac', { strict: false })
// true

isAddress('0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac', { strict: true })
// false

isAddress('lol', { strict: false })
// false

----------------------------------------

TITLE: Public Client Setup
DESCRIPTION: Setting up a public client for network interaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Using getWithdrawals Function to Extract Withdrawal Messages
DESCRIPTION: Demonstrates how to use the getWithdrawals function to extract withdrawal messages from a transaction receipt's logs. The example retrieves a transaction receipt and then processes it to get withdrawal data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getWithdrawals.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { extractTransactionDepositedLogs, getWithdrawals } from 'viem'

const receipt = await client.getTransactionReceipt({
  hash: '0xa08acae48f12243bccd7153c88d892673d5578cce4ee9988c0332e8bba47436b',
})

const withdrawals = getWithdrawals(receipt)

----------------------------------------

TITLE: Using salt parameter with CREATE2
DESCRIPTION: Shows how to provide a salt value for CREATE2 contract deployments, which affects the resulting address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
getContractAddress({
  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',
  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',
  opcode: 'CREATE2',
  salt: toBytes('wagmi'),
})

----------------------------------------

TITLE: Setting L1 Log Index Parameter for userDeposit Domain
DESCRIPTION: Shows how to set the l1LogIndex parameter which is required for the userDeposit domain, specifying the index of the L1 log.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const sourceHash = getSourceHash({
  domain: 'userDeposit',
  l1BlockHash:
    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7',
  l1LogIndex: 196, // [!code focus]
})

----------------------------------------

TITLE: Encoding Event Filter Topics in Viem
DESCRIPTION: Demonstrates how to use viem's encodeEventTopics function to encode event topics for filtering logs, equivalent to ethers.js Interface.encodeFilterTopics method with a different parameter structure.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_45

LANGUAGE: typescript
CODE:
import { encodeEventTopics } from 'viem'
import { abi } from './abi'

const data = encodeEventTopics({
  abi,
  eventName: 'Transfer',
  args: {
    to: '0x8ba1f109551bD432803012645Ac136ddd64DBA72'
  }
})

----------------------------------------

TITLE: Setting Block Timestamp Interval with Viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the setBlockTimestampInterval function from a testClient in Viem. It sets the block timestamp interval to 5 seconds for future blocks in a test environment.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBlockTimestampInterval.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.setBlockTimestampInterval({
  interval: 5
})

----------------------------------------

TITLE: Configuring viem Public Client
DESCRIPTION: Setup code showing how to configure a viem public client with mainnet connection for making RPC calls. Demonstrates client initialization with HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlobBaseFee.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: watchAsset with Address Parameter
DESCRIPTION: Example showing address parameter specification for the token contract in watchAsset function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/watchAsset.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const success = await walletClient.watchAsset({
  type: 'ERC20',
  options: {
    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
    decimals: 18,
    symbol: 'WETH',
  },
});

----------------------------------------

TITLE: Transaction Receipt with Replacement Callback
DESCRIPTION: Example demonstrating how to handle transaction replacements using a callback
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const transaction = await publicClient.waitForTransactionReceipt(
  { 
    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
    onReplaced: replacement => console.log(replacement)
  }
)

----------------------------------------

TITLE: Basic ABI Definition for Contract Deployment
DESCRIPTION: Example ABI definition showing a basic constructor without parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeDeployData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  { 
    inputs: [], 
    stateMutability: 'nonpayable', 
    type: 'constructor' 
  },
  ...
] as const;

----------------------------------------

TITLE: Using parseCompactSignature to Parse Hex Formatted Compact Signatures
DESCRIPTION: Demonstrates how to use the parseCompactSignature function to parse a hex formatted compact signature into a structured format. The function returns an object with 'r' and 'yParityAndS' properties.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseCompactSignature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseCompactSignature } from 'viem'

parseCompactSignature('0x9328da16089fcba9bececa81663203989f2df5fe1faa6291a45381c81bd17f76939c6d6b623b42da56557e5e734a43dc83345ddfadec52cbe24d0cc64f550793')
/**
 * {
 *   r: '0x9328da16089fcba9bececa81663203989f2df5fe1faa6291a45381c81bd17f76',
 *   yParityAndS: '0x939c6d6b623b42da56557e5e734a43dc83345ddfadec52cbe24d0cc64f550793'
 * }
 */

----------------------------------------

TITLE: Using ENS Label Hash Function in TypeScript
DESCRIPTION: Demonstrates how to use the labelhash function with a normalized ENS label to generate a hash. The example shows hashing the normalized label 'awkweb' which returns a 32-byte hex string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/utilities/labelhash.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { labelhash, normalize } from 'viem/ens'

labelhash(normalize('awkweb'))
// '0x7aaad03ddcacc63166440f59c14a1a2c97ee381014b59c58f55b49ab05f31a38'

----------------------------------------

TITLE: Encoding Contract Deployment Data in Ethers
DESCRIPTION: Shows how to use ethers.js Interface.encodeDeploy to encode constructor arguments for contract deployment. This creates the data needed for constructor initialization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_40

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'
import { abi } from './abi'

const iface = new utils.Interface(abi);
const data = iface.encodeDeploy(['SYM', 'Some Name'])

----------------------------------------

TITLE: Setting Transaction Nonce
DESCRIPTION: Shows how to set a unique nonce (transaction number) for an Ethereum transaction. The example sets nonce to 420 in a transaction call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_18

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  nonce: 420,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Importing publicActionsL1 Extension for OP Stack in TypeScript
DESCRIPTION: This example demonstrates how to import the 'publicActionsL1' extension, which provides a suite of Public Actions for Layer 1 chains to interact with Layer 2 protocols.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { publicActionsL1 } from 'viem/op-stack'

----------------------------------------

TITLE: Importing ZKsync Chains in Viem
DESCRIPTION: Shows how to import ZKsync mainnet and Sepolia testnet chain configurations from Viem's chain definitions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/zksync.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import {
  zksync, // [!code hl]
  zksyncSepoliaTestnet, // [!code hl]
} from 'viem/chains'

----------------------------------------

TITLE: Using hexToString Function in TypeScript
DESCRIPTION: Demonstrates the usage of the hexToString function for decoding hex to a string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { hexToString } from 'viem'

hexToString('0x48656c6c6f20576f726c6421')
// "Hello World!"

hexToString(
  '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000',
  { size: 32 }
)
// "Hello World!"

----------------------------------------

TITLE: Setting up a viem Public Client for Ethereum Mainnet
DESCRIPTION: Initializes a public client for the Ethereum mainnet network using viem's createPublicClient function with HTTP transport. This client is required for creating block filters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createBlockFilter.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Using the window.ethereum Polyfill for Type Safety
DESCRIPTION: Demonstrates how the viem/window polyfill provides type safety for the global window.ethereum provider, including autocomplete for methods and typed parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/typescript.mdx#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import 'viem/window';

const hash = await window.ethereum.request({
  method: 'e 
//          ^|
})








const hash = await window.ethereum.request({
  method: 'eth_getTransactionByHash',
  params: [
//     ^?
})

----------------------------------------

TITLE: Setting Priority Fee for L1 Transaction
DESCRIPTION: Shows how to set the priority fee for the L1 transaction using the maxPriorityFeePerGas parameter, which applies to EIP-1559 transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
const gas = await client.estimateDepositTransactionGas({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  request: {
    gas: 21_000n,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
    value: parseEther('1')
  },
  maxFeePerGas: parseGwei('20'), 
  maxPriorityFeePerGas: parseGwei('2'),  // [!code focus]
  targetChain: base,
})

----------------------------------------

TITLE: Using Human Readable ABI Parameters with parseAbiParameters
DESCRIPTION: Shows how to use the parseAbiParameters utility with encodeAbiParameters to provide parameters in a human-readable format instead of object notation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { encodeAbiParameters, parseAbiParameters } from 'viem'

const encodedData = encodeAbiParameters(
  parseAbiParameters('string x, uint y, bool z'),
  ['wagmi', 420n, true]
)
// 0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000

----------------------------------------

TITLE: Using getPaymasterStubData with Paymaster Client in TypeScript
DESCRIPTION: Example of retrieving paymaster stub data using a paymaster client. This snippet demonstrates how to call the getPaymasterStubData method with required parameters like callData, factory information, gas parameters, and sender details.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterStubData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'
})

----------------------------------------

TITLE: Using compactSignatureToSignature to Parse Compact Signatures in TypeScript
DESCRIPTION: Demonstrates how to use the compactSignatureToSignature function to parse an EIP-2098 compact signature into standard signature format. The function takes an object with 'r' and 'yParityAndS' properties and returns an object with 'r', 's', and 'yParity' properties.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/compactSignatureToSignature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { compactSignatureToSignature } from 'viem'

compactSignatureToSignature({
  r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',
  yParityAndS:
    '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',
})
// {
//   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',
//   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',
//   yParity: 0,
// }

----------------------------------------

TITLE: Retrieving L1 Batch Block Range in ZKSync with viem
DESCRIPTION: Example showing how to retrieve the range of blocks contained within a batch using the getL1BatchBlockRange method. This function takes a batch number and returns an array of two elements representing the range of blocks.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1BatchBlockRange.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const batchBlockRange = await client.getL1BatchBlockRange({
  number: 1
});

----------------------------------------

TITLE: Wallet Client Configuration
DESCRIPTION: Shows how to configure the wallet client with necessary imports and settings for authorization preparation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/prepareAuthorization.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const walletClient = createWalletClient({
  account: privateKeyToAccount('0x...'),
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Configuring Public Client and Account in TypeScript
DESCRIPTION: Shows the setup for creating a public client and defining an account for use with viem, including options for both JSON-RPC and local accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

// @log: ↓ JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'

// @log: ↓ Local Account
// export const account = privateKeyToAccount('0x...')

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Solidity Contract with Struct Definition
DESCRIPTION: The Solidity contract containing the struct definition used in the decoding example.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_6

LANGUAGE: solidity
CODE:
contract Example {
  struct Foo {
    uint256 x;
    bool y;
    address z;
  }

  function staticStruct(...) returns (Foo calldata foo) { 
    ... 
    return foo;
  }
}

----------------------------------------

TITLE: Wallet Client Configuration
DESCRIPTION: Shows how to configure a wallet client with custom transport and EIP712 wallet actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/signTransaction.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { zksync } from 'viem/chains'
import { eip712WalletActions } from 'viem/zksync'

export const walletClient = createWalletClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(eip712WalletActions())

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Explicit Chain ID Authorization
DESCRIPTION: Demonstrates preparing an authorization with an explicitly specified chain ID for cross-chain compatibility.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/prepareAuthorization.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { walletClient } from './client'

const authorization = await walletClient.prepareAuthorization({
  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  chainId: 10,
})

----------------------------------------

TITLE: Retrieving Chain ID Using Bundler Client
DESCRIPTION: Demonstrates how to retrieve the chain ID from a configured bundler client. This example makes a request to get the chain ID associated with the bundler endpoint.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getChainId.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { bundlerClient } from './client'

const chainId = await bundlerClient.getChainId()

----------------------------------------

TITLE: Specifying a Verifier Contract for Message Signing
DESCRIPTION: Example showing how to specify a verifier contract address when signing a message. This is the contract address that will be used to verify the signature, typically an ERC-4337 Smart Account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { walletClient } from './config'

const signature = await walletClient.signMessage({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  message: 'hello world',
  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2', 
})

----------------------------------------

TITLE: Configuring EntryPoint for Smart Account
DESCRIPTION: Example showing how to specify a custom EntryPoint configuration for the smart account including ABI, address and version
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const account = await toSoladySmartAccount({
  client,
  entryPoint: {
    abi: [/* ... */],
    address: '0x0000000071727De22E5E9d8BAf0edAc6f37da032',
    version: '0.7',
  },
  owner,
})

----------------------------------------

TITLE: Configuring Public Clients for L1 and L2 Chains in TypeScript
DESCRIPTION: Setting up public clients for interacting with Ethereum mainnet (L1) and Optimism (L2) chains. The L1 client is extended with Optimism-specific actions to support cross-chain operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToProve.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())
export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
})

----------------------------------------

TITLE: Creating an Access List with Gas Price
DESCRIPTION: Demonstrates creating an access list with a specified gas price for Legacy Transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { parseEther, parseGwei } from 'viem'

const result = await publicClient.createAccessList({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xdeadbeef',
  gasPrice: parseGwei('20'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
})

----------------------------------------

TITLE: Using the credential Parameter with toWebAuthnAccount in TypeScript
DESCRIPTION: Shows how to use the required credential parameter when creating a WebAuthn account. The credential must be a P256 WebAuthn Credential created using createWebAuthnCredential.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/toWebAuthnAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWebAuthnCredential, toWebAuthnAccount } from 'viem/account-abstraction'

const credential = await createWebAuthnCredential({
  name: 'Example',
})

const account = toWebAuthnAccount({
  credential,
})

----------------------------------------

TITLE: Solidity Contract with Struct Definition
DESCRIPTION: Shows the Solidity contract that defines the struct being encoded in the previous example, with uint256, bool, and address fields.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodeAbiParameters.md#2025-04-14_snippet_6

LANGUAGE: solidity
CODE:
contract Example {
  struct Foo {
    uint256 x;
    bool y;
    address z;
  }

  function staticStruct(Foo calldata foo) { ... }
}

----------------------------------------

TITLE: Configuring Viem Client with ERC-7821 Actions
DESCRIPTION: Example of creating and extending a Viem client with experimental ERC-7821 actions. The code shows how to initialize a client with mainnet configuration and HTTP transport, then extend it with ERC-7821 functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/client.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { erc7821Actions } from 'viem/experimental' // [!code focus]

const client = createClient({
  chain: mainnet,
  transport: http(),
}).extend(erc7821Actions()) // [!code focus]

const hash = await client.execute({/* ... */})

----------------------------------------

TITLE: Client Configuration Setup
DESCRIPTION: Configuration setup for wallet and public clients needed for withdrawal finalization. Shows how to initialize clients with appropriate transports and chain configurations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/finalizeWithdrawal.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

export const walletClientL1 = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

// JSON-RPC Account
export const [account] = await walletClientL1.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Basic Event Topic Encoding in TypeScript
DESCRIPTION: Demonstrates basic usage of encodeEventTopics function to encode a Transfer event without arguments. Uses a wagmiAbi contract ABI and returns encoded topic hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeEventTopics.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { encodeEventTopics } from 'viem'
import { wagmiAbi } from './abi.ts'

const topics = encodeEventTopics({
  abi: wagmiAbi,
  eventName: 'Transfer'
})
// ["0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0"]

----------------------------------------

TITLE: Using BlockNumber Parameter in Call Action
DESCRIPTION: Example of specifying the blockNumber parameter when making a call. This allows performing the call against a specific historical block.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  blockNumber: 15121123n, // [!code focus]
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: WebAuthn Credential Creation with Challenge Parameter
DESCRIPTION: Shows how to create a WebAuthn credential with a custom cryptographic challenge using Uint8Array.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/createWebAuthnCredential.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const credential = await createWebAuthnCredential({
  challenge: new Uint8Array([1, 2, 3]),
  name: 'Example',
})

----------------------------------------

TITLE: Using waitForNextL2Output with Interval Buffer Parameter in TypeScript
DESCRIPTION: Example showing how to use the optional intervalBuffer parameter when calling waitForNextL2Output. This buffer accounts for time interval discrepancies.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const output = await publicClientL1.waitForNextL2Output({
  intervalBuffer: 1.2,
  l2BlockNumber,
  targetChain: optimism, 
})

----------------------------------------

TITLE: Subscribing to Contract Events with Ethers.js
DESCRIPTION: How to listen for contract events using Ethers.js. This example subscribes to the Transfer event, handles events with a listener function, and shows how to unsubscribe.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_20

LANGUAGE: typescript
CODE:
import { getDefaultProvider } from 'ethers'
import { wagmiContractConfig } from './abi'

const provider = getDefaultProvider()

const { abi, address } = wagmiContractConfig
const contract = new Contract(address, abi, provider)

const listener = (from, to, amount, event) => {
  // ...
}
contract.on('Transfer', listener)

// unsubscribe
contract.off('Transfer', listener)

----------------------------------------

TITLE: Using hdKeyToAccount with Different HD Key Creation Methods
DESCRIPTION: Example demonstrating how to create an HD Account using various methods of deriving an HD Key (fromMasterSeed, fromExtendedKey, fromJSON) and then converting it to an account that can be used with a wallet client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
// @noErrors
import { createWalletClient, http } from 'viem'
import { HDKey, hdKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const hdKey = HDKey.fromMasterSeed(...) // [!code focus:3]
const hdKey = HDKey.fromExtendedKey(...)
const hdKey = HDKey.fromJSON({ xpriv: ... })

const account = hdKeyToAccount(hdKey) // [!code focus]

const client = createWalletClient({
  account,
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Importing walletActionsL2 Extension for OP Stack in TypeScript
DESCRIPTION: This snippet shows how to import the 'walletActionsL2' extension, which provides a suite of Wallet Actions tailored for Layer 2 (OP Stack) chains.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { walletActionsL2 } from 'viem/op-stack'

----------------------------------------

TITLE: Using getTimeToFinalize for Withdrawal Finalization Timing
DESCRIPTION: Shows how to use the getTimeToFinalize action to retrieve the estimated time remaining before a withdrawal can be finalized, which can be displayed to users or stored in a database.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
const { seconds, timestamp } = await publicClientL1.getTimeToFinalize({
  receipt,
  targetChain: walletClientL2.chain
})

----------------------------------------

TITLE: Using stringToHex Function
DESCRIPTION: Shows how to use the stringToHex shortcut function for encoding UTF-8 strings to hex values, with and without size options.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { stringToHex } from 'viem'

stringToHex('Hello World!')
// "0x48656c6c6f20576f726c6421"

stringToHex('Hello World!', { size: 32 })
// "0x48656c6c6f20576f726c64210000000000000000000000000000000000000000"

----------------------------------------

TITLE: Using commitmentsToVersionedHashes with blob data in TypeScript
DESCRIPTION: Demonstrates a complete example of generating blobs, converting them to commitments, and then transforming those commitments to versioned hashes using the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { 
  blobsToCommitments, 
  commitmentsToVersionedHashes, 
  toBlobs 
} from 'viem'
import { kzg } from './kzg'

const blobs = toBlobs({ data: '0x1234' })
const commitments = blobsToCommitments({ blobs, kzg })
const versionedHashes = commitmentsToVersionedHashes({  
  commitments,  
}) 

----------------------------------------

TITLE: Fetching Block Number in TypeScript
DESCRIPTION: Demonstrates how to retrieve the most recent block number using the publicClient. Returns the block number as a bigint value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockNumber.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const blockNumber = await publicClient.getBlockNumber()

----------------------------------------

TITLE: Stop Impersonation Address Parameter Example
DESCRIPTION: Example highlighting the address parameter usage in stopImpersonatingAccount function. Shows how to specify the target account address to stop impersonating.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/stopImpersonatingAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
await testClient.stopImpersonatingAccount({
  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
})

----------------------------------------

TITLE: Specifying types parameter in encodePacked function
DESCRIPTION: Shows how to specify the types parameter which defines the set of ABI types to pack encode.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodePacked.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
encodePacked(
  ['address', 'string', 'bytes16[]'], // [!code focus]
  [
    '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 
    'hello world',
    ['0xdeadbeefdeadbeefdeadbeefdeadbeef', '0xcafebabecafebabecafebabecafebabe']
  ]
)

----------------------------------------

TITLE: Providing values parameter in encodePacked function
DESCRIPTION: Demonstrates how to provide the values parameter which contains the primitive values corresponding to the defined ABI types.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/encodePacked.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
encodePacked(
  ['address', 'string', 'bytes16[]'],
  [ // [!code focus:5]
    '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 
    'hello world',
    ['0xdeadbeefdeadbeefdeadbeefdeadbeef', '0xcafebabecafebabecafebabecafebabe']
  ]
)

----------------------------------------

TITLE: Basic Formatters Configuration in Viem
DESCRIPTION: Shows the basic structure for configuring all types of formatters (block, transaction, receipt, request) in a chain definition.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/formatters.md#2025-04-14_snippet_0

LANGUAGE: tsx
CODE:
import { 
  defineBlock,
  defineChain,
  defineTransaction, 
  defineTransactionReceipt, 
  defineTransactionRequest 
} from 'viem' 

export const example = defineChain({
  /* ... */
  formatters: { 
    block: defineBlock(/* ... */),
    transaction: defineTransaction(/* ... */),
    transactionReceipt: defineTransactionReceipt(/* ... */),
    transactionRequest: defineTransactionRequest(/* ... */),
  } 
})

----------------------------------------

TITLE: Setting a Custom rpId with toWebAuthnAccount in TypeScript
DESCRIPTION: Shows how to specify a custom Relying Party ID when creating a WebAuthn account. By default, it uses window.location.hostname, but this can be overridden for specific use cases.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/toWebAuthnAccount.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import * as passkey from 'react-native-passkeys'

const credential = await createWebAuthnCredential({
  name: 'Example',
})

const account = toWebAuthnAccount({
  credential,
  rpId: 'example.com',
})

----------------------------------------

TITLE: Structuring a Conforming Log in TypeScript
DESCRIPTION: This example shows how to structure a conforming log object in TypeScript that matches the Solidity event definition. It includes the correct format for data and topics, demonstrating proper indexing of arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/glossary/terms.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
const log = {
  ...
  data: '0x
    00...23c346 // ✅ non-indexed argument (baz)
  ',
  topics: [
    '0xdd...23b3ef', // event signature
    '0x00...000001', // ✅ indexed argument (foo)
    '0xae...e1cc58', // ✅ indexed argument (bar)
    '0x00...000000', // ✅ indexed argument (barry)
  ],
  ...
}

----------------------------------------

TITLE: Configuring Public Client for Ethereum Mainnet in TypeScript
DESCRIPTION: This code sets up a publicClient instance for interacting with the Ethereum mainnet. It uses the createPublicClient function from viem, configuring it with the mainnet chain and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getGasPrice.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Using a Custom getFn with toWebAuthnAccount in TypeScript
DESCRIPTION: Demonstrates how to use a custom credential request function for environments without native WebAuthn support (like React Native). The getFn parameter allows specifying an alternative implementation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/toWebAuthnAccount.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import * as passkey from 'react-native-passkeys'

const credential = await createWebAuthnCredential({
  name: 'Example',
})

const account = toWebAuthnAccount({
  credential,
  getFn: passkey.get,
})

----------------------------------------

TITLE: Configuring Viem Test Client
DESCRIPTION: Setup configuration for creating a test client with Foundry chain and Anvil mode using HTTP transport
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getTxpoolContent.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Estimating User Operation Gas for Contract Calls in TypeScript
DESCRIPTION: Example of using estimateUserOperationGas with contract calls, specifying ABI and function name.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'
import { bundlerClient, publicClient } from './config'
import { wagmiAbi } from './abi'

const gas = await bundlerClient.estimateUserOperationGas({
  calls: [{
    abi: wagmiAbi,
    functionName: 'mint',
    to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  }],
})

----------------------------------------

TITLE: Using serializeErc6492Signature Function to Serialize ERC-6492 Signature in TypeScript
DESCRIPTION: Demonstrates the usage of the serializeErc6492Signature function to serialize an ERC-6492 flavoured signature into hex format. The function takes an object with address, data, and signature properties, and returns a hex-formatted string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeErc6492Signature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { serializeErc6492Signature } from 'viem/utils'

serializeErc6492Signature({
  address: '0xcafebabecafebabecafebabecafebabecafebabe',
  data: '0xdeadbeef',
  signature: '0x41a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b',
})
// "0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492"

----------------------------------------

TITLE: Setting Minimum Gas Price using Viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the setMinGasPrice function from the Viem library to change the minimum gas price accepted by the network. It imports necessary functions and uses a testClient to set the gas price to 20 Gwei.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setMinGasPrice.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseGwei } from 'viem'
import { testClient } from './client'
 
await testClient.setMinGasPrice({
  gasPrice: parseGwei('20'),
})

----------------------------------------

TITLE: Creating an Access List with Value
DESCRIPTION: Shows how to create an access list with a specified value (in wei) to be sent with the transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'

const result = await publicClient.createAccessList({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xdeadbeef',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1')
})

----------------------------------------

TITLE: Defining Solidity Event for Non-conforming Log
DESCRIPTION: This Solidity event definition corresponds to the non-conforming log example. It shows how a different structure of indexed and non-indexed arguments can lead to non-conforming logs when using the same event signature.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/glossary/terms.md#2025-04-14_snippet_3

LANGUAGE: solidity
CODE:
event Transfer(
  bool indexed foo, 
  uint256 baz, 
  string bar, 
  boolean barry
)

----------------------------------------

TITLE: Creating a Test Client for Ethereum Interactions
DESCRIPTION: This code creates a test client using viem library for interacting with an Ethereum network. It sets up the client with the Foundry chain configuration and Anvil mode, using HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getTxpoolStatus.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Configuring Local Account for zkSync
DESCRIPTION: Shows how to configure a wallet client with a local account derived from a private key for zkSync transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/withdraw.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { publicActionsL2 } from 'viem/zksync'

export const walletClient = createWalletClient({
  account: privateKeyToAccount('0x...'),
  transport: custom(window.ethereum)
}).extend(publicActionsL2())

----------------------------------------

TITLE: Using message Parameter Instead of data in signMessage
DESCRIPTION: Example showing the parameter rename from data to message in the signMessage function. This change aligns the parameter naming with its semantic meaning in the context of message signing.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_14

LANGUAGE: typescript
CODE:
walletClient.signMessage({
  data: 'hello world', // [!code --]
  message: 'hello world', // [!code ++]
})

----------------------------------------

TITLE: Using waitForNextL2Output with L2 Block Number Parameter in TypeScript
DESCRIPTION: Example showing how to specify the L2 block number parameter when using waitForNextL2Output. This code waits for the next L2 output after block 69420.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const output = await publicClientL1.waitForNextL2Output({ 
  l2BlockNumber: 69420n,
  targetChain: optimism, 
})

----------------------------------------

TITLE: Setting Account Nonce Example
DESCRIPTION: Example showing how to set an account nonce using the testClient in Viem. Demonstrates setting a specific nonce value for a given Ethereum address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNonce.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.setNonce({
  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  nonce: 420
})

----------------------------------------

TITLE: Basic Function Result Encoding in TypeScript
DESCRIPTION: Example showing how to encode a simple function result using encodeFunctionResult with a basic ABI definition.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionResult.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { encodeFunctionResult } from 'viem';
import { wagmiAbi } from './abi.ts'

const data = encodeFunctionResult({
  abi: wagmiAbi,
  functionName: 'ownerOf',
  value: ['0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'],
});
// '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac'

----------------------------------------

TITLE: Creating an Access List with Block Number
DESCRIPTION: Shows how to create an access list for a specific block number using the createAccessList function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/createAccessList.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { parseEther } from 'viem'

const result = await publicClient.createAccessList({
  blockNumber: 15121123n,
  data: '0xdeadbeef',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
})

----------------------------------------

TITLE: Increasing Time Example in Viem Test Client
DESCRIPTION: Example showing how to increase time by a specified number of seconds using the Viem test client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/increaseTime.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.increaseTime({
  seconds: 420,
})

----------------------------------------

TITLE: Domain Parameter Example
DESCRIPTION: Shows the structure of the domain parameter which includes name, version, chainId, and verifying contract address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashTypedData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const hash = hashTypedData({
  domain: {
    name: 'Ether Mail',
    version: '1',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
  },
  types,
  primaryType: 'Mail',
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
})

----------------------------------------

TITLE: Configuring watchBlockNumber with emitMissed Option in TypeScript
DESCRIPTION: Demonstrates how to use the emitMissed option when calling watchBlockNumber. This option determines whether to emit missed block numbers to the callback.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/watchBlockNumber.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const unwatch = publicClient.watchBlockNumber(
  { 
    emitMissed: true,
    onBlockNumber: blockNumber => console.log(blockNumber),
  }
)

----------------------------------------

TITLE: getFeeHistory with Block Number
DESCRIPTION: Example showing getFeeHistory usage with a specific block number parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getFeeHistory.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const feeHistory = await publicClient.getFeeHistory({
  blockCount: 4,
  blockNumber: 1551231n,
  rewardPercentiles: [25, 75]
})

----------------------------------------

TITLE: Creating a Viem Test Client for Foundry in TypeScript
DESCRIPTION: This snippet shows how to create a test client using Viem for the Foundry development environment. It sets up the client with the Foundry chain, Anvil mode, and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBlockTimestampInterval.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Configuring Paymaster Client with Context in TypeScript
DESCRIPTION: Shows how to create a Paymaster Client and use it with the Bundler Client, including custom paymaster context. This is useful for adding paymaster-specific fields like policy IDs.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const paymasterClient = createPaymasterClient({
  transport: http('https://api.pimlico.io/v2/1/rpc?apikey={API_KEY}')
})

const hash = await bundlerClient.sendUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: paymasterClient,
  paymasterContext: { // [!code focus]
    policyId: 'abc123' // [!code focus]
  }, // [!code focus]
})

----------------------------------------

TITLE: Setting verificationGasLimit Parameter in User Operation
DESCRIPTION: Shows how to set the verificationGasLimit parameter which specifies the gas allocation for the verification step. This optional bigint parameter helps ensure sufficient gas for verification.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_12

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterStubData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  callGasLimit: 69420n,
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c',
  verificationGasLimit: 69420n
})

----------------------------------------

TITLE: ripemd160 with Bytes Output
DESCRIPTION: Example demonstrating ripemd160 usage with 'bytes' output format instead of default hex format.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/ripemd160.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { ripemd160 } from 'viem'

ripemd160(
  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33],
  'bytes'
)
// Uint8Array [132, 118, 238, 70, 49, 185, 179, 10, 194, 117, 75, 14, 224, 196, 126, 22, 29, 63, 114, 76]

----------------------------------------

TITLE: Configuration Setup for L1 and L2 Clients
DESCRIPTION: Demonstrates how to configure both L1 wallet client and L2 public client needed for deposit transactions, extending them with the appropriate OP Stack actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/depositTransaction.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, base } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

export const walletClientL1 = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

// JSON-RPC Account
export const [account] = await clientL1.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Setting Optional Chain Parameter for isWithdrawalFinalized in viem
DESCRIPTION: Example showing how to specify the optional chain parameter when checking a withdrawal transaction's finalization status on L1. This allows specifying a target chain different from the client's default chain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { zksync } from 'viem/chains' // [!code focus]

const hash = await client.isWithdrawalFinalized({
  chain: zksync, // [!code focus]
  client: zksyncClient,
  hash: '0x…',
})

----------------------------------------

TITLE: Customizing Account Index in Derivation Path
DESCRIPTION: Modify the account index in the derivation path (m/44'/60'/${accountIndex}'/0/0) when creating a mnemonic account to derive different private keys.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { mnemonicToAccount } from 'viem/accounts'
// ---cut---
const account = mnemonicToAccount(
  'legal winner thank year wave sausage worth useful legal winner thank yellow',
  {
    accountIndex: 1 // [!code focus]
  }
)

----------------------------------------

TITLE: Using getAllBalances Function in TypeScript
DESCRIPTION: This snippet demonstrates how to use the getAllBalances function from the viem library to retrieve all known balances for a given account. It imports necessary components from a config file and calls the function with an account parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getAllBalances.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client, account } from './config'

const balances = await client.getAllBalances({
  account
});

----------------------------------------

TITLE: Fetching Bridgehub Contract Address with viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use a configured viem client to retrieve the Bridgehub smart contract address in zkSync. It relies on a pre-configured client from a separate configuration file.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBridgehubContractAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { client } from './config'

const address = await client.getBridgehubContractAddress();

----------------------------------------

TITLE: Defining ABI for decodeFunctionData in TypeScript
DESCRIPTION: Example of defining an ABI (Application Binary Interface) for use with decodeFunctionData. It includes a totalSupply function definition.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/decodeFunctionData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  ...
] as const;

----------------------------------------

TITLE: Transaction Request Formatter Configuration
DESCRIPTION: Shows how to customize transaction request formatting with custom fields using defineTransactionRequest.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/formatters.md#2025-04-14_snippet_4

LANGUAGE: ts
CODE:
import { defineTransactionRequest, defineChain, hexToBigInt } from 'viem'

type RpcTransactionRequestOverrides = {
  secondaryFee: `0x${string}`
}
type TransactionRequestOverrides = {
  secondaryFee: bigint
}

const example = defineChain({
  /* ... */
  formatters: {
    transactionRequest: defineTransactionRequest({
      exclude: ['effectiveGasPrice'],
      format(args: TransactionRequestOverrides): 
        RpcTransactionRequestOverrides {
        return {
          secondaryFee: numberToHex(args.secondaryFee)
        }
      },
    }),
  },
})

const receipt = await client.getTransactionReceipt({ hash: '0x...' })
//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }

----------------------------------------

TITLE: Querying Block Transaction Count by Hash in TypeScript
DESCRIPTION: This example demonstrates how to use the getBlockTransactionCount function with a specific block hash parameter to get the transaction count for a particular block.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBlockTransactionCount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const count = await publicClient.getBlockTransactionCount({
  blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d'
})

----------------------------------------

TITLE: Parsing ERC-6492 Signature Example
DESCRIPTION: Demonstrates how to use parseErc6492Signature to extract address, data, and signature components from a hex-formatted ERC-6492 signature. Returns an object containing the parsed components.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseErc6492Signature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseErc6492Signature } from 'viem/utils'

const {
  address,
  data,
  signature,
} = parseErc6492Signature('0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492')

----------------------------------------

TITLE: Test Client Configuration Setup
DESCRIPTION: Configuration setup for creating a test client using Viem with Foundry chain and Anvil mode. Shows how to initialize the client with HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNonce.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Mining Blocks with Test Client
DESCRIPTION: Demonstrates how to mine a specified number of blocks using the test client. Shows basic usage of the mine function with block count parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/mine.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.mine({
  blocks: 1,
})

----------------------------------------

TITLE: Setting Sample Count for Ranking in Fallback Transport
DESCRIPTION: This example demonstrates how to set the number of samples used for ranking in fallback transports.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const transport = fallback([thirdweb, infura], {
  rank: {
    sampleCount: 10
  },
})

----------------------------------------

TITLE: Retrieving Supported EntryPoints from a Bundler in TypeScript
DESCRIPTION: Example of retrieving EntryPoints that a bundler supports using the getSupportedEntryPoints method. The function returns an array of address strings that represent the supported EntryPoints.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getSupportedEntryPoints.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { bundlerClient } from './client'

const entryPoints = await bundlerClient.getSupportedEntryPoints() // [!code focus:99]
// @log: ["0x0000000071727De22E5E9d8BAf0edAc6f37da032"]

----------------------------------------

TITLE: Defining Contract ABI in TypeScript
DESCRIPTION: This snippet shows how to define the ABI (Application Binary Interface) for a contract. The ABI includes function definitions that the contract exposes, including the 'mint' function used in the example.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalFee.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    name: "mint",
    outputs: [{ name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  ...
] as const;

----------------------------------------

TITLE: Configuring Public Clients for L1 and L2 with viem
DESCRIPTION: Setup code showing how to configure viem public clients for both Ethereum mainnet (L1) and Optimism (L2), extending the L1 client with OP Stack specific actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitToFinalize.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: custom(window.ethereum)
})

----------------------------------------

TITLE: toBytes with Size Option - TypeScript
DESCRIPTION: Shows how to use toBytes with size parameter to create fixed-size byte arrays
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
toBytes(
  'Hello world', 
  { size: 32 }
)
// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

----------------------------------------

TITLE: Local Account Configuration
DESCRIPTION: Demonstrates how to configure a wallet client using a local account with a private key for signing.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTypedData.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'

export const walletClient = createWalletClient({
  account: privateKeyToAccount('0x...'),
  transport: http()
})

----------------------------------------

TITLE: Creating Blockchain Snapshot with Viem Test Client in TypeScript
DESCRIPTION: This snippet demonstrates how to use the testClient to create a snapshot of the blockchain's current state. It imports the testClient from a separate file and calls the snapshot method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/snapshot.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

const id = await testClient.snapshot()

----------------------------------------

TITLE: Using waitForNextL2Output with Custom L2 Output Oracle Address in TypeScript
DESCRIPTION: Example demonstrating how to specify a custom L2 Output Oracle contract address when using waitForNextL2Output. When providing this address, the targetChain parameter becomes optional.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const output = await publicClientL1.waitForNextL2Output({
  l2BlockNumber,
  l2OutputOracleAddress: '0xbEb5Fc579115071764c7423A4f12eDde41f106Ed'
})

----------------------------------------

TITLE: Setting Next Block Timestamp using Viem Test Client in TypeScript
DESCRIPTION: This snippet demonstrates how to use the setNextBlockTimestamp function from a Viem test client to set the timestamp of the next block. It requires a configured test client and accepts a timestamp parameter as a BigInt.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNextBlockTimestamp.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.setNextBlockTimestamp({
  timestamp: 1671744314n
})

----------------------------------------

TITLE: Client Configuration Setup in TypeScript
DESCRIPTION: Setup code for creating a public client with mainnet configuration
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/waitForTransactionReceipt.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Setting Up Viem Client for OP Stack L1 Actions
DESCRIPTION: Configuration for creating a public client with OP Stack L1 actions extension. This setup is required before executing functions like estimateFinalizeWithdrawalGas.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateFinalizeWithdrawalGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

// JSON-RPC Account
export const [account] = await walletClientL1.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Public Client Setup for Fee Estimation
DESCRIPTION: Setup code showing how to create a public client instance with mainnet configuration for fee estimation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateMaxPriorityFeePerGas.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Importing parseCompactSignature from viem in TypeScript
DESCRIPTION: Shows how to import the parseCompactSignature function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseCompactSignature.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseCompactSignature } from 'viem'

----------------------------------------

TITLE: Enabling Test Node Logging with Viem
DESCRIPTION: Demonstrates how to enable or disable logging on a test node network using the testClient's setLoggingEnabled method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setLoggingEnabled.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.setLoggingEnabled(true)

----------------------------------------

TITLE: Computing Contract Addresses in Viem
DESCRIPTION: Demonstrates how to use viem's getContractAddress function to compute the address where a contract will be deployed, equivalent to ethers.js utils.getContractAddress method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_65

LANGUAGE: typescript
CODE:
import { getContractAddress } from 'viem'

const address = getContractAddress({ from: '0x...', nonce: 5 })

----------------------------------------

TITLE: User Operation with Account Hoisting Configuration
DESCRIPTION: Shows how to configure bundlerClient with a hoisted account to avoid passing the account parameter in each operation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const account = await toCoinbaseSmartAccount({
  client,
  owners: [privateKeyToAccount('0x...')],
})

export const bundlerClient = createBundlerClient({
  account,
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc')
})

----------------------------------------

TITLE: Setting Gas Limit for L2 Transaction Execution
DESCRIPTION: Demonstrates how to specify the gas limit parameter for transaction execution on the L2 chain, which is required for all deposit transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const gas = await client.estimateDepositTransactionGas({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  request: {
    gas: 21_000n, // [!code focus]
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  },
  targetChain: base,
})

----------------------------------------

TITLE: Using strict mode with slice function
DESCRIPTION: Shows how the strict option affects behavior when the end offset is at or beyond the bounds of the data, ensuring data integrity.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/slice.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
slice('0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678', 0, 20, { strict: true })
// [SliceOffsetOutOfBoundsError] Slice ending at offset "20" is out-of-bounds (size: 19).

slice('0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 0, 20, { strict: true })
// 0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC

----------------------------------------

TITLE: Basic Usage of pad Function with Hex Values and Byte Arrays
DESCRIPTION: Demonstrates the default behavior of the pad function, which pads a value with leading zeros up to 32 bytes (64 hex chars) for both hex strings and byte arrays.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/pad.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { pad } from 'viem'

pad('0xa4e12a45')
// 0x00000000000000000000000000000000000000000000000000000000a4e12a45

pad(new Uint8Array([1, 122, 51, 123]))
// Uint8Array [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,122,51,123]

----------------------------------------

TITLE: Setting Mining Interval Example
DESCRIPTION: Example showing how to set up automatic mining intervals using the testClient. Sets the mining interval to 5 seconds.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setIntervalMining.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.setIntervalMining({
  interval: 5
})

----------------------------------------

TITLE: Using getL2TokenAddress with Optional Custom Bridge Address
DESCRIPTION: Example showing how to call getL2TokenAddress with both the token parameter and the optional bridgeAddress parameter for using a custom bridge.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL2TokenAddress.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const address = await client.getL2TokenAddress({
    token: '0x5C221E77624690fff6dd741493D735a17716c26B',
    bridgeAddress: '0xf8c919286126ccf2e8abc362a15158a461429c82' // [!code focus]
})

----------------------------------------

TITLE: Configuring viem Client for zkSync in TypeScript
DESCRIPTION: This snippet shows how to configure a viem public client for interacting with the zkSync network. It imports necessary functions and types from viem and viem/zksync, sets up the client with the zkSync chain, and extends it with zkSync-specific actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getBridgehubContractAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

----------------------------------------

TITLE: Specifying Target L2 Chain for Deposit
DESCRIPTION: Example showing how to specify the target L2 chain for the deposit transaction, which determines which L2 network will execute the transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { mainnet } from 'viem/chains'

const gas = await client.estimateDepositTransactionGas({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  request: {
    gas: 21_000n,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
    value: parseEther('1')
  },
  chain: mainnet,
  targetChain: base, // [!code focus]
})

----------------------------------------

TITLE: Setting Retry Count for IPC Transport in TypeScript
DESCRIPTION: This example shows how to set the maximum number of retry attempts for failed requests in the IPC Transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
const transport = ipc('/tmp/reth.ipc', {
  retryCount: 5, // [!code focus]
})

----------------------------------------

TITLE: Using toFunctionSignature with Different Input Types
DESCRIPTION: Demonstrates two ways to generate function signatures: using a string definition and using an AbiFunction object. The function accepts either format and returns a standardized signature string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionSignature.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toFunctionSignature } from 'viem'

// from function definition
const signature_1 = toFunctionSignature('function ownerOf(uint256 tokenId)')
// @log: Output: ownerOf(uint256)

// from an `AbiFunction` on your contract ABI
const signature_2 = toFunctionSignature({
  name: 'ownerOf',
  type: 'function',
  inputs: [{ name: 'tokenId', type: 'uint256' }],
  outputs: [],
  stateMutability: 'view',
})
// @log: Output: ownerOf(uint256)

----------------------------------------

TITLE: Using Optional callGasLimit Parameter with getPaymasterData
DESCRIPTION: Example showing how to include the optional callGasLimit parameter when retrieving paymaster data. This parameter specifies the amount of gas to allocate for the main execution call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  callGasLimit: 69420n, 
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'
})

----------------------------------------

TITLE: Using parseUnits to convert a string to bigint with decimal precision
DESCRIPTION: Demonstrates how to use the parseUnits function to convert a string value '420' with 9 decimal places of precision to a bigint value. The function multiplies the number by 10^9.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseUnits.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseUnits } from 'viem'

parseUnits('420', 9) // [!code focus:2]
// 420000000000n

----------------------------------------

TITLE: Configuration with Local Account Hoisting
DESCRIPTION: Shows how to configure the wallet client with a local account using privateKeyToAccount, allowing for simpler function calls without explicit account references.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { zksync } from 'viem/chains'
import { privateKeyToAccount } from 'viem/accounts'
import { publicActionsL2, walletActionsL1 } from 'viem/zksync'

export const zksyncClient = createPublicClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(publicActionsL2())

export const walletClient = createWalletClient({
  account: privateKeyToAccount('0x...'), 
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

----------------------------------------

TITLE: Configuring Stability Weight in Fallback Transport Ranking
DESCRIPTION: This snippet shows how to configure the weight applied to the stability score in fallback transport ranking.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
const transport = fallback([thirdweb, infura], {
  rank: {
    weights: {
      latency: 0.4,
      stability: 0.6
    }
  },
})

----------------------------------------

TITLE: Parsing ABI Items in Ethers
DESCRIPTION: Shows how to use ethers.js utils.Fragment.from to parse an individual ABI function signature. This creates a Fragment object representing a single function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_34

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'

const fragment = utils.Fragment.from('function balanceOf(address owner) view returns (uint)')

----------------------------------------

TITLE: Initializing Nexus Smart Account
DESCRIPTION: Example of creating a Nexus Smart Account instance using toNexusSmartAccount with required client and owner parameters
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toNexusSmartAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toNexusSmartAccount } from 'permissionless/accounts'
import { client } from './client.js'
import { owner } from './owner.js'

const account = await toNexusSmartAccount({
  client,
  owners: [owner],
  version: '1.0.0'
})

----------------------------------------

TITLE: Configuring Clients and Accounts for zkSync Deposits
DESCRIPTION: Sets up the necessary clients and accounts for interacting with zkSync L1 and L2. It creates public and wallet clients, extends them with specific actions, and demonstrates how to use both JSON-RPC and local accounts.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deposit.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, createPublicClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { zksync, mainnet } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/zksync'

export const zksyncClient = createPublicClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(publicActionsL2())

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Defining Contract ABI and Address in TypeScript
DESCRIPTION: This snippet defines the ABI (Application Binary Interface) for a smart contract and its address. The ABI includes two functions: 'initialize' and 'ping'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
export const abi = [
  {
    "type": "function",
    "name": "initialize",
    "inputs": [],
    "outputs": [],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "ping",
    "inputs": [],
    "outputs": [],
    "stateMutability": "pure"
  },
] as const

export const contractAddress = '0x...'

----------------------------------------

TITLE: Configuring Viem Client with ERC-7821 Actions
DESCRIPTION: Sets up a Viem client with ERC-7821 actions, creating a private key account and configuring the client with the mainnet chain and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/executeBatches.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { erc7821Actions } from 'viem/experimental'

export const account = privateKeyToAccount('0x...')

export const client = createClient({
  chain: mainnet,
  transport: http(),
}).extend(erc7821Actions())

----------------------------------------

TITLE: Creating TestClient for Ethereum Interactions in TypeScript
DESCRIPTION: This code snippet shows how to create a testClient using the viem library. It configures the client with the Foundry chain, Anvil mode, and HTTP transport. This client can be used for various Ethereum test operations, including setting storage values.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setStorageAt.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: JSON-RPC Account Configuration
DESCRIPTION: Example showing how to configure wallet client with a JSON-RPC account retrieved from an EIP-712 provider.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/writeContract.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { eip712WalletActions } from 'viem/zksync'

const [account] = await window.ethereum.request({
  method: 'eth_requestAccounts'
})

export const walletClient = createWalletClient({
  account,
  transport: custom(window.ethereum)
}).extend(eip712WalletActions())

----------------------------------------

TITLE: Contract Interaction Batch Transaction
DESCRIPTION: Example showing how to batch multiple contract interactions including function calls with parameters using ABI definitions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/sendCalls.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { parseAbi } from 'viem'
import { walletClient } from './config'

const abi = parseAbi([
  'function approve(address, uint256) returns (bool)',
  'function transferFrom(address, address, uint256) returns (bool)',
])
 
const { id } = await walletClient.sendCalls({
  calls: [
    {
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
      value: parseEther('1')
    },
    {
      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'approve',
      args: [
        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
        100n
      ],
    },
    {
      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
      abi,
      functionName: 'transferFrom',
      args: [
        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
        '0x0000000000000000000000000000000000000000',
        100n
      ],
    },
  ],
})

----------------------------------------

TITLE: Setting Custom Salt for Smart Account Deployment
DESCRIPTION: Example showing how to specify a custom salt value for smart account deployment
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const account = await toSoladySmartAccount({
  client,
  owner,
  salt: '0x5',
})

----------------------------------------

TITLE: Configuring Viem Test Client for Foundry in TypeScript
DESCRIPTION: This code snippet shows how to create and configure a Viem test client for use with the Foundry development environment. It sets up the client with the Foundry chain, Anvil mode, and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNextBlockTimestamp.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Using Account Hoisting with finalizeWithdrawal
DESCRIPTION: Example showing how to use finalizeWithdrawal with an account hoisted on the wallet client, which removes the need to pass the account parameter repeatedly.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/finalizeWithdrawal.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { walletClient, zksyncClient } from './config'
 
const hash = await walletClient.finalizeWithdrawal({
  client: zksyncClient,
  hash: '0x…',
})

----------------------------------------

TITLE: Using ENS Name Hashing Function
DESCRIPTION: Demonstrates how to hash an ENS name using the namehash function, showing both the input and resulting hash output.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/utilities/namehash.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { namehash, normalize } from 'viem/ens'

namehash('wevm.eth')
// '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'

----------------------------------------

TITLE: Using the token Parameter with getL1TokenBalance in TypeScript
DESCRIPTION: Example showing how to specify the token address parameter when retrieving an L1 token balance. This parameter defines which token's balance will be checked.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenBalance.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const balance = await publicClient.getL1TokenBalance({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  blockTag: 'latest',
  token: '0x5C221E77624690fff6dd741493D735a17716c26B', // [!code focus]
})

----------------------------------------

TITLE: Static Contract Call with Ethers.js
DESCRIPTION: How to perform a static call on a contract method using Ethers.js. This uses callStatic to simulate a contract call without sending a transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_24

LANGUAGE: typescript
CODE:
import { getDefaultProvider } from 'ethers'
import { wagmiContractConfig } from './abi'

const provider = getDefaultProvider()

const { abi, address } = wagmiContractConfig
const contract = new Contract(address, abi, provider)
await contract.callStatic.mint()

----------------------------------------

TITLE: Specifying Chain ID Parameter for getCapabilities in viem
DESCRIPTION: Demonstrates how to specify a chain ID when calling getCapabilities to get capabilities for a specific blockchain network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
// ---cut---
const capabilities = await walletClient.getCapabilities({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  chainId: 8453, // [!code focus]
})

----------------------------------------

TITLE: Creating Test Client for Viem with Foundry Chain (TypeScript)
DESCRIPTION: This code snippet shows how to create a test client using Viem library. It configures the client with the Foundry chain, Anvil mode, and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setCoinbase.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Using blobsToCommitments with KZG Setup
DESCRIPTION: Demonstrates how to use blobsToCommitments function with KZG implementation to compute commitments from blobs. Includes the main usage example and KZG setup code.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToCommitments.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { blobsToCommitments, toBlobs } from 'viem'
import { kzg } from './kzg'

const blobs = toBlobs({ data: '0x1234' })
const commitments = blobsToCommitments({ blobs, kzg })

LANGUAGE: typescript
CODE:
import * as cKzg from 'c-kzg'
import { setupKzg } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

export const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)

----------------------------------------

TITLE: Creating an Owner Account from a Private Key
DESCRIPTION: Example of creating an owner account from a private key using viem's privateKeyToAccount function. This owner account is used to control the Smart Account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSimpleSmartAccount.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
 
export const owner = privateKeyToAccount('0x...')

----------------------------------------

TITLE: Specifying Log Data for Event Parsing in viem
DESCRIPTION: Shows how to structure the logs parameter for the parseEventLogs function. The logs array contains objects with blockNumber, data, logIndex, and topics properties that represent the raw event data from the blockchain.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/parseEventLogs.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const topics = parseEventLogs({
  abi: wagmiAbi,
  logs: [{ // [!code focus]
    blockNumber: 69420n, // [!code focus]
    data: '0x0000000000000000000000000000000000000000000000000000000000000001', // [!code focus]
    logIndex: 1, // [!code focus]
    topics: [ // [!code focus]
      '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0',  // [!code focus]
      '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]
      '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8' // [!code focus]
    ] // [!code focus]
    // ... // [!code focus]
  }] // [!code focus]
})

----------------------------------------

TITLE: Using the from parameter with getContractAddress
DESCRIPTION: Shows how to specify the deployment address using the from parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
getContractAddress({
  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',
  nonce: 69420n
})

----------------------------------------

TITLE: Configuring Wallet Client with ERC-7739 Actions
DESCRIPTION: This code snippet demonstrates how to configure a wallet client with ERC-7739 actions. It shows the setup for both JSON-RPC and Local accounts, including the creation of the wallet client and extension with ERC-7739 actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signTypedData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'
import { erc7739Actions } from 'viem/experimental'

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: http(),
}).extend(erc7739Actions())

export const [account] = await walletClient.getAddresses()
// @log: ↑ JSON-RPC Account

// export const account = privateKeyToAccount(...)
// @log: ↑ Local Account

----------------------------------------

TITLE: Setting Maximum Fee Per Gas for L1 Transaction
DESCRIPTION: Example showing how to set the maximum fee per gas for the L1 transaction using the maxFeePerGas parameter for EIP-1559 transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
const gas = await client.estimateDepositTransactionGas({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  request: {
    gas: 21_000n,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
    value: parseEther('1')
  },
  maxFeePerGas: parseGwei('20'),  // [!code focus]
  targetChain: base,
})

----------------------------------------

TITLE: Configuring Public Clients for OP Stack Operations
DESCRIPTION: Configuration setup for creating public clients for both L1 (Ethereum mainnet) and L2 (Optimism) chains. The L1 client is extended with publicActionsL1 to support OP Stack operations like waitToProve.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitToProve.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())
export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
})

----------------------------------------

TITLE: Configuring ZkSync Client with Viem
DESCRIPTION: Shows how to create and configure a public client for ZkSync L2 network using viem. This includes setting up the chain, transport method, and extending the client with ZkSync-specific public actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getTransactionDetails.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

----------------------------------------

TITLE: Configuring Ranking Options in Fallback Transport
DESCRIPTION: This example demonstrates how to customize the ranking configuration for fallback transports, including interval, sample count, timeout, and weights.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const client = createPublicClient({
  chain: mainnet,
  transport: fallback(
    [
      http('https://1.rpc.thirdweb.com/...'), 
      http('https://mainnet.infura.io/v3/...') 
    ],
    {
      rank: {
        interval: 60_000,
        sampleCount: 5,
        timeout: 500,
        weights: {
          latency: 0.3,
          stability: 0.7
        }
      }
    }
  ),
})

----------------------------------------

TITLE: Setting Custom Key for IPC Transport in TypeScript
DESCRIPTION: This example demonstrates how to set a custom key for the IPC Transport when creating it.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const transport = ipc('/tmp/reth.ipc', { 
  key: 'reth-ipc',  // [!code focus]
})

----------------------------------------

TITLE: Account Hoisted requestExecute Example
DESCRIPTION: Shows how to use requestExecute with an account hoisted on the wallet client, eliminating the need to pass the account parameter with each call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { walletClient, zksyncClient } from './config'
 
const hash = await walletClient.requestExecute({
  client: zksyncClient,
  contractAddress: await zksyncClient.getBridgehubContractAddress(),
  calldata: '0x',
  l2Value: 7_000_000_000n,
  l2GasLimit: 900_000n
})

----------------------------------------

TITLE: Basic WebSocket Transport Configuration
DESCRIPTION: Simple example of creating a WebSocket transport with a URL.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://1.rpc.thirdweb.com/...')

----------------------------------------

TITLE: JSON-RPC Account Configuration
DESCRIPTION: Shows how to configure a wallet client using a JSON-RPC account from an EIP-1193 provider like MetaMask.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/signTypedData.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
})

export const walletClient = createWalletClient({
  account,
  transport: custom(window.ethereum!)
})

----------------------------------------

TITLE: toBlobs with Data Parameter
DESCRIPTION: Shows how to use toBlobs function with the data parameter specified as hex string
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobs.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { toBlobs } from 'viem'

const blobs = toBlobs({ 
  data: '0x...' 
})

----------------------------------------

TITLE: Configuring Owner for Smart Account
DESCRIPTION: Example showing how to set the owner parameter using a private key account
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSoladySmartAccount.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const account = await toSoladySmartAccount({
  client,
  owner: privateKeyToAccount('0x...'),
})

----------------------------------------

TITLE: Migrating from getAccount to toAccount for Local Accounts
DESCRIPTION: Demonstrates how to replace the deprecated getAccount function with toAccount for local account implementations where custom signing functions are used.
SOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_26

LANGUAGE: diff
CODE:
- import { createWalletClient, http, getAccount } from 'viem'
+ import { createWalletClient, http } from 'viem'
+ import { toAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'
import { getAddress, signMessage, signTransaction } from './sign-utils'

const privateKey = '0x...'
- const account = getAccount({
+ const account = toAccount({
  address: getAddress(privateKey),
  signMessage(message) {
    return signMessage(message, privateKey)
  },
  signTransaction(transaction) {
    return signTransaction(transaction, privateKey)
  },
  signTypedData(typedData) {
    return signTypedData(typedData, privateKey)
  }
})

const client = createWalletClient({
  account,
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Configuring Chain at Client Level for Transaction Actions in viem
DESCRIPTION: Example showing how to hoist a Chain on the WalletClient for transaction actions like sendTransaction, which now require a chain parameter. The Chain is specified during client initialization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/migration-guide.mdx#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { createWalletClient, custom, getAccount } from 'viem'
import { mainnet } from 'viem/chains'

export const walletClient = createWalletClient({
  chain: mainnet, // [!code ++]
  transport: custom(window.ethereum)
})
 
const account = getAccount('0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266')
 
const hash = await walletClient.sendTransaction({ 
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n
})

----------------------------------------

TITLE: Setting maxPriorityFeePerGas in Ethereum Transaction
DESCRIPTION: Demonstrates how to set the max priority fee per gas (in wei) for an EIP-1559 transaction using parseGwei utility. The example shows a transaction call with maxPriorityFeePerGas set to 2 gwei.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_17

LANGUAGE: typescript
CODE:
import { parseGwei } from 'viem'

const data = await publicClient.call({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Client Setup Configuration in TypeScript
DESCRIPTION: Configuration setup for creating public and wallet clients using Viem, including chain and transport configurations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const walletClient = createWalletClient({
  transport: custom(window.ethereum!)
})

export const [account] = await walletClient.getAddresses()

----------------------------------------

TITLE: Using boolToHex Function
DESCRIPTION: Shows how to use the boolToHex shortcut function for encoding boolean values to hex, with and without size options.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { boolToHex } from 'viem'

boolToHex(true)
// "0x1"

boolToHex(true, { size: 32 })
// "0x0000000000000000000000000000000000000000000000000000000000000001"

----------------------------------------

TITLE: Importing publicActionsL2 Extension for OP Stack in TypeScript
DESCRIPTION: This example shows how to import the 'publicActionsL2' extension, which provides a suite of Public Actions for development with Layer 2 (OP Stack) chains.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/client.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { publicActionsL2 } from 'viem/op-stack'

----------------------------------------

TITLE: Message Recovery with Explicit Signature in viem
DESCRIPTION: This code snippet focuses on the signature parameter for the recoverMessageAddress function. It demonstrates providing a hexadecimal signature string along with a message to recover the original signing address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/recoverMessageAddress.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const address = await recoverMessageAddress({ 
  message: 'hello world',
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c'
})

----------------------------------------

TITLE: Account Hoisting Configuration with Local Account
DESCRIPTION: Configuration example showing how to hoist a local account using private key for wallet client setup.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/sendTransaction.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { eip712Actions } from 'viem/zksync'

export const walletClient = createWalletClient({
  account: privateKeyToAccount('0x...'),
  transport: custom(window.ethereum)
}).extend(eip712WalletActions())

----------------------------------------

TITLE: Contract Instance with Ethers.js
DESCRIPTION: Creating and using a contract instance with Ethers.js. This shows how to initialize a contract instance and use various methods like reading data and subscribing to events.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_26

LANGUAGE: typescript
CODE:
import { getDefaultProvider } from 'ethers'
import { wagmiContractConfig } from './abi'

const provider = getDefaultProvider()

const { abi, address } = wagmiContractConfig
const contract = new Contract(address, abi, provider)

const supply = await contract.totalSupply()
const listener = (from, to, amount, event) => {
  // ...
}
contract.on('Transfer', listener)
contract.off('Transfer', listener)

----------------------------------------

TITLE: hexToBytes Function Usage - TypeScript
DESCRIPTION: Demonstrates using the hexToBytes function to convert hex strings to byte arrays
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBytes.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { hexToBytes } from 'viem'

hexToBytes('0x48656c6c6f20576f726c6421')
// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])

hexToBytes('0x48656c6c6f20576f726c6421', { size: 32 })
// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

----------------------------------------

TITLE: Creating an Owner Account from Private Key
DESCRIPTION: Example of creating an owner account from a private key using Viem's privateKeyToAccount function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toLightSmartAccount.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'
 
export const owner = privateKeyToAccount('0x...')

----------------------------------------

TITLE: Account Hoisting for zkSync Withdrawals
DESCRIPTION: Demonstrates how to withdraw tokens without explicitly passing the account parameter in each call by hoisting the account on the wallet client configuration.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/withdraw.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
import { legacyEthAddress } from 'viem/zksync'
 
const hash = await walletClient.withdraw({
  amount: 1_000_000_000_000_000_000n,
  token: legacyEthAddress,  
})
// '0x...'

----------------------------------------

TITLE: Setting Paymaster Verification Gas Limit in User Operation
DESCRIPTION: Shows how to set the paymasterVerificationGasLimit parameter when signing a user operation. This parameter defines the gas amount allocated for paymaster validation code.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const signature = await account.signUserOperation({
  callData: '0xdeadbeef',
  callGasLimit: 141653n,
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 15000000000n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  paymaster: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  paymasterData: '0xdeadbeef',
  paymasterPostOpGasLimit: 69420n,
  paymasterVerificationGasLimit: 69420n,
  preVerificationGas: 53438n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  verificationGasLimit: 259350n,
})

----------------------------------------

TITLE: Basic toBlobs Usage
DESCRIPTION: Demonstrates basic usage of toBlobs function to transform hex data into blobs
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobs.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toBlobs } from 'viem'

const blobs = toBlobs({ data: '0x...' })

----------------------------------------

TITLE: Setting Next Block Base Fee Per Gas with Viem in TypeScript
DESCRIPTION: This snippet demonstrates how to use the setNextBlockBaseFeePerGas function from the testClient to set the base fee for the next block. It uses the parseGwei function to convert the fee from Gwei to Wei.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNextBlockBaseFeePerGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseGwei } from 'viem'
import { testClient } from './client'
 
await testClient.setNextBlockBaseFeePerGas({
  baseFeePerGas: parseGwei('20')
})

----------------------------------------

TITLE: Specifying Legacy Transaction Type in TypeScript
DESCRIPTION: Shows how to specify a legacy transaction type when estimating fees per gas. This returns a gasPrice estimate instead of maxFeePerGas and maxPriorityFeePerGas.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateFeesPerGas.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const { gasPrice } = await publicClient.estimateFeesPerGas({
  type: 'legacy' // [!code focus]
})

----------------------------------------

TITLE: ZKsync Smart Account Private Key Parameter Example
DESCRIPTION: Shows how to specify the private key parameter when creating a ZKsync Smart Account. The private key parameter represents the owner's private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSinglesigSmartAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const account = toSinglesigSmartAccount({
  address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', 
  privateKey: '0x...'
})

----------------------------------------

TITLE: Setting sender for User Operation in TypeScript
DESCRIPTION: Shows how to set the sender address for the User Operation when calling getPaymasterData. This parameter is required and of type Address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  callGasLimit: 69420n,
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  preVerificationGas: 69420n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f', // [!code focus]
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'
})

----------------------------------------

TITLE: Importing size function from viem library in TypeScript
DESCRIPTION: Shows how to import the 'size' function from the viem library. This is a prerequisite step for using the function in your TypeScript code.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/size.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { size } from 'viem'

----------------------------------------

TITLE: Retrieving Token Balance on L1 Network using TypeScript
DESCRIPTION: This snippet demonstrates how to use the getL1Balance function to retrieve the balance of a specific token for an account on the L1 network.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1Balance.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const balance = await publicClient.getL1Balance({
  account
  token: '0x5C221E77624690fff6dd741493D735a17716c26B',
})

----------------------------------------

TITLE: Importing blobsToCommitments Function
DESCRIPTION: Shows how to import the blobsToCommitments function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToCommitments.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { blobsToCommitments } from 'viem'

----------------------------------------

TITLE: Setting changeIndex in hdKeyToAccount
DESCRIPTION: Example showing how to specify the changeIndex option when creating an HD Account, which affects the change index used in the derivation path (m/44'/60'/0'/${changeIndex}/0).
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
// @noErrors
import { hdKeyToAccount } from 'viem/accounts'
// ---cut---
const hdKey = HDKey.fromMasterSeed(...)

const account = hdKeyToAccount(
  hdKey,
  {
    accountIndex: 1,
    addressIndex: 6,
    changeIndex: 2 // [!code focus]
  }
)

----------------------------------------

TITLE: Using Optional Index Parameter for isWithdrawalFinalized in viem
DESCRIPTION: Example showing how to specify the optional index parameter when checking finalization status for multiple withdrawals within a single transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/isWithdrawalFinalized.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const hash = await client.isWithdrawalFinalized({
  client: zksyncClient,
  hash: '0x…',
  index: 0n, // [!code focus]
})

----------------------------------------

TITLE: Estimating Gas for a Simple Transfer in TypeScript
DESCRIPTION: Demonstrates how to use the estimateGas function from a public client to estimate gas for a simple Ether transfer transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/estimateGas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const gas = await publicClient.estimateGas({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1')
})

----------------------------------------

TITLE: Including Viem via CDN in HTML
DESCRIPTION: Example of importing Viem directly from an ESM-compatible CDN (esm.sh) using a script tag in HTML. This method is useful when not using a package manager.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/installation.mdx#2025-04-14_snippet_1

LANGUAGE: html
CODE:
<script type="module">
  import { createClient } from 'https://esm.sh/viem'
</script>

----------------------------------------

TITLE: Configuration with JSON-RPC Account Hoisting
DESCRIPTION: Demonstrates how to configure the wallet client with a JSON-RPC account hoisted from an EIP-1193 provider, allowing simplified function calls.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/zksync'

export const zksyncClient = createPublicClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(publicActionsL2())

// Retrieve Account from an EIP-1193  Provider. 
const [account] = await window.ethereum.request({  
  method: 'eth_requestAccounts' 
}) 

export const walletClient = createWalletClient({
  account,
  transport: custom(window.ethereum) 
}).extend(walletActionsL1())

----------------------------------------

TITLE: Using Block Tag for Balance Retrieval in TypeScript
DESCRIPTION: This snippet demonstrates how to use a block tag when retrieving an account's balance. The balance will be fetched for the account at the specified block tag.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getBalance.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const balance = await publicClient.getBalance({
  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',
  blockTag: 'safe'
})

----------------------------------------

TITLE: Importing serializeTransaction from viem
DESCRIPTION: Shows how to import the serializeTransaction function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/serializeTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { serializeTransaction } from 'viem'

----------------------------------------

TITLE: Using opaqueDataToDepositData to parse deposit data
DESCRIPTION: Demonstrates how to convert a hex string into structured deposit data containing mint value, value, gas, isCreation flag, and data. The function extracts and parses these values from the provided opaque data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/opaqueDataToDepositData.md#2025-04-14_snippet_1

LANGUAGE: ts
CODE:
import { opaqueDataToDepositData } from "viem";

const opaqueData =
  "0x00000000000000000000000000000000000000000000000000470DE4DF82000000000000000000000000000000000000000000000000000000470DE4DF82000000000000000186A00001";

const depositData = opaqueDataToDepositData(opaqueData);
// {
//   mint: 20000000000000000n,
//   value: 20000000000000000n,
//   gas: 100000n,
//   isCreation: false,
//   data: '0x01',
// }

----------------------------------------

TITLE: Defining Contract ABI for Deployment in TypeScript
DESCRIPTION: Shows how to define a contract ABI for use in deployment. This example shows a simple constructor without arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/deployContract.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  ...
] as const;

----------------------------------------

TITLE: Configuration Setup for Wallet Client
DESCRIPTION: Configuration setup showing how to create a wallet client with ERC7715 actions support.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7715/grantPermissions.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import 'viem/window'
import { createWalletClient, custom } from 'viem'
import { mainnet } from 'viem/chains'
import { erc7715Actions } from 'viem/experimental'

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum!),
}).extend(erc7715Actions())

export const [account] = await walletClient.getAddresses()

----------------------------------------

TITLE: Waiting for Transaction Receipt on Ethereum L1 with Viem
DESCRIPTION: Code that shows how to execute a deposit transaction on Ethereum L1 and wait for the transaction receipt. This is necessary to confirm that the transaction was successfully processed on L1 before proceeding with L2 operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
// Import Viem Clients.
import { 
  account, 
  publicClientL1, 
  publicClientL2,
  walletClientL1 
} from './config'

// Build parameters for the transaction on the L2.
const args = await publicClientL2.buildDepositTransaction({
  mint: parseEther('1'),
  to: account.address,
})

// Execute the deposit transaction on the L1. 
const hash = await walletClientL1.depositTransaction(args) 

// Wait for the L1 transaction to be processed. 
const receipt = await publicClientL1.waitForTransactionReceipt({ hash })

----------------------------------------

TITLE: Configuring Viem Public Client
DESCRIPTION: Setup for creating a public client instance with mainnet configuration and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/getCode.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Using Direction Parameter with pad Function
DESCRIPTION: Shows how to use the 'dir' parameter to pad zeros to the right (trailing) instead of the default left (leading) padding.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/pad.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
pad('0xa4e12a45', {
  dir: 'right'
})
// 0xa4e12a4500000000000000000000000000000000000000000000000000000000

----------------------------------------

TITLE: Encoding Event Filter Topics in Ethers
DESCRIPTION: Shows how to use ethers.js Interface.encodeFilterTopics to encode event topics for filtering logs. This allows creating filters for specific event parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_44

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'
import { abi } from './abi'

const iface = new utils.Interface(abi);
const data = iface.encodeFilterTopics('Transfer', [
  null,
  '0x8ba1f109551bD432803012645Ac136ddd64DBA72'
])

----------------------------------------

TITLE: JSON-RPC Account Configuration for Cross-Chain Operations
DESCRIPTION: Configuration for a JSON-RPC based account setup that enables cross-chain operations between Ethereum Mainnet and Optimism. This setup uses an EIP-1193 provider like MetaMask and extends clients with specialized actions for the OP Stack.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
// Import Viem modules.
import { createPublicClient, createWalletClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

// Retrieve Account from an EIP-1193 Provider. 
export const [account] = await window.ethereum.request({ 
  method: 'eth_requestAccounts' 
}) 

export const clientL1 = createClient({
  account, 
  chain: mainnet,
  transport: fallback([custom(window.ethereum), http()])
})
  .extend(publicActions)
  .extend(walletActionsL1())

export const clientL2 = createClient({
  chain: optimism,
  transport: http()
})
  .extend(publicActions)
  .extend(publicActionsL2())

----------------------------------------

TITLE: Configuration Setup for OP Stack Clients in TypeScript
DESCRIPTION: Configuration for creating public clients for both L1 (Ethereum mainnet) and L2 (Optimism) chains. The L1 client is extended with publicActionsL1 to support OP Stack specific actions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/waitForNextL2Output.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())
export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
})

----------------------------------------

TITLE: Creating a Viem Test Client in TypeScript
DESCRIPTION: This snippet shows how to create a testClient instance using the Viem library. It configures the client with the Foundry chain, Anvil mode, and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setBalance.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Public Client Configuration for ENS Resolution
DESCRIPTION: Setup code showing how to configure the viem public client for ENS resolution on the Ethereum mainnet.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Creating ZKsync Smart Account with toSmartAccount Function in TypeScript
DESCRIPTION: This snippet demonstrates how to create a ZKsync Smart Account using the toSmartAccount function. It requires an address and a custom sign function as parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/accounts/toSmartAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toSmartAccount } from 'viem/zksync'

const account = toSmartAccount({
  address: '0xf39Fd6e51aad8F6F4ce6aB8827279cffFb92266', 
  async sign({ hash }) {
    // ... signing logic
    return '0x...'
  }
})

----------------------------------------

TITLE: Specifying Block Number Parameter for getRawBlockTransaction
DESCRIPTION: Example showing how to specify the block number parameter when using getRawBlockTransaction. The block number indicates which block's transaction data should be retrieved.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getRawBlockTransactions.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const rawTx = await client.getRawBlockTransaction({
  number: 1  // [!code focus]
});

----------------------------------------

TITLE: Viem Public Client Setup
DESCRIPTION: Configuration for creating a Viem public client instance connected to the Ethereum mainnet.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/createContractEventFilter.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Using isAddressEqual Function to Compare Ethereum Addresses in TypeScript
DESCRIPTION: Demonstrates how to use the isAddressEqual function to compare two Ethereum addresses. The function returns a boolean indicating whether the addresses are equal, ignoring case differences in checksummed addresses.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isAddressEqual.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { isAddressEqual } from 'viem'

isAddressEqual('0xa5cc3c03994db5b0d9a5eEdD10Cabab0813678ac', '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC')
// true

----------------------------------------

TITLE: Installing toEventSelector from viem in TypeScript
DESCRIPTION: Shows how to import the toEventSelector function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventSelector.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toEventSelector } from 'viem'

----------------------------------------

TITLE: WebSocket Transport with Custom Key
DESCRIPTION: Setting a custom key for the WebSocket transport instance.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/websocket.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const transport = webSocket('wss://1.rpc.thirdweb.com/...', { 
  key: 'alchemy',
})

----------------------------------------

TITLE: Reset with JSON RPC URL Parameter
DESCRIPTION: Example of resetting a fork with a specific JSON RPC URL endpoint.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/reset.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
await testClient.reset({
  blockNumber: 69420n,
  jsonRpcUrl: 'https://1.rpc.thirdweb.com'
})

----------------------------------------

TITLE: Preparing Transaction Request with Custom Nonce in TypeScript
DESCRIPTION: Demonstrates how to prepare a transaction request with a specified nonce value. The example shows setting a custom nonce of 69 along with a destination address and transaction value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/wallet/prepareTransactionRequest.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const request = await walletClient.prepareTransactionRequest({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: 1000000000000000000n,
  nonce: 69
})

----------------------------------------

TITLE: Paymaster Client with Context Configuration
DESCRIPTION: Shows how to create and use a Paymaster client with custom context data for gas estimation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const paymasterClient = createPaymasterClient({
  transport: http('https://public.pimlico.io/v2/11155111/rpc')
})

const hash = await bundlerClient.estimateUserOperationGas({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: paymasterClient,
  paymasterContext: {
    policyId: 'abc123'
  },
})

----------------------------------------

TITLE: Importing toBlobSidecars Function
DESCRIPTION: Shows how to import the toBlobSidecars function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobSidecars.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toBlobSidecars } from 'viem'

----------------------------------------

TITLE: Using getL2HashFromPriorityOp with transaction receipt parameter
DESCRIPTION: Shows how to use the getL2HashFromPriorityOp function with focus on the transaction receipt parameter, which contains information about the L1 transaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/bridge/getL2HashFromPriorityOp.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const l2Hash = getL2HashFromPriorityOp(
  receipt, // [!code focus]
  '0x14b947814912c71bdbc3275c143a065d2ecafaba'
)

----------------------------------------

TITLE: Configuring Test Client with Custom RPC Schema
DESCRIPTION: Shows how to set up a test client with a custom RPC schema for specialized API methods.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/test.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { rpcSchema } from 'viem'

type CustomRpcSchema = [{
  Method: 'eth_wagmi',
  Parameters: [string]
  ReturnType: string
}]

const client = createTestClient({
  chain: foundry,
  rpcSchema: rpcSchema<CustomRpcSchema>(),
  transport: http()
})

const result = await client.request({
  method: 'eth_wa
  params: ['hello'],
})

----------------------------------------

TITLE: Specifying Account for getAllBalances
DESCRIPTION: This snippet demonstrates how to specify an account when calling the getAllBalances function. It uses a string address as the account parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getAllBalances.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const balances = await client.getAllBalances({
  account: "0x36615Cf349d7F6344891B1e7CA7C72883F5dc049"
});

----------------------------------------

TITLE: Importing extractWithdrawalMessageLogs Function
DESCRIPTION: Shows how to import the extractWithdrawalMessageLogs function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/extractWithdrawalMessageLogs.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { extractWithdrawalMessageLogs } from 'viem'

----------------------------------------

TITLE: Signing UTF-8 Message with Private Key
DESCRIPTION: Shows how to sign a plain text UTF-8 message using a private key account. The message is automatically converted to its UTF-8 representation before signing.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signMessage.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { privateKeyToAccount } from 'viem/accounts'

const account = privateKeyToAccount('0x...')

const signature = await account.signMessage({
  message: 'hello world',
})

----------------------------------------

TITLE: Installing permissionless.js Package
DESCRIPTION: Different package manager commands to install the permissionless library which is required for Trust Smart Wallet implementation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toTrustSmartAccount.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm add permissionless

LANGUAGE: bash
CODE:
npm install permissionless

LANGUAGE: bash
CODE:
yarn add permissionless

LANGUAGE: bash
CODE:
bun add permissionless

----------------------------------------

TITLE: Enabling Automatic Mining in Viem Test Client
DESCRIPTION: Example showing how to enable automatic mining of new blocks for transactions using the setAutomine function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setAutomine.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.setAutomine(true)

----------------------------------------

TITLE: Extending Wallet Client with Experimental Actions
DESCRIPTION: Demonstrates how to extend a wallet client with experimental EIP-5792 actions for additional functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental.mdx#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { base } from 'viem/chains'
import { eip5792Actions } from 'viem/experimental'

const client = createWalletClient({
  chain: base,
  transport: custom(window.ethereum!),
}).extend(eip5792Actions())

----------------------------------------

TITLE: Simulating Contract Function Call with Nonce in TypeScript
DESCRIPTION: Demonstrates how to specify a nonce when simulating a contract function call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_17

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
  nonce: 69
})

----------------------------------------

TITLE: Specifying a Chain for the Bundler Client
DESCRIPTION: Demonstrates how to specify a blockchain chain when creating a Bundler Client. This parameter defines which network the bundler client will connect to.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/bundler.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem' 
import { createBundlerClient } from 'viem/account-abstraction'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

import { mainnet } from 'viem/chains' 

const bundlerClient = createBundlerClient({
  chain: mainnet, // [!code focus]
  transport: http('https://public.pimlico.io/v2/1/rpc')
})

----------------------------------------

TITLE: Querying Transaction Pool Content with Viem
DESCRIPTION: Example showing how to retrieve transaction pool content using a test client. Returns details of pending and scheduled transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/getTxpoolContent.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

const content = await testClient.getTxpoolContent()

----------------------------------------

TITLE: Installing toFunctionSignature from viem
DESCRIPTION: Shows how to import the toFunctionSignature function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toFunctionSignature.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toFunctionSignature } from 'viem'

----------------------------------------

TITLE: Importing isErc6492Signature utility from viem
DESCRIPTION: Shows how to import the isErc6492Signature utility function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isErc6492Signature.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { isErc6492Signature } from 'viem/utils'

----------------------------------------

TITLE: Installing permissionless.js library
DESCRIPTION: Command line instructions for installing the permissionless.js library using different package managers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toLightSmartAccount.md#2025-04-14_snippet_0

LANGUAGE: bash
CODE:
pnpm add permissionless

LANGUAGE: bash
CODE:
npm install permissionless

LANGUAGE: bash
CODE:
yarn add permissionless

LANGUAGE: bash
CODE:
bun add permissionless

----------------------------------------

TITLE: Setting Nonce Parameter Example
DESCRIPTION: Example showing the nonce parameter usage in setNonce function. Demonstrates setting a specific nonce value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNonce.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
await testClient.setNonce({
  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  nonce: 420
})

----------------------------------------

TITLE: Importing defineKzg Function in TypeScript
DESCRIPTION: Shows how to import the defineKzg function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/defineKzg.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { defineKzg } from 'viem'

----------------------------------------

TITLE: Getting Function Signature Hash in Viem
DESCRIPTION: Demonstrates how to use viem's toFunctionHash function to get the function selector (4-byte signature) for a function, equivalent to ethers.js Interface.getSighash method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_59

LANGUAGE: typescript
CODE:
import { toFunctionHash } from 'viem'

const hash = toFunctionHash('function ownerOf(uint256)')

----------------------------------------

TITLE: Installing KZG Dependencies
DESCRIPTION: Commands for installing KZG bindings (c-kzg or kzg-wasm) using different package managers.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/guides/blob-transactions.md#2025-04-14_snippet_1

LANGUAGE: bash
CODE:
npm i c-kzg
# or
npm i kzg-wasm

----------------------------------------

TITLE: Demonstrating Type Narrowing for Block Return Types in TypeScript
DESCRIPTION: Example showing how block return types have been narrowed in viem 1.5.0 for better type safety. When includeTransactions is true, the transactions property is typed more specifically, and when blockTag is 'pending', certain properties are correctly typed as null.
SOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_17

LANGUAGE: typescript
CODE:
// Before
const block = publicClient.getBlock({ includeTransactions: true });
block.transactions;
//    ^? Hash[] | Transaction[]
block.transactions[0].blockNumber;
//                    ^? bigint | null

// After
const block = publicClient.getBlock({ includeTransactions: true });
block.transactions;
//    ^? Transaction[]
block.transactions[0].blockNumber;
//                    ^? bigint

// Before
const block = publicClient.getBlock({
  blockTag: "pending",
  includeTransactions: true,
});
block.number;
//    ^? number | null
block.transactions[0].blockNumber;
//                    ^? bigint | null

// After
const block = publicClient.getBlock({
  blockTag: "pending",
  includeTransactions: true,
});
block.number;
//    ^? null
block.transactions[0].blockNumber;
//                    ^? null

----------------------------------------

TITLE: Example of Using the transaction Parameter
DESCRIPTION: Demonstrates the transaction parameter usage with detailed transaction information for serialization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/serializeTransaction.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const serialized = serializeTransaction({
  chainId: 1,
  gas: 21001n,
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
  nonce: 69,
  to: '0x1234512345123451234512345123451234512345',
  value: parseEther('0.01'),
})

----------------------------------------

TITLE: Public Client Configuration for ENS
DESCRIPTION: Setup for creating a public client instance with mainnet configuration for ENS interactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsAvatar.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'

import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Importing getContractAddress from viem
DESCRIPTION: Shows how to import the getContractAddress function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getContractAddress } from 'viem'

----------------------------------------

TITLE: Using numberToHex Function
DESCRIPTION: Demonstrates the usage of the numberToHex shortcut function for encoding numbers and bigints to hex values, with and without size options.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toHex.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { numberToHex } from 'viem'

numberToHex(420)
// "0x1a4"

numberToHex(4206942069420694206942069420694206942069n)
// "0xc5cf39211876fb5e5884327fa56fc0b75"

numberToHex(420, { size: 32 })
// "0x00000000000000000000000000000000000000000000000000000000000001a4"

numberToHex(4206942069420694206942069420694206942069n, { size: 32 })
// "0x0000000000000000000000000000000c5cf39211876fb5e5884327fa56fc0b75"

----------------------------------------

TITLE: Configuring Viem Test Client
DESCRIPTION: Setup code for creating a test client instance with Foundry chain configuration and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/increaseTime.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Installing toEventSignature Module
DESCRIPTION: Import statement showing how to include the toEventSignature function from viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toEventSignature.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toEventSignature } from 'viem'

----------------------------------------

TITLE: Setting Ranking Interval in Fallback Transport
DESCRIPTION: This example demonstrates how to set the polling interval for ranking in fallback transports.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/fallback.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const transport = fallback([thirdweb, infura], {
  rank: {
    interval: 5_000
  },
})

----------------------------------------

TITLE: Using opaqueDataToDepositData Function
DESCRIPTION: Demonstrates how to use the opaqueDataToDepositData function to decode opaque deposit data from a TransactionDeposited event log.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/fromOpaqueData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { opaqueDataToDepositData } from 'viem'

const data = opaqueDataToDepositData('0x00000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000045000000000000526c01deadbeef')

----------------------------------------

TITLE: Signing a Blob Transaction in TypeScript
DESCRIPTION: Illustrates how to sign a blob transaction using viem. It includes setting up KZG for blob transactions and specifying the blob data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/signTransaction.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import * as cKzg from 'c-kzg'
import { toBlobs, setupKzg, stringToHex } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

const kzg = setupKzg(cKzg, mainnetTrustedSetupPath) 

const hash = await account.signTransaction({
  blobs: toBlobs({ data: stringToHex('blobby blob!') }), // [!code focus]
  kzg,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8'
})

----------------------------------------

TITLE: Initializing Public Client for Account Abstraction
DESCRIPTION: Sets up a Public Client to interact with the Ethereum network for Smart Account operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction.mdx#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Converting Pre-computed Blobs to Sidecars
DESCRIPTION: Shows how to convert pre-computed blobs, commitments and proofs into blob sidecars using the lower-level API.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/toBlobSidecars.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { 
  blobsToCommitments, 
  blobsToProofs,
  toBlobSidecars, 
  toBlobs 
} from 'viem'
import { kzg } from './kzg'

const blobs = toBlobs({ data: '0x...' })
const commitments = blobsToCommitments({ blobs, kzg })
const proofs = blobsToProofs({ blobs, commitments, kzg })
const sidecars = toBlobSidecars({ blobs, commitments, proofs })

LANGUAGE: typescript
CODE:
import * as cKzg from 'c-kzg'
import { setupKzg } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

export const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)

----------------------------------------

TITLE: Using Code Parameter in Call Action
DESCRIPTION: Example of specifying the code parameter when making a call. This parameter provides bytecode to perform the call against, enabling deployless contract interactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  code: '0x...', // [!code focus]
  data: '0xdeadbeef',
})

----------------------------------------

TITLE: Importing hashTypedData Function
DESCRIPTION: Shows how to import the hashTypedData function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/hashTypedData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { hashTypedData } from 'viem'

----------------------------------------

TITLE: Setting custom version for commitmentToVersionedHash
DESCRIPTION: Example demonstrating how to set a custom version number when transforming a commitment to a versioned hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentToVersionedHash.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const blobs = toBlobs({ data: '0x1234' })
const [commitment] = blobsToCommitments({ blobs, kzg })
const versionedHashes = commitmentToVersionedHash({ 
  commitment, 
  version: 69, 
})

----------------------------------------

TITLE: Importing opaqueDataToDepositData Function
DESCRIPTION: Shows how to import the opaqueDataToDepositData function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/fromOpaqueData.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { opaqueDataToDepositData } from 'viem'

----------------------------------------

TITLE: Using Custom RPC Schema with Paymaster Client
DESCRIPTION: Configuring a Paymaster Client with a custom RPC schema to define typed JSON-RPC methods. This allows for type-safe RPC requests with custom methods.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/clients/paymaster.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { createPaymasterClient } from 'viem/account-abstraction'
import { http } from 'viem'
import { rpcSchema } from 'viem'

type CustomRpcSchema = [{
  Method: 'eth_wagmi',
  Parameters: [string]
  ReturnType: string
}]

const client = createPaymasterClient({
  rpcSchema: rpcSchema<CustomRpcSchema>(),
  transport: http('https://public.pimlico.io/v2/11155111/rpc')
})

const result = await client.request({
  method: 'eth_wa
//               ^|

  params: ['hello'],
})

----------------------------------------

TITLE: Importing getAbiItem Function from viem
DESCRIPTION: Shows how to import the getAbiItem function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/getAbiItem.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getAbiItem } from 'viem'

----------------------------------------

TITLE: Raw Message Verification Example
DESCRIPTION: Demonstrates how to verify a message using raw hexadecimal data instead of UTF-8 string representation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/verifyMessage.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const valid = await publicClient.verifyMessage({
  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  message: { raw: '0x68656c6c6f20776f726c64' },
  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',
})

----------------------------------------

TITLE: Setting Basic Mnemonic Parameter
DESCRIPTION: Create a mnemonic account by providing the BIP-39 mnemonic phrase to the mnemonicToAccount function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { mnemonicToAccount } from 'viem/accounts'
// ---cut---
const account = mnemonicToAccount(
  'legal winner thank year wave sausage worth useful legal winner thank yellow' // [!code focus]
)

----------------------------------------

TITLE: Bundler Client Configuration
DESCRIPTION: Shows how to configure the bundler client with necessary imports and settings.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

const client = createPublicClient({
  chain: mainnet,
  transport: http()
})

export const account = await toCoinbaseSmartAccount({
  client,
  owners: [privateKeyToAccount('0x...')],
})

export const bundlerClient = createBundlerClient({
  client,
  transport: http('https://public.pimlico.io/v2/1/rpc')
})

----------------------------------------

TITLE: Simulating Contract Function Call with Max Fee Per Gas in TypeScript
DESCRIPTION: Demonstrates how to set a maximum fee per gas for an EIP-1559 transaction when simulating a contract function call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_15

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  args: [69420],
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
  maxFeePerGas: parseGwei('20'),
})

----------------------------------------

TITLE: Importing serializeTransaction from viem/op-stack
DESCRIPTION: Shows how to import the serializeTransaction function from the viem/op-stack module.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/serializeTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { serializeTransaction } from 'viem/op-stack'

----------------------------------------

TITLE: Using getGeneralPaymasterInput with ByteArray in TypeScript
DESCRIPTION: Shows how to use the getGeneralPaymasterInput function with a ByteArray as the innerInput parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getGeneralPaymasterInput.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const data = getGeneralPaymasterInput({
      innerInput: new Uint8Array([0, 1, 2, 3, 4, 5]), // [!code focus]
    })

----------------------------------------

TITLE: Building Deposit Transaction Parameters for Optimism
DESCRIPTION: This snippet demonstrates how to build the deposit transaction parameters for transferring 1 ETH to Optimism. It uses the publicClientL2 to construct the necessary arguments.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/deposits.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
// Import Viem Clients.
import { publicClientL2 } from './config'

// Build parameters for the transaction on the L2.
const args = await publicClientL2.buildDepositTransaction({
  mint: parseEther('1'),
  to: account.address,
})

----------------------------------------

TITLE: Setting Address Parameter Example
DESCRIPTION: Example showing the address parameter usage in setNonce function. Demonstrates specifying the target account address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setNonce.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
await testClient.setNonce({
  address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  nonce: 420
})

----------------------------------------

TITLE: Importing the generateSiweNonce Function from viem/siwe in TypeScript
DESCRIPTION: Shows how to import the generateSiweNonce function from the viem/siwe library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/siwe/utilities/generateSiweNonce.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { generateSiweNonce } from 'viem/siwe'

----------------------------------------

TITLE: Using getAddress Function to Checksum Encode an Ethereum Address
DESCRIPTION: Demonstrates how to use the getAddress function to convert an Ethereum address into its checksum encoded form. The function takes a string address as input and returns the checksummed address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getAddress } from 'viem'

getAddress('0xa5cc3c03994db5b0d9a5eEdD10Cabab0813678ac')
// '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC'

----------------------------------------

TITLE: Markdown Link for StackBlitz Example
DESCRIPTION: Markdown code that creates a clickable link to open the transaction sending example in StackBlitz editor.
SOURCE: https://github.com/wevm/viem/blob/main/examples/smart-accounts_coinbase/README.md#2025-04-14_snippet_0

LANGUAGE: markdown
CODE:
[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions)

----------------------------------------

TITLE: Authorizing Contract Designation in TypeScript
DESCRIPTION: This snippet demonstrates how to sign an Authorization to designate a Contract to an Account. It uses an existing EOA to sign the Authorization for delegation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/contract-writes.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
import { contractAddress } from './contract'

const eoa = privateKeyToAccount('0x...')
 
const authorization = await walletClient.signAuthorization({
  account: eoa,
  contractAddress,
})

----------------------------------------

TITLE: Setting maxFeePerGas for User Operation in TypeScript
DESCRIPTION: Demonstrates how to set the maximum fee per gas for User Operation execution when calling getPaymasterData. This parameter is optional and of type bigint.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterData.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  callGasLimit: 69420n,
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n, // [!code focus]
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'
})

----------------------------------------

TITLE: Retrieving Address from JSON-RPC Account
DESCRIPTION: Demonstrates how to get the address from a JSON-RPC account using the Wallet Client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/wallet.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const [address] = await client.getAddresses()
// or: const [address] = await client.requestAddresses()

----------------------------------------

TITLE: Advanced Paymaster Gas Configuration
DESCRIPTION: Demonstrates setting gas limits for paymaster post-operation and verification processes.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/estimateUserOperationGas.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const gas = await bundlerClient.estimateUserOperationGas({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',
  paymasterData: '0xdeadbeef',
  paymasterPostOpGasLimit: 69420n,
  paymasterVerificationGasLimit: 69420n
})

----------------------------------------

TITLE: Basic Usage of isAddress Function
DESCRIPTION: Demonstrates the basic usage of the isAddress function to validate an Ethereum address. Returns true for a valid checksum address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { isAddress } from 'viem'

isAddress('0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC')
// true

----------------------------------------

TITLE: Configuring Public Client with Custom Cache Time
DESCRIPTION: Sets up a Public Client with a custom cache time for stored data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
const publicClient = createPublicClient({
  cacheTime: 10_000,
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Configuring a viem Client with zksync Chain for L2 Transactions
DESCRIPTION: Configuration for creating a public client with zksync chain and extending it with L2-specific public actions. This setup is required before calling getRawBlockTransaction.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getRawBlockTransactions.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

----------------------------------------

TITLE: Public Client Configuration Setup
DESCRIPTION: Setup code for creating a public client instance configured for the Ethereum mainnet using HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'

import { mainnet } from 'viem/chains'

export const publicClient = createPublicClient({
  chain: mainnet,
  transport: http()
})

----------------------------------------

TITLE: Setting Timeout for waitForUserOperationReceipt
DESCRIPTION: This snippet demonstrates how to set a timeout value (in milliseconds) when waiting for a User Operation receipt. The timeout parameter specifies the maximum time to wait before stopping the polling process, useful for preventing indefinite waiting.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { bundlerClient } from './client'

const receipt = await bundlerClient.waitForUserOperationReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  timeout: 30_000
})

----------------------------------------

TITLE: Specifying Account Parameter for getCapabilities in viem
DESCRIPTION: Demonstrates how to explicitly specify an account address when calling getCapabilities. This is an alternative to hoisting the account on the wallet client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/eip5792/getCapabilities.mdx#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { walletClient } from './config'
// ---cut---
const capabilities = await walletClient.getCapabilities({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]
})

----------------------------------------

TITLE: Using Custom HD Derivation Path
DESCRIPTION: Specify a complete custom HD derivation path instead of individual indices to have full control over the key derivation process when creating a mnemonic account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/mnemonicToAccount.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
import { mnemonicToAccount } from 'viem/accounts'
// ---cut---
const account = mnemonicToAccount(
  'legal winner thank year wave sausage worth useful legal winner thank yellow',
  {
    path: "m/44'/60'/5'/0/2" // [!code focus]
  }
)

----------------------------------------

TITLE: Simulating Contract Function Call with Block Number in TypeScript
DESCRIPTION: Shows how to specify a block number when simulating a contract function call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/simulateContract.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
const { result } = await publicClient.simulateContract({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
  blockNumber: 15121123n,
})

----------------------------------------

TITLE: Local Account Configuration
DESCRIPTION: Example showing how to configure wallet client with a local account using a private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/writeContract.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createWalletClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { eip712WalletActions } from 'viem/zksync'

export const walletClient = createWalletClient({
  account: privateKeyToAccount('0x...'),
  transport: custom(window.ethereum)
}).extend(eip712WalletActions())

----------------------------------------

TITLE: Importing parseTransaction Function from Viem
DESCRIPTION: Shows how to import the parseTransaction function from the Viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/parseTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseTransaction } from 'viem'

----------------------------------------

TITLE: Using BlockTag Parameter in Call Action
DESCRIPTION: Example of specifying the blockTag parameter when making a call. This allows performing the call against a specific block tag like 'latest', 'safe', or 'finalized'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_10

LANGUAGE: typescript
CODE:
const data = await publicClient.call({
  blockTag: 'safe', // [!code focus]
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Importing IPC Transport in TypeScript
DESCRIPTION: This snippet shows how to import the IPC Transport function from the viem/node module.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/transports/ipc.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { ipc } from 'viem/node'

----------------------------------------

TITLE: Test Client Configuration Setup
DESCRIPTION: Configuration setup for the test client using viem with Foundry chain and Anvil mode. Creates a test client instance with HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setIntervalMining.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Using getL2TransactionHashes with Logs Parameter in TypeScript
DESCRIPTION: This snippet shows how to call the getL2TransactionHashes function with the logs parameter, which is an array of L1 logs extracted from a transaction receipt.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getL2TransactionHashes.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const l2Hashes = getL2TransactionHash({ 
  logs: receipt.logs // [!code focus]
})

----------------------------------------

TITLE: Importing Public Actions for Layer 1 Interaction
DESCRIPTION: Imports public actions specifically designed for Layer 1 chains to interact with Layer 2 protocols like ZKsync. These actions provide L1-to-L2 bridging and communication functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { publicActionsL1 } from 'viem/zksync'

----------------------------------------

TITLE: Importing decodeAbiParameters from viem
DESCRIPTION: Shows how to import the decodeAbiParameters function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { decodeAbiParameters } from 'viem'

----------------------------------------

TITLE: Importing toAccount Function in TypeScript
DESCRIPTION: Shows how to import the toAccount function from the viem/accounts module.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toAccount } from 'viem/accounts'

----------------------------------------

TITLE: ABI Definition for Error Encoding
DESCRIPTION: Shows the ABI structure required for encoding the InvalidTokenError with a string reason parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeErrorResult.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  ...
  {
		inputs: [
			{
				name: "reason",
				type: "string"
			}
		],
		name: "InvalidTokenError",
		type: "error"
	},
  ...
] as const;

----------------------------------------

TITLE: Validating Addresses in Viem
DESCRIPTION: Demonstrates how to use viem's isAddress function to check if a string is a valid Ethereum address, equivalent to ethers.js utils.isAddress method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_63

LANGUAGE: typescript
CODE:
import { isAddress } from 'viem'

const address = isAddress('0x8ba1f109551bd432803012645ac136ddd64dba72')

----------------------------------------

TITLE: Simple ABI Function Result Encoding in TypeScript
DESCRIPTION: Shows how to encode function results when working with a single ABI item, where functionName becomes optional.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/encodeFunctionResult.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { encodeFunctionResult } from 'viem';

const abiItem = {
  inputs: [{ name: 'owner', type: 'address' }],
  name: 'balanceOf',
  outputs: [{ name: '', type: 'uint256' }],
  stateMutability: 'view',
  type: 'function',
}

const data = encodeFunctionResult({
  abi: wagmiAbi,
  value: ['0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'],
});

----------------------------------------

TITLE: Setting custom version number in commitmentsToVersionedHashes
DESCRIPTION: Demonstrates how to customize the version number tag for the versioned hashes instead of using the default value of 1.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentsToVersionedHashes.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const blobs = toBlobs({ data: '0x1234' })
const commitments = blobsToCommitments({ blobs, kzg })
const versionedHashes = commitmentsToVersionedHashes({ 
  commitments, 
  version: 69, 
})

----------------------------------------

TITLE: Importing toSmartAccount from viem/account-abstraction
DESCRIPTION: Shows how to import the toSmartAccount function from the viem/account-abstraction module.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSmartAccount.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { toSmartAccount } from 'viem/account-abstraction'

----------------------------------------

TITLE: Parsing a function signature with parseAbiItem
DESCRIPTION: Demonstrates how to use parseAbiItem to parse a human-readable function signature into a structured ABI item. The example shows parsing a 'balanceOf' function that takes an address parameter and returns a uint256.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/parseAbiItem.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { parseAbiItem } from 'viem'

const abiItem = parseAbiItem(
  //  ^? const abiItem: { name: "balanceOf"; type: "function"; stateMutability: "view";...
  'function balanceOf(address owner) view returns (uint256)',
)

----------------------------------------

TITLE: Importing isAddress Function in TypeScript
DESCRIPTION: How to import the isAddress function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/isAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { isAddress } from 'viem'

----------------------------------------

TITLE: Importing getAddress Function from viem in TypeScript
DESCRIPTION: Shows how to import the getAddress function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getAddress.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { getAddress } from 'viem'

----------------------------------------

TITLE: Hoisting Account to Wallet Client
DESCRIPTION: Shows how to simplify transaction code by hoisting an account to the wallet client level rather than passing it to each transaction.
SOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_32

LANGUAGE: diff
CODE:
import { createWalletClient, http } from 'viem'
import { mainnnet } from 'viem/chains'

const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })

const client = createWalletClient({
+ account,
  chain: mainnet,
  transport: http()
})

const hash = await client.sendTransaction({
- account,
  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',
  value: parseEther('0.001')
})

----------------------------------------

TITLE: Estimating L1 Gas for L2 Contract Write in TypeScript
DESCRIPTION: This snippet demonstrates how to use the estimateContractL1Gas function to estimate the L1 data gas for an L2 contract write operation. It imports necessary dependencies and configurations, then calls the function with required parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractL1Gas.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'
import { wagmiAbi } from './abi'

const l1Fee = await publicClient.estimateContractL1Gas({
  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
  abi: wagmiAbi,
  functionName: 'mint',
  account,
})

----------------------------------------

TITLE: Accessing ABI Items in Viem
DESCRIPTION: Demonstrates how to use viem's getAbiItem function to access specific functions and events from an ABI, equivalent to ethers.js Interface methods.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_39

LANGUAGE: typescript
CODE:
import { getAbiItem } from 'viem'
import { abi } from './abi'

getAbiItem({ abi, name: 'transferFrom' })
getAbiItem({ abi, name: 'Transfer' })

----------------------------------------

TITLE: Setting Paymaster Post-Operation Gas Limit in User Operation
DESCRIPTION: Demonstrates setting the paymasterPostOpGasLimit parameter when signing a user operation. This parameter specifies the amount of gas allocated for paymaster post-operation code.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/signUserOperation.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const signature = await account.signUserOperation({
  callData: '0xdeadbeef',
  callGasLimit: 141653n,
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 15000000000n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  paymaster: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  paymasterData: '0xdeadbeef',
  paymasterPostOpGasLimit: 69420n,
  paymasterVerificationGasLimit: 0n,
  preVerificationGas: 53438n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  verificationGasLimit: 259350n,
})

----------------------------------------

TITLE: Getting Checksummed Addresses in Viem
DESCRIPTION: Demonstrates how to use viem's getAddress function to convert an address to its checksummed format, equivalent to ethers.js utils.getAddress method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_61

LANGUAGE: typescript
CODE:
import { getAddress } from 'viem'

const address = getAddress('0x8ba1f109551bd432803012645ac136ddd64dba72')

----------------------------------------

TITLE: Setting signature Parameter in User Operation
DESCRIPTION: Demonstrates setting the signature for a User Operation. The signature parameter is of type Hex and contains the cryptographic signature for the operation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_11

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterStubData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  callGasLimit: 69420n,
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  preVerificationGas: 69420n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'
})

----------------------------------------

TITLE: Configuring Viem Test Client for Foundry in TypeScript
DESCRIPTION: This code sets up a Viem test client configured for the Foundry development environment. It uses the HTTP transport and is set to 'anvil' mode, which is typically used for local blockchain simulation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/revert.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Setting primaryType parameter in wrapTypedDataSignature
DESCRIPTION: Example demonstrating how to set the primaryType parameter in wrapTypedDataSignature. The primaryType specifies which type from the types object to use as the main structure.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/wrapTypedDataSignature.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const signature = wrapTypedDataSignature({
  domain,
  types: {
    Person: [
      { name: 'name', type: 'string' },
      { name: 'wallet', type: 'address' },
    ],
    Mail: [ 
      { name: 'from', type: 'Person' },
      { name: 'to', type: 'Person' },
      { name: 'contents', type: 'string' },
    ],
  },
  primaryType: 'Mail', 
  message: {
    from: {
      name: 'Cow',
      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
    },
    to: {
      name: 'Bob',
      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
    },
    contents: 'Hello, Bob!',
  },
  verifierDomain: {
    name: 'Smart Account',
    version: '1',
    verifyingContract: '0x1234567890abcdef1234567890abcdef12345678',
    chainId: 1,
  },
})

----------------------------------------

TITLE: Configuring viem Client with L2 Support
DESCRIPTION: Setup for creating a public client configured for an L2 network (Base in this example) with the OP Stack extensions needed for L2-specific operations like total gas estimation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateContractTotalGas.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { base } from 'viem/chains'
import { publicActionsL2 } from 'viem/op-stack'

// JSON-RPC Account
export const account = '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266'
// Local Account
export const account = privateKeyToAccount(...)

export const publicClient = createPublicClient({
  chain: base,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Configuring maxPriorityFeePerGas in Viem Client Execute
DESCRIPTION: Shows how to set both maxFeePerGas and maxPriorityFeePerGas for transaction execution. The priority fee is set to 2 gwei while total fee is 20 gwei.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7821/execute.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
const hash = await client.execute({
  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',
  calls: [ 
    { 
      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
      value: parseEther('1')
    }, 
    { 
      data: '0xdeadbeef', 
      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', 
    }, 
  ], 
  maxFeePerGas: parseGwei('20'),
  maxPriorityFeePerGas: parseGwei('2'),
})

----------------------------------------

TITLE: Config Setup with JSON-RPC Account for OP Stack Operations
DESCRIPTION: Configuration example showing how to set up clients with a JSON-RPC account hoisted at the client level. This eliminates the need to pass account information in every operation and simplifies the OP Stack workflow.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/proveWithdrawal.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { createWalletClient, createPublicClient, custom, http } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/op-stack'

// Retrieve Account from an EIP-1193 Provider.
const [account] = await window.ethereum.request({
  method: 'eth_requestAccounts'
})

export const walletClientL1 = createWalletClient({
  account,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

----------------------------------------

TITLE: Trimming trailing zero bytes with custom direction
DESCRIPTION: Shows how to use the 'trim' function with a custom direction parameter to remove trailing zero bytes from a hex value.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/trim.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
trim('0xa4e12a4510000000000000000000000000000000000000000000000000000000', {
  dir: 'right'
})
// 0xa4e12a4510

----------------------------------------

TITLE: Importing hashAuthorization Function
DESCRIPTION: Shows how to import the hashAuthorization utility from the viem/utils package.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/hashAuthorization.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { hashAuthorization } from 'viem/utils'

----------------------------------------

TITLE: Setting Paymaster Data for User Operation in TypeScript
DESCRIPTION: Demonstrates how to set paymaster data when using a paymaster address. This allows for custom call data to be executed on the Paymaster contract.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/sendUserOperation.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const hash = await bundlerClient.sendUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',
  paymasterData: '0xdeadbeef', // [!code focus]
})

----------------------------------------

TITLE: Using the nonce parameter with getContractAddress
DESCRIPTION: Shows how to specify the transaction nonce for contract deployment.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/getContractAddress.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
getContractAddress({
  from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b',
  nonce: 69420n
})

----------------------------------------

TITLE: Specifying output format in commitmentToVersionedHash
DESCRIPTION: Example showing how to specify the output format ('bytes') when transforming a commitment to a versioned hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/commitmentToVersionedHash.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const blobs = toBlobs({ data: '0x1234' })
const [commitment] = blobsToCommitments({ blobs, kzg })
const versionedHashes = commitmentToVersionedHash({ 
  commitment, 
  to: 'bytes' 
})
versionedHashes

----------------------------------------

TITLE: Output Type Specification
DESCRIPTION: Shows how to specify the output type for the commitments using the 'to' parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToCommitments.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
import { blobsToCommitments, toBlobs } from 'viem'

const commitments = blobsToCommitments({ 
  blobs: toBlobs({ data: '0x1234' }),
  kzg, 
  to: 'bytes',
})

----------------------------------------

TITLE: Computing Source Hash for Deposit Transactions
DESCRIPTION: Demonstrates how to compute source hashes for both userDeposit and l1InfoDeposit domains using the getSourceHash function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getSourceHash } from 'viem'

// User Deposit
const sourceHash = getSourceHash({
  domain: 'userDeposit',
  l1BlockHash:
    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7',
  l1LogIndex: 196,
})

// L1 attributes deposited
const sourceHash = getSourceHash({
  domain: 'l1InfoDeposit',
  l1BlockHash:
    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7',
  sequenceNumber: 1,
})

----------------------------------------

TITLE: Installing the trim function from viem
DESCRIPTION: Shows how to import the 'trim' function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/trim.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { trim } from 'viem'

----------------------------------------

TITLE: Signing Messages with String Input
DESCRIPTION: Example demonstrating how to sign a message provided as a string. By default, viem signs the UTF-8 representation of the message according to the EIP-191 standard.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/signMessage.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
import { walletClient } from './config'

const signature = await walletClient.signMessage({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  message: 'hello world', 
  verifier: '0xCB9fA1eA9b8A3bf422a8639f23Df77ea66020eC2',
})

----------------------------------------

TITLE: Basic Usage of fromBytes
DESCRIPTION: Demonstrates converting byte arrays to different data types using fromBytes function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { fromBytes } from 'viem'

fromBytes(
  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), 
  'string'
)
// 'Hello world'

fromBytes(
  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), 
  'hex'
)
// '0x48656c6c6f20576f726c6421'

fromBytes(new Uint8Array([1, 164]), 'number')
// 420

fromBytes(new Uint8Array([1]), 'boolean')
// true

----------------------------------------

TITLE: Basic ripemd160 Usage Examples
DESCRIPTION: Examples showing how to use ripemd160 function with both Uint8Array and hex string inputs. Returns hex string output by default.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/ripemd160.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { ripemd160 } from 'viem'

ripemd160(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])
// 0x8476ee4631b9b30ac2754b0ee0c47e161d3f724c

ripemd160('0xdeadbeef')
// 0x226821c2f5423e11fe9af68bd285c249db2e4b5a

----------------------------------------

TITLE: Retrieving L1 Token Balance Example in TypeScript
DESCRIPTION: Example of retrieving a token balance held by a contract on L1 using the getL1TokenBalance method from a public client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getL1TokenBalance.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, publicClient } from './config'

const balance = await publicClient.getL1TokenBalance({
  account
  token: '0x5C221E77624690fff6dd741493D735a17716c26B',
})

----------------------------------------

TITLE: Using Custom HD Path in hdKeyToAccount
DESCRIPTION: Example showing how to specify a custom HD derivation path when creating an HD Account, allowing for more flexible key derivation patterns beyond the default path.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/hdKeyToAccount.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
// @noErrors
import { hdKeyToAccount } from 'viem/accounts'
// ---cut---
const hdKey = HDKey.fromMasterSeed(...)

const account = hdKeyToAccount(
  hdKey,
  {
    path: "m/44'/60'/5'/0/2" // [!code focus]
  }
)

----------------------------------------

TITLE: Configuring Viem Clients for OP Stack with Local Account
DESCRIPTION: Sets up the necessary Viem client configurations for interacting with both L1 (Ethereum mainnet) and L2 (Optimism) chains using a local private key account.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/guides/withdrawals.md#2025-04-14_snippet_6

LANGUAGE: typescript
CODE:
import { createPublicClient, createWalletClient, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1, walletActionsL1, walletActionsL2 } from 'viem/op-stack'

export const account = privateKeyToAccount('0x...')

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const walletClientL1 = createWalletClient({
  account,
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: http()
}).extend(publicActionsL2())

export const walletClientL2 = createWalletClient({
  account,
  chain: optimism,
  transport: http()
}).extend(walletActionsL2())

----------------------------------------

TITLE: Importing EIP-712 Wallet Actions for ZKsync
DESCRIPTION: Imports the EIP-712 wallet actions module from the viem/zksync package. These actions are necessary for interacting with ZKsync chains.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/client.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { eip712WalletActions } from 'viem/zksync'

----------------------------------------

TITLE: Configuration Setup for Smart Account
DESCRIPTION: Shows how to set up the necessary configuration for creating a Smart Account, including initializing a public client and defining an owner account from a private key.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/smart/toSmartAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { http, createPublicClient } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { mainnet } from 'viem/chains'

export const owner = privateKeyToAccount('0x...')
 
export const client = createPublicClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Importing createPublicClient Function in TypeScript
DESCRIPTION: Import statement for the createPublicClient function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { createPublicClient } from 'viem'

----------------------------------------

TITLE: Defining Custom Transaction Serializer in Viem
DESCRIPTION: This snippet demonstrates how to define a custom chain with a transaction serializer in Viem. It uses the `defineChain` function and specifies a `serializers.transaction` method to handle transaction serialization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/serializers.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { defineChain, serializeTransaction } from 'viem'

const example = defineChain({
  /* ... */
  serializers: {
    transaction(transaction, signature) {
      return serializeTransaction(transaction, signature)
    },
  },
})

----------------------------------------

TITLE: Updated Block Generic Type Definition in TypeScript
DESCRIPTION: The updated type definition for the Block generic type shows the addition of TIncludeTransactions and TBlockTag as the second and third generic parameters, enabling more specific typing based on request parameters.
SOURCE: https://github.com/wevm/viem/blob/main/src/CHANGELOG.md#2025-04-14_snippet_20

LANGUAGE: typescript
CODE:
type Block<
  TQuantity = bigint,
+ TIncludeTransactions extends boolean = boolean,
+ TBlockTag extends BlockTag = BlockTag,
  TTransaction = Transaction<
    bigint,
    number,
    TBlockTag extends 'pending' ? true : false
  >,
>

----------------------------------------

TITLE: Checking Transaction Confirmations using Receipt
DESCRIPTION: Demonstrates how to get transaction confirmations using a transaction receipt object with the Viem public client. Returns the number of blocks that have passed since the transaction was processed.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/getTransactionConfirmations.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { publicClient } from './client'

const transactionReceipt = await publicClient.getTransactionReceipt({ hash: '...' })
const confirmations = await publicClient.getTransactionConfirmations({
  transactionReceipt
})
// 15n

----------------------------------------

TITLE: Using getWithdrawalHashStorageSlot function in TypeScript
DESCRIPTION: Demonstrates how to use the getWithdrawalHashStorageSlot function to compute the withdrawal hash storage slot. The function takes an object with a withdrawalHash parameter and returns a Hex value representing the storage slot.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getWithdrawalHashStorageSlot.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { getWithdrawalHashStorageSlot } from 'viem'

const slot = getWithdrawalHashStorageSlot({
  withdrawalHash: '0xB1C3824DEF40047847145E069BF467AA67E906611B9F5EF31515338DB0AABFA2'
})

----------------------------------------

TITLE: Using fromHex Function in TypeScript
DESCRIPTION: Demonstrates various uses of the fromHex function to decode hex values to different data types including number, bigint, string, bytes, and boolean.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromHex.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { fromHex } from 'viem'

fromHex('0x1a4', 'number')
// 420

fromHex('0xc5cf39211876fb5e5884327fa56fc0b75', 'bigint')
// 4206942069420694206942069420694206942069n

fromHex('0x48656c6c6f20776f726c642e', 'string')
// "Hello world"

fromHex('0x48656c6c6f20576f726c6421', 'bytes')
// Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])

fromHex('0x1', 'boolean')
// true

----------------------------------------

TITLE: Using getAbiItem with Optional Args Parameter
DESCRIPTION: Shows how to use the getAbiItem function with the optional 'args' parameter. This can be used to identify function overrides when multiple functions have the same name but different argument types.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/getAbiItem.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const encodedData = getAbiItem({
  abi: [...],
  name: 'y',
  args: ['0x0000000000000000000000000000000000000000'], // [!code focus]
})

----------------------------------------

TITLE: Configuring viem Client for ZKsync in TypeScript
DESCRIPTION: This code demonstrates how to set up a viem public client configured for ZKsync Era with the necessary public actions extension for L2 functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/getMainContractAddress.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { zksync } from 'viem/chains'
import { publicActionsL2 } from 'viem/zksync'

export const client = createPublicClient({
  chain: zksync,
  transport: http(),
}).extend(publicActionsL2())

----------------------------------------

TITLE: ABI Decoding with Ethers.js
DESCRIPTION: Using Ethers.js to decode ABI-encoded data. This example shows decoding with object parameters and with simple type arrays.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_30

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'

const abiCoder = utils.defaultAbiCoder()

// Object
abiCoder.decode(
  [{ type: 'uint', name: 'x' }, { type: 'string', name: 'y' }],
  '0x00000000000000000000000000000000000000000000000000000000000004d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000'
)

// Human Readable
abiCoder.decode(
  ['uint', 'string'], 
  '0x00000000000000000000000000000000000000000000000000000000000004d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000'
);

----------------------------------------

TITLE: Setting Account Address Parameter
DESCRIPTION: Shows how to set the Ethereum address for a custom account using toAccount function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/accounts/local/toAccount.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const account = toAccount({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  async signMessage({ message }) {
    return signMessage({ message, privateKey })
  },
  async signTransaction(transaction, { serializer }) {
    return signTransaction({ privateKey, transaction, serializer })
  },
  async signTypedData(typedData) {
    return signTypedData({ ...typedData, privateKey })
  },
})

----------------------------------------

TITLE: Basic Test Client Reset Implementation
DESCRIPTION: Demonstrates basic usage of the reset function with a test client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/reset.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.reset()

----------------------------------------

TITLE: Using seconds Parameter in increaseTime
DESCRIPTION: Example demonstrating the usage of the seconds parameter in the increaseTime function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/increaseTime.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
await testClient.increaseTime({
  seconds: 20,
})

----------------------------------------

TITLE: Setting defaultPriorityFee in Viem Chain Definition (TypeScript)
DESCRIPTION: This example illustrates how to configure the defaultPriorityFee in a chain definition. It can be set as a static value or as an async function that determines the fee based on the latest block and transaction request.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/fees.md#2025-04-14_snippet_2

LANGUAGE: ts
CODE:
import { defineChain } from 'viem'

const example = defineChain({
  /* ... */
  fees: { 
    defaultPriorityFee: parseGwei('0.01'),
    // or
    async defaultPriorityFee({ block, request }) {
      // some async work
      return // ...
    },
  },
})

----------------------------------------

TITLE: Importing hashMessage Function from viem/experimental/erc7739
DESCRIPTION: Shows how to import the hashMessage function from the experimental ERC-7739 module in viem.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/experimental/erc7739/hashMessage.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { hashMessage } from 'viem/experimental/erc7739'

----------------------------------------

TITLE: Setting Sequence Number Parameter for l1InfoDeposit Domain
DESCRIPTION: Shows how to set the sequenceNumber parameter which is required for the l1InfoDeposit domain, representing the difference between L2 block number and first L2 epoch block number.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getSourceHash.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const sourceHash = getSourceHash({
  domain: 'l1InfoDeposit',
  l1BlockHash:
    '0x9ba3933dc6ce43c145349770a39c30f9b647f17668f004bd2e05c80a2e7262f7',
  sequenceNumber: 1, // [!code focus]
})

----------------------------------------

TITLE: Converting Wei to Gwei Example
DESCRIPTION: Demonstrates converting a wei value (1000000000n) to its gwei string representation ('1'). The function takes a bigint parameter and returns a string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/formatGwei.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { formatGwei } from 'viem'

formatGwei(1000000000n)
// '1'

----------------------------------------

TITLE: Decoding a Simple uint32 Value
DESCRIPTION: Example showing how to decode a simple uint32 value from ABI encoded data.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/abi/decodeAbiParameters.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const values = decodeAbiParameters(
  [{ name: 'x', type: 'uint32' }],
  '0x0000000000000000000000000000000000000000000000000000000000010f2c',
)

----------------------------------------

TITLE: Sending Value from L2 Balance with Transaction
DESCRIPTION: Shows how to include a value parameter to send ETH with the L2 transaction, which is debited from the caller's L2 balance.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/estimateDepositTransactionGas.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
const gas = await client.estimateDepositTransactionGas({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  request: {
    gas: 21_000n,
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', 
    value: parseEther('1') // [!code focus]
  },
  targetChain: base,
})

----------------------------------------

TITLE: Using Custom Polling Interval with waitForUserOperationReceipt
DESCRIPTION: This snippet demonstrates how to set a custom polling interval (in milliseconds) when waiting for a User Operation receipt. The pollingInterval parameter controls how frequently the client checks for the receipt.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { bundlerClient } from './client'

const receipt = await bundlerClient.waitForUserOperationReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  pollingInterval: 1_000
})

----------------------------------------

TITLE: Basic requestExecute Usage with ZKSync
DESCRIPTION: Demonstrates how to request execution of a Layer 2 transaction from Layer 1 using the walletClient.requestExecute method.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { account, walletClient, zksyncClient } from './config'

const hash = await walletClient.requestExecute({
  account,
  client: zksyncClient,
  contractAddress: await zksyncClient.getBridgehubContractAddress(),
  calldata: '0x',
  l2Value: 7_000_000_000n,
  l2GasLimit: 900_000n
})

----------------------------------------

TITLE: Markdown Link for StackBlitz Example
DESCRIPTION: A markdown link that opens the sending transactions example project in StackBlitz editor.
SOURCE: https://github.com/wevm/viem/blob/main/examples/transactions_sending-transactions/README.md#2025-04-14_snippet_0

LANGUAGE: markdown
CODE:
[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions)

----------------------------------------

TITLE: Getting Checksummed Addresses in Ethers
DESCRIPTION: Shows how to use ethers.js utils.getAddress to convert an address to its checksummed format. This ensures the address is properly formatted with correct capitalization.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_60

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'

const address = utils.getAddress('0x8ba1f109551bd432803012645ac136ddd64dba72')

----------------------------------------

TITLE: Contract ABI Definition
DESCRIPTION: Example ABI definition for a contract including a Transfer event with indexed parameters.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/contract/watchContractEvent.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
export const wagmiAbi = [
  {
    inputs: [
      {
        indexed: true,
        name: "from",
        type: "address",
      },
      { indexed: true, name: "to", type: "address" },
      {
        indexed: true,
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
] as const;

----------------------------------------

TITLE: Setting Retry Count for waitForUserOperationReceipt
DESCRIPTION: This snippet shows how to configure the number of retry attempts when waiting for a User Operation receipt. The retryCount parameter defaults to 6 if not specified, limiting how many times the client will attempt to retrieve the receipt.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/waitForUserOperationReceipt.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { bundlerClient } from './client'

const receipt = await bundlerClient.waitForUserOperationReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',
  retryCount: 3
})

----------------------------------------

TITLE: Creating a WebAuthn Account in TypeScript
DESCRIPTION: Demonstrates how to register a WebAuthn credential (passkey) and use it to create a WebAuthn account. This creates an account that can be used for signing operations.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/accounts/webauthn/toWebAuthnAccount.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { 
  createWebAuthnCredential, 
  toWebAuthnAccount 
} from 'viem/account-abstraction'

// Register a credential (ie. passkey).
const credential = await createWebAuthnCredential({
  name: 'Example',
})

// Create a WebAuthn account from the credential.
const account = toWebAuthnAccount({
  credential,
})

----------------------------------------

TITLE: Encoding Function Results in Ethers
DESCRIPTION: Shows how to use ethers.js Interface.encodeFunctionResult to encode function return values. This encodes the output values that would be returned from a function call.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_48

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'
import { abi } from './abi'

const iface = new utils.Interface(abi);
const data = iface.encodeFunctionResult('balanceOf', [
  '0x8ba1f109551bD432803012645Ac136ddd64DBA72'
])

----------------------------------------

TITLE: Client Configuration with ZKSync
DESCRIPTION: Shows how to set up the necessary clients and account for ZKSync Layer 2 interactions, including the ZKSync client with publicActionsL2 and a wallet client with walletActionsL1.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/actions/requestExecute.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createWalletClient, createPublicClient, custom } from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { zksync, mainnet } from 'viem/chains'
import { publicActionsL2, walletActionsL1 } from 'viem/zksync'

export const zksyncClient = createPublicClient({
  chain: zksync,
  transport: custom(window.ethereum)
}).extend(publicActionsL2())

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: custom(window.ethereum)
}).extend(walletActionsL1())

// JSON-RPC Account
export const [account] = await walletClient.getAddresses()
// Local Account
export const account = privateKeyToAccount(...)

----------------------------------------

TITLE: Importing slice from viem
DESCRIPTION: Shows how to import the slice function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/slice.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { slice } from 'viem'

----------------------------------------

TITLE: Importing fromBytes Function
DESCRIPTION: Shows how to import the fromBytes function from the viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBytes.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { fromBytes } from 'viem'

----------------------------------------

TITLE: Importing setupKzg Function
DESCRIPTION: Basic import statement for the setupKzg function from viem library.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/setupKzg.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { setupKzg } from 'viem'

----------------------------------------

TITLE: ENS Text Record Retrieval with Strict Mode
DESCRIPTION: Example demonstrating how to retrieve an ENS text record with strict error propagation enabled.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_5

LANGUAGE: typescript
CODE:
const ensText = await publicClient.getEnsText({
  name: normalize('wevm.eth'),
  key: 'com.twitter',
  strict: true,
})

----------------------------------------

TITLE: Sponsoring User Operations with Built-in Paymaster in Viem (Bundler Client)
DESCRIPTION: This snippet demonstrates how to use a Bundler client with built-in Paymaster support to sponsor User Operation fees. It sets the paymaster option to true, assuming the Bundler supports Paymaster sponsorship.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/guides/sending-user-operations.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { 
  createBundlerClient, 
  createPaymasterClient,
} from 'viem/account-abstraction'
import { account, client } from './config.ts'

const bundlerClient = createBundlerClient({
  account,
  client,
  paymaster: true,
  transport: http('https://public.pimlico.io/v2/1/rpc'),
})

----------------------------------------

TITLE: Setting Paymaster Verification Gas Limit in User Operation with TypeScript
DESCRIPTION: This snippet shows how to configure the paymaster verification gas limit when preparing a user operation. It includes specifying the paymaster address, data, and the verification gas limit.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/prepareUserOperation.md#2025-04-14_snippet_7

LANGUAGE: typescript
CODE:
const userOperation = await bundlerClient.prepareUserOperation({
  account,
  calls: [{
    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
    value: parseEther('1')
  }],
  paymaster: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',
  paymasterData: '0xdeadbeef',
  paymasterVerificationGasLimit: 69420n, // [!code focus]
})

----------------------------------------

TITLE: Using getL2HashFromPriorityOp with ZKsync main contract address
DESCRIPTION: Shows how to use the getL2HashFromPriorityOp function with focus on the ZKsync Era main contract address parameter, which is needed to properly calculate the L2 hash.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/bridge/getL2HashFromPriorityOp.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const l2Hash = getL2HashFromPriorityOp(
  receipt, 
  '0x14b947814912c71bdbc3275c143a065d2ecafaba' // [!code focus]
)

----------------------------------------

TITLE: Configuring Public Client with Custom RPC Schema
DESCRIPTION: Creates a Public Client with a custom RPC schema for extended functionality.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/clients/public.md#2025-04-14_snippet_8

LANGUAGE: typescript
CODE:
import { rpcSchema } from 'viem'

type CustomRpcSchema = [{
  Method: 'eth_wagmi',
  Parameters: [string]
  ReturnType: string
}]

const publicClient = createPublicClient({
  chain: mainnet,
  rpcSchema: rpcSchema<CustomRpcSchema>(),
  transport: http(),
})

const result = await publicClient.request({
  method: 'eth_wa
//               ^|
  params: ['hello'],
})

----------------------------------------

TITLE: Setting preVerificationGas Parameter in User Operation
DESCRIPTION: Demonstrates setting the preVerificationGas parameter which specifies extra gas to pay the Bundler. This optional bigint parameter helps cover additional gas costs.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_9

LANGUAGE: typescript
CODE:
import { paymasterClient } from './config'

const paymasterArgs = await paymasterClient.getPaymasterStubData({
  callData: '0xb61d27f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000',
  callGasLimit: 69420n,
  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',
  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',
  maxFeePerGas: 14510554812n,
  maxPriorityFeePerGas: 2000000000n,
  nonce: 0n,
  preVerificationGas: 69420n,
  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',
  signature: '0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c'
})

----------------------------------------

TITLE: Using a User Operation Hash Parameter in TypeScript
DESCRIPTION: This code snippet shows the specific usage of the hash parameter when retrieving a User Operation receipt. It highlights that the hash parameter must be a hexadecimal string prefixed with '0x'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/bundler/getUserOperationReceipt.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { bundlerClient } from './client'
// ---cut---
const receipt = await bundlerClient.getUserOperationReceipt({
  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d' // [!code focus]
})

----------------------------------------

TITLE: Setting Coinbase Address using Test Client in Viem (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the setCoinbase function from a test client to set the coinbase address for new blocks. It requires a previously configured test client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setCoinbase.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { testClient } from './client'

await testClient.setCoinbase({
  address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',
})

----------------------------------------

TITLE: ENS Text Record Retrieval with Gateway URLs
DESCRIPTION: Example showing how to retrieve an ENS text record using custom gateway URLs for CCIP-Read requests.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ens/actions/getEnsText.md#2025-04-14_snippet_4

LANGUAGE: typescript
CODE:
const ensText = await publicClient.getEnsText({
  name: normalize('wevm.eth'),
  key: 'com.twitter',
  gatewayUrls: ["https://ccip.ens.xyz"],
})

----------------------------------------

TITLE: Parameter Building Example
DESCRIPTION: Demonstrates how to build and prepare withdrawal transaction parameters using buildInitiateWithdrawal
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/initiateWithdrawal.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { account, publicClientL1, walletClientL2 } from './config'

const args = await publicClientL1.buildInitiateWithdrawal({
  account,
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
  value: parseEther('1'),
})
 
const hash = await walletClientL2.initiateWithdrawal(args)

----------------------------------------

TITLE: Using sidecarsToVersionedHashes Function in TypeScript
DESCRIPTION: Demonstrates how to use the sidecarsToVersionedHashes function to transform blob sidecars into versioned hashes. It includes setup for KZG and blob sidecars creation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sidecarsToVersionedHashes.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { toBlobSidecars, sidecarsToVersionedHashes } from 'viem'
import { kzg } from './kzg'

const sidecars = toBlobSidecars({ data: '0x...', kzg })
const versionedHashes = sidecarsToVersionedHashes({ sidecars })

----------------------------------------

TITLE: Importing Celo Chains in TypeScript
DESCRIPTION: Shows how to import pre-configured Celo chain objects from Viem, including mainnet (celo) and testnet (celoAlfajores).
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/chains/celo.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import {
  celo, // [!code hl]
  celoAlfajores, // [!code hl]
} from 'viem/chains'

----------------------------------------

TITLE: Using getGeneralPaymasterInput with Hex String in TypeScript
DESCRIPTION: Demonstrates how to use the getGeneralPaymasterInput function with a Hex string as the innerInput parameter.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getGeneralPaymasterInput.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const data = getGeneralPaymasterInput({
      innerInput: "0x0005040302010", // [!code focus]
    })

----------------------------------------

TITLE: Using fromBlobs with to Parameter for Output Format Specification in TypeScript
DESCRIPTION: Example showing how to specify the output format using the to parameter, which can be either 'bytes' or 'hex'.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/fromBlobs.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import { fromBlobs } from 'viem'

const data = fromBlobs({ 
  blobs: ['0x...'],
  to: 'bytes' // [!code focus]
})

data // [!code focus]
// ^?

----------------------------------------

TITLE: Test Client Configuration Setup
DESCRIPTION: Shows how to configure and create a test client with foundry chain and anvil mode.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/reset.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Creating a Wallet Client in TypeScript
DESCRIPTION: This snippet shows how to create a wallet client using the viem library. It sets up a client for the Ethereum mainnet using HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/recoverAuthorizationAddress.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { createWalletClient, http } from 'viem'
import { mainnet } from 'viem/chains'

export const walletClient = createWalletClient({
  chain: mainnet,
  transport: http(),
})

----------------------------------------

TITLE: Using getTimeToNextL2Output in OP Stack Withdrawals
DESCRIPTION: Example showing how to retrieve the time until the next L2 output is submitted. It fetches the current L2 block number and passes it along with the target chain to the getTimeToNextL2Output method on the L1 public client.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToNextL2Output.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'
import { account, publicClientL1, publicClientL2 } from './config'

const l2BlockNumber = publicClientL2.getBlockNumber()

const {
  interval,
  seconds,
  timestamp
} = await publicClientL1.getTimeToNextL2Output({
  l2BlockNumber,
  targetChain: publicClientL2.chain,
})

----------------------------------------

TITLE: Importing parseTransaction Function - TypeScript
DESCRIPTION: Example showing how to import the parseTransaction function from the viem library
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/parseTransaction.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { parseTransaction } from 'viem'

----------------------------------------

TITLE: Computing Contract Addresses in Ethers
DESCRIPTION: Shows how to use ethers.js utils.getContractAddress to compute the address where a contract will be deployed based on the deployer's address and nonce.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_64

LANGUAGE: typescript
CODE:
import { utils } from 'ethers'

const address = utils.getContractAddress({ from: '0x...', nonce: 5 });

----------------------------------------

TITLE: Test Client Configuration
DESCRIPTION: Shows how to configure and create a test client instance with Foundry chain and Anvil mode settings using Viem.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/mine.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Verifying Authorization with Address Parameter in TypeScript
DESCRIPTION: Illustrates how to use the address parameter in the verifyAuthorization function to specify the signer's address.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/eip7702/verifyAuthorization.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
const valid = await verifyAuthorization({
  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
  authorization,
})

----------------------------------------

TITLE: Setting Up Paymaster Client Configuration in TypeScript
DESCRIPTION: Configuration setup for creating a paymaster client using viem. This shows how to initialize the client with an HTTP transport pointing to a specific RPC endpoint.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/account-abstraction/actions/paymaster/getPaymasterStubData.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { http } from 'viem'
import { createPaymasterClient } from 'viem/account-abstraction'

export const paymasterClient = createPaymasterClient({ 
  transport: http('https://public.pimlico.io/v2/11155111/rpc'), 
}) 

----------------------------------------

TITLE: Configuration Setup for viem OP Stack Clients
DESCRIPTION: Configuration code showing how to set up public clients for L1 (Ethereum mainnet) and L2 (Optimism) chains with OP Stack extensions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getTimeToNextGame.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createPublicClient, custom, http } from 'viem'
import { mainnet, optimism } from 'viem/chains'
import { publicActionsL1 } from 'viem/op-stack'

export const publicClientL1 = createPublicClient({
  chain: mainnet,
  transport: http()
}).extend(publicActionsL1())

export const publicClientL2 = createPublicClient({
  chain: optimism,
  transport: custom(window.ethereum)
})

----------------------------------------

TITLE: Using getL2Output to Retrieve L2 Output Proposal in TypeScript
DESCRIPTION: Example showing how to use the getL2Output action to retrieve the first L2 output proposal that occurred after a specified block number. This is part of the withdrawal flow for OP Stack chains.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/actions/getL2Output.md#2025-04-14_snippet_0

LANGUAGE: typescript
CODE:
import { optimism } from 'viem/chains'
import { account, publicClientL1 } from './config'

const output = await publicClientL1.getL2Output({
  l2BlockNumber: 69420n,
  targetChain: optimism,
})

----------------------------------------

TITLE: Using sha256 function with 'bytes' output in TypeScript
DESCRIPTION: Shows how to use the sha256 function with the 'bytes' output option, which returns the hash as a Uint8Array instead of a hex string.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/sha256.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { sha256 } from 'viem'

sha256(
  new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33],
  'bytes'
)
// Uint8Array [95, 120, 195, 50, 116, 228, 63, 169, 222, 86, 89, 38, 92, 29, 145, 126, 37, 192, 55, 34, 220, 176, 184, 210, 125, 184, 213, 254, 170, 129, 57, 83]

----------------------------------------

TITLE: KZG Setup Implementation
DESCRIPTION: Demonstrates how to set up the KZG implementation required for blob commitment computation.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/utilities/blobsToCommitments.md#2025-04-14_snippet_3

LANGUAGE: typescript
CODE:
import * as cKzg from 'c-kzg'
import { blobsToCommitments, setupKzg, toBlobs } from 'viem'
import { mainnetTrustedSetupPath } from 'viem/node'

const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)

const commitments = blobsToCommitments({ 
  blobs: toBlobs({ data: '0x1234' }),  
  kzg,
})

----------------------------------------

TITLE: Creating a Test Client for Viem in TypeScript
DESCRIPTION: This code snippet shows how to create a test client for use with Viem. It imports necessary functions from Viem, sets up a client for the Foundry chain using Anvil mode and HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/test/setMinGasPrice.md#2025-04-14_snippet_1

LANGUAGE: typescript
CODE:
import { createTestClient, http } from 'viem'
import { foundry } from 'viem/chains'

export const testClient = createTestClient({
  chain: foundry,
  mode: 'anvil',
  transport: http(), 
})

----------------------------------------

TITLE: Migrating from InfuraProvider to createPublicClient in viem
DESCRIPTION: Shows how to replace Ethers' InfuraProvider with viem's createPublicClient using the Infura RPC URL directly in the HTTP transport.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/ethers-migration.mdx#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
import { providers } from 'ethers'

const provider = new providers.InfuraProvider('homestead', '<apiKey>') // [!code hl]

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'
import { mainnet } from 'viem/chains'

const client = createPublicClient({ // [!code hl]
  chain: mainnet, // [!code hl]
  transport: http('https://mainnet.infura.io/v3/<apiKey>') // [!code hl]
}) // [!code hl]

----------------------------------------

TITLE: Using MaxFeePerGas Parameter in Call Action
DESCRIPTION: Example of specifying the maxFeePerGas parameter when making a call. This parameter sets the total fee per gas in wei, and only applies to EIP-1559 Transactions.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/docs/actions/public/call.md#2025-04-14_snippet_16

LANGUAGE: typescript
CODE:
import { parseGwei } from 'viem'

const data = await publicClient.call({
  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',
  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
  maxFeePerGas: parseGwei('20'), // [!code focus]
  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
})

----------------------------------------

TITLE: Specifying withdrawalHash parameter in getWithdrawalHashStorageSlot
DESCRIPTION: Shows how to provide the withdrawalHash parameter when calling the getWithdrawalHashStorageSlot function. The withdrawalHash is of type Hash and represents the hash emitted from the L2 withdrawal MessagePassed event.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/op-stack/utilities/getWithdrawalHashStorageSlot.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const slot = getWithdrawalHashStorageSlot({ 
  withdrawalHash: '0xB1C3824DEF40047847145E069BF467AA67E906611B9F5EF31515338DB0AABFA2'
})

----------------------------------------

TITLE: Setting Token Address in getApprovalBasedPaymasterInput
DESCRIPTION: Shows how to set the token address parameter when calling getApprovalBasedPaymasterInput function.
SOURCE: https://github.com/wevm/viem/blob/main/site/pages/zksync/utilities/paymaster/getApprovalBasedPaymasterInput.md#2025-04-14_snippet_2

LANGUAGE: typescript
CODE:
const data = getApprovalBasedPaymasterInput({
  innerInput: '0x',
  minAllowance: 1n,
  token: "0x65C899B5fb8Eb9ae4da51D67E1fc417c7CB7e964", // [!code focus]
})